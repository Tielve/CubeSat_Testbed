
cubesat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b30  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08009dd0  08009dd0  0000add0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009e64  08009e64  0000ae64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009e6c  08009e6c  0000ae6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009e70  08009e70  0000ae70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  08009e74  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004ce0  24000078  08009eec  0000b078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004d58  08009eec  0000bd58  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025196  00000000  00000000  0000b0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000440a  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b90  00000000  00000000  00034648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001585  00000000  00000000  000361d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00005888  00000000  00000000  0003775d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022d72  00000000  00000000  0003cfe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016f37b  00000000  00000000  0005fd57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cf0d2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007850  00000000  00000000  001cf118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000056  00000000  00000000  001d6968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009db8 	.word	0x08009db8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08009db8 	.word	0x08009db8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b5b0      	push	{r4, r5, r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005d6:	f000 fac1 	bl	8000b5c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f000 fdc9 	bl	8001170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f833 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 f9ed 	bl	80009c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005e6:	f000 f89b 	bl	8000720 <MX_I2C1_Init>
  MX_TIM1_Init();
 80005ea:	f000 f8d9 	bl	80007a0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005ee:	f000 f99b 	bl	8000928 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80005f2:	f006 fc41 	bl	8006e78 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f6:	f006 fd49 	bl	800708c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000634 <main+0x64>)
 80005fc:	2100      	movs	r1, #0
 80005fe:	480e      	ldr	r0, [pc, #56]	@ (8000638 <main+0x68>)
 8000600:	f006 fd8e 	bl	8007120 <osThreadNew>
 8000604:	4603      	mov	r3, r0
 8000606:	4a0d      	ldr	r2, [pc, #52]	@ (800063c <main+0x6c>)
 8000608:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800060a:	f006 fd63 	bl	80070d4 <osKernelStart>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  uint8_t Test[] = "Hello World !!!\r\n"; //Data to send
 800060e:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <main+0x70>)
 8000610:	1d3c      	adds	r4, r7, #4
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	682b      	ldr	r3, [r5, #0]
 800061a:	8023      	strh	r3, [r4, #0]
	  HAL_UART_Transmit(&huart1,Test,sizeof(Test),10);// Sending in normal mode
 800061c:	1d39      	adds	r1, r7, #4
 800061e:	230a      	movs	r3, #10
 8000620:	2212      	movs	r2, #18
 8000622:	4808      	ldr	r0, [pc, #32]	@ (8000644 <main+0x74>)
 8000624:	f005 fb0e 	bl	8005c44 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000628:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800062c:	f000 fdfc 	bl	8001228 <HAL_Delay>
  {
 8000630:	bf00      	nop
 8000632:	e7ec      	b.n	800060e <main+0x3e>
 8000634:	08009e08 	.word	0x08009e08
 8000638:	08000b4d 	.word	0x08000b4d
 800063c:	240001c8 	.word	0x240001c8
 8000640:	08009ddc 	.word	0x08009ddc
 8000644:	24000134 	.word	0x24000134

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b09c      	sub	sp, #112	@ 0x70
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000652:	224c      	movs	r2, #76	@ 0x4c
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f009 fac6 	bl	8009be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2220      	movs	r2, #32
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f009 fac0 	bl	8009be8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000668:	2002      	movs	r0, #2
 800066a:	f001 fa63 	bl	8001b34 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800066e:	2300      	movs	r3, #0
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	4b29      	ldr	r3, [pc, #164]	@ (8000718 <SystemClock_Config+0xd0>)
 8000674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000676:	4a28      	ldr	r2, [pc, #160]	@ (8000718 <SystemClock_Config+0xd0>)
 8000678:	f023 0301 	bic.w	r3, r3, #1
 800067c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800067e:	4b26      	ldr	r3, [pc, #152]	@ (8000718 <SystemClock_Config+0xd0>)
 8000680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b24      	ldr	r3, [pc, #144]	@ (800071c <SystemClock_Config+0xd4>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000690:	4a22      	ldr	r2, [pc, #136]	@ (800071c <SystemClock_Config+0xd4>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b20      	ldr	r3, [pc, #128]	@ (800071c <SystemClock_Config+0xd4>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006a4:	bf00      	nop
 80006a6:	4b1d      	ldr	r3, [pc, #116]	@ (800071c <SystemClock_Config+0xd4>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006b2:	d1f8      	bne.n	80006a6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2340      	movs	r3, #64	@ 0x40
 80006be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fa6d 	bl	8001ba8 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006d4:	f000 fa80 	bl	8000bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	233f      	movs	r3, #63	@ 0x3f
 80006da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006ec:	2340      	movs	r3, #64	@ 0x40
 80006ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2101      	movs	r1, #1
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 feac 	bl	800245c <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800070a:	f000 fa65 	bl	8000bd8 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3770      	adds	r7, #112	@ 0x70
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	58000400 	.word	0x58000400
 800071c:	58024800 	.word	0x58024800

08000720 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <MX_I2C1_Init+0x74>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	@ (8000798 <MX_I2C1_Init+0x78>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <MX_I2C1_Init+0x74>)
 800072c:	4a1b      	ldr	r2, [pc, #108]	@ (800079c <MX_I2C1_Init+0x7c>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_I2C1_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <MX_I2C1_Init+0x74>)
 8000738:	2201      	movs	r2, #1
 800073a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <MX_I2C1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_I2C1_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_I2C1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_I2C1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_I2C1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800075a:	480e      	ldr	r0, [pc, #56]	@ (8000794 <MX_I2C1_Init+0x74>)
 800075c:	f001 f8b6 	bl	80018cc <HAL_I2C_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000766:	f000 fa37 	bl	8000bd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800076a:	2100      	movs	r1, #0
 800076c:	4809      	ldr	r0, [pc, #36]	@ (8000794 <MX_I2C1_Init+0x74>)
 800076e:	f001 f949 	bl	8001a04 <HAL_I2CEx_ConfigAnalogFilter>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000778:	f000 fa2e 	bl	8000bd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800077c:	2100      	movs	r1, #0
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_I2C1_Init+0x74>)
 8000780:	f001 f98b 	bl	8001a9a <HAL_I2CEx_ConfigDigitalFilter>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800078a:	f000 fa25 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	24000094 	.word	0x24000094
 8000798:	40005400 	.word	0x40005400
 800079c:	00707cbb 	.word	0x00707cbb

080007a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b09a      	sub	sp, #104	@ 0x68
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007c0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
 80007d0:	615a      	str	r2, [r3, #20]
 80007d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	222c      	movs	r2, #44	@ 0x2c
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f009 fa04 	bl	8009be8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007e0:	4b4f      	ldr	r3, [pc, #316]	@ (8000920 <MX_TIM1_Init+0x180>)
 80007e2:	4a50      	ldr	r2, [pc, #320]	@ (8000924 <MX_TIM1_Init+0x184>)
 80007e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007e6:	4b4e      	ldr	r3, [pc, #312]	@ (8000920 <MX_TIM1_Init+0x180>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ec:	4b4c      	ldr	r3, [pc, #304]	@ (8000920 <MX_TIM1_Init+0x180>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007f2:	4b4b      	ldr	r3, [pc, #300]	@ (8000920 <MX_TIM1_Init+0x180>)
 80007f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fa:	4b49      	ldr	r3, [pc, #292]	@ (8000920 <MX_TIM1_Init+0x180>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000800:	4b47      	ldr	r3, [pc, #284]	@ (8000920 <MX_TIM1_Init+0x180>)
 8000802:	2200      	movs	r2, #0
 8000804:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000806:	4b46      	ldr	r3, [pc, #280]	@ (8000920 <MX_TIM1_Init+0x180>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800080c:	4844      	ldr	r0, [pc, #272]	@ (8000920 <MX_TIM1_Init+0x180>)
 800080e:	f004 f81f 	bl	8004850 <HAL_TIM_Base_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000818:	f000 f9de 	bl	8000bd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000820:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000822:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000826:	4619      	mov	r1, r3
 8000828:	483d      	ldr	r0, [pc, #244]	@ (8000920 <MX_TIM1_Init+0x180>)
 800082a:	f004 fb5d 	bl	8004ee8 <HAL_TIM_ConfigClockSource>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000834:	f000 f9d0 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000838:	4839      	ldr	r0, [pc, #228]	@ (8000920 <MX_TIM1_Init+0x180>)
 800083a:	f004 f8d9 	bl	80049f0 <HAL_TIM_PWM_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000844:	f000 f9c8 	bl	8000bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000854:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000858:	4619      	mov	r1, r3
 800085a:	4831      	ldr	r0, [pc, #196]	@ (8000920 <MX_TIM1_Init+0x180>)
 800085c:	f005 f878 	bl	8005950 <HAL_TIMEx_MasterConfigSynchronization>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000866:	f000 f9b7 	bl	8000bd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800086a:	2360      	movs	r3, #96	@ 0x60
 800086c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000872:	2300      	movs	r3, #0
 8000874:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000876:	2300      	movs	r3, #0
 8000878:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800087a:	2300      	movs	r3, #0
 800087c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800087e:	2300      	movs	r3, #0
 8000880:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000882:	2300      	movs	r3, #0
 8000884:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000886:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800088a:	2200      	movs	r2, #0
 800088c:	4619      	mov	r1, r3
 800088e:	4824      	ldr	r0, [pc, #144]	@ (8000920 <MX_TIM1_Init+0x180>)
 8000890:	f004 fa16 	bl	8004cc0 <HAL_TIM_PWM_ConfigChannel>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800089a:	f000 f99d 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800089e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008a2:	2204      	movs	r2, #4
 80008a4:	4619      	mov	r1, r3
 80008a6:	481e      	ldr	r0, [pc, #120]	@ (8000920 <MX_TIM1_Init+0x180>)
 80008a8:	f004 fa0a 	bl	8004cc0 <HAL_TIM_PWM_ConfigChannel>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80008b2:	f000 f991 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008ba:	2208      	movs	r2, #8
 80008bc:	4619      	mov	r1, r3
 80008be:	4818      	ldr	r0, [pc, #96]	@ (8000920 <MX_TIM1_Init+0x180>)
 80008c0:	f004 f9fe 	bl	8004cc0 <HAL_TIM_PWM_ConfigChannel>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80008ca:	f000 f985 	bl	8000bd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	4807      	ldr	r0, [pc, #28]	@ (8000920 <MX_TIM1_Init+0x180>)
 8000904:	f005 f8b2 	bl	8005a6c <HAL_TIMEx_ConfigBreakDeadTime>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800090e:	f000 f963 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000912:	4803      	ldr	r0, [pc, #12]	@ (8000920 <MX_TIM1_Init+0x180>)
 8000914:	f000 fa10 	bl	8000d38 <HAL_TIM_MspPostInit>

}
 8000918:	bf00      	nop
 800091a:	3768      	adds	r7, #104	@ 0x68
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	240000e8 	.word	0x240000e8
 8000924:	40010000 	.word	0x40010000

08000928 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800092c:	4b22      	ldr	r3, [pc, #136]	@ (80009b8 <MX_USART1_UART_Init+0x90>)
 800092e:	4a23      	ldr	r2, [pc, #140]	@ (80009bc <MX_USART1_UART_Init+0x94>)
 8000930:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000932:	4b21      	ldr	r3, [pc, #132]	@ (80009b8 <MX_USART1_UART_Init+0x90>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b1f      	ldr	r3, [pc, #124]	@ (80009b8 <MX_USART1_UART_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b1d      	ldr	r3, [pc, #116]	@ (80009b8 <MX_USART1_UART_Init+0x90>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000946:	4b1c      	ldr	r3, [pc, #112]	@ (80009b8 <MX_USART1_UART_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <MX_USART1_UART_Init+0x90>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b19      	ldr	r3, [pc, #100]	@ (80009b8 <MX_USART1_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <MX_USART1_UART_Init+0x90>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095e:	4b16      	ldr	r3, [pc, #88]	@ (80009b8 <MX_USART1_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000964:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <MX_USART1_UART_Init+0x90>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096a:	4b13      	ldr	r3, [pc, #76]	@ (80009b8 <MX_USART1_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000970:	4811      	ldr	r0, [pc, #68]	@ (80009b8 <MX_USART1_UART_Init+0x90>)
 8000972:	f005 f917 	bl	8005ba4 <HAL_UART_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800097c:	f000 f92c 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000980:	2100      	movs	r1, #0
 8000982:	480d      	ldr	r0, [pc, #52]	@ (80009b8 <MX_USART1_UART_Init+0x90>)
 8000984:	f006 f9ad 	bl	8006ce2 <HAL_UARTEx_SetTxFifoThreshold>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800098e:	f000 f923 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000992:	2100      	movs	r1, #0
 8000994:	4808      	ldr	r0, [pc, #32]	@ (80009b8 <MX_USART1_UART_Init+0x90>)
 8000996:	f006 f9e2 	bl	8006d5e <HAL_UARTEx_SetRxFifoThreshold>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009a0:	f000 f91a 	bl	8000bd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009a4:	4804      	ldr	r0, [pc, #16]	@ (80009b8 <MX_USART1_UART_Init+0x90>)
 80009a6:	f006 f963 	bl	8006c70 <HAL_UARTEx_DisableFifoMode>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009b0:	f000 f912 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	24000134 	.word	0x24000134
 80009bc:	40011000 	.word	0x40011000

080009c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08c      	sub	sp, #48	@ 0x30
 80009c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009d6:	4b58      	ldr	r3, [pc, #352]	@ (8000b38 <MX_GPIO_Init+0x178>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009dc:	4a56      	ldr	r2, [pc, #344]	@ (8000b38 <MX_GPIO_Init+0x178>)
 80009de:	f043 0320 	orr.w	r3, r3, #32
 80009e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009e6:	4b54      	ldr	r3, [pc, #336]	@ (8000b38 <MX_GPIO_Init+0x178>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ec:	f003 0320 	and.w	r3, r3, #32
 80009f0:	61bb      	str	r3, [r7, #24]
 80009f2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f4:	4b50      	ldr	r3, [pc, #320]	@ (8000b38 <MX_GPIO_Init+0x178>)
 80009f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fa:	4a4f      	ldr	r2, [pc, #316]	@ (8000b38 <MX_GPIO_Init+0x178>)
 80009fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a04:	4b4c      	ldr	r3, [pc, #304]	@ (8000b38 <MX_GPIO_Init+0x178>)
 8000a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	4b49      	ldr	r3, [pc, #292]	@ (8000b38 <MX_GPIO_Init+0x178>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a18:	4a47      	ldr	r2, [pc, #284]	@ (8000b38 <MX_GPIO_Init+0x178>)
 8000a1a:	f043 0302 	orr.w	r3, r3, #2
 8000a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a22:	4b45      	ldr	r3, [pc, #276]	@ (8000b38 <MX_GPIO_Init+0x178>)
 8000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a28:	f003 0302 	and.w	r3, r3, #2
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a30:	4b41      	ldr	r3, [pc, #260]	@ (8000b38 <MX_GPIO_Init+0x178>)
 8000a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a36:	4a40      	ldr	r2, [pc, #256]	@ (8000b38 <MX_GPIO_Init+0x178>)
 8000a38:	f043 0308 	orr.w	r3, r3, #8
 8000a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a40:	4b3d      	ldr	r3, [pc, #244]	@ (8000b38 <MX_GPIO_Init+0x178>)
 8000a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a46:	f003 0308 	and.w	r3, r3, #8
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b3a      	ldr	r3, [pc, #232]	@ (8000b38 <MX_GPIO_Init+0x178>)
 8000a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a54:	4a38      	ldr	r2, [pc, #224]	@ (8000b38 <MX_GPIO_Init+0x178>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a5e:	4b36      	ldr	r3, [pc, #216]	@ (8000b38 <MX_GPIO_Init+0x178>)
 8000a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a6c:	4b32      	ldr	r3, [pc, #200]	@ (8000b38 <MX_GPIO_Init+0x178>)
 8000a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a72:	4a31      	ldr	r2, [pc, #196]	@ (8000b38 <MX_GPIO_Init+0x178>)
 8000a74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a7c:	4b2e      	ldr	r3, [pc, #184]	@ (8000b38 <MX_GPIO_Init+0x178>)
 8000a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8000a90:	482a      	ldr	r0, [pc, #168]	@ (8000b3c <MX_GPIO_Init+0x17c>)
 8000a92:	f000 ff01 	bl	8001898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_2, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f242 0104 	movw	r1, #8196	@ 0x2004
 8000a9c:	4828      	ldr	r0, [pc, #160]	@ (8000b40 <MX_GPIO_Init+0x180>)
 8000a9e:	f000 fefb 	bl	8001898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aa8:	4826      	ldr	r0, [pc, #152]	@ (8000b44 <MX_GPIO_Init+0x184>)
 8000aaa:	f000 fef5 	bl	8001898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2140      	movs	r1, #64	@ 0x40
 8000ab2:	4825      	ldr	r0, [pc, #148]	@ (8000b48 <MX_GPIO_Init+0x188>)
 8000ab4:	f000 fef0 	bl	8001898 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF7 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000ab8:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	481a      	ldr	r0, [pc, #104]	@ (8000b3c <MX_GPIO_Init+0x17c>)
 8000ad2:	f000 fd31 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2;
 8000ad6:	f242 0304 	movw	r3, #8196	@ 0x2004
 8000ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	4814      	ldr	r0, [pc, #80]	@ (8000b40 <MX_GPIO_Init+0x180>)
 8000af0:	f000 fd22 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000af4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480d      	ldr	r0, [pc, #52]	@ (8000b44 <MX_GPIO_Init+0x184>)
 8000b0e:	f000 fd13 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b12:	2340      	movs	r3, #64	@ 0x40
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4619      	mov	r1, r3
 8000b28:	4807      	ldr	r0, [pc, #28]	@ (8000b48 <MX_GPIO_Init+0x188>)
 8000b2a:	f000 fd05 	bl	8001538 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b2e:	bf00      	nop
 8000b30:	3730      	adds	r7, #48	@ 0x30
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	58024400 	.word	0x58024400
 8000b3c:	58021400 	.word	0x58021400
 8000b40:	58020c00 	.word	0x58020c00
 8000b44:	58021800 	.word	0x58021800
 8000b48:	58020400 	.word	0x58020400

08000b4c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b54:	2001      	movs	r0, #1
 8000b56:	f006 fb75 	bl	8007244 <osDelay>
 8000b5a:	e7fb      	b.n	8000b54 <StartDefaultTask+0x8>

08000b5c <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b62:	463b      	mov	r3, r7
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b6e:	f000 fc6b 	bl	8001448 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b72:	2301      	movs	r3, #1
 8000b74:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b7e:	231f      	movs	r3, #31
 8000b80:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b82:	2387      	movs	r3, #135	@ 0x87
 8000b84:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b92:	2301      	movs	r3, #1
 8000b94:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 fc89 	bl	80014b8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ba6:	2004      	movs	r0, #4
 8000ba8:	f000 fc66 	bl	8001478 <HAL_MPU_Enable>

}
 8000bac:	bf00      	nop
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a04      	ldr	r2, [pc, #16]	@ (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d101      	bne.n	8000bca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bc6:	f000 fb0f 	bl	80011e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40001400 	.word	0x40001400

08000bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bdc:	b672      	cpsid	i
}
 8000bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <Error_Handler+0x8>

08000be4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <HAL_MspInit+0x38>)
 8000bec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8000c1c <HAL_MspInit+0x38>)
 8000bf2:	f043 0302 	orr.w	r3, r3, #2
 8000bf6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000bfa:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <HAL_MspInit+0x38>)
 8000bfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c00:	f003 0302 	and.w	r3, r3, #2
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	f06f 0001 	mvn.w	r0, #1
 8000c10:	f000 fbf2 	bl	80013f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	58024400 	.word	0x58024400

08000c20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b0ba      	sub	sp, #232	@ 0xe8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	22c0      	movs	r2, #192	@ 0xc0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f008 ffd1 	bl	8009be8 <memset>
  if(hi2c->Instance==I2C1)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a27      	ldr	r2, [pc, #156]	@ (8000ce8 <HAL_I2C_MspInit+0xc8>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d146      	bne.n	8000cde <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c50:	f04f 0208 	mov.w	r2, #8
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c62:	f107 0310 	add.w	r3, r7, #16
 8000c66:	4618      	mov	r0, r3
 8000c68:	f001 ffc6 	bl	8002bf8 <HAL_RCCEx_PeriphCLKConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000c72:	f7ff ffb1 	bl	8000bd8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	4b1d      	ldr	r3, [pc, #116]	@ (8000cec <HAL_I2C_MspInit+0xcc>)
 8000c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cec <HAL_I2C_MspInit+0xcc>)
 8000c7e:	f043 0302 	orr.w	r3, r3, #2
 8000c82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c86:	4b19      	ldr	r3, [pc, #100]	@ (8000cec <HAL_I2C_MspInit+0xcc>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8c:	f003 0302 	and.w	r3, r3, #2
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c94:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c98:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9c:	2312      	movs	r3, #18
 8000c9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cae:	2304      	movs	r3, #4
 8000cb0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480d      	ldr	r0, [pc, #52]	@ (8000cf0 <HAL_I2C_MspInit+0xd0>)
 8000cbc:	f000 fc3c 	bl	8001538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cec <HAL_I2C_MspInit+0xcc>)
 8000cc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cc6:	4a09      	ldr	r2, [pc, #36]	@ (8000cec <HAL_I2C_MspInit+0xcc>)
 8000cc8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ccc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_I2C_MspInit+0xcc>)
 8000cd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000cde:	bf00      	nop
 8000ce0:	37e8      	adds	r7, #232	@ 0xe8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40005400 	.word	0x40005400
 8000cec:	58024400 	.word	0x58024400
 8000cf0:	58020400 	.word	0x58020400

08000cf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0b      	ldr	r2, [pc, #44]	@ (8000d30 <HAL_TIM_Base_MspInit+0x3c>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d10e      	bne.n	8000d24 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d06:	4b0b      	ldr	r3, [pc, #44]	@ (8000d34 <HAL_TIM_Base_MspInit+0x40>)
 8000d08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d0c:	4a09      	ldr	r2, [pc, #36]	@ (8000d34 <HAL_TIM_Base_MspInit+0x40>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000d16:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <HAL_TIM_Base_MspInit+0x40>)
 8000d18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	40010000 	.word	0x40010000
 8000d34:	58024400 	.word	0x58024400

08000d38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a13      	ldr	r2, [pc, #76]	@ (8000da4 <HAL_TIM_MspPostInit+0x6c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d11f      	bne.n	8000d9a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <HAL_TIM_MspPostInit+0x70>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d60:	4a11      	ldr	r2, [pc, #68]	@ (8000da8 <HAL_TIM_MspPostInit+0x70>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000da8 <HAL_TIM_MspPostInit+0x70>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000d78:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000d7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 030c 	add.w	r3, r7, #12
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	@ (8000dac <HAL_TIM_MspPostInit+0x74>)
 8000d96:	f000 fbcf 	bl	8001538 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3720      	adds	r7, #32
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40010000 	.word	0x40010000
 8000da8:	58024400 	.word	0x58024400
 8000dac:	58020000 	.word	0x58020000

08000db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b0ba      	sub	sp, #232	@ 0xe8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	22c0      	movs	r2, #192	@ 0xc0
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f008 ff09 	bl	8009be8 <memset>
  if(huart->Instance==USART1)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a27      	ldr	r2, [pc, #156]	@ (8000e78 <HAL_UART_MspInit+0xc8>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d146      	bne.n	8000e6e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000de0:	f04f 0201 	mov.w	r2, #1
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000dec:	2300      	movs	r3, #0
 8000dee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df2:	f107 0310 	add.w	r3, r7, #16
 8000df6:	4618      	mov	r0, r3
 8000df8:	f001 fefe 	bl	8002bf8 <HAL_RCCEx_PeriphCLKConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e02:	f7ff fee9 	bl	8000bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e06:	4b1d      	ldr	r3, [pc, #116]	@ (8000e7c <HAL_UART_MspInit+0xcc>)
 8000e08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000e7c <HAL_UART_MspInit+0xcc>)
 8000e0e:	f043 0310 	orr.w	r3, r3, #16
 8000e12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000e16:	4b19      	ldr	r3, [pc, #100]	@ (8000e7c <HAL_UART_MspInit+0xcc>)
 8000e18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e1c:	f003 0310 	and.w	r3, r3, #16
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e24:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <HAL_UART_MspInit+0xcc>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2a:	4a14      	ldr	r2, [pc, #80]	@ (8000e7c <HAL_UART_MspInit+0xcc>)
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e34:	4b11      	ldr	r3, [pc, #68]	@ (8000e7c <HAL_UART_MspInit+0xcc>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000e42:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000e46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e62:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e66:	4619      	mov	r1, r3
 8000e68:	4805      	ldr	r0, [pc, #20]	@ (8000e80 <HAL_UART_MspInit+0xd0>)
 8000e6a:	f000 fb65 	bl	8001538 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e6e:	bf00      	nop
 8000e70:	37e8      	adds	r7, #232	@ 0xe8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40011000 	.word	0x40011000
 8000e7c:	58024400 	.word	0x58024400
 8000e80:	58020400 	.word	0x58020400

08000e84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b090      	sub	sp, #64	@ 0x40
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b0f      	cmp	r3, #15
 8000e90:	d827      	bhi.n	8000ee2 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	2037      	movs	r0, #55	@ 0x37
 8000e98:	f000 faae 	bl	80013f8 <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e9c:	2037      	movs	r0, #55	@ 0x37
 8000e9e:	f000 fac5 	bl	800142c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000ea2:	4a29      	ldr	r2, [pc, #164]	@ (8000f48 <HAL_InitTick+0xc4>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000ea8:	4b28      	ldr	r3, [pc, #160]	@ (8000f4c <HAL_InitTick+0xc8>)
 8000eaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000eae:	4a27      	ldr	r2, [pc, #156]	@ (8000f4c <HAL_InitTick+0xc8>)
 8000eb0:	f043 0320 	orr.w	r3, r3, #32
 8000eb4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000eb8:	4b24      	ldr	r3, [pc, #144]	@ (8000f4c <HAL_InitTick+0xc8>)
 8000eba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ebe:	f003 0320 	and.w	r3, r3, #32
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ec6:	f107 0210 	add.w	r2, r7, #16
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f001 fe4f 	bl	8002b74 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d106      	bne.n	8000eee <HAL_InitTick+0x6a>
 8000ee0:	e001      	b.n	8000ee6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e02b      	b.n	8000f3e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ee6:	f001 fe19 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 8000eea:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000eec:	e004      	b.n	8000ef8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000eee:	f001 fe15 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000efa:	4a15      	ldr	r2, [pc, #84]	@ (8000f50 <HAL_InitTick+0xcc>)
 8000efc:	fba2 2303 	umull	r2, r3, r2, r3
 8000f00:	0c9b      	lsrs	r3, r3, #18
 8000f02:	3b01      	subs	r3, #1
 8000f04:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000f06:	4b13      	ldr	r3, [pc, #76]	@ (8000f54 <HAL_InitTick+0xd0>)
 8000f08:	4a13      	ldr	r2, [pc, #76]	@ (8000f58 <HAL_InitTick+0xd4>)
 8000f0a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	@ (8000f54 <HAL_InitTick+0xd0>)
 8000f0e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f12:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000f14:	4a0f      	ldr	r2, [pc, #60]	@ (8000f54 <HAL_InitTick+0xd0>)
 8000f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f18:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f54 <HAL_InitTick+0xd0>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <HAL_InitTick+0xd0>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000f26:	480b      	ldr	r0, [pc, #44]	@ (8000f54 <HAL_InitTick+0xd0>)
 8000f28:	f003 fc92 	bl	8004850 <HAL_TIM_Base_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d104      	bne.n	8000f3c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000f32:	4808      	ldr	r0, [pc, #32]	@ (8000f54 <HAL_InitTick+0xd0>)
 8000f34:	f003 fce4 	bl	8004900 <HAL_TIM_Base_Start_IT>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	e000      	b.n	8000f3e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3740      	adds	r7, #64	@ 0x40
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	24000008 	.word	0x24000008
 8000f4c:	58024400 	.word	0x58024400
 8000f50:	431bde83 	.word	0x431bde83
 8000f54:	240001cc 	.word	0x240001cc
 8000f58:	40001400 	.word	0x40001400

08000f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <NMI_Handler+0x4>

08000f64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <MemManage_Handler+0x4>

08000f74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <BusFault_Handler+0x4>

08000f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <UsageFault_Handler+0x4>

08000f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f98:	4802      	ldr	r0, [pc, #8]	@ (8000fa4 <TIM7_IRQHandler+0x10>)
 8000f9a:	f003 fd8a 	bl	8004ab2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	240001cc 	.word	0x240001cc

08000fa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fac:	4b43      	ldr	r3, [pc, #268]	@ (80010bc <SystemInit+0x114>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fb2:	4a42      	ldr	r2, [pc, #264]	@ (80010bc <SystemInit+0x114>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fbc:	4b40      	ldr	r3, [pc, #256]	@ (80010c0 <SystemInit+0x118>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 030f 	and.w	r3, r3, #15
 8000fc4:	2b06      	cmp	r3, #6
 8000fc6:	d807      	bhi.n	8000fd8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fc8:	4b3d      	ldr	r3, [pc, #244]	@ (80010c0 <SystemInit+0x118>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f023 030f 	bic.w	r3, r3, #15
 8000fd0:	4a3b      	ldr	r2, [pc, #236]	@ (80010c0 <SystemInit+0x118>)
 8000fd2:	f043 0307 	orr.w	r3, r3, #7
 8000fd6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fd8:	4b3a      	ldr	r3, [pc, #232]	@ (80010c4 <SystemInit+0x11c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a39      	ldr	r2, [pc, #228]	@ (80010c4 <SystemInit+0x11c>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fe4:	4b37      	ldr	r3, [pc, #220]	@ (80010c4 <SystemInit+0x11c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fea:	4b36      	ldr	r3, [pc, #216]	@ (80010c4 <SystemInit+0x11c>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	4935      	ldr	r1, [pc, #212]	@ (80010c4 <SystemInit+0x11c>)
 8000ff0:	4b35      	ldr	r3, [pc, #212]	@ (80010c8 <SystemInit+0x120>)
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ff6:	4b32      	ldr	r3, [pc, #200]	@ (80010c0 <SystemInit+0x118>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0308 	and.w	r3, r3, #8
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d007      	beq.n	8001012 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001002:	4b2f      	ldr	r3, [pc, #188]	@ (80010c0 <SystemInit+0x118>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f023 030f 	bic.w	r3, r3, #15
 800100a:	4a2d      	ldr	r2, [pc, #180]	@ (80010c0 <SystemInit+0x118>)
 800100c:	f043 0307 	orr.w	r3, r3, #7
 8001010:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001012:	4b2c      	ldr	r3, [pc, #176]	@ (80010c4 <SystemInit+0x11c>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001018:	4b2a      	ldr	r3, [pc, #168]	@ (80010c4 <SystemInit+0x11c>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800101e:	4b29      	ldr	r3, [pc, #164]	@ (80010c4 <SystemInit+0x11c>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001024:	4b27      	ldr	r3, [pc, #156]	@ (80010c4 <SystemInit+0x11c>)
 8001026:	4a29      	ldr	r2, [pc, #164]	@ (80010cc <SystemInit+0x124>)
 8001028:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800102a:	4b26      	ldr	r3, [pc, #152]	@ (80010c4 <SystemInit+0x11c>)
 800102c:	4a28      	ldr	r2, [pc, #160]	@ (80010d0 <SystemInit+0x128>)
 800102e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001030:	4b24      	ldr	r3, [pc, #144]	@ (80010c4 <SystemInit+0x11c>)
 8001032:	4a28      	ldr	r2, [pc, #160]	@ (80010d4 <SystemInit+0x12c>)
 8001034:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001036:	4b23      	ldr	r3, [pc, #140]	@ (80010c4 <SystemInit+0x11c>)
 8001038:	2200      	movs	r2, #0
 800103a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800103c:	4b21      	ldr	r3, [pc, #132]	@ (80010c4 <SystemInit+0x11c>)
 800103e:	4a25      	ldr	r2, [pc, #148]	@ (80010d4 <SystemInit+0x12c>)
 8001040:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001042:	4b20      	ldr	r3, [pc, #128]	@ (80010c4 <SystemInit+0x11c>)
 8001044:	2200      	movs	r2, #0
 8001046:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001048:	4b1e      	ldr	r3, [pc, #120]	@ (80010c4 <SystemInit+0x11c>)
 800104a:	4a22      	ldr	r2, [pc, #136]	@ (80010d4 <SystemInit+0x12c>)
 800104c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800104e:	4b1d      	ldr	r3, [pc, #116]	@ (80010c4 <SystemInit+0x11c>)
 8001050:	2200      	movs	r2, #0
 8001052:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001054:	4b1b      	ldr	r3, [pc, #108]	@ (80010c4 <SystemInit+0x11c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a1a      	ldr	r2, [pc, #104]	@ (80010c4 <SystemInit+0x11c>)
 800105a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800105e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001060:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <SystemInit+0x11c>)
 8001062:	2200      	movs	r2, #0
 8001064:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001066:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <SystemInit+0x130>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	4b1c      	ldr	r3, [pc, #112]	@ (80010dc <SystemInit+0x134>)
 800106c:	4013      	ands	r3, r2
 800106e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001072:	d202      	bcs.n	800107a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001074:	4b1a      	ldr	r3, [pc, #104]	@ (80010e0 <SystemInit+0x138>)
 8001076:	2201      	movs	r2, #1
 8001078:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800107a:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <SystemInit+0x11c>)
 800107c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001080:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d113      	bne.n	80010b0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001088:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <SystemInit+0x11c>)
 800108a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800108e:	4a0d      	ldr	r2, [pc, #52]	@ (80010c4 <SystemInit+0x11c>)
 8001090:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001094:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001098:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <SystemInit+0x13c>)
 800109a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800109e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80010a0:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <SystemInit+0x11c>)
 80010a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010a6:	4a07      	ldr	r2, [pc, #28]	@ (80010c4 <SystemInit+0x11c>)
 80010a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80010ac:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00
 80010c0:	52002000 	.word	0x52002000
 80010c4:	58024400 	.word	0x58024400
 80010c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80010cc:	02020200 	.word	0x02020200
 80010d0:	01ff0000 	.word	0x01ff0000
 80010d4:	01010280 	.word	0x01010280
 80010d8:	5c001000 	.word	0x5c001000
 80010dc:	ffff0000 	.word	0xffff0000
 80010e0:	51008108 	.word	0x51008108
 80010e4:	52004000 	.word	0x52004000

080010e8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80010ec:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <ExitRun0Mode+0x2c>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	4a08      	ldr	r2, [pc, #32]	@ (8001114 <ExitRun0Mode+0x2c>)
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80010f8:	bf00      	nop
 80010fa:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <ExitRun0Mode+0x2c>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0f9      	beq.n	80010fa <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001106:	bf00      	nop
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	58024800 	.word	0x58024800

08001118 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001118:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001154 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800111c:	f7ff ffe4 	bl	80010e8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001120:	f7ff ff42 	bl	8000fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001124:	480c      	ldr	r0, [pc, #48]	@ (8001158 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001126:	490d      	ldr	r1, [pc, #52]	@ (800115c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001128:	4a0d      	ldr	r2, [pc, #52]	@ (8001160 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a0a      	ldr	r2, [pc, #40]	@ (8001164 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800113c:	4c0a      	ldr	r4, [pc, #40]	@ (8001168 <LoopFillZerobss+0x22>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800114a:	f008 fdab 	bl	8009ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800114e:	f7ff fa3f 	bl	80005d0 <main>
  bx  lr
 8001152:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001154:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001158:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800115c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001160:	08009e74 	.word	0x08009e74
  ldr r2, =_sbss
 8001164:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001168:	24004d58 	.word	0x24004d58

0800116c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800116c:	e7fe      	b.n	800116c <ADC3_IRQHandler>
	...

08001170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001176:	2003      	movs	r0, #3
 8001178:	f000 f933 	bl	80013e2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800117c:	f001 fb24 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 8001180:	4602      	mov	r2, r0
 8001182:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <HAL_Init+0x68>)
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	0a1b      	lsrs	r3, r3, #8
 8001188:	f003 030f 	and.w	r3, r3, #15
 800118c:	4913      	ldr	r1, [pc, #76]	@ (80011dc <HAL_Init+0x6c>)
 800118e:	5ccb      	ldrb	r3, [r1, r3]
 8001190:	f003 031f 	and.w	r3, r3, #31
 8001194:	fa22 f303 	lsr.w	r3, r2, r3
 8001198:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800119a:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <HAL_Init+0x68>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	4a0e      	ldr	r2, [pc, #56]	@ (80011dc <HAL_Init+0x6c>)
 80011a4:	5cd3      	ldrb	r3, [r2, r3]
 80011a6:	f003 031f 	and.w	r3, r3, #31
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	fa22 f303 	lsr.w	r3, r2, r3
 80011b0:	4a0b      	ldr	r2, [pc, #44]	@ (80011e0 <HAL_Init+0x70>)
 80011b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011b4:	4a0b      	ldr	r2, [pc, #44]	@ (80011e4 <HAL_Init+0x74>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ba:	200f      	movs	r0, #15
 80011bc:	f7ff fe62 	bl	8000e84 <HAL_InitTick>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e002      	b.n	80011d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011ca:	f7ff fd0b 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	58024400 	.word	0x58024400
 80011dc:	08009e2c 	.word	0x08009e2c
 80011e0:	24000004 	.word	0x24000004
 80011e4:	24000000 	.word	0x24000000

080011e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011ec:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <HAL_IncTick+0x20>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <HAL_IncTick+0x24>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a04      	ldr	r2, [pc, #16]	@ (800120c <HAL_IncTick+0x24>)
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	2400000c 	.word	0x2400000c
 800120c:	24000218 	.word	0x24000218

08001210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return uwTick;
 8001214:	4b03      	ldr	r3, [pc, #12]	@ (8001224 <HAL_GetTick+0x14>)
 8001216:	681b      	ldr	r3, [r3, #0]
}
 8001218:	4618      	mov	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	24000218 	.word	0x24000218

08001228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001230:	f7ff ffee 	bl	8001210 <HAL_GetTick>
 8001234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001240:	d005      	beq.n	800124e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001242:	4b0a      	ldr	r3, [pc, #40]	@ (800126c <HAL_Delay+0x44>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4413      	add	r3, r2
 800124c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800124e:	bf00      	nop
 8001250:	f7ff ffde 	bl	8001210 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	429a      	cmp	r2, r3
 800125e:	d8f7      	bhi.n	8001250 <HAL_Delay+0x28>
  {
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	2400000c 	.word	0x2400000c

08001270 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001274:	4b03      	ldr	r3, [pc, #12]	@ (8001284 <HAL_GetREVID+0x14>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	0c1b      	lsrs	r3, r3, #16
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	5c001000 	.word	0x5c001000

08001288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x40>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012b0:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b6:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <__NVIC_SetPriorityGrouping+0x40>)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	60d3      	str	r3, [r2, #12]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00
 80012cc:	05fa0000 	.word	0x05fa0000

080012d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db0b      	blt.n	8001316 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	f003 021f 	and.w	r2, r3, #31
 8001304:	4907      	ldr	r1, [pc, #28]	@ (8001324 <__NVIC_EnableIRQ+0x38>)
 8001306:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	2001      	movs	r0, #1
 800130e:	fa00 f202 	lsl.w	r2, r0, r2
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000e100 	.word	0xe000e100

08001328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001334:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db0a      	blt.n	8001352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	490c      	ldr	r1, [pc, #48]	@ (8001374 <__NVIC_SetPriority+0x4c>)
 8001342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	440b      	add	r3, r1
 800134c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001350:	e00a      	b.n	8001368 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4908      	ldr	r1, [pc, #32]	@ (8001378 <__NVIC_SetPriority+0x50>)
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	3b04      	subs	r3, #4
 8001360:	0112      	lsls	r2, r2, #4
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	440b      	add	r3, r1
 8001366:	761a      	strb	r2, [r3, #24]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000e100 	.word	0xe000e100
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	@ 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f1c3 0307 	rsb	r3, r3, #7
 8001396:	2b04      	cmp	r3, #4
 8001398:	bf28      	it	cs
 800139a:	2304      	movcs	r3, #4
 800139c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3304      	adds	r3, #4
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d902      	bls.n	80013ac <NVIC_EncodePriority+0x30>
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3b03      	subs	r3, #3
 80013aa:	e000      	b.n	80013ae <NVIC_EncodePriority+0x32>
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	401a      	ands	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43d9      	mvns	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	4313      	orrs	r3, r2
         );
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	@ 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff ff4c 	bl	8001288 <__NVIC_SetPriorityGrouping>
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001406:	f7ff ff63 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 800140a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	68b9      	ldr	r1, [r7, #8]
 8001410:	6978      	ldr	r0, [r7, #20]
 8001412:	f7ff ffb3 	bl	800137c <NVIC_EncodePriority>
 8001416:	4602      	mov	r2, r0
 8001418:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800141c:	4611      	mov	r1, r2
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff ff82 	bl	8001328 <__NVIC_SetPriority>
}
 8001424:	bf00      	nop
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001436:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff ff56 	bl	80012ec <__NVIC_EnableIRQ>
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800144c:	f3bf 8f5f 	dmb	sy
}
 8001450:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001452:	4b07      	ldr	r3, [pc, #28]	@ (8001470 <HAL_MPU_Disable+0x28>)
 8001454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001456:	4a06      	ldr	r2, [pc, #24]	@ (8001470 <HAL_MPU_Disable+0x28>)
 8001458:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800145c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800145e:	4b05      	ldr	r3, [pc, #20]	@ (8001474 <HAL_MPU_Disable+0x2c>)
 8001460:	2200      	movs	r2, #0
 8001462:	605a      	str	r2, [r3, #4]
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00
 8001474:	e000ed90 	.word	0xe000ed90

08001478 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001480:	4a0b      	ldr	r2, [pc, #44]	@ (80014b0 <HAL_MPU_Enable+0x38>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800148a:	4b0a      	ldr	r3, [pc, #40]	@ (80014b4 <HAL_MPU_Enable+0x3c>)
 800148c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800148e:	4a09      	ldr	r2, [pc, #36]	@ (80014b4 <HAL_MPU_Enable+0x3c>)
 8001490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001494:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001496:	f3bf 8f4f 	dsb	sy
}
 800149a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800149c:	f3bf 8f6f 	isb	sy
}
 80014a0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed90 	.word	0xe000ed90
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	785a      	ldrb	r2, [r3, #1]
 80014c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001534 <HAL_MPU_ConfigRegion+0x7c>)
 80014c6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80014c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001534 <HAL_MPU_ConfigRegion+0x7c>)
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	4a19      	ldr	r2, [pc, #100]	@ (8001534 <HAL_MPU_ConfigRegion+0x7c>)
 80014ce:	f023 0301 	bic.w	r3, r3, #1
 80014d2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80014d4:	4a17      	ldr	r2, [pc, #92]	@ (8001534 <HAL_MPU_ConfigRegion+0x7c>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7b1b      	ldrb	r3, [r3, #12]
 80014e0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	7adb      	ldrb	r3, [r3, #11]
 80014e6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	7a9b      	ldrb	r3, [r3, #10]
 80014ee:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	7b5b      	ldrb	r3, [r3, #13]
 80014f6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	7b9b      	ldrb	r3, [r3, #14]
 80014fe:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001500:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7bdb      	ldrb	r3, [r3, #15]
 8001506:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001508:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	7a5b      	ldrb	r3, [r3, #9]
 800150e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001510:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7a1b      	ldrb	r3, [r3, #8]
 8001516:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001518:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	7812      	ldrb	r2, [r2, #0]
 800151e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001520:	4a04      	ldr	r2, [pc, #16]	@ (8001534 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001522:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001524:	6113      	str	r3, [r2, #16]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000ed90 	.word	0xe000ed90

08001538 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	@ 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001546:	4b89      	ldr	r3, [pc, #548]	@ (800176c <HAL_GPIO_Init+0x234>)
 8001548:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800154a:	e194      	b.n	8001876 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	2101      	movs	r1, #1
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	fa01 f303 	lsl.w	r3, r1, r3
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 8186 	beq.w	8001870 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b01      	cmp	r3, #1
 800156e:	d005      	beq.n	800157c <HAL_GPIO_Init+0x44>
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d130      	bne.n	80015de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	2203      	movs	r2, #3
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	68da      	ldr	r2, [r3, #12]
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015b2:	2201      	movs	r2, #1
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	091b      	lsrs	r3, r3, #4
 80015c8:	f003 0201 	and.w	r2, r3, #1
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d017      	beq.n	800161a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	2203      	movs	r2, #3
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4013      	ands	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d123      	bne.n	800166e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	08da      	lsrs	r2, r3, #3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3208      	adds	r2, #8
 800162e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001632:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	220f      	movs	r2, #15
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	691a      	ldr	r2, [r3, #16]
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	08da      	lsrs	r2, r3, #3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3208      	adds	r2, #8
 8001668:	69b9      	ldr	r1, [r7, #24]
 800166a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	2203      	movs	r2, #3
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 0203 	and.w	r2, r3, #3
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 80e0 	beq.w	8001870 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001770 <HAL_GPIO_Init+0x238>)
 80016b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016b6:	4a2e      	ldr	r2, [pc, #184]	@ (8001770 <HAL_GPIO_Init+0x238>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001770 <HAL_GPIO_Init+0x238>)
 80016c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ce:	4a29      	ldr	r2, [pc, #164]	@ (8001774 <HAL_GPIO_Init+0x23c>)
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	089b      	lsrs	r3, r3, #2
 80016d4:	3302      	adds	r3, #2
 80016d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f003 0303 	and.w	r3, r3, #3
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	220f      	movs	r2, #15
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a20      	ldr	r2, [pc, #128]	@ (8001778 <HAL_GPIO_Init+0x240>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d052      	beq.n	80017a0 <HAL_GPIO_Init+0x268>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a1f      	ldr	r2, [pc, #124]	@ (800177c <HAL_GPIO_Init+0x244>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d031      	beq.n	8001766 <HAL_GPIO_Init+0x22e>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a1e      	ldr	r2, [pc, #120]	@ (8001780 <HAL_GPIO_Init+0x248>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d02b      	beq.n	8001762 <HAL_GPIO_Init+0x22a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a1d      	ldr	r2, [pc, #116]	@ (8001784 <HAL_GPIO_Init+0x24c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d025      	beq.n	800175e <HAL_GPIO_Init+0x226>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a1c      	ldr	r2, [pc, #112]	@ (8001788 <HAL_GPIO_Init+0x250>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d01f      	beq.n	800175a <HAL_GPIO_Init+0x222>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a1b      	ldr	r2, [pc, #108]	@ (800178c <HAL_GPIO_Init+0x254>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d019      	beq.n	8001756 <HAL_GPIO_Init+0x21e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a1a      	ldr	r2, [pc, #104]	@ (8001790 <HAL_GPIO_Init+0x258>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d013      	beq.n	8001752 <HAL_GPIO_Init+0x21a>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a19      	ldr	r2, [pc, #100]	@ (8001794 <HAL_GPIO_Init+0x25c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d00d      	beq.n	800174e <HAL_GPIO_Init+0x216>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a18      	ldr	r2, [pc, #96]	@ (8001798 <HAL_GPIO_Init+0x260>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d007      	beq.n	800174a <HAL_GPIO_Init+0x212>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a17      	ldr	r2, [pc, #92]	@ (800179c <HAL_GPIO_Init+0x264>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d101      	bne.n	8001746 <HAL_GPIO_Init+0x20e>
 8001742:	2309      	movs	r3, #9
 8001744:	e02d      	b.n	80017a2 <HAL_GPIO_Init+0x26a>
 8001746:	230a      	movs	r3, #10
 8001748:	e02b      	b.n	80017a2 <HAL_GPIO_Init+0x26a>
 800174a:	2308      	movs	r3, #8
 800174c:	e029      	b.n	80017a2 <HAL_GPIO_Init+0x26a>
 800174e:	2307      	movs	r3, #7
 8001750:	e027      	b.n	80017a2 <HAL_GPIO_Init+0x26a>
 8001752:	2306      	movs	r3, #6
 8001754:	e025      	b.n	80017a2 <HAL_GPIO_Init+0x26a>
 8001756:	2305      	movs	r3, #5
 8001758:	e023      	b.n	80017a2 <HAL_GPIO_Init+0x26a>
 800175a:	2304      	movs	r3, #4
 800175c:	e021      	b.n	80017a2 <HAL_GPIO_Init+0x26a>
 800175e:	2303      	movs	r3, #3
 8001760:	e01f      	b.n	80017a2 <HAL_GPIO_Init+0x26a>
 8001762:	2302      	movs	r3, #2
 8001764:	e01d      	b.n	80017a2 <HAL_GPIO_Init+0x26a>
 8001766:	2301      	movs	r3, #1
 8001768:	e01b      	b.n	80017a2 <HAL_GPIO_Init+0x26a>
 800176a:	bf00      	nop
 800176c:	58000080 	.word	0x58000080
 8001770:	58024400 	.word	0x58024400
 8001774:	58000400 	.word	0x58000400
 8001778:	58020000 	.word	0x58020000
 800177c:	58020400 	.word	0x58020400
 8001780:	58020800 	.word	0x58020800
 8001784:	58020c00 	.word	0x58020c00
 8001788:	58021000 	.word	0x58021000
 800178c:	58021400 	.word	0x58021400
 8001790:	58021800 	.word	0x58021800
 8001794:	58021c00 	.word	0x58021c00
 8001798:	58022000 	.word	0x58022000
 800179c:	58022400 	.word	0x58022400
 80017a0:	2300      	movs	r3, #0
 80017a2:	69fa      	ldr	r2, [r7, #28]
 80017a4:	f002 0203 	and.w	r2, r2, #3
 80017a8:	0092      	lsls	r2, r2, #2
 80017aa:	4093      	lsls	r3, r2
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017b2:	4938      	ldr	r1, [pc, #224]	@ (8001894 <HAL_GPIO_Init+0x35c>)
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	089b      	lsrs	r3, r3, #2
 80017b8:	3302      	adds	r3, #2
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80017e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80017ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001814:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	43db      	mvns	r3, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	3301      	adds	r3, #1
 8001874:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	fa22 f303 	lsr.w	r3, r2, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	f47f ae63 	bne.w	800154c <HAL_GPIO_Init+0x14>
  }
}
 8001886:	bf00      	nop
 8001888:	bf00      	nop
 800188a:	3724      	adds	r7, #36	@ 0x24
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	58000400 	.word	0x58000400

08001898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	807b      	strh	r3, [r7, #2]
 80018a4:	4613      	mov	r3, r2
 80018a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018a8:	787b      	ldrb	r3, [r7, #1]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ae:	887a      	ldrh	r2, [r7, #2]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80018b4:	e003      	b.n	80018be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80018b6:	887b      	ldrh	r3, [r7, #2]
 80018b8:	041a      	lsls	r2, r3, #16
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	619a      	str	r2, [r3, #24]
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e08b      	b.n	80019f6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d106      	bne.n	80018f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff f994 	bl	8000c20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2224      	movs	r2, #36	@ 0x24
 80018fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0201 	bic.w	r2, r2, #1
 800190e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800191c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800192c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d107      	bne.n	8001946 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689a      	ldr	r2, [r3, #8]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	e006      	b.n	8001954 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001952:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d108      	bne.n	800196e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	e007      	b.n	800197e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800197c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6859      	ldr	r1, [r3, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b1d      	ldr	r3, [pc, #116]	@ (8001a00 <HAL_I2C_Init+0x134>)
 800198a:	430b      	orrs	r3, r1
 800198c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800199c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691a      	ldr	r2, [r3, #16]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69d9      	ldr	r1, [r3, #28]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a1a      	ldr	r2, [r3, #32]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0201 	orr.w	r2, r2, #1
 80019d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2220      	movs	r2, #32
 80019e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	02008000 	.word	0x02008000

08001a04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b20      	cmp	r3, #32
 8001a18:	d138      	bne.n	8001a8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e032      	b.n	8001a8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2224      	movs	r2, #36	@ 0x24
 8001a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0201 	bic.w	r2, r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6819      	ldr	r1, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0201 	orr.w	r2, r2, #1
 8001a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	e000      	b.n	8001a8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a8c:	2302      	movs	r3, #2
  }
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b085      	sub	sp, #20
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b20      	cmp	r3, #32
 8001aae:	d139      	bne.n	8001b24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e033      	b.n	8001b26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2224      	movs	r2, #36	@ 0x24
 8001aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0201 	bic.w	r2, r2, #1
 8001adc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001aec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	021b      	lsls	r3, r3, #8
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0201 	orr.w	r2, r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2220      	movs	r2, #32
 8001b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	e000      	b.n	8001b26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b24:	2302      	movs	r3, #2
  }
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001b3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d00a      	beq.n	8001b5e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001b48:	4b16      	ldr	r3, [pc, #88]	@ (8001ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d001      	beq.n	8001b5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e01f      	b.n	8001b9a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e01d      	b.n	8001b9a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001b5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f023 0207 	bic.w	r2, r3, #7
 8001b66:	490f      	ldr	r1, [pc, #60]	@ (8001ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001b6e:	f7ff fb4f 	bl	8001210 <HAL_GetTick>
 8001b72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b74:	e009      	b.n	8001b8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b76:	f7ff fb4b 	bl	8001210 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b84:	d901      	bls.n	8001b8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e007      	b.n	8001b9a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b96:	d1ee      	bne.n	8001b76 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	58024800 	.word	0x58024800

08001ba8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08c      	sub	sp, #48	@ 0x30
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d102      	bne.n	8001bbc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	f000 bc48 	b.w	800244c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 8088 	beq.w	8001cda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bca:	4b99      	ldr	r3, [pc, #612]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bd4:	4b96      	ldr	r3, [pc, #600]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bdc:	2b10      	cmp	r3, #16
 8001bde:	d007      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x48>
 8001be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001be2:	2b18      	cmp	r3, #24
 8001be4:	d111      	bne.n	8001c0a <HAL_RCC_OscConfig+0x62>
 8001be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d10c      	bne.n	8001c0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf0:	4b8f      	ldr	r3, [pc, #572]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d06d      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x130>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d169      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	f000 bc21 	b.w	800244c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c12:	d106      	bne.n	8001c22 <HAL_RCC_OscConfig+0x7a>
 8001c14:	4b86      	ldr	r3, [pc, #536]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a85      	ldr	r2, [pc, #532]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001c1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	e02e      	b.n	8001c80 <HAL_RCC_OscConfig+0xd8>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10c      	bne.n	8001c44 <HAL_RCC_OscConfig+0x9c>
 8001c2a:	4b81      	ldr	r3, [pc, #516]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a80      	ldr	r2, [pc, #512]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001c30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	4b7e      	ldr	r3, [pc, #504]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a7d      	ldr	r2, [pc, #500]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001c3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e01d      	b.n	8001c80 <HAL_RCC_OscConfig+0xd8>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCC_OscConfig+0xc0>
 8001c4e:	4b78      	ldr	r3, [pc, #480]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a77      	ldr	r2, [pc, #476]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001c54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	4b75      	ldr	r3, [pc, #468]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a74      	ldr	r2, [pc, #464]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e00b      	b.n	8001c80 <HAL_RCC_OscConfig+0xd8>
 8001c68:	4b71      	ldr	r3, [pc, #452]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a70      	ldr	r2, [pc, #448]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	4b6e      	ldr	r3, [pc, #440]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a6d      	ldr	r2, [pc, #436]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001c7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d013      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c88:	f7ff fac2 	bl	8001210 <HAL_GetTick>
 8001c8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c90:	f7ff fabe 	bl	8001210 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b64      	cmp	r3, #100	@ 0x64
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e3d4      	b.n	800244c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ca2:	4b63      	ldr	r3, [pc, #396]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f0      	beq.n	8001c90 <HAL_RCC_OscConfig+0xe8>
 8001cae:	e014      	b.n	8001cda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb0:	f7ff faae 	bl	8001210 <HAL_GetTick>
 8001cb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb8:	f7ff faaa 	bl	8001210 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b64      	cmp	r3, #100	@ 0x64
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e3c0      	b.n	800244c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cca:	4b59      	ldr	r3, [pc, #356]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x110>
 8001cd6:	e000      	b.n	8001cda <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 80ca 	beq.w	8001e7c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ce8:	4b51      	ldr	r3, [pc, #324]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cf0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cf2:	4b4f      	ldr	r3, [pc, #316]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <HAL_RCC_OscConfig+0x166>
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	2b18      	cmp	r3, #24
 8001d02:	d156      	bne.n	8001db2 <HAL_RCC_OscConfig+0x20a>
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d151      	bne.n	8001db2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d0e:	4b48      	ldr	r3, [pc, #288]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d005      	beq.n	8001d26 <HAL_RCC_OscConfig+0x17e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e392      	b.n	800244c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d26:	4b42      	ldr	r3, [pc, #264]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 0219 	bic.w	r2, r3, #25
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	493f      	ldr	r1, [pc, #252]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d38:	f7ff fa6a 	bl	8001210 <HAL_GetTick>
 8001d3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d40:	f7ff fa66 	bl	8001210 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e37c      	b.n	800244c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d52:	4b37      	ldr	r3, [pc, #220]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5e:	f7ff fa87 	bl	8001270 <HAL_GetREVID>
 8001d62:	4603      	mov	r3, r0
 8001d64:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d817      	bhi.n	8001d9c <HAL_RCC_OscConfig+0x1f4>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	2b40      	cmp	r3, #64	@ 0x40
 8001d72:	d108      	bne.n	8001d86 <HAL_RCC_OscConfig+0x1de>
 8001d74:	4b2e      	ldr	r3, [pc, #184]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001d7c:	4a2c      	ldr	r2, [pc, #176]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001d7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d82:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d84:	e07a      	b.n	8001e7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d86:	4b2a      	ldr	r3, [pc, #168]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	031b      	lsls	r3, r3, #12
 8001d94:	4926      	ldr	r1, [pc, #152]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d9a:	e06f      	b.n	8001e7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9c:	4b24      	ldr	r3, [pc, #144]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	061b      	lsls	r3, r3, #24
 8001daa:	4921      	ldr	r1, [pc, #132]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001db0:	e064      	b.n	8001e7c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d047      	beq.n	8001e4a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001dba:	4b1d      	ldr	r3, [pc, #116]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 0219 	bic.w	r2, r3, #25
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	491a      	ldr	r1, [pc, #104]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7ff fa20 	bl	8001210 <HAL_GetTick>
 8001dd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd4:	f7ff fa1c 	bl	8001210 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e332      	b.n	800244c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001de6:	4b12      	ldr	r3, [pc, #72]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df2:	f7ff fa3d 	bl	8001270 <HAL_GetREVID>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d819      	bhi.n	8001e34 <HAL_RCC_OscConfig+0x28c>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	2b40      	cmp	r3, #64	@ 0x40
 8001e06:	d108      	bne.n	8001e1a <HAL_RCC_OscConfig+0x272>
 8001e08:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001e10:	4a07      	ldr	r2, [pc, #28]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001e12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e16:	6053      	str	r3, [r2, #4]
 8001e18:	e030      	b.n	8001e7c <HAL_RCC_OscConfig+0x2d4>
 8001e1a:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	031b      	lsls	r3, r3, #12
 8001e28:	4901      	ldr	r1, [pc, #4]	@ (8001e30 <HAL_RCC_OscConfig+0x288>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	604b      	str	r3, [r1, #4]
 8001e2e:	e025      	b.n	8001e7c <HAL_RCC_OscConfig+0x2d4>
 8001e30:	58024400 	.word	0x58024400
 8001e34:	4b9a      	ldr	r3, [pc, #616]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	061b      	lsls	r3, r3, #24
 8001e42:	4997      	ldr	r1, [pc, #604]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	604b      	str	r3, [r1, #4]
 8001e48:	e018      	b.n	8001e7c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4a:	4b95      	ldr	r3, [pc, #596]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a94      	ldr	r2, [pc, #592]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001e50:	f023 0301 	bic.w	r3, r3, #1
 8001e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e56:	f7ff f9db 	bl	8001210 <HAL_GetTick>
 8001e5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5e:	f7ff f9d7 	bl	8001210 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e2ed      	b.n	800244c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e70:	4b8b      	ldr	r3, [pc, #556]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1f0      	bne.n	8001e5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80a9 	beq.w	8001fdc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e8a:	4b85      	ldr	r3, [pc, #532]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e92:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e94:	4b82      	ldr	r3, [pc, #520]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e98:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d007      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x308>
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	2b18      	cmp	r3, #24
 8001ea4:	d13a      	bne.n	8001f1c <HAL_RCC_OscConfig+0x374>
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d135      	bne.n	8001f1c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001eb0:	4b7b      	ldr	r3, [pc, #492]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x320>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	2b80      	cmp	r3, #128	@ 0x80
 8001ec2:	d001      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e2c1      	b.n	800244c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ec8:	f7ff f9d2 	bl	8001270 <HAL_GetREVID>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d817      	bhi.n	8001f06 <HAL_RCC_OscConfig+0x35e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	2b20      	cmp	r3, #32
 8001edc:	d108      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x348>
 8001ede:	4b70      	ldr	r3, [pc, #448]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001ee6:	4a6e      	ldr	r2, [pc, #440]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001ee8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001eec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001eee:	e075      	b.n	8001fdc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ef0:	4b6b      	ldr	r3, [pc, #428]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	069b      	lsls	r3, r3, #26
 8001efe:	4968      	ldr	r1, [pc, #416]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f04:	e06a      	b.n	8001fdc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f06:	4b66      	ldr	r3, [pc, #408]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	061b      	lsls	r3, r3, #24
 8001f14:	4962      	ldr	r1, [pc, #392]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f1a:	e05f      	b.n	8001fdc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d042      	beq.n	8001faa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f24:	4b5e      	ldr	r3, [pc, #376]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a5d      	ldr	r2, [pc, #372]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f30:	f7ff f96e 	bl	8001210 <HAL_GetTick>
 8001f34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f38:	f7ff f96a 	bl	8001210 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e280      	b.n	800244c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f4a:	4b55      	ldr	r3, [pc, #340]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f56:	f7ff f98b 	bl	8001270 <HAL_GetREVID>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d817      	bhi.n	8001f94 <HAL_RCC_OscConfig+0x3ec>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	2b20      	cmp	r3, #32
 8001f6a:	d108      	bne.n	8001f7e <HAL_RCC_OscConfig+0x3d6>
 8001f6c:	4b4c      	ldr	r3, [pc, #304]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001f74:	4a4a      	ldr	r2, [pc, #296]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001f76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f7a:	6053      	str	r3, [r2, #4]
 8001f7c:	e02e      	b.n	8001fdc <HAL_RCC_OscConfig+0x434>
 8001f7e:	4b48      	ldr	r3, [pc, #288]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	069b      	lsls	r3, r3, #26
 8001f8c:	4944      	ldr	r1, [pc, #272]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	604b      	str	r3, [r1, #4]
 8001f92:	e023      	b.n	8001fdc <HAL_RCC_OscConfig+0x434>
 8001f94:	4b42      	ldr	r3, [pc, #264]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	061b      	lsls	r3, r3, #24
 8001fa2:	493f      	ldr	r1, [pc, #252]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60cb      	str	r3, [r1, #12]
 8001fa8:	e018      	b.n	8001fdc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001faa:	4b3d      	ldr	r3, [pc, #244]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a3c      	ldr	r2, [pc, #240]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001fb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb6:	f7ff f92b 	bl	8001210 <HAL_GetTick>
 8001fba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001fbe:	f7ff f927 	bl	8001210 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e23d      	b.n	800244c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fd0:	4b33      	ldr	r3, [pc, #204]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1f0      	bne.n	8001fbe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d036      	beq.n	8002056 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d019      	beq.n	8002024 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff0:	4b2b      	ldr	r3, [pc, #172]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001ff2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ff4:	4a2a      	ldr	r2, [pc, #168]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffc:	f7ff f908 	bl	8001210 <HAL_GetTick>
 8002000:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002004:	f7ff f904 	bl	8001210 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e21a      	b.n	800244c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002016:	4b22      	ldr	r3, [pc, #136]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8002018:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x45c>
 8002022:	e018      	b.n	8002056 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002024:	4b1e      	ldr	r3, [pc, #120]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8002026:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002028:	4a1d      	ldr	r2, [pc, #116]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 800202a:	f023 0301 	bic.w	r3, r3, #1
 800202e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002030:	f7ff f8ee 	bl	8001210 <HAL_GetTick>
 8002034:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002038:	f7ff f8ea 	bl	8001210 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e200      	b.n	800244c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800204a:	4b15      	ldr	r3, [pc, #84]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 800204c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	2b00      	cmp	r3, #0
 8002060:	d039      	beq.n	80020d6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d01c      	beq.n	80020a4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800206a:	4b0d      	ldr	r3, [pc, #52]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a0c      	ldr	r2, [pc, #48]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8002070:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002074:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002076:	f7ff f8cb 	bl	8001210 <HAL_GetTick>
 800207a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800207e:	f7ff f8c7 	bl	8001210 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e1dd      	b.n	800244c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002090:	4b03      	ldr	r3, [pc, #12]	@ (80020a0 <HAL_RCC_OscConfig+0x4f8>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x4d6>
 800209c:	e01b      	b.n	80020d6 <HAL_RCC_OscConfig+0x52e>
 800209e:	bf00      	nop
 80020a0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020a4:	4b9b      	ldr	r3, [pc, #620]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a9a      	ldr	r2, [pc, #616]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 80020aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020b0:	f7ff f8ae 	bl	8001210 <HAL_GetTick>
 80020b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020b8:	f7ff f8aa 	bl	8001210 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e1c0      	b.n	800244c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020ca:	4b92      	ldr	r3, [pc, #584]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 8081 	beq.w	80021e6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020e4:	4b8c      	ldr	r3, [pc, #560]	@ (8002318 <HAL_RCC_OscConfig+0x770>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a8b      	ldr	r2, [pc, #556]	@ (8002318 <HAL_RCC_OscConfig+0x770>)
 80020ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020f0:	f7ff f88e 	bl	8001210 <HAL_GetTick>
 80020f4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f8:	f7ff f88a 	bl	8001210 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b64      	cmp	r3, #100	@ 0x64
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e1a0      	b.n	800244c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800210a:	4b83      	ldr	r3, [pc, #524]	@ (8002318 <HAL_RCC_OscConfig+0x770>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d106      	bne.n	800212c <HAL_RCC_OscConfig+0x584>
 800211e:	4b7d      	ldr	r3, [pc, #500]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 8002120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002122:	4a7c      	ldr	r2, [pc, #496]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	6713      	str	r3, [r2, #112]	@ 0x70
 800212a:	e02d      	b.n	8002188 <HAL_RCC_OscConfig+0x5e0>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10c      	bne.n	800214e <HAL_RCC_OscConfig+0x5a6>
 8002134:	4b77      	ldr	r3, [pc, #476]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 8002136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002138:	4a76      	ldr	r2, [pc, #472]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 800213a:	f023 0301 	bic.w	r3, r3, #1
 800213e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002140:	4b74      	ldr	r3, [pc, #464]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 8002142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002144:	4a73      	ldr	r2, [pc, #460]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 8002146:	f023 0304 	bic.w	r3, r3, #4
 800214a:	6713      	str	r3, [r2, #112]	@ 0x70
 800214c:	e01c      	b.n	8002188 <HAL_RCC_OscConfig+0x5e0>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b05      	cmp	r3, #5
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0x5c8>
 8002156:	4b6f      	ldr	r3, [pc, #444]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215a:	4a6e      	ldr	r2, [pc, #440]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 800215c:	f043 0304 	orr.w	r3, r3, #4
 8002160:	6713      	str	r3, [r2, #112]	@ 0x70
 8002162:	4b6c      	ldr	r3, [pc, #432]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 8002164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002166:	4a6b      	ldr	r2, [pc, #428]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6713      	str	r3, [r2, #112]	@ 0x70
 800216e:	e00b      	b.n	8002188 <HAL_RCC_OscConfig+0x5e0>
 8002170:	4b68      	ldr	r3, [pc, #416]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 8002172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002174:	4a67      	ldr	r2, [pc, #412]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 8002176:	f023 0301 	bic.w	r3, r3, #1
 800217a:	6713      	str	r3, [r2, #112]	@ 0x70
 800217c:	4b65      	ldr	r3, [pc, #404]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002180:	4a64      	ldr	r2, [pc, #400]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 8002182:	f023 0304 	bic.w	r3, r3, #4
 8002186:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d015      	beq.n	80021bc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002190:	f7ff f83e 	bl	8001210 <HAL_GetTick>
 8002194:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002196:	e00a      	b.n	80021ae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002198:	f7ff f83a 	bl	8001210 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e14e      	b.n	800244c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021ae:	4b59      	ldr	r3, [pc, #356]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 80021b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0ee      	beq.n	8002198 <HAL_RCC_OscConfig+0x5f0>
 80021ba:	e014      	b.n	80021e6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021bc:	f7ff f828 	bl	8001210 <HAL_GetTick>
 80021c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021c2:	e00a      	b.n	80021da <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c4:	f7ff f824 	bl	8001210 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e138      	b.n	800244c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021da:	4b4e      	ldr	r3, [pc, #312]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1ee      	bne.n	80021c4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 812d 	beq.w	800244a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80021f0:	4b48      	ldr	r3, [pc, #288]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021f8:	2b18      	cmp	r3, #24
 80021fa:	f000 80bd 	beq.w	8002378 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002202:	2b02      	cmp	r3, #2
 8002204:	f040 809e 	bne.w	8002344 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002208:	4b42      	ldr	r3, [pc, #264]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a41      	ldr	r2, [pc, #260]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 800220e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002214:	f7fe fffc 	bl	8001210 <HAL_GetTick>
 8002218:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221c:	f7fe fff8 	bl	8001210 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e10e      	b.n	800244c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800222e:	4b39      	ldr	r3, [pc, #228]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800223a:	4b36      	ldr	r3, [pc, #216]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 800223c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800223e:	4b37      	ldr	r3, [pc, #220]	@ (800231c <HAL_RCC_OscConfig+0x774>)
 8002240:	4013      	ands	r3, r2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800224a:	0112      	lsls	r2, r2, #4
 800224c:	430a      	orrs	r2, r1
 800224e:	4931      	ldr	r1, [pc, #196]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 8002250:	4313      	orrs	r3, r2
 8002252:	628b      	str	r3, [r1, #40]	@ 0x28
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002258:	3b01      	subs	r3, #1
 800225a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002262:	3b01      	subs	r3, #1
 8002264:	025b      	lsls	r3, r3, #9
 8002266:	b29b      	uxth	r3, r3
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800226e:	3b01      	subs	r3, #1
 8002270:	041b      	lsls	r3, r3, #16
 8002272:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800227c:	3b01      	subs	r3, #1
 800227e:	061b      	lsls	r3, r3, #24
 8002280:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002284:	4923      	ldr	r1, [pc, #140]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 8002286:	4313      	orrs	r3, r2
 8002288:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800228a:	4b22      	ldr	r3, [pc, #136]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 800228c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228e:	4a21      	ldr	r2, [pc, #132]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 8002290:	f023 0301 	bic.w	r3, r3, #1
 8002294:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002296:	4b1f      	ldr	r3, [pc, #124]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 8002298:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800229a:	4b21      	ldr	r3, [pc, #132]	@ (8002320 <HAL_RCC_OscConfig+0x778>)
 800229c:	4013      	ands	r3, r2
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022a2:	00d2      	lsls	r2, r2, #3
 80022a4:	491b      	ldr	r1, [pc, #108]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80022aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 80022ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ae:	f023 020c 	bic.w	r2, r3, #12
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	4917      	ldr	r1, [pc, #92]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80022bc:	4b15      	ldr	r3, [pc, #84]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 80022be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c0:	f023 0202 	bic.w	r2, r3, #2
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c8:	4912      	ldr	r1, [pc, #72]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80022ce:	4b11      	ldr	r3, [pc, #68]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 80022d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d2:	4a10      	ldr	r2, [pc, #64]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022da:	4b0e      	ldr	r3, [pc, #56]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 80022dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022de:	4a0d      	ldr	r2, [pc, #52]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 80022e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80022e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 80022e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 80022ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80022f2:	4b08      	ldr	r3, [pc, #32]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 80022f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f6:	4a07      	ldr	r2, [pc, #28]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022fe:	4b05      	ldr	r3, [pc, #20]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a04      	ldr	r2, [pc, #16]	@ (8002314 <HAL_RCC_OscConfig+0x76c>)
 8002304:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230a:	f7fe ff81 	bl	8001210 <HAL_GetTick>
 800230e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002310:	e011      	b.n	8002336 <HAL_RCC_OscConfig+0x78e>
 8002312:	bf00      	nop
 8002314:	58024400 	.word	0x58024400
 8002318:	58024800 	.word	0x58024800
 800231c:	fffffc0c 	.word	0xfffffc0c
 8002320:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002324:	f7fe ff74 	bl	8001210 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e08a      	b.n	800244c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002336:	4b47      	ldr	r3, [pc, #284]	@ (8002454 <HAL_RCC_OscConfig+0x8ac>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0x77c>
 8002342:	e082      	b.n	800244a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002344:	4b43      	ldr	r3, [pc, #268]	@ (8002454 <HAL_RCC_OscConfig+0x8ac>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a42      	ldr	r2, [pc, #264]	@ (8002454 <HAL_RCC_OscConfig+0x8ac>)
 800234a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800234e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7fe ff5e 	bl	8001210 <HAL_GetTick>
 8002354:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002358:	f7fe ff5a 	bl	8001210 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e070      	b.n	800244c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800236a:	4b3a      	ldr	r3, [pc, #232]	@ (8002454 <HAL_RCC_OscConfig+0x8ac>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_OscConfig+0x7b0>
 8002376:	e068      	b.n	800244a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002378:	4b36      	ldr	r3, [pc, #216]	@ (8002454 <HAL_RCC_OscConfig+0x8ac>)
 800237a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800237e:	4b35      	ldr	r3, [pc, #212]	@ (8002454 <HAL_RCC_OscConfig+0x8ac>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002388:	2b01      	cmp	r3, #1
 800238a:	d031      	beq.n	80023f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	f003 0203 	and.w	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002396:	429a      	cmp	r2, r3
 8002398:	d12a      	bne.n	80023f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d122      	bne.n	80023f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d11a      	bne.n	80023f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	0a5b      	lsrs	r3, r3, #9
 80023be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d111      	bne.n	80023f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	0c1b      	lsrs	r3, r3, #16
 80023d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023da:	429a      	cmp	r2, r3
 80023dc:	d108      	bne.n	80023f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	0e1b      	lsrs	r3, r3, #24
 80023e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d001      	beq.n	80023f4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e02b      	b.n	800244c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80023f4:	4b17      	ldr	r3, [pc, #92]	@ (8002454 <HAL_RCC_OscConfig+0x8ac>)
 80023f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023f8:	08db      	lsrs	r3, r3, #3
 80023fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	429a      	cmp	r2, r3
 8002408:	d01f      	beq.n	800244a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800240a:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <HAL_RCC_OscConfig+0x8ac>)
 800240c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240e:	4a11      	ldr	r2, [pc, #68]	@ (8002454 <HAL_RCC_OscConfig+0x8ac>)
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002416:	f7fe fefb 	bl	8001210 <HAL_GetTick>
 800241a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800241c:	bf00      	nop
 800241e:	f7fe fef7 	bl	8001210 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002426:	4293      	cmp	r3, r2
 8002428:	d0f9      	beq.n	800241e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800242a:	4b0a      	ldr	r3, [pc, #40]	@ (8002454 <HAL_RCC_OscConfig+0x8ac>)
 800242c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800242e:	4b0a      	ldr	r3, [pc, #40]	@ (8002458 <HAL_RCC_OscConfig+0x8b0>)
 8002430:	4013      	ands	r3, r2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002436:	00d2      	lsls	r2, r2, #3
 8002438:	4906      	ldr	r1, [pc, #24]	@ (8002454 <HAL_RCC_OscConfig+0x8ac>)
 800243a:	4313      	orrs	r3, r2
 800243c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800243e:	4b05      	ldr	r3, [pc, #20]	@ (8002454 <HAL_RCC_OscConfig+0x8ac>)
 8002440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002442:	4a04      	ldr	r2, [pc, #16]	@ (8002454 <HAL_RCC_OscConfig+0x8ac>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3730      	adds	r7, #48	@ 0x30
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	58024400 	.word	0x58024400
 8002458:	ffff0007 	.word	0xffff0007

0800245c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e19c      	b.n	80027aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002470:	4b8a      	ldr	r3, [pc, #552]	@ (800269c <HAL_RCC_ClockConfig+0x240>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d910      	bls.n	80024a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247e:	4b87      	ldr	r3, [pc, #540]	@ (800269c <HAL_RCC_ClockConfig+0x240>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 020f 	bic.w	r2, r3, #15
 8002486:	4985      	ldr	r1, [pc, #532]	@ (800269c <HAL_RCC_ClockConfig+0x240>)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	4b83      	ldr	r3, [pc, #524]	@ (800269c <HAL_RCC_ClockConfig+0x240>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e184      	b.n	80027aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d010      	beq.n	80024ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	4b7b      	ldr	r3, [pc, #492]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d908      	bls.n	80024ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024bc:	4b78      	ldr	r3, [pc, #480]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	4975      	ldr	r1, [pc, #468]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d010      	beq.n	80024fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	4b70      	ldr	r3, [pc, #448]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d908      	bls.n	80024fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024ea:	4b6d      	ldr	r3, [pc, #436]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	496a      	ldr	r1, [pc, #424]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b00      	cmp	r3, #0
 8002506:	d010      	beq.n	800252a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699a      	ldr	r2, [r3, #24]
 800250c:	4b64      	ldr	r3, [pc, #400]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002514:	429a      	cmp	r2, r3
 8002516:	d908      	bls.n	800252a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002518:	4b61      	ldr	r3, [pc, #388]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	495e      	ldr	r1, [pc, #376]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 8002526:	4313      	orrs	r3, r2
 8002528:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0320 	and.w	r3, r3, #32
 8002532:	2b00      	cmp	r3, #0
 8002534:	d010      	beq.n	8002558 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69da      	ldr	r2, [r3, #28]
 800253a:	4b59      	ldr	r3, [pc, #356]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002542:	429a      	cmp	r2, r3
 8002544:	d908      	bls.n	8002558 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002546:	4b56      	ldr	r3, [pc, #344]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	4953      	ldr	r1, [pc, #332]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 8002554:	4313      	orrs	r3, r2
 8002556:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d010      	beq.n	8002586 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	4b4d      	ldr	r3, [pc, #308]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	f003 030f 	and.w	r3, r3, #15
 8002570:	429a      	cmp	r2, r3
 8002572:	d908      	bls.n	8002586 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002574:	4b4a      	ldr	r3, [pc, #296]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f023 020f 	bic.w	r2, r3, #15
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	4947      	ldr	r1, [pc, #284]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 8002582:	4313      	orrs	r3, r2
 8002584:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d055      	beq.n	800263e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002592:	4b43      	ldr	r3, [pc, #268]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	4940      	ldr	r1, [pc, #256]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d107      	bne.n	80025bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025ac:	4b3c      	ldr	r3, [pc, #240]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d121      	bne.n	80025fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0f6      	b.n	80027aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d107      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025c4:	4b36      	ldr	r3, [pc, #216]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d115      	bne.n	80025fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0ea      	b.n	80027aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d107      	bne.n	80025ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025dc:	4b30      	ldr	r3, [pc, #192]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d109      	bne.n	80025fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0de      	b.n	80027aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025ec:	4b2c      	ldr	r3, [pc, #176]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0d6      	b.n	80027aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025fc:	4b28      	ldr	r3, [pc, #160]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f023 0207 	bic.w	r2, r3, #7
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	4925      	ldr	r1, [pc, #148]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 800260a:	4313      	orrs	r3, r2
 800260c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800260e:	f7fe fdff 	bl	8001210 <HAL_GetTick>
 8002612:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002614:	e00a      	b.n	800262c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002616:	f7fe fdfb 	bl	8001210 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002624:	4293      	cmp	r3, r2
 8002626:	d901      	bls.n	800262c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e0be      	b.n	80027aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262c:	4b1c      	ldr	r3, [pc, #112]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	429a      	cmp	r2, r3
 800263c:	d1eb      	bne.n	8002616 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d010      	beq.n	800266c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	4b14      	ldr	r3, [pc, #80]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	429a      	cmp	r2, r3
 8002658:	d208      	bcs.n	800266c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800265a:	4b11      	ldr	r3, [pc, #68]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f023 020f 	bic.w	r2, r3, #15
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	490e      	ldr	r1, [pc, #56]	@ (80026a0 <HAL_RCC_ClockConfig+0x244>)
 8002668:	4313      	orrs	r3, r2
 800266a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800266c:	4b0b      	ldr	r3, [pc, #44]	@ (800269c <HAL_RCC_ClockConfig+0x240>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d214      	bcs.n	80026a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267a:	4b08      	ldr	r3, [pc, #32]	@ (800269c <HAL_RCC_ClockConfig+0x240>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 020f 	bic.w	r2, r3, #15
 8002682:	4906      	ldr	r1, [pc, #24]	@ (800269c <HAL_RCC_ClockConfig+0x240>)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	4313      	orrs	r3, r2
 8002688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268a:	4b04      	ldr	r3, [pc, #16]	@ (800269c <HAL_RCC_ClockConfig+0x240>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d005      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e086      	b.n	80027aa <HAL_RCC_ClockConfig+0x34e>
 800269c:	52002000 	.word	0x52002000
 80026a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d010      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	4b3f      	ldr	r3, [pc, #252]	@ (80027b4 <HAL_RCC_ClockConfig+0x358>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026bc:	429a      	cmp	r2, r3
 80026be:	d208      	bcs.n	80026d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026c0:	4b3c      	ldr	r3, [pc, #240]	@ (80027b4 <HAL_RCC_ClockConfig+0x358>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	4939      	ldr	r1, [pc, #228]	@ (80027b4 <HAL_RCC_ClockConfig+0x358>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d010      	beq.n	8002700 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695a      	ldr	r2, [r3, #20]
 80026e2:	4b34      	ldr	r3, [pc, #208]	@ (80027b4 <HAL_RCC_ClockConfig+0x358>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d208      	bcs.n	8002700 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026ee:	4b31      	ldr	r3, [pc, #196]	@ (80027b4 <HAL_RCC_ClockConfig+0x358>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	492e      	ldr	r1, [pc, #184]	@ (80027b4 <HAL_RCC_ClockConfig+0x358>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0310 	and.w	r3, r3, #16
 8002708:	2b00      	cmp	r3, #0
 800270a:	d010      	beq.n	800272e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699a      	ldr	r2, [r3, #24]
 8002710:	4b28      	ldr	r3, [pc, #160]	@ (80027b4 <HAL_RCC_ClockConfig+0x358>)
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002718:	429a      	cmp	r2, r3
 800271a:	d208      	bcs.n	800272e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800271c:	4b25      	ldr	r3, [pc, #148]	@ (80027b4 <HAL_RCC_ClockConfig+0x358>)
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	4922      	ldr	r1, [pc, #136]	@ (80027b4 <HAL_RCC_ClockConfig+0x358>)
 800272a:	4313      	orrs	r3, r2
 800272c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0320 	and.w	r3, r3, #32
 8002736:	2b00      	cmp	r3, #0
 8002738:	d010      	beq.n	800275c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69da      	ldr	r2, [r3, #28]
 800273e:	4b1d      	ldr	r3, [pc, #116]	@ (80027b4 <HAL_RCC_ClockConfig+0x358>)
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002746:	429a      	cmp	r2, r3
 8002748:	d208      	bcs.n	800275c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800274a:	4b1a      	ldr	r3, [pc, #104]	@ (80027b4 <HAL_RCC_ClockConfig+0x358>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	4917      	ldr	r1, [pc, #92]	@ (80027b4 <HAL_RCC_ClockConfig+0x358>)
 8002758:	4313      	orrs	r3, r2
 800275a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800275c:	f000 f834 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b14      	ldr	r3, [pc, #80]	@ (80027b4 <HAL_RCC_ClockConfig+0x358>)
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	0a1b      	lsrs	r3, r3, #8
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	4912      	ldr	r1, [pc, #72]	@ (80027b8 <HAL_RCC_ClockConfig+0x35c>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	fa22 f303 	lsr.w	r3, r2, r3
 8002778:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800277a:	4b0e      	ldr	r3, [pc, #56]	@ (80027b4 <HAL_RCC_ClockConfig+0x358>)
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	4a0d      	ldr	r2, [pc, #52]	@ (80027b8 <HAL_RCC_ClockConfig+0x35c>)
 8002784:	5cd3      	ldrb	r3, [r2, r3]
 8002786:	f003 031f 	and.w	r3, r3, #31
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	fa22 f303 	lsr.w	r3, r2, r3
 8002790:	4a0a      	ldr	r2, [pc, #40]	@ (80027bc <HAL_RCC_ClockConfig+0x360>)
 8002792:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002794:	4a0a      	ldr	r2, [pc, #40]	@ (80027c0 <HAL_RCC_ClockConfig+0x364>)
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800279a:	4b0a      	ldr	r3, [pc, #40]	@ (80027c4 <HAL_RCC_ClockConfig+0x368>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fb70 	bl	8000e84 <HAL_InitTick>
 80027a4:	4603      	mov	r3, r0
 80027a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	58024400 	.word	0x58024400
 80027b8:	08009e2c 	.word	0x08009e2c
 80027bc:	24000004 	.word	0x24000004
 80027c0:	24000000 	.word	0x24000000
 80027c4:	24000008 	.word	0x24000008

080027c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b089      	sub	sp, #36	@ 0x24
 80027cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027ce:	4bb3      	ldr	r3, [pc, #716]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027d6:	2b18      	cmp	r3, #24
 80027d8:	f200 8155 	bhi.w	8002a86 <HAL_RCC_GetSysClockFreq+0x2be>
 80027dc:	a201      	add	r2, pc, #4	@ (adr r2, 80027e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80027de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e2:	bf00      	nop
 80027e4:	08002849 	.word	0x08002849
 80027e8:	08002a87 	.word	0x08002a87
 80027ec:	08002a87 	.word	0x08002a87
 80027f0:	08002a87 	.word	0x08002a87
 80027f4:	08002a87 	.word	0x08002a87
 80027f8:	08002a87 	.word	0x08002a87
 80027fc:	08002a87 	.word	0x08002a87
 8002800:	08002a87 	.word	0x08002a87
 8002804:	0800286f 	.word	0x0800286f
 8002808:	08002a87 	.word	0x08002a87
 800280c:	08002a87 	.word	0x08002a87
 8002810:	08002a87 	.word	0x08002a87
 8002814:	08002a87 	.word	0x08002a87
 8002818:	08002a87 	.word	0x08002a87
 800281c:	08002a87 	.word	0x08002a87
 8002820:	08002a87 	.word	0x08002a87
 8002824:	08002875 	.word	0x08002875
 8002828:	08002a87 	.word	0x08002a87
 800282c:	08002a87 	.word	0x08002a87
 8002830:	08002a87 	.word	0x08002a87
 8002834:	08002a87 	.word	0x08002a87
 8002838:	08002a87 	.word	0x08002a87
 800283c:	08002a87 	.word	0x08002a87
 8002840:	08002a87 	.word	0x08002a87
 8002844:	0800287b 	.word	0x0800287b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002848:	4b94      	ldr	r3, [pc, #592]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0320 	and.w	r3, r3, #32
 8002850:	2b00      	cmp	r3, #0
 8002852:	d009      	beq.n	8002868 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002854:	4b91      	ldr	r3, [pc, #580]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	08db      	lsrs	r3, r3, #3
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	4a90      	ldr	r2, [pc, #576]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002860:	fa22 f303 	lsr.w	r3, r2, r3
 8002864:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002866:	e111      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002868:	4b8d      	ldr	r3, [pc, #564]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800286a:	61bb      	str	r3, [r7, #24]
      break;
 800286c:	e10e      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800286e:	4b8d      	ldr	r3, [pc, #564]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002870:	61bb      	str	r3, [r7, #24]
      break;
 8002872:	e10b      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002874:	4b8c      	ldr	r3, [pc, #560]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002876:	61bb      	str	r3, [r7, #24]
      break;
 8002878:	e108      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800287a:	4b88      	ldr	r3, [pc, #544]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800287c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002884:	4b85      	ldr	r3, [pc, #532]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800288e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002890:	4b82      	ldr	r3, [pc, #520]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800289a:	4b80      	ldr	r3, [pc, #512]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800289c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800289e:	08db      	lsrs	r3, r3, #3
 80028a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	fb02 f303 	mul.w	r3, r2, r3
 80028aa:	ee07 3a90 	vmov	s15, r3
 80028ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 80e1 	beq.w	8002a80 <HAL_RCC_GetSysClockFreq+0x2b8>
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	f000 8083 	beq.w	80029cc <HAL_RCC_GetSysClockFreq+0x204>
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	f200 80a1 	bhi.w	8002a10 <HAL_RCC_GetSysClockFreq+0x248>
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_RCC_GetSysClockFreq+0x114>
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d056      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0x1c0>
 80028da:	e099      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028dc:	4b6f      	ldr	r3, [pc, #444]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0320 	and.w	r3, r3, #32
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d02d      	beq.n	8002944 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80028e8:	4b6c      	ldr	r3, [pc, #432]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	08db      	lsrs	r3, r3, #3
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	4a6b      	ldr	r2, [pc, #428]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80028f4:	fa22 f303 	lsr.w	r3, r2, r3
 80028f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	ee07 3a90 	vmov	s15, r3
 8002900:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	ee07 3a90 	vmov	s15, r3
 800290a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800290e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002912:	4b62      	ldr	r3, [pc, #392]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800291a:	ee07 3a90 	vmov	s15, r3
 800291e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002922:	ed97 6a02 	vldr	s12, [r7, #8]
 8002926:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002aac <HAL_RCC_GetSysClockFreq+0x2e4>
 800292a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800292e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002932:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800293a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800293e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002942:	e087      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	ee07 3a90 	vmov	s15, r3
 800294a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800294e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002ab0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002956:	4b51      	ldr	r3, [pc, #324]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800295e:	ee07 3a90 	vmov	s15, r3
 8002962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002966:	ed97 6a02 	vldr	s12, [r7, #8]
 800296a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002aac <HAL_RCC_GetSysClockFreq+0x2e4>
 800296e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800297a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800297e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002982:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002986:	e065      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	ee07 3a90 	vmov	s15, r3
 800298e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002992:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002ab4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800299a:	4b40      	ldr	r3, [pc, #256]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029a2:	ee07 3a90 	vmov	s15, r3
 80029a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80029ae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002aac <HAL_RCC_GetSysClockFreq+0x2e4>
 80029b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029ca:	e043      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	ee07 3a90 	vmov	s15, r3
 80029d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029d6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002ab8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80029da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029de:	4b2f      	ldr	r3, [pc, #188]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029e6:	ee07 3a90 	vmov	s15, r3
 80029ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80029f2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002aac <HAL_RCC_GetSysClockFreq+0x2e4>
 80029f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a0e:	e021      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	ee07 3a90 	vmov	s15, r3
 8002a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a1a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002ab4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a22:	4b1e      	ldr	r3, [pc, #120]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a2a:	ee07 3a90 	vmov	s15, r3
 8002a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a32:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a36:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002aac <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a52:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002a54:	4b11      	ldr	r3, [pc, #68]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a58:	0a5b      	lsrs	r3, r3, #9
 8002a5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a5e:	3301      	adds	r3, #1
 8002a60:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	ee07 3a90 	vmov	s15, r3
 8002a68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a78:	ee17 3a90 	vmov	r3, s15
 8002a7c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002a7e:	e005      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	61bb      	str	r3, [r7, #24]
      break;
 8002a84:	e002      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002a86:	4b07      	ldr	r3, [pc, #28]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a88:	61bb      	str	r3, [r7, #24]
      break;
 8002a8a:	bf00      	nop
  }

  return sysclockfreq;
 8002a8c:	69bb      	ldr	r3, [r7, #24]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3724      	adds	r7, #36	@ 0x24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	58024400 	.word	0x58024400
 8002aa0:	03d09000 	.word	0x03d09000
 8002aa4:	003d0900 	.word	0x003d0900
 8002aa8:	017d7840 	.word	0x017d7840
 8002aac:	46000000 	.word	0x46000000
 8002ab0:	4c742400 	.word	0x4c742400
 8002ab4:	4a742400 	.word	0x4a742400
 8002ab8:	4bbebc20 	.word	0x4bbebc20

08002abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002ac2:	f7ff fe81 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	4b10      	ldr	r3, [pc, #64]	@ (8002b0c <HAL_RCC_GetHCLKFreq+0x50>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	0a1b      	lsrs	r3, r3, #8
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	490f      	ldr	r1, [pc, #60]	@ (8002b10 <HAL_RCC_GetHCLKFreq+0x54>)
 8002ad4:	5ccb      	ldrb	r3, [r1, r3]
 8002ad6:	f003 031f 	and.w	r3, r3, #31
 8002ada:	fa22 f303 	lsr.w	r3, r2, r3
 8002ade:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8002b0c <HAL_RCC_GetHCLKFreq+0x50>)
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	f003 030f 	and.w	r3, r3, #15
 8002ae8:	4a09      	ldr	r2, [pc, #36]	@ (8002b10 <HAL_RCC_GetHCLKFreq+0x54>)
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	f003 031f 	and.w	r3, r3, #31
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	fa22 f303 	lsr.w	r3, r2, r3
 8002af6:	4a07      	ldr	r2, [pc, #28]	@ (8002b14 <HAL_RCC_GetHCLKFreq+0x58>)
 8002af8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002afa:	4a07      	ldr	r2, [pc, #28]	@ (8002b18 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002b00:	4b04      	ldr	r3, [pc, #16]	@ (8002b14 <HAL_RCC_GetHCLKFreq+0x58>)
 8002b02:	681b      	ldr	r3, [r3, #0]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	58024400 	.word	0x58024400
 8002b10:	08009e2c 	.word	0x08009e2c
 8002b14:	24000004 	.word	0x24000004
 8002b18:	24000000 	.word	0x24000000

08002b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002b20:	f7ff ffcc 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002b24:	4602      	mov	r2, r0
 8002b26:	4b06      	ldr	r3, [pc, #24]	@ (8002b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	4904      	ldr	r1, [pc, #16]	@ (8002b44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b32:	5ccb      	ldrb	r3, [r1, r3]
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	58024400 	.word	0x58024400
 8002b44:	08009e2c 	.word	0x08009e2c

08002b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002b4c:	f7ff ffb6 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002b50:	4602      	mov	r2, r0
 8002b52:	4b06      	ldr	r3, [pc, #24]	@ (8002b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	0a1b      	lsrs	r3, r3, #8
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	4904      	ldr	r1, [pc, #16]	@ (8002b70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b5e:	5ccb      	ldrb	r3, [r1, r3]
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	58024400 	.word	0x58024400
 8002b70:	08009e2c 	.word	0x08009e2c

08002b74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	223f      	movs	r2, #63	@ 0x3f
 8002b82:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b84:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf0 <HAL_RCC_GetClockConfig+0x7c>)
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	f003 0207 	and.w	r2, r3, #7
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002b90:	4b17      	ldr	r3, [pc, #92]	@ (8002bf0 <HAL_RCC_GetClockConfig+0x7c>)
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002b9c:	4b14      	ldr	r3, [pc, #80]	@ (8002bf0 <HAL_RCC_GetClockConfig+0x7c>)
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	f003 020f 	and.w	r2, r3, #15
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002ba8:	4b11      	ldr	r3, [pc, #68]	@ (8002bf0 <HAL_RCC_GetClockConfig+0x7c>)
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf0 <HAL_RCC_GetClockConfig+0x7c>)
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf0 <HAL_RCC_GetClockConfig+0x7c>)
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002bcc:	4b08      	ldr	r3, [pc, #32]	@ (8002bf0 <HAL_RCC_GetClockConfig+0x7c>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bd8:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <HAL_RCC_GetClockConfig+0x80>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 020f 	and.w	r2, r3, #15
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	601a      	str	r2, [r3, #0]
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	58024400 	.word	0x58024400
 8002bf4:	52002000 	.word	0x52002000

08002bf8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bfc:	b0ca      	sub	sp, #296	@ 0x128
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c04:	2300      	movs	r3, #0
 8002c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c18:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002c1c:	2500      	movs	r5, #0
 8002c1e:	ea54 0305 	orrs.w	r3, r4, r5
 8002c22:	d049      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c2a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002c2e:	d02f      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002c30:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002c34:	d828      	bhi.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002c36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c3a:	d01a      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002c3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c40:	d822      	bhi.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002c46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c4a:	d007      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c4c:	e01c      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c4e:	4bb8      	ldr	r3, [pc, #736]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c52:	4ab7      	ldr	r2, [pc, #732]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c5a:	e01a      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c60:	3308      	adds	r3, #8
 8002c62:	2102      	movs	r1, #2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f001 fc8f 	bl	8004588 <RCCEx_PLL2_Config>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c70:	e00f      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c76:	3328      	adds	r3, #40	@ 0x28
 8002c78:	2102      	movs	r1, #2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f001 fd36 	bl	80046ec <RCCEx_PLL3_Config>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c86:	e004      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c8e:	e000      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002c90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10a      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002c9a:	4ba5      	ldr	r3, [pc, #660]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c9e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ca6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ca8:	4aa1      	ldr	r2, [pc, #644]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002caa:	430b      	orrs	r3, r1
 8002cac:	6513      	str	r3, [r2, #80]	@ 0x50
 8002cae:	e003      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002cc4:	f04f 0900 	mov.w	r9, #0
 8002cc8:	ea58 0309 	orrs.w	r3, r8, r9
 8002ccc:	d047      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d82a      	bhi.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cde:	bf00      	nop
 8002ce0:	08002cf5 	.word	0x08002cf5
 8002ce4:	08002d03 	.word	0x08002d03
 8002ce8:	08002d19 	.word	0x08002d19
 8002cec:	08002d37 	.word	0x08002d37
 8002cf0:	08002d37 	.word	0x08002d37
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cf4:	4b8e      	ldr	r3, [pc, #568]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf8:	4a8d      	ldr	r2, [pc, #564]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d00:	e01a      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d06:	3308      	adds	r3, #8
 8002d08:	2100      	movs	r1, #0
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f001 fc3c 	bl	8004588 <RCCEx_PLL2_Config>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d16:	e00f      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d1c:	3328      	adds	r3, #40	@ 0x28
 8002d1e:	2100      	movs	r1, #0
 8002d20:	4618      	mov	r0, r3
 8002d22:	f001 fce3 	bl	80046ec <RCCEx_PLL3_Config>
 8002d26:	4603      	mov	r3, r0
 8002d28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d2c:	e004      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d34:	e000      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002d36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10a      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d40:	4b7b      	ldr	r3, [pc, #492]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d44:	f023 0107 	bic.w	r1, r3, #7
 8002d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d4e:	4a78      	ldr	r2, [pc, #480]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d50:	430b      	orrs	r3, r1
 8002d52:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d54:	e003      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d66:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002d6a:	f04f 0b00 	mov.w	fp, #0
 8002d6e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002d72:	d04c      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d7e:	d030      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002d80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d84:	d829      	bhi.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d86:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d88:	d02d      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002d8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d8c:	d825      	bhi.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d8e:	2b80      	cmp	r3, #128	@ 0x80
 8002d90:	d018      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002d92:	2b80      	cmp	r3, #128	@ 0x80
 8002d94:	d821      	bhi.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002d9a:	2b40      	cmp	r3, #64	@ 0x40
 8002d9c:	d007      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002d9e:	e01c      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002da0:	4b63      	ldr	r3, [pc, #396]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da4:	4a62      	ldr	r2, [pc, #392]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002da6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002daa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002dac:	e01c      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002db2:	3308      	adds	r3, #8
 8002db4:	2100      	movs	r1, #0
 8002db6:	4618      	mov	r0, r3
 8002db8:	f001 fbe6 	bl	8004588 <RCCEx_PLL2_Config>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002dc2:	e011      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dc8:	3328      	adds	r3, #40	@ 0x28
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f001 fc8d 	bl	80046ec <RCCEx_PLL3_Config>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002dd8:	e006      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002de0:	e002      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002de2:	bf00      	nop
 8002de4:	e000      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002de8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10a      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002df0:	4b4f      	ldr	r3, [pc, #316]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002df2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002df4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dfe:	4a4c      	ldr	r2, [pc, #304]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e00:	430b      	orrs	r3, r1
 8002e02:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e04:	e003      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e16:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002e1a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002e24:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	d053      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002e36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e3a:	d035      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002e3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e40:	d82e      	bhi.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002e42:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002e46:	d031      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002e48:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002e4c:	d828      	bhi.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002e4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e52:	d01a      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002e54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e58:	d822      	bhi.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002e5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e62:	d007      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002e64:	e01c      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e66:	4b32      	ldr	r3, [pc, #200]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6a:	4a31      	ldr	r2, [pc, #196]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e72:	e01c      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e78:	3308      	adds	r3, #8
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f001 fb83 	bl	8004588 <RCCEx_PLL2_Config>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002e88:	e011      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e8e:	3328      	adds	r3, #40	@ 0x28
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f001 fc2a 	bl	80046ec <RCCEx_PLL3_Config>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e9e:	e006      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ea6:	e002      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002ea8:	bf00      	nop
 8002eaa:	e000      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002eac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10b      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eba:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002ec6:	4a1a      	ldr	r2, [pc, #104]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ecc:	e003      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ed2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ede:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002ee2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002eec:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	d056      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002efa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002efe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f02:	d038      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002f04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f08:	d831      	bhi.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f0a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f0e:	d034      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002f10:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f14:	d82b      	bhi.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f1a:	d01d      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002f1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f20:	d825      	bhi.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d006      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002f26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f2a:	d00a      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002f2c:	e01f      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002f2e:	bf00      	nop
 8002f30:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f34:	4ba2      	ldr	r3, [pc, #648]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f38:	4aa1      	ldr	r2, [pc, #644]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f40:	e01c      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f46:	3308      	adds	r3, #8
 8002f48:	2100      	movs	r1, #0
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f001 fb1c 	bl	8004588 <RCCEx_PLL2_Config>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002f56:	e011      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f5c:	3328      	adds	r3, #40	@ 0x28
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f001 fbc3 	bl	80046ec <RCCEx_PLL3_Config>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f6c:	e006      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f74:	e002      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002f76:	bf00      	nop
 8002f78:	e000      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002f7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10b      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002f84:	4b8e      	ldr	r3, [pc, #568]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f88:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002f94:	4a8a      	ldr	r2, [pc, #552]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f96:	430b      	orrs	r3, r1
 8002f98:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f9a:	e003      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fa0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002fb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002fba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	d03a      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fca:	2b30      	cmp	r3, #48	@ 0x30
 8002fcc:	d01f      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002fce:	2b30      	cmp	r3, #48	@ 0x30
 8002fd0:	d819      	bhi.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002fd2:	2b20      	cmp	r3, #32
 8002fd4:	d00c      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	d815      	bhi.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d019      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002fde:	2b10      	cmp	r3, #16
 8002fe0:	d111      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fe2:	4b77      	ldr	r3, [pc, #476]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe6:	4a76      	ldr	r2, [pc, #472]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002fee:	e011      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ff4:	3308      	adds	r3, #8
 8002ff6:	2102      	movs	r1, #2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f001 fac5 	bl	8004588 <RCCEx_PLL2_Config>
 8002ffe:	4603      	mov	r3, r0
 8003000:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003004:	e006      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800300c:	e002      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800300e:	bf00      	nop
 8003010:	e000      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003012:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003014:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10a      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800301c:	4b68      	ldr	r3, [pc, #416]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800301e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003020:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800302a:	4a65      	ldr	r2, [pc, #404]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800302c:	430b      	orrs	r3, r1
 800302e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003030:	e003      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800303a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800303e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003042:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003046:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800304a:	2300      	movs	r3, #0
 800304c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003050:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003054:	460b      	mov	r3, r1
 8003056:	4313      	orrs	r3, r2
 8003058:	d051      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800305a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800305e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003060:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003064:	d035      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003066:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800306a:	d82e      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800306c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003070:	d031      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003072:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003076:	d828      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003078:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800307c:	d01a      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800307e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003082:	d822      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003088:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800308c:	d007      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800308e:	e01c      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003090:	4b4b      	ldr	r3, [pc, #300]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003094:	4a4a      	ldr	r2, [pc, #296]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003096:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800309a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800309c:	e01c      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800309e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030a2:	3308      	adds	r3, #8
 80030a4:	2100      	movs	r1, #0
 80030a6:	4618      	mov	r0, r3
 80030a8:	f001 fa6e 	bl	8004588 <RCCEx_PLL2_Config>
 80030ac:	4603      	mov	r3, r0
 80030ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80030b2:	e011      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b8:	3328      	adds	r3, #40	@ 0x28
 80030ba:	2100      	movs	r1, #0
 80030bc:	4618      	mov	r0, r3
 80030be:	f001 fb15 	bl	80046ec <RCCEx_PLL3_Config>
 80030c2:	4603      	mov	r3, r0
 80030c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80030c8:	e006      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030d0:	e002      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80030d2:	bf00      	nop
 80030d4:	e000      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80030d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10a      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80030e0:	4b37      	ldr	r3, [pc, #220]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030e4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80030e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ee:	4a34      	ldr	r2, [pc, #208]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030f0:	430b      	orrs	r3, r1
 80030f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80030f4:	e003      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80030fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003106:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800310a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800310e:	2300      	movs	r3, #0
 8003110:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003114:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003118:	460b      	mov	r3, r1
 800311a:	4313      	orrs	r3, r2
 800311c:	d056      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800311e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003124:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003128:	d033      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800312a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800312e:	d82c      	bhi.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003130:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003134:	d02f      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003136:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800313a:	d826      	bhi.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800313c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003140:	d02b      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003142:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003146:	d820      	bhi.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003148:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800314c:	d012      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800314e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003152:	d81a      	bhi.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003154:	2b00      	cmp	r3, #0
 8003156:	d022      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800315c:	d115      	bne.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800315e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003162:	3308      	adds	r3, #8
 8003164:	2101      	movs	r1, #1
 8003166:	4618      	mov	r0, r3
 8003168:	f001 fa0e 	bl	8004588 <RCCEx_PLL2_Config>
 800316c:	4603      	mov	r3, r0
 800316e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003172:	e015      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003178:	3328      	adds	r3, #40	@ 0x28
 800317a:	2101      	movs	r1, #1
 800317c:	4618      	mov	r0, r3
 800317e:	f001 fab5 	bl	80046ec <RCCEx_PLL3_Config>
 8003182:	4603      	mov	r3, r0
 8003184:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003188:	e00a      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003190:	e006      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003192:	bf00      	nop
 8003194:	e004      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003196:	bf00      	nop
 8003198:	e002      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800319a:	bf00      	nop
 800319c:	e000      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800319e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10d      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80031a8:	4b05      	ldr	r3, [pc, #20]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80031b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031b6:	4a02      	ldr	r2, [pc, #8]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031b8:	430b      	orrs	r3, r1
 80031ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80031bc:	e006      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80031be:	bf00      	nop
 80031c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80031cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80031d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80031dc:	2300      	movs	r3, #0
 80031de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80031e2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4313      	orrs	r3, r2
 80031ea:	d055      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80031ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80031f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031f8:	d033      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80031fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031fe:	d82c      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003204:	d02f      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800320a:	d826      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800320c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003210:	d02b      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003212:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003216:	d820      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003218:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800321c:	d012      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800321e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003222:	d81a      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003224:	2b00      	cmp	r3, #0
 8003226:	d022      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003228:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800322c:	d115      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800322e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003232:	3308      	adds	r3, #8
 8003234:	2101      	movs	r1, #1
 8003236:	4618      	mov	r0, r3
 8003238:	f001 f9a6 	bl	8004588 <RCCEx_PLL2_Config>
 800323c:	4603      	mov	r3, r0
 800323e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003242:	e015      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003248:	3328      	adds	r3, #40	@ 0x28
 800324a:	2101      	movs	r1, #1
 800324c:	4618      	mov	r0, r3
 800324e:	f001 fa4d 	bl	80046ec <RCCEx_PLL3_Config>
 8003252:	4603      	mov	r3, r0
 8003254:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003258:	e00a      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003260:	e006      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003262:	bf00      	nop
 8003264:	e004      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003266:	bf00      	nop
 8003268:	e002      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800326a:	bf00      	nop
 800326c:	e000      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800326e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003270:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10b      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003278:	4ba3      	ldr	r3, [pc, #652]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800327a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003284:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003288:	4a9f      	ldr	r2, [pc, #636]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800328a:	430b      	orrs	r3, r1
 800328c:	6593      	str	r3, [r2, #88]	@ 0x58
 800328e:	e003      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003290:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003294:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800329c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80032a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80032a8:	2300      	movs	r3, #0
 80032aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80032ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80032b2:	460b      	mov	r3, r1
 80032b4:	4313      	orrs	r3, r2
 80032b6:	d037      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80032b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032c2:	d00e      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80032c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032c8:	d816      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d018      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80032ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032d2:	d111      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032d4:	4b8c      	ldr	r3, [pc, #560]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d8:	4a8b      	ldr	r2, [pc, #556]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80032e0:	e00f      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e6:	3308      	adds	r3, #8
 80032e8:	2101      	movs	r1, #1
 80032ea:	4618      	mov	r0, r3
 80032ec:	f001 f94c 	bl	8004588 <RCCEx_PLL2_Config>
 80032f0:	4603      	mov	r3, r0
 80032f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80032f6:	e004      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032fe:	e000      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10a      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800330a:	4b7f      	ldr	r3, [pc, #508]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800330c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800330e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003318:	4a7b      	ldr	r2, [pc, #492]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800331a:	430b      	orrs	r3, r1
 800331c:	6513      	str	r3, [r2, #80]	@ 0x50
 800331e:	e003      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003320:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003324:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800332c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003330:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003334:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003338:	2300      	movs	r3, #0
 800333a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800333e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003342:	460b      	mov	r3, r1
 8003344:	4313      	orrs	r3, r2
 8003346:	d039      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800334c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800334e:	2b03      	cmp	r3, #3
 8003350:	d81c      	bhi.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003352:	a201      	add	r2, pc, #4	@ (adr r2, 8003358 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003358:	08003395 	.word	0x08003395
 800335c:	08003369 	.word	0x08003369
 8003360:	08003377 	.word	0x08003377
 8003364:	08003395 	.word	0x08003395
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003368:	4b67      	ldr	r3, [pc, #412]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800336a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336c:	4a66      	ldr	r2, [pc, #408]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800336e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003372:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003374:	e00f      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800337a:	3308      	adds	r3, #8
 800337c:	2102      	movs	r1, #2
 800337e:	4618      	mov	r0, r3
 8003380:	f001 f902 	bl	8004588 <RCCEx_PLL2_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800338a:	e004      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003392:	e000      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10a      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800339e:	4b5a      	ldr	r3, [pc, #360]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033a2:	f023 0103 	bic.w	r1, r3, #3
 80033a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ac:	4a56      	ldr	r2, [pc, #344]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033ae:	430b      	orrs	r3, r1
 80033b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033b2:	e003      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80033c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033cc:	2300      	movs	r3, #0
 80033ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80033d2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80033d6:	460b      	mov	r3, r1
 80033d8:	4313      	orrs	r3, r2
 80033da:	f000 809f 	beq.w	800351c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033de:	4b4b      	ldr	r3, [pc, #300]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a4a      	ldr	r2, [pc, #296]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80033e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033ea:	f7fd ff11 	bl	8001210 <HAL_GetTick>
 80033ee:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033f2:	e00b      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f4:	f7fd ff0c 	bl	8001210 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b64      	cmp	r3, #100	@ 0x64
 8003402:	d903      	bls.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800340a:	e005      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800340c:	4b3f      	ldr	r3, [pc, #252]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0ed      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003418:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800341c:	2b00      	cmp	r3, #0
 800341e:	d179      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003420:	4b39      	ldr	r3, [pc, #228]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003422:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003428:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800342c:	4053      	eors	r3, r2
 800342e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003432:	2b00      	cmp	r3, #0
 8003434:	d015      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003436:	4b34      	ldr	r3, [pc, #208]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800343e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003442:	4b31      	ldr	r3, [pc, #196]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003446:	4a30      	ldr	r2, [pc, #192]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003448:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800344c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800344e:	4b2e      	ldr	r3, [pc, #184]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003452:	4a2d      	ldr	r2, [pc, #180]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003454:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003458:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800345a:	4a2b      	ldr	r2, [pc, #172]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800345c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003460:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003466:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800346a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800346e:	d118      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003470:	f7fd fece 	bl	8001210 <HAL_GetTick>
 8003474:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003478:	e00d      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347a:	f7fd fec9 	bl	8001210 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003484:	1ad2      	subs	r2, r2, r3
 8003486:	f241 3388 	movw	r3, #5000	@ 0x1388
 800348a:	429a      	cmp	r2, r3
 800348c:	d903      	bls.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003494:	e005      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003496:	4b1c      	ldr	r3, [pc, #112]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0eb      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80034a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d129      	bne.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80034b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034ba:	d10e      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80034bc:	4b12      	ldr	r3, [pc, #72]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80034c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80034cc:	091a      	lsrs	r2, r3, #4
 80034ce:	4b10      	ldr	r3, [pc, #64]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80034d0:	4013      	ands	r3, r2
 80034d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034d4:	430b      	orrs	r3, r1
 80034d6:	6113      	str	r3, [r2, #16]
 80034d8:	e005      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80034da:	4b0b      	ldr	r3, [pc, #44]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	4a0a      	ldr	r2, [pc, #40]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80034e4:	6113      	str	r3, [r2, #16]
 80034e6:	4b08      	ldr	r3, [pc, #32]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034e8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80034ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80034f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f6:	4a04      	ldr	r2, [pc, #16]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034f8:	430b      	orrs	r3, r1
 80034fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80034fc:	e00e      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003502:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003506:	e009      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003508:	58024400 	.word	0x58024400
 800350c:	58024800 	.word	0x58024800
 8003510:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003514:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003518:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800351c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	f002 0301 	and.w	r3, r2, #1
 8003528:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800352c:	2300      	movs	r3, #0
 800352e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003532:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003536:	460b      	mov	r3, r1
 8003538:	4313      	orrs	r3, r2
 800353a:	f000 8089 	beq.w	8003650 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800353e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003542:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003544:	2b28      	cmp	r3, #40	@ 0x28
 8003546:	d86b      	bhi.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003548:	a201      	add	r2, pc, #4	@ (adr r2, 8003550 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800354a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354e:	bf00      	nop
 8003550:	08003629 	.word	0x08003629
 8003554:	08003621 	.word	0x08003621
 8003558:	08003621 	.word	0x08003621
 800355c:	08003621 	.word	0x08003621
 8003560:	08003621 	.word	0x08003621
 8003564:	08003621 	.word	0x08003621
 8003568:	08003621 	.word	0x08003621
 800356c:	08003621 	.word	0x08003621
 8003570:	080035f5 	.word	0x080035f5
 8003574:	08003621 	.word	0x08003621
 8003578:	08003621 	.word	0x08003621
 800357c:	08003621 	.word	0x08003621
 8003580:	08003621 	.word	0x08003621
 8003584:	08003621 	.word	0x08003621
 8003588:	08003621 	.word	0x08003621
 800358c:	08003621 	.word	0x08003621
 8003590:	0800360b 	.word	0x0800360b
 8003594:	08003621 	.word	0x08003621
 8003598:	08003621 	.word	0x08003621
 800359c:	08003621 	.word	0x08003621
 80035a0:	08003621 	.word	0x08003621
 80035a4:	08003621 	.word	0x08003621
 80035a8:	08003621 	.word	0x08003621
 80035ac:	08003621 	.word	0x08003621
 80035b0:	08003629 	.word	0x08003629
 80035b4:	08003621 	.word	0x08003621
 80035b8:	08003621 	.word	0x08003621
 80035bc:	08003621 	.word	0x08003621
 80035c0:	08003621 	.word	0x08003621
 80035c4:	08003621 	.word	0x08003621
 80035c8:	08003621 	.word	0x08003621
 80035cc:	08003621 	.word	0x08003621
 80035d0:	08003629 	.word	0x08003629
 80035d4:	08003621 	.word	0x08003621
 80035d8:	08003621 	.word	0x08003621
 80035dc:	08003621 	.word	0x08003621
 80035e0:	08003621 	.word	0x08003621
 80035e4:	08003621 	.word	0x08003621
 80035e8:	08003621 	.word	0x08003621
 80035ec:	08003621 	.word	0x08003621
 80035f0:	08003629 	.word	0x08003629
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f8:	3308      	adds	r3, #8
 80035fa:	2101      	movs	r1, #1
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 ffc3 	bl	8004588 <RCCEx_PLL2_Config>
 8003602:	4603      	mov	r3, r0
 8003604:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003608:	e00f      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800360a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800360e:	3328      	adds	r3, #40	@ 0x28
 8003610:	2101      	movs	r1, #1
 8003612:	4618      	mov	r0, r3
 8003614:	f001 f86a 	bl	80046ec <RCCEx_PLL3_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800361e:	e004      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003626:	e000      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800362a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10a      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003632:	4bbf      	ldr	r3, [pc, #764]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003636:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800363a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800363e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003640:	4abb      	ldr	r2, [pc, #748]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003642:	430b      	orrs	r3, r1
 8003644:	6553      	str	r3, [r2, #84]	@ 0x54
 8003646:	e003      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003648:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800364c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003658:	f002 0302 	and.w	r3, r2, #2
 800365c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003660:	2300      	movs	r3, #0
 8003662:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003666:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800366a:	460b      	mov	r3, r1
 800366c:	4313      	orrs	r3, r2
 800366e:	d041      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003674:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003676:	2b05      	cmp	r3, #5
 8003678:	d824      	bhi.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800367a:	a201      	add	r2, pc, #4	@ (adr r2, 8003680 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800367c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003680:	080036cd 	.word	0x080036cd
 8003684:	08003699 	.word	0x08003699
 8003688:	080036af 	.word	0x080036af
 800368c:	080036cd 	.word	0x080036cd
 8003690:	080036cd 	.word	0x080036cd
 8003694:	080036cd 	.word	0x080036cd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369c:	3308      	adds	r3, #8
 800369e:	2101      	movs	r1, #1
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 ff71 	bl	8004588 <RCCEx_PLL2_Config>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80036ac:	e00f      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b2:	3328      	adds	r3, #40	@ 0x28
 80036b4:	2101      	movs	r1, #1
 80036b6:	4618      	mov	r0, r3
 80036b8:	f001 f818 	bl	80046ec <RCCEx_PLL3_Config>
 80036bc:	4603      	mov	r3, r0
 80036be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80036c2:	e004      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036ca:	e000      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80036cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10a      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80036d6:	4b96      	ldr	r3, [pc, #600]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80036d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036da:	f023 0107 	bic.w	r1, r3, #7
 80036de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036e4:	4a92      	ldr	r2, [pc, #584]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80036e6:	430b      	orrs	r3, r1
 80036e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80036ea:	e003      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fc:	f002 0304 	and.w	r3, r2, #4
 8003700:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003704:	2300      	movs	r3, #0
 8003706:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800370a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800370e:	460b      	mov	r3, r1
 8003710:	4313      	orrs	r3, r2
 8003712:	d044      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003718:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800371c:	2b05      	cmp	r3, #5
 800371e:	d825      	bhi.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003720:	a201      	add	r2, pc, #4	@ (adr r2, 8003728 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003726:	bf00      	nop
 8003728:	08003775 	.word	0x08003775
 800372c:	08003741 	.word	0x08003741
 8003730:	08003757 	.word	0x08003757
 8003734:	08003775 	.word	0x08003775
 8003738:	08003775 	.word	0x08003775
 800373c:	08003775 	.word	0x08003775
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003744:	3308      	adds	r3, #8
 8003746:	2101      	movs	r1, #1
 8003748:	4618      	mov	r0, r3
 800374a:	f000 ff1d 	bl	8004588 <RCCEx_PLL2_Config>
 800374e:	4603      	mov	r3, r0
 8003750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003754:	e00f      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375a:	3328      	adds	r3, #40	@ 0x28
 800375c:	2101      	movs	r1, #1
 800375e:	4618      	mov	r0, r3
 8003760:	f000 ffc4 	bl	80046ec <RCCEx_PLL3_Config>
 8003764:	4603      	mov	r3, r0
 8003766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800376a:	e004      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003772:	e000      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10b      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800377e:	4b6c      	ldr	r3, [pc, #432]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003782:	f023 0107 	bic.w	r1, r3, #7
 8003786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800378e:	4a68      	ldr	r2, [pc, #416]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003790:	430b      	orrs	r3, r1
 8003792:	6593      	str	r3, [r2, #88]	@ 0x58
 8003794:	e003      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800379a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800379e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a6:	f002 0320 	and.w	r3, r2, #32
 80037aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80037ae:	2300      	movs	r3, #0
 80037b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80037b8:	460b      	mov	r3, r1
 80037ba:	4313      	orrs	r3, r2
 80037bc:	d055      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80037be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037ca:	d033      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80037cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037d0:	d82c      	bhi.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80037d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d6:	d02f      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80037d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037dc:	d826      	bhi.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80037de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037e2:	d02b      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80037e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037e8:	d820      	bhi.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80037ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037ee:	d012      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80037f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037f4:	d81a      	bhi.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d022      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80037fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037fe:	d115      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003804:	3308      	adds	r3, #8
 8003806:	2100      	movs	r1, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f000 febd 	bl	8004588 <RCCEx_PLL2_Config>
 800380e:	4603      	mov	r3, r0
 8003810:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003814:	e015      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381a:	3328      	adds	r3, #40	@ 0x28
 800381c:	2102      	movs	r1, #2
 800381e:	4618      	mov	r0, r3
 8003820:	f000 ff64 	bl	80046ec <RCCEx_PLL3_Config>
 8003824:	4603      	mov	r3, r0
 8003826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800382a:	e00a      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003832:	e006      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003834:	bf00      	nop
 8003836:	e004      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003838:	bf00      	nop
 800383a:	e002      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800383c:	bf00      	nop
 800383e:	e000      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003842:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10b      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800384a:	4b39      	ldr	r3, [pc, #228]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800384c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800384e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800385a:	4a35      	ldr	r2, [pc, #212]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800385c:	430b      	orrs	r3, r1
 800385e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003860:	e003      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003866:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800386a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800386e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003872:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003876:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800387a:	2300      	movs	r3, #0
 800387c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003880:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003884:	460b      	mov	r3, r1
 8003886:	4313      	orrs	r3, r2
 8003888:	d058      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800388a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003892:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003896:	d033      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003898:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800389c:	d82c      	bhi.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800389e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038a2:	d02f      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80038a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038a8:	d826      	bhi.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80038aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038ae:	d02b      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80038b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038b4:	d820      	bhi.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80038b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038ba:	d012      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80038bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038c0:	d81a      	bhi.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d022      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80038c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ca:	d115      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d0:	3308      	adds	r3, #8
 80038d2:	2100      	movs	r1, #0
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 fe57 	bl	8004588 <RCCEx_PLL2_Config>
 80038da:	4603      	mov	r3, r0
 80038dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80038e0:	e015      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e6:	3328      	adds	r3, #40	@ 0x28
 80038e8:	2102      	movs	r1, #2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fefe 	bl	80046ec <RCCEx_PLL3_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80038f6:	e00a      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038fe:	e006      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003900:	bf00      	nop
 8003902:	e004      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003904:	bf00      	nop
 8003906:	e002      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003908:	bf00      	nop
 800390a:	e000      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800390c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800390e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10e      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003916:	4b06      	ldr	r3, [pc, #24]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800391a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800391e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003922:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003926:	4a02      	ldr	r2, [pc, #8]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003928:	430b      	orrs	r3, r1
 800392a:	6593      	str	r3, [r2, #88]	@ 0x58
 800392c:	e006      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800392e:	bf00      	nop
 8003930:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003934:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003938:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800393c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003944:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003948:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800394c:	2300      	movs	r3, #0
 800394e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003952:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003956:	460b      	mov	r3, r1
 8003958:	4313      	orrs	r3, r2
 800395a:	d055      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800395c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003960:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003964:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003968:	d033      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800396a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800396e:	d82c      	bhi.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003970:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003974:	d02f      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003976:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800397a:	d826      	bhi.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800397c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003980:	d02b      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003982:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003986:	d820      	bhi.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003988:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800398c:	d012      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800398e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003992:	d81a      	bhi.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003994:	2b00      	cmp	r3, #0
 8003996:	d022      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003998:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800399c:	d115      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800399e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a2:	3308      	adds	r3, #8
 80039a4:	2100      	movs	r1, #0
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fdee 	bl	8004588 <RCCEx_PLL2_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80039b2:	e015      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b8:	3328      	adds	r3, #40	@ 0x28
 80039ba:	2102      	movs	r1, #2
 80039bc:	4618      	mov	r0, r3
 80039be:	f000 fe95 	bl	80046ec <RCCEx_PLL3_Config>
 80039c2:	4603      	mov	r3, r0
 80039c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80039c8:	e00a      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039d0:	e006      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80039d2:	bf00      	nop
 80039d4:	e004      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80039d6:	bf00      	nop
 80039d8:	e002      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80039da:	bf00      	nop
 80039dc:	e000      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80039de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10b      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80039e8:	4ba1      	ldr	r3, [pc, #644]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ec:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80039f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80039f8:	4a9d      	ldr	r2, [pc, #628]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039fa:	430b      	orrs	r3, r1
 80039fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80039fe:	e003      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a10:	f002 0308 	and.w	r3, r2, #8
 8003a14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a1e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003a22:	460b      	mov	r3, r1
 8003a24:	4313      	orrs	r3, r2
 8003a26:	d01e      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a34:	d10c      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3a:	3328      	adds	r3, #40	@ 0x28
 8003a3c:	2102      	movs	r1, #2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fe54 	bl	80046ec <RCCEx_PLL3_Config>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003a50:	4b87      	ldr	r3, [pc, #540]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a54:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a60:	4a83      	ldr	r2, [pc, #524]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a62:	430b      	orrs	r3, r1
 8003a64:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6e:	f002 0310 	and.w	r3, r2, #16
 8003a72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a76:	2300      	movs	r3, #0
 8003a78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003a7c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003a80:	460b      	mov	r3, r1
 8003a82:	4313      	orrs	r3, r2
 8003a84:	d01e      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a92:	d10c      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a98:	3328      	adds	r3, #40	@ 0x28
 8003a9a:	2102      	movs	r1, #2
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fe25 	bl	80046ec <RCCEx_PLL3_Config>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003aae:	4b70      	ldr	r3, [pc, #448]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003abe:	4a6c      	ldr	r2, [pc, #432]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003acc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003ad0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ada:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	d03e      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003aec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003af0:	d022      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003af2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003af6:	d81b      	bhi.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b00:	d00b      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003b02:	e015      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b08:	3308      	adds	r3, #8
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fd3b 	bl	8004588 <RCCEx_PLL2_Config>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003b18:	e00f      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1e:	3328      	adds	r3, #40	@ 0x28
 8003b20:	2102      	movs	r1, #2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fde2 	bl	80046ec <RCCEx_PLL3_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003b2e:	e004      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b36:	e000      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10b      	bne.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b42:	4b4b      	ldr	r3, [pc, #300]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b46:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003b52:	4a47      	ldr	r2, [pc, #284]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b54:	430b      	orrs	r3, r1
 8003b56:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b58:	e003      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003b6e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b70:	2300      	movs	r3, #0
 8003b72:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b74:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	d03b      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b8a:	d01f      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003b8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b90:	d818      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003b92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b96:	d003      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003b98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b9c:	d007      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003b9e:	e011      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ba0:	4b33      	ldr	r3, [pc, #204]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba4:	4a32      	ldr	r2, [pc, #200]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ba6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003baa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003bac:	e00f      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb2:	3328      	adds	r3, #40	@ 0x28
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 fd98 	bl	80046ec <RCCEx_PLL3_Config>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003bc2:	e004      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bca:	e000      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10b      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bd6:	4b26      	ldr	r3, [pc, #152]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bda:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be6:	4a22      	ldr	r2, [pc, #136]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6553      	str	r3, [r2, #84]	@ 0x54
 8003bec:	e003      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003c02:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c04:	2300      	movs	r3, #0
 8003c06:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c08:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	d034      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c20:	d007      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003c22:	e011      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c24:	4b12      	ldr	r3, [pc, #72]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c28:	4a11      	ldr	r2, [pc, #68]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003c30:	e00e      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c36:	3308      	adds	r3, #8
 8003c38:	2102      	movs	r1, #2
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fca4 	bl	8004588 <RCCEx_PLL2_Config>
 8003c40:	4603      	mov	r3, r0
 8003c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003c46:	e003      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10d      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003c58:	4b05      	ldr	r3, [pc, #20]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c5c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c66:	4a02      	ldr	r2, [pc, #8]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c6c:	e006      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003c6e:	bf00      	nop
 8003c70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c84:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003c88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c8e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003c92:	460b      	mov	r3, r1
 8003c94:	4313      	orrs	r3, r2
 8003c96:	d00c      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9c:	3328      	adds	r3, #40	@ 0x28
 8003c9e:	2102      	movs	r1, #2
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 fd23 	bl	80046ec <RCCEx_PLL3_Config>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003cbe:	663b      	str	r3, [r7, #96]	@ 0x60
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003cc4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003cc8:	460b      	mov	r3, r1
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	d038      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cda:	d018      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003cdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ce0:	d811      	bhi.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003ce2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ce6:	d014      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003ce8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cec:	d80b      	bhi.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d011      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003cf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cf6:	d106      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cf8:	4bc3      	ldr	r3, [pc, #780]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfc:	4ac2      	ldr	r2, [pc, #776]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003d04:	e008      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d0c:	e004      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003d0e:	bf00      	nop
 8003d10:	e002      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003d12:	bf00      	nop
 8003d14:	e000      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003d16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10b      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d20:	4bb9      	ldr	r3, [pc, #740]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d24:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d30:	4ab5      	ldr	r2, [pc, #724]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d32:	430b      	orrs	r3, r1
 8003d34:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d36:	e003      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d48:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003d4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d4e:	2300      	movs	r3, #0
 8003d50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d52:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003d56:	460b      	mov	r3, r1
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	d009      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d5c:	4baa      	ldr	r3, [pc, #680]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d6a:	4aa7      	ldr	r2, [pc, #668]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d6c:	430b      	orrs	r3, r1
 8003d6e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d78:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003d7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d7e:	2300      	movs	r3, #0
 8003d80:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d82:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003d86:	460b      	mov	r3, r1
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	d00a      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003d8c:	4b9e      	ldr	r3, [pc, #632]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003d9c:	4a9a      	ldr	r2, [pc, #616]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d9e:	430b      	orrs	r3, r1
 8003da0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003daa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003dae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003db0:	2300      	movs	r3, #0
 8003db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003db4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003db8:	460b      	mov	r3, r1
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	d009      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003dbe:	4b92      	ldr	r3, [pc, #584]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dc2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dcc:	4a8e      	ldr	r2, [pc, #568]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dda:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003dde:	643b      	str	r3, [r7, #64]	@ 0x40
 8003de0:	2300      	movs	r3, #0
 8003de2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003de4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003de8:	460b      	mov	r3, r1
 8003dea:	4313      	orrs	r3, r2
 8003dec:	d00e      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003dee:	4b86      	ldr	r3, [pc, #536]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	4a85      	ldr	r2, [pc, #532]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003df4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003df8:	6113      	str	r3, [r2, #16]
 8003dfa:	4b83      	ldr	r3, [pc, #524]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dfc:	6919      	ldr	r1, [r3, #16]
 8003dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003e06:	4a80      	ldr	r2, [pc, #512]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e14:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003e18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e1e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003e22:	460b      	mov	r3, r1
 8003e24:	4313      	orrs	r3, r2
 8003e26:	d009      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003e28:	4b77      	ldr	r3, [pc, #476]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e2c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e36:	4a74      	ldr	r2, [pc, #464]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e44:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003e48:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e4e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003e52:	460b      	mov	r3, r1
 8003e54:	4313      	orrs	r3, r2
 8003e56:	d00a      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e58:	4b6b      	ldr	r3, [pc, #428]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e5c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e68:	4a67      	ldr	r2, [pc, #412]	@ (8004008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e6a:	430b      	orrs	r3, r1
 8003e6c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e76:	2100      	movs	r1, #0
 8003e78:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e80:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003e84:	460b      	mov	r3, r1
 8003e86:	4313      	orrs	r3, r2
 8003e88:	d011      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8e:	3308      	adds	r3, #8
 8003e90:	2100      	movs	r1, #0
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fb78 	bl	8004588 <RCCEx_PLL2_Config>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	6239      	str	r1, [r7, #32]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ec0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	d011      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ece:	3308      	adds	r3, #8
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fb58 	bl	8004588 <RCCEx_PLL2_Config>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	61b9      	str	r1, [r7, #24]
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	61fb      	str	r3, [r7, #28]
 8003f00:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003f04:	460b      	mov	r3, r1
 8003f06:	4313      	orrs	r3, r2
 8003f08:	d011      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0e:	3308      	adds	r3, #8
 8003f10:	2102      	movs	r1, #2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fb38 	bl	8004588 <RCCEx_PLL2_Config>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f36:	2100      	movs	r1, #0
 8003f38:	6139      	str	r1, [r7, #16]
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003f44:	460b      	mov	r3, r1
 8003f46:	4313      	orrs	r3, r2
 8003f48:	d011      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4e:	3328      	adds	r3, #40	@ 0x28
 8003f50:	2100      	movs	r1, #0
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fbca 	bl	80046ec <RCCEx_PLL3_Config>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f76:	2100      	movs	r1, #0
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	f003 0310 	and.w	r3, r3, #16
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003f84:	460b      	mov	r3, r1
 8003f86:	4313      	orrs	r3, r2
 8003f88:	d011      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f8e:	3328      	adds	r3, #40	@ 0x28
 8003f90:	2101      	movs	r1, #1
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fbaa 	bl	80046ec <RCCEx_PLL3_Config>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003faa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	6039      	str	r1, [r7, #0]
 8003fba:	f003 0320 	and.w	r3, r3, #32
 8003fbe:	607b      	str	r3, [r7, #4]
 8003fc0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	d011      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fce:	3328      	adds	r3, #40	@ 0x28
 8003fd0:	2102      	movs	r1, #2
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fb8a 	bl	80046ec <RCCEx_PLL3_Config>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003fee:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	e000      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004002:	46bd      	mov	sp, r7
 8004004:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004008:	58024400 	.word	0x58024400

0800400c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004010:	f7fe fd54 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8004014:	4602      	mov	r2, r0
 8004016:	4b06      	ldr	r3, [pc, #24]	@ (8004030 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	091b      	lsrs	r3, r3, #4
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	4904      	ldr	r1, [pc, #16]	@ (8004034 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004022:	5ccb      	ldrb	r3, [r1, r3]
 8004024:	f003 031f 	and.w	r3, r3, #31
 8004028:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800402c:	4618      	mov	r0, r3
 800402e:	bd80      	pop	{r7, pc}
 8004030:	58024400 	.word	0x58024400
 8004034:	08009e2c 	.word	0x08009e2c

08004038 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004038:	b480      	push	{r7}
 800403a:	b089      	sub	sp, #36	@ 0x24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004040:	4ba1      	ldr	r3, [pc, #644]	@ (80042c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004044:	f003 0303 	and.w	r3, r3, #3
 8004048:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800404a:	4b9f      	ldr	r3, [pc, #636]	@ (80042c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800404c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404e:	0b1b      	lsrs	r3, r3, #12
 8004050:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004054:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004056:	4b9c      	ldr	r3, [pc, #624]	@ (80042c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405a:	091b      	lsrs	r3, r3, #4
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004062:	4b99      	ldr	r3, [pc, #612]	@ (80042c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004066:	08db      	lsrs	r3, r3, #3
 8004068:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	fb02 f303 	mul.w	r3, r2, r3
 8004072:	ee07 3a90 	vmov	s15, r3
 8004076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800407a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 8111 	beq.w	80042a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	2b02      	cmp	r3, #2
 800408a:	f000 8083 	beq.w	8004194 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	2b02      	cmp	r3, #2
 8004092:	f200 80a1 	bhi.w	80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d056      	beq.n	8004150 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80040a2:	e099      	b.n	80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040a4:	4b88      	ldr	r3, [pc, #544]	@ (80042c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d02d      	beq.n	800410c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040b0:	4b85      	ldr	r3, [pc, #532]	@ (80042c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	08db      	lsrs	r3, r3, #3
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	4a84      	ldr	r2, [pc, #528]	@ (80042cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80040bc:	fa22 f303 	lsr.w	r3, r2, r3
 80040c0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	ee07 3a90 	vmov	s15, r3
 80040c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	ee07 3a90 	vmov	s15, r3
 80040d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040da:	4b7b      	ldr	r3, [pc, #492]	@ (80042c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e2:	ee07 3a90 	vmov	s15, r3
 80040e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80040ee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80042d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004106:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800410a:	e087      	b.n	800421c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	ee07 3a90 	vmov	s15, r3
 8004112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004116:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80042d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800411a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800411e:	4b6a      	ldr	r3, [pc, #424]	@ (80042c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004126:	ee07 3a90 	vmov	s15, r3
 800412a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800412e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004132:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80042d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800413a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800413e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800414a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800414e:	e065      	b.n	800421c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	ee07 3a90 	vmov	s15, r3
 8004156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80042d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800415e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004162:	4b59      	ldr	r3, [pc, #356]	@ (80042c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416a:	ee07 3a90 	vmov	s15, r3
 800416e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004172:	ed97 6a03 	vldr	s12, [r7, #12]
 8004176:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80042d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800417a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800417e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800418a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800418e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004192:	e043      	b.n	800421c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	ee07 3a90 	vmov	s15, r3
 800419a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80042dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80041a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041a6:	4b48      	ldr	r3, [pc, #288]	@ (80042c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ae:	ee07 3a90 	vmov	s15, r3
 80041b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80041ba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80042d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041d6:	e021      	b.n	800421c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	ee07 3a90 	vmov	s15, r3
 80041de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80042d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80041e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ea:	4b37      	ldr	r3, [pc, #220]	@ (80042c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f2:	ee07 3a90 	vmov	s15, r3
 80041f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80041fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80042d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800420a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800420e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800421a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800421c:	4b2a      	ldr	r3, [pc, #168]	@ (80042c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800421e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004220:	0a5b      	lsrs	r3, r3, #9
 8004222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004226:	ee07 3a90 	vmov	s15, r3
 800422a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800422e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004232:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004236:	edd7 6a07 	vldr	s13, [r7, #28]
 800423a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800423e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004242:	ee17 2a90 	vmov	r2, s15
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800424a:	4b1f      	ldr	r3, [pc, #124]	@ (80042c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800424c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800424e:	0c1b      	lsrs	r3, r3, #16
 8004250:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004254:	ee07 3a90 	vmov	s15, r3
 8004258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004260:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004264:	edd7 6a07 	vldr	s13, [r7, #28]
 8004268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800426c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004270:	ee17 2a90 	vmov	r2, s15
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004278:	4b13      	ldr	r3, [pc, #76]	@ (80042c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800427a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427c:	0e1b      	lsrs	r3, r3, #24
 800427e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004282:	ee07 3a90 	vmov	s15, r3
 8004286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800428a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800428e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004292:	edd7 6a07 	vldr	s13, [r7, #28]
 8004296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800429a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800429e:	ee17 2a90 	vmov	r2, s15
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80042a6:	e008      	b.n	80042ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	609a      	str	r2, [r3, #8]
}
 80042ba:	bf00      	nop
 80042bc:	3724      	adds	r7, #36	@ 0x24
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	58024400 	.word	0x58024400
 80042cc:	03d09000 	.word	0x03d09000
 80042d0:	46000000 	.word	0x46000000
 80042d4:	4c742400 	.word	0x4c742400
 80042d8:	4a742400 	.word	0x4a742400
 80042dc:	4bbebc20 	.word	0x4bbebc20

080042e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b089      	sub	sp, #36	@ 0x24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042e8:	4ba1      	ldr	r3, [pc, #644]	@ (8004570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ec:	f003 0303 	and.w	r3, r3, #3
 80042f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80042f2:	4b9f      	ldr	r3, [pc, #636]	@ (8004570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f6:	0d1b      	lsrs	r3, r3, #20
 80042f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80042fe:	4b9c      	ldr	r3, [pc, #624]	@ (8004570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004302:	0a1b      	lsrs	r3, r3, #8
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800430a:	4b99      	ldr	r3, [pc, #612]	@ (8004570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800430c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430e:	08db      	lsrs	r3, r3, #3
 8004310:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	fb02 f303 	mul.w	r3, r2, r3
 800431a:	ee07 3a90 	vmov	s15, r3
 800431e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004322:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8111 	beq.w	8004550 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	2b02      	cmp	r3, #2
 8004332:	f000 8083 	beq.w	800443c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	2b02      	cmp	r3, #2
 800433a:	f200 80a1 	bhi.w	8004480 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d056      	beq.n	80043f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800434a:	e099      	b.n	8004480 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800434c:	4b88      	ldr	r3, [pc, #544]	@ (8004570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0320 	and.w	r3, r3, #32
 8004354:	2b00      	cmp	r3, #0
 8004356:	d02d      	beq.n	80043b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004358:	4b85      	ldr	r3, [pc, #532]	@ (8004570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	08db      	lsrs	r3, r3, #3
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	4a84      	ldr	r2, [pc, #528]	@ (8004574 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004364:	fa22 f303 	lsr.w	r3, r2, r3
 8004368:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	ee07 3a90 	vmov	s15, r3
 8004370:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	ee07 3a90 	vmov	s15, r3
 800437a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800437e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004382:	4b7b      	ldr	r3, [pc, #492]	@ (8004570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800438a:	ee07 3a90 	vmov	s15, r3
 800438e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004392:	ed97 6a03 	vldr	s12, [r7, #12]
 8004396:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004578 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800439a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800439e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80043b2:	e087      	b.n	80044c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	ee07 3a90 	vmov	s15, r3
 80043ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800457c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80043c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043c6:	4b6a      	ldr	r3, [pc, #424]	@ (8004570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ce:	ee07 3a90 	vmov	s15, r3
 80043d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80043da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004578 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043f6:	e065      	b.n	80044c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	ee07 3a90 	vmov	s15, r3
 80043fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004402:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004580 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800440a:	4b59      	ldr	r3, [pc, #356]	@ (8004570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004412:	ee07 3a90 	vmov	s15, r3
 8004416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800441a:	ed97 6a03 	vldr	s12, [r7, #12]
 800441e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004578 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800442a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800442e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800443a:	e043      	b.n	80044c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	ee07 3a90 	vmov	s15, r3
 8004442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004446:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800444a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800444e:	4b48      	ldr	r3, [pc, #288]	@ (8004570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004456:	ee07 3a90 	vmov	s15, r3
 800445a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800445e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004462:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004578 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800446a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800446e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800447e:	e021      	b.n	80044c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004580 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800448e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004492:	4b37      	ldr	r3, [pc, #220]	@ (8004570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800449a:	ee07 3a90 	vmov	s15, r3
 800449e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004578 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80044c4:	4b2a      	ldr	r3, [pc, #168]	@ (8004570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c8:	0a5b      	lsrs	r3, r3, #9
 80044ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044ce:	ee07 3a90 	vmov	s15, r3
 80044d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044de:	edd7 6a07 	vldr	s13, [r7, #28]
 80044e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ea:	ee17 2a90 	vmov	r2, s15
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80044f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f6:	0c1b      	lsrs	r3, r3, #16
 80044f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044fc:	ee07 3a90 	vmov	s15, r3
 8004500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004504:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004508:	ee37 7a87 	vadd.f32	s14, s15, s14
 800450c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004518:	ee17 2a90 	vmov	r2, s15
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004520:	4b13      	ldr	r3, [pc, #76]	@ (8004570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004524:	0e1b      	lsrs	r3, r3, #24
 8004526:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800452a:	ee07 3a90 	vmov	s15, r3
 800452e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004532:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004536:	ee37 7a87 	vadd.f32	s14, s15, s14
 800453a:	edd7 6a07 	vldr	s13, [r7, #28]
 800453e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004546:	ee17 2a90 	vmov	r2, s15
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800454e:	e008      	b.n	8004562 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	609a      	str	r2, [r3, #8]
}
 8004562:	bf00      	nop
 8004564:	3724      	adds	r7, #36	@ 0x24
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	58024400 	.word	0x58024400
 8004574:	03d09000 	.word	0x03d09000
 8004578:	46000000 	.word	0x46000000
 800457c:	4c742400 	.word	0x4c742400
 8004580:	4a742400 	.word	0x4a742400
 8004584:	4bbebc20 	.word	0x4bbebc20

08004588 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004596:	4b53      	ldr	r3, [pc, #332]	@ (80046e4 <RCCEx_PLL2_Config+0x15c>)
 8004598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d101      	bne.n	80045a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e099      	b.n	80046da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80045a6:	4b4f      	ldr	r3, [pc, #316]	@ (80046e4 <RCCEx_PLL2_Config+0x15c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a4e      	ldr	r2, [pc, #312]	@ (80046e4 <RCCEx_PLL2_Config+0x15c>)
 80045ac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80045b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b2:	f7fc fe2d 	bl	8001210 <HAL_GetTick>
 80045b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80045b8:	e008      	b.n	80045cc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80045ba:	f7fc fe29 	bl	8001210 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d901      	bls.n	80045cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e086      	b.n	80046da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80045cc:	4b45      	ldr	r3, [pc, #276]	@ (80046e4 <RCCEx_PLL2_Config+0x15c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1f0      	bne.n	80045ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80045d8:	4b42      	ldr	r3, [pc, #264]	@ (80046e4 <RCCEx_PLL2_Config+0x15c>)
 80045da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045dc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	031b      	lsls	r3, r3, #12
 80045e6:	493f      	ldr	r1, [pc, #252]	@ (80046e4 <RCCEx_PLL2_Config+0x15c>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	3b01      	subs	r3, #1
 80045f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	3b01      	subs	r3, #1
 80045fc:	025b      	lsls	r3, r3, #9
 80045fe:	b29b      	uxth	r3, r3
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	3b01      	subs	r3, #1
 8004608:	041b      	lsls	r3, r3, #16
 800460a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	3b01      	subs	r3, #1
 8004616:	061b      	lsls	r3, r3, #24
 8004618:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800461c:	4931      	ldr	r1, [pc, #196]	@ (80046e4 <RCCEx_PLL2_Config+0x15c>)
 800461e:	4313      	orrs	r3, r2
 8004620:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004622:	4b30      	ldr	r3, [pc, #192]	@ (80046e4 <RCCEx_PLL2_Config+0x15c>)
 8004624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004626:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	492d      	ldr	r1, [pc, #180]	@ (80046e4 <RCCEx_PLL2_Config+0x15c>)
 8004630:	4313      	orrs	r3, r2
 8004632:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004634:	4b2b      	ldr	r3, [pc, #172]	@ (80046e4 <RCCEx_PLL2_Config+0x15c>)
 8004636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004638:	f023 0220 	bic.w	r2, r3, #32
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	4928      	ldr	r1, [pc, #160]	@ (80046e4 <RCCEx_PLL2_Config+0x15c>)
 8004642:	4313      	orrs	r3, r2
 8004644:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004646:	4b27      	ldr	r3, [pc, #156]	@ (80046e4 <RCCEx_PLL2_Config+0x15c>)
 8004648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464a:	4a26      	ldr	r2, [pc, #152]	@ (80046e4 <RCCEx_PLL2_Config+0x15c>)
 800464c:	f023 0310 	bic.w	r3, r3, #16
 8004650:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004652:	4b24      	ldr	r3, [pc, #144]	@ (80046e4 <RCCEx_PLL2_Config+0x15c>)
 8004654:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004656:	4b24      	ldr	r3, [pc, #144]	@ (80046e8 <RCCEx_PLL2_Config+0x160>)
 8004658:	4013      	ands	r3, r2
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	69d2      	ldr	r2, [r2, #28]
 800465e:	00d2      	lsls	r2, r2, #3
 8004660:	4920      	ldr	r1, [pc, #128]	@ (80046e4 <RCCEx_PLL2_Config+0x15c>)
 8004662:	4313      	orrs	r3, r2
 8004664:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004666:	4b1f      	ldr	r3, [pc, #124]	@ (80046e4 <RCCEx_PLL2_Config+0x15c>)
 8004668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466a:	4a1e      	ldr	r2, [pc, #120]	@ (80046e4 <RCCEx_PLL2_Config+0x15c>)
 800466c:	f043 0310 	orr.w	r3, r3, #16
 8004670:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d106      	bne.n	8004686 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004678:	4b1a      	ldr	r3, [pc, #104]	@ (80046e4 <RCCEx_PLL2_Config+0x15c>)
 800467a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467c:	4a19      	ldr	r2, [pc, #100]	@ (80046e4 <RCCEx_PLL2_Config+0x15c>)
 800467e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004682:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004684:	e00f      	b.n	80046a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d106      	bne.n	800469a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800468c:	4b15      	ldr	r3, [pc, #84]	@ (80046e4 <RCCEx_PLL2_Config+0x15c>)
 800468e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004690:	4a14      	ldr	r2, [pc, #80]	@ (80046e4 <RCCEx_PLL2_Config+0x15c>)
 8004692:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004696:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004698:	e005      	b.n	80046a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800469a:	4b12      	ldr	r3, [pc, #72]	@ (80046e4 <RCCEx_PLL2_Config+0x15c>)
 800469c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469e:	4a11      	ldr	r2, [pc, #68]	@ (80046e4 <RCCEx_PLL2_Config+0x15c>)
 80046a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80046a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80046a6:	4b0f      	ldr	r3, [pc, #60]	@ (80046e4 <RCCEx_PLL2_Config+0x15c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a0e      	ldr	r2, [pc, #56]	@ (80046e4 <RCCEx_PLL2_Config+0x15c>)
 80046ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80046b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b2:	f7fc fdad 	bl	8001210 <HAL_GetTick>
 80046b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80046b8:	e008      	b.n	80046cc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80046ba:	f7fc fda9 	bl	8001210 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e006      	b.n	80046da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80046cc:	4b05      	ldr	r3, [pc, #20]	@ (80046e4 <RCCEx_PLL2_Config+0x15c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0f0      	beq.n	80046ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	58024400 	.word	0x58024400
 80046e8:	ffff0007 	.word	0xffff0007

080046ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046fa:	4b53      	ldr	r3, [pc, #332]	@ (8004848 <RCCEx_PLL3_Config+0x15c>)
 80046fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	2b03      	cmp	r3, #3
 8004704:	d101      	bne.n	800470a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e099      	b.n	800483e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800470a:	4b4f      	ldr	r3, [pc, #316]	@ (8004848 <RCCEx_PLL3_Config+0x15c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a4e      	ldr	r2, [pc, #312]	@ (8004848 <RCCEx_PLL3_Config+0x15c>)
 8004710:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004716:	f7fc fd7b 	bl	8001210 <HAL_GetTick>
 800471a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800471c:	e008      	b.n	8004730 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800471e:	f7fc fd77 	bl	8001210 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e086      	b.n	800483e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004730:	4b45      	ldr	r3, [pc, #276]	@ (8004848 <RCCEx_PLL3_Config+0x15c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1f0      	bne.n	800471e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800473c:	4b42      	ldr	r3, [pc, #264]	@ (8004848 <RCCEx_PLL3_Config+0x15c>)
 800473e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004740:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	051b      	lsls	r3, r3, #20
 800474a:	493f      	ldr	r1, [pc, #252]	@ (8004848 <RCCEx_PLL3_Config+0x15c>)
 800474c:	4313      	orrs	r3, r2
 800474e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	3b01      	subs	r3, #1
 8004756:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	3b01      	subs	r3, #1
 8004760:	025b      	lsls	r3, r3, #9
 8004762:	b29b      	uxth	r3, r3
 8004764:	431a      	orrs	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	3b01      	subs	r3, #1
 800476c:	041b      	lsls	r3, r3, #16
 800476e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	3b01      	subs	r3, #1
 800477a:	061b      	lsls	r3, r3, #24
 800477c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004780:	4931      	ldr	r1, [pc, #196]	@ (8004848 <RCCEx_PLL3_Config+0x15c>)
 8004782:	4313      	orrs	r3, r2
 8004784:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004786:	4b30      	ldr	r3, [pc, #192]	@ (8004848 <RCCEx_PLL3_Config+0x15c>)
 8004788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	492d      	ldr	r1, [pc, #180]	@ (8004848 <RCCEx_PLL3_Config+0x15c>)
 8004794:	4313      	orrs	r3, r2
 8004796:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004798:	4b2b      	ldr	r3, [pc, #172]	@ (8004848 <RCCEx_PLL3_Config+0x15c>)
 800479a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	4928      	ldr	r1, [pc, #160]	@ (8004848 <RCCEx_PLL3_Config+0x15c>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80047aa:	4b27      	ldr	r3, [pc, #156]	@ (8004848 <RCCEx_PLL3_Config+0x15c>)
 80047ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ae:	4a26      	ldr	r2, [pc, #152]	@ (8004848 <RCCEx_PLL3_Config+0x15c>)
 80047b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80047b6:	4b24      	ldr	r3, [pc, #144]	@ (8004848 <RCCEx_PLL3_Config+0x15c>)
 80047b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047ba:	4b24      	ldr	r3, [pc, #144]	@ (800484c <RCCEx_PLL3_Config+0x160>)
 80047bc:	4013      	ands	r3, r2
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	69d2      	ldr	r2, [r2, #28]
 80047c2:	00d2      	lsls	r2, r2, #3
 80047c4:	4920      	ldr	r1, [pc, #128]	@ (8004848 <RCCEx_PLL3_Config+0x15c>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80047ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004848 <RCCEx_PLL3_Config+0x15c>)
 80047cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004848 <RCCEx_PLL3_Config+0x15c>)
 80047d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d106      	bne.n	80047ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80047dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004848 <RCCEx_PLL3_Config+0x15c>)
 80047de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e0:	4a19      	ldr	r2, [pc, #100]	@ (8004848 <RCCEx_PLL3_Config+0x15c>)
 80047e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80047e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80047e8:	e00f      	b.n	800480a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d106      	bne.n	80047fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80047f0:	4b15      	ldr	r3, [pc, #84]	@ (8004848 <RCCEx_PLL3_Config+0x15c>)
 80047f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f4:	4a14      	ldr	r2, [pc, #80]	@ (8004848 <RCCEx_PLL3_Config+0x15c>)
 80047f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80047fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80047fc:	e005      	b.n	800480a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80047fe:	4b12      	ldr	r3, [pc, #72]	@ (8004848 <RCCEx_PLL3_Config+0x15c>)
 8004800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004802:	4a11      	ldr	r2, [pc, #68]	@ (8004848 <RCCEx_PLL3_Config+0x15c>)
 8004804:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004808:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800480a:	4b0f      	ldr	r3, [pc, #60]	@ (8004848 <RCCEx_PLL3_Config+0x15c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a0e      	ldr	r2, [pc, #56]	@ (8004848 <RCCEx_PLL3_Config+0x15c>)
 8004810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004814:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004816:	f7fc fcfb 	bl	8001210 <HAL_GetTick>
 800481a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800481c:	e008      	b.n	8004830 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800481e:	f7fc fcf7 	bl	8001210 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e006      	b.n	800483e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004830:	4b05      	ldr	r3, [pc, #20]	@ (8004848 <RCCEx_PLL3_Config+0x15c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0f0      	beq.n	800481e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800483c:	7bfb      	ldrb	r3, [r7, #15]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	58024400 	.word	0x58024400
 800484c:	ffff0007 	.word	0xffff0007

08004850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e049      	b.n	80048f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d106      	bne.n	800487c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fc fa3c 	bl	8000cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3304      	adds	r3, #4
 800488c:	4619      	mov	r1, r3
 800488e:	4610      	mov	r0, r2
 8004890:	f000 fc4a 	bl	8005128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
	...

08004900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b01      	cmp	r3, #1
 8004912:	d001      	beq.n	8004918 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e054      	b.n	80049c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0201 	orr.w	r2, r2, #1
 800492e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a26      	ldr	r2, [pc, #152]	@ (80049d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d022      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x80>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004942:	d01d      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x80>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a22      	ldr	r2, [pc, #136]	@ (80049d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d018      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x80>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a21      	ldr	r2, [pc, #132]	@ (80049d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d013      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x80>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a1f      	ldr	r2, [pc, #124]	@ (80049dc <HAL_TIM_Base_Start_IT+0xdc>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d00e      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x80>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1e      	ldr	r2, [pc, #120]	@ (80049e0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d009      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x80>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a1c      	ldr	r2, [pc, #112]	@ (80049e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d004      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x80>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a1b      	ldr	r2, [pc, #108]	@ (80049e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d115      	bne.n	80049ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689a      	ldr	r2, [r3, #8]
 8004986:	4b19      	ldr	r3, [pc, #100]	@ (80049ec <HAL_TIM_Base_Start_IT+0xec>)
 8004988:	4013      	ands	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b06      	cmp	r3, #6
 8004990:	d015      	beq.n	80049be <HAL_TIM_Base_Start_IT+0xbe>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004998:	d011      	beq.n	80049be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0201 	orr.w	r2, r2, #1
 80049a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049aa:	e008      	b.n	80049be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0201 	orr.w	r2, r2, #1
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	e000      	b.n	80049c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40010000 	.word	0x40010000
 80049d4:	40000400 	.word	0x40000400
 80049d8:	40000800 	.word	0x40000800
 80049dc:	40000c00 	.word	0x40000c00
 80049e0:	40010400 	.word	0x40010400
 80049e4:	40001800 	.word	0x40001800
 80049e8:	40014000 	.word	0x40014000
 80049ec:	00010007 	.word	0x00010007

080049f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e049      	b.n	8004a96 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f841 	bl	8004a9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4610      	mov	r0, r2
 8004a30:	f000 fb7a 	bl	8005128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d020      	beq.n	8004b16 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d01b      	beq.n	8004b16 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f06f 0202 	mvn.w	r2, #2
 8004ae6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	f003 0303 	and.w	r3, r3, #3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 faf5 	bl	80050ec <HAL_TIM_IC_CaptureCallback>
 8004b02:	e005      	b.n	8004b10 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 fae7 	bl	80050d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 faf8 	bl	8005100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d020      	beq.n	8004b62 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f003 0304 	and.w	r3, r3, #4
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d01b      	beq.n	8004b62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f06f 0204 	mvn.w	r2, #4
 8004b32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 facf 	bl	80050ec <HAL_TIM_IC_CaptureCallback>
 8004b4e:	e005      	b.n	8004b5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fac1 	bl	80050d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fad2 	bl	8005100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f003 0308 	and.w	r3, r3, #8
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d020      	beq.n	8004bae <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d01b      	beq.n	8004bae <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f06f 0208 	mvn.w	r2, #8
 8004b7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2204      	movs	r2, #4
 8004b84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	f003 0303 	and.w	r3, r3, #3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 faa9 	bl	80050ec <HAL_TIM_IC_CaptureCallback>
 8004b9a:	e005      	b.n	8004ba8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 fa9b 	bl	80050d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 faac 	bl	8005100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d020      	beq.n	8004bfa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f003 0310 	and.w	r3, r3, #16
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d01b      	beq.n	8004bfa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f06f 0210 	mvn.w	r2, #16
 8004bca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2208      	movs	r2, #8
 8004bd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 fa83 	bl	80050ec <HAL_TIM_IC_CaptureCallback>
 8004be6:	e005      	b.n	8004bf4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 fa75 	bl	80050d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fa86 	bl	8005100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00c      	beq.n	8004c1e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d007      	beq.n	8004c1e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f06f 0201 	mvn.w	r2, #1
 8004c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7fb ffcb 	bl	8000bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d104      	bne.n	8004c32 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00c      	beq.n	8004c4c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d007      	beq.n	8004c4c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 ff98 	bl	8005b7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00c      	beq.n	8004c70 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d007      	beq.n	8004c70 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 ff90 	bl	8005b90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00c      	beq.n	8004c94 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d007      	beq.n	8004c94 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fa40 	bl	8005114 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00c      	beq.n	8004cb8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f003 0320 	and.w	r3, r3, #32
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d007      	beq.n	8004cb8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0220 	mvn.w	r2, #32
 8004cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 ff58 	bl	8005b68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cb8:	bf00      	nop
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d101      	bne.n	8004cde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e0ff      	b.n	8004ede <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b14      	cmp	r3, #20
 8004cea:	f200 80f0 	bhi.w	8004ece <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004cee:	a201      	add	r2, pc, #4	@ (adr r2, 8004cf4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf4:	08004d49 	.word	0x08004d49
 8004cf8:	08004ecf 	.word	0x08004ecf
 8004cfc:	08004ecf 	.word	0x08004ecf
 8004d00:	08004ecf 	.word	0x08004ecf
 8004d04:	08004d89 	.word	0x08004d89
 8004d08:	08004ecf 	.word	0x08004ecf
 8004d0c:	08004ecf 	.word	0x08004ecf
 8004d10:	08004ecf 	.word	0x08004ecf
 8004d14:	08004dcb 	.word	0x08004dcb
 8004d18:	08004ecf 	.word	0x08004ecf
 8004d1c:	08004ecf 	.word	0x08004ecf
 8004d20:	08004ecf 	.word	0x08004ecf
 8004d24:	08004e0b 	.word	0x08004e0b
 8004d28:	08004ecf 	.word	0x08004ecf
 8004d2c:	08004ecf 	.word	0x08004ecf
 8004d30:	08004ecf 	.word	0x08004ecf
 8004d34:	08004e4d 	.word	0x08004e4d
 8004d38:	08004ecf 	.word	0x08004ecf
 8004d3c:	08004ecf 	.word	0x08004ecf
 8004d40:	08004ecf 	.word	0x08004ecf
 8004d44:	08004e8d 	.word	0x08004e8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68b9      	ldr	r1, [r7, #8]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fa8a 	bl	8005268 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699a      	ldr	r2, [r3, #24]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0208 	orr.w	r2, r2, #8
 8004d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699a      	ldr	r2, [r3, #24]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0204 	bic.w	r2, r2, #4
 8004d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6999      	ldr	r1, [r3, #24]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	691a      	ldr	r2, [r3, #16]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	619a      	str	r2, [r3, #24]
      break;
 8004d86:	e0a5      	b.n	8004ed4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68b9      	ldr	r1, [r7, #8]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fafa 	bl	8005388 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699a      	ldr	r2, [r3, #24]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699a      	ldr	r2, [r3, #24]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6999      	ldr	r1, [r3, #24]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	021a      	lsls	r2, r3, #8
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	619a      	str	r2, [r3, #24]
      break;
 8004dc8:	e084      	b.n	8004ed4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68b9      	ldr	r1, [r7, #8]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 fb63 	bl	800549c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69da      	ldr	r2, [r3, #28]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f042 0208 	orr.w	r2, r2, #8
 8004de4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	69da      	ldr	r2, [r3, #28]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0204 	bic.w	r2, r2, #4
 8004df4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69d9      	ldr	r1, [r3, #28]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	691a      	ldr	r2, [r3, #16]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	61da      	str	r2, [r3, #28]
      break;
 8004e08:	e064      	b.n	8004ed4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68b9      	ldr	r1, [r7, #8]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 fbcb 	bl	80055ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69da      	ldr	r2, [r3, #28]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69da      	ldr	r2, [r3, #28]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69d9      	ldr	r1, [r3, #28]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	021a      	lsls	r2, r3, #8
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	61da      	str	r2, [r3, #28]
      break;
 8004e4a:	e043      	b.n	8004ed4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68b9      	ldr	r1, [r7, #8]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 fc14 	bl	8005680 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0208 	orr.w	r2, r2, #8
 8004e66:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0204 	bic.w	r2, r2, #4
 8004e76:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	691a      	ldr	r2, [r3, #16]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004e8a:	e023      	b.n	8004ed4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68b9      	ldr	r1, [r7, #8]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fc58 	bl	8005748 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ea6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eb6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	021a      	lsls	r2, r3, #8
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004ecc:	e002      	b.n	8004ed4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ed2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop

08004ee8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d101      	bne.n	8004f04 <HAL_TIM_ConfigClockSource+0x1c>
 8004f00:	2302      	movs	r3, #2
 8004f02:	e0dc      	b.n	80050be <HAL_TIM_ConfigClockSource+0x1d6>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	4b6a      	ldr	r3, [pc, #424]	@ (80050c8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004f20:	4013      	ands	r3, r2
 8004f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a64      	ldr	r2, [pc, #400]	@ (80050cc <HAL_TIM_ConfigClockSource+0x1e4>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	f000 80a9 	beq.w	8005092 <HAL_TIM_ConfigClockSource+0x1aa>
 8004f40:	4a62      	ldr	r2, [pc, #392]	@ (80050cc <HAL_TIM_ConfigClockSource+0x1e4>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	f200 80ae 	bhi.w	80050a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004f48:	4a61      	ldr	r2, [pc, #388]	@ (80050d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	f000 80a1 	beq.w	8005092 <HAL_TIM_ConfigClockSource+0x1aa>
 8004f50:	4a5f      	ldr	r2, [pc, #380]	@ (80050d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	f200 80a6 	bhi.w	80050a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004f58:	4a5e      	ldr	r2, [pc, #376]	@ (80050d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	f000 8099 	beq.w	8005092 <HAL_TIM_ConfigClockSource+0x1aa>
 8004f60:	4a5c      	ldr	r2, [pc, #368]	@ (80050d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	f200 809e 	bhi.w	80050a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004f68:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004f6c:	f000 8091 	beq.w	8005092 <HAL_TIM_ConfigClockSource+0x1aa>
 8004f70:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004f74:	f200 8096 	bhi.w	80050a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004f78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f7c:	f000 8089 	beq.w	8005092 <HAL_TIM_ConfigClockSource+0x1aa>
 8004f80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f84:	f200 808e 	bhi.w	80050a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004f88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f8c:	d03e      	beq.n	800500c <HAL_TIM_ConfigClockSource+0x124>
 8004f8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f92:	f200 8087 	bhi.w	80050a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004f96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f9a:	f000 8086 	beq.w	80050aa <HAL_TIM_ConfigClockSource+0x1c2>
 8004f9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fa2:	d87f      	bhi.n	80050a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004fa4:	2b70      	cmp	r3, #112	@ 0x70
 8004fa6:	d01a      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0xf6>
 8004fa8:	2b70      	cmp	r3, #112	@ 0x70
 8004faa:	d87b      	bhi.n	80050a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004fac:	2b60      	cmp	r3, #96	@ 0x60
 8004fae:	d050      	beq.n	8005052 <HAL_TIM_ConfigClockSource+0x16a>
 8004fb0:	2b60      	cmp	r3, #96	@ 0x60
 8004fb2:	d877      	bhi.n	80050a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004fb4:	2b50      	cmp	r3, #80	@ 0x50
 8004fb6:	d03c      	beq.n	8005032 <HAL_TIM_ConfigClockSource+0x14a>
 8004fb8:	2b50      	cmp	r3, #80	@ 0x50
 8004fba:	d873      	bhi.n	80050a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004fbc:	2b40      	cmp	r3, #64	@ 0x40
 8004fbe:	d058      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x18a>
 8004fc0:	2b40      	cmp	r3, #64	@ 0x40
 8004fc2:	d86f      	bhi.n	80050a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004fc4:	2b30      	cmp	r3, #48	@ 0x30
 8004fc6:	d064      	beq.n	8005092 <HAL_TIM_ConfigClockSource+0x1aa>
 8004fc8:	2b30      	cmp	r3, #48	@ 0x30
 8004fca:	d86b      	bhi.n	80050a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004fcc:	2b20      	cmp	r3, #32
 8004fce:	d060      	beq.n	8005092 <HAL_TIM_ConfigClockSource+0x1aa>
 8004fd0:	2b20      	cmp	r3, #32
 8004fd2:	d867      	bhi.n	80050a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d05c      	beq.n	8005092 <HAL_TIM_ConfigClockSource+0x1aa>
 8004fd8:	2b10      	cmp	r3, #16
 8004fda:	d05a      	beq.n	8005092 <HAL_TIM_ConfigClockSource+0x1aa>
 8004fdc:	e062      	b.n	80050a4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fee:	f000 fc8f 	bl	8005910 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005000:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	609a      	str	r2, [r3, #8]
      break;
 800500a:	e04f      	b.n	80050ac <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800501c:	f000 fc78 	bl	8005910 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800502e:	609a      	str	r2, [r3, #8]
      break;
 8005030:	e03c      	b.n	80050ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800503e:	461a      	mov	r2, r3
 8005040:	f000 fbe8 	bl	8005814 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2150      	movs	r1, #80	@ 0x50
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fc42 	bl	80058d4 <TIM_ITRx_SetConfig>
      break;
 8005050:	e02c      	b.n	80050ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800505e:	461a      	mov	r2, r3
 8005060:	f000 fc07 	bl	8005872 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2160      	movs	r1, #96	@ 0x60
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fc32 	bl	80058d4 <TIM_ITRx_SetConfig>
      break;
 8005070:	e01c      	b.n	80050ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800507e:	461a      	mov	r2, r3
 8005080:	f000 fbc8 	bl	8005814 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2140      	movs	r1, #64	@ 0x40
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fc22 	bl	80058d4 <TIM_ITRx_SetConfig>
      break;
 8005090:	e00c      	b.n	80050ac <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4619      	mov	r1, r3
 800509c:	4610      	mov	r0, r2
 800509e:	f000 fc19 	bl	80058d4 <TIM_ITRx_SetConfig>
      break;
 80050a2:	e003      	b.n	80050ac <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	73fb      	strb	r3, [r7, #15]
      break;
 80050a8:	e000      	b.n	80050ac <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80050aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	ffceff88 	.word	0xffceff88
 80050cc:	00100040 	.word	0x00100040
 80050d0:	00100030 	.word	0x00100030
 80050d4:	00100020 	.word	0x00100020

080050d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a43      	ldr	r2, [pc, #268]	@ (8005248 <TIM_Base_SetConfig+0x120>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d013      	beq.n	8005168 <TIM_Base_SetConfig+0x40>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005146:	d00f      	beq.n	8005168 <TIM_Base_SetConfig+0x40>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a40      	ldr	r2, [pc, #256]	@ (800524c <TIM_Base_SetConfig+0x124>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d00b      	beq.n	8005168 <TIM_Base_SetConfig+0x40>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a3f      	ldr	r2, [pc, #252]	@ (8005250 <TIM_Base_SetConfig+0x128>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d007      	beq.n	8005168 <TIM_Base_SetConfig+0x40>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a3e      	ldr	r2, [pc, #248]	@ (8005254 <TIM_Base_SetConfig+0x12c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d003      	beq.n	8005168 <TIM_Base_SetConfig+0x40>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a3d      	ldr	r2, [pc, #244]	@ (8005258 <TIM_Base_SetConfig+0x130>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d108      	bne.n	800517a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800516e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a32      	ldr	r2, [pc, #200]	@ (8005248 <TIM_Base_SetConfig+0x120>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d01f      	beq.n	80051c2 <TIM_Base_SetConfig+0x9a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005188:	d01b      	beq.n	80051c2 <TIM_Base_SetConfig+0x9a>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a2f      	ldr	r2, [pc, #188]	@ (800524c <TIM_Base_SetConfig+0x124>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d017      	beq.n	80051c2 <TIM_Base_SetConfig+0x9a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a2e      	ldr	r2, [pc, #184]	@ (8005250 <TIM_Base_SetConfig+0x128>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d013      	beq.n	80051c2 <TIM_Base_SetConfig+0x9a>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a2d      	ldr	r2, [pc, #180]	@ (8005254 <TIM_Base_SetConfig+0x12c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00f      	beq.n	80051c2 <TIM_Base_SetConfig+0x9a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a2c      	ldr	r2, [pc, #176]	@ (8005258 <TIM_Base_SetConfig+0x130>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d00b      	beq.n	80051c2 <TIM_Base_SetConfig+0x9a>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a2b      	ldr	r2, [pc, #172]	@ (800525c <TIM_Base_SetConfig+0x134>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d007      	beq.n	80051c2 <TIM_Base_SetConfig+0x9a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a2a      	ldr	r2, [pc, #168]	@ (8005260 <TIM_Base_SetConfig+0x138>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d003      	beq.n	80051c2 <TIM_Base_SetConfig+0x9a>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a29      	ldr	r2, [pc, #164]	@ (8005264 <TIM_Base_SetConfig+0x13c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d108      	bne.n	80051d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a14      	ldr	r2, [pc, #80]	@ (8005248 <TIM_Base_SetConfig+0x120>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d00f      	beq.n	800521a <TIM_Base_SetConfig+0xf2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a16      	ldr	r2, [pc, #88]	@ (8005258 <TIM_Base_SetConfig+0x130>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d00b      	beq.n	800521a <TIM_Base_SetConfig+0xf2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a15      	ldr	r2, [pc, #84]	@ (800525c <TIM_Base_SetConfig+0x134>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d007      	beq.n	800521a <TIM_Base_SetConfig+0xf2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a14      	ldr	r2, [pc, #80]	@ (8005260 <TIM_Base_SetConfig+0x138>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d003      	beq.n	800521a <TIM_Base_SetConfig+0xf2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a13      	ldr	r2, [pc, #76]	@ (8005264 <TIM_Base_SetConfig+0x13c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d103      	bne.n	8005222 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	691a      	ldr	r2, [r3, #16]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f043 0204 	orr.w	r2, r3, #4
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	601a      	str	r2, [r3, #0]
}
 800523a:	bf00      	nop
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40010000 	.word	0x40010000
 800524c:	40000400 	.word	0x40000400
 8005250:	40000800 	.word	0x40000800
 8005254:	40000c00 	.word	0x40000c00
 8005258:	40010400 	.word	0x40010400
 800525c:	40014000 	.word	0x40014000
 8005260:	40014400 	.word	0x40014400
 8005264:	40014800 	.word	0x40014800

08005268 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005268:	b480      	push	{r7}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	f023 0201 	bic.w	r2, r3, #1
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	4b37      	ldr	r3, [pc, #220]	@ (8005370 <TIM_OC1_SetConfig+0x108>)
 8005294:	4013      	ands	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 0303 	bic.w	r3, r3, #3
 800529e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f023 0302 	bic.w	r3, r3, #2
 80052b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a2d      	ldr	r2, [pc, #180]	@ (8005374 <TIM_OC1_SetConfig+0x10c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d00f      	beq.n	80052e4 <TIM_OC1_SetConfig+0x7c>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a2c      	ldr	r2, [pc, #176]	@ (8005378 <TIM_OC1_SetConfig+0x110>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d00b      	beq.n	80052e4 <TIM_OC1_SetConfig+0x7c>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a2b      	ldr	r2, [pc, #172]	@ (800537c <TIM_OC1_SetConfig+0x114>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d007      	beq.n	80052e4 <TIM_OC1_SetConfig+0x7c>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a2a      	ldr	r2, [pc, #168]	@ (8005380 <TIM_OC1_SetConfig+0x118>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d003      	beq.n	80052e4 <TIM_OC1_SetConfig+0x7c>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a29      	ldr	r2, [pc, #164]	@ (8005384 <TIM_OC1_SetConfig+0x11c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d10c      	bne.n	80052fe <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f023 0308 	bic.w	r3, r3, #8
 80052ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f023 0304 	bic.w	r3, r3, #4
 80052fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a1c      	ldr	r2, [pc, #112]	@ (8005374 <TIM_OC1_SetConfig+0x10c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00f      	beq.n	8005326 <TIM_OC1_SetConfig+0xbe>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a1b      	ldr	r2, [pc, #108]	@ (8005378 <TIM_OC1_SetConfig+0x110>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00b      	beq.n	8005326 <TIM_OC1_SetConfig+0xbe>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a1a      	ldr	r2, [pc, #104]	@ (800537c <TIM_OC1_SetConfig+0x114>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d007      	beq.n	8005326 <TIM_OC1_SetConfig+0xbe>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a19      	ldr	r2, [pc, #100]	@ (8005380 <TIM_OC1_SetConfig+0x118>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d003      	beq.n	8005326 <TIM_OC1_SetConfig+0xbe>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a18      	ldr	r2, [pc, #96]	@ (8005384 <TIM_OC1_SetConfig+0x11c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d111      	bne.n	800534a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800532c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	4313      	orrs	r3, r2
 800533e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	4313      	orrs	r3, r2
 8005348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	621a      	str	r2, [r3, #32]
}
 8005364:	bf00      	nop
 8005366:	371c      	adds	r7, #28
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	fffeff8f 	.word	0xfffeff8f
 8005374:	40010000 	.word	0x40010000
 8005378:	40010400 	.word	0x40010400
 800537c:	40014000 	.word	0x40014000
 8005380:	40014400 	.word	0x40014400
 8005384:	40014800 	.word	0x40014800

08005388 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	f023 0210 	bic.w	r2, r3, #16
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4b34      	ldr	r3, [pc, #208]	@ (8005484 <TIM_OC2_SetConfig+0xfc>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	021b      	lsls	r3, r3, #8
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f023 0320 	bic.w	r3, r3, #32
 80053d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	011b      	lsls	r3, r3, #4
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	4313      	orrs	r3, r2
 80053de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a29      	ldr	r2, [pc, #164]	@ (8005488 <TIM_OC2_SetConfig+0x100>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d003      	beq.n	80053f0 <TIM_OC2_SetConfig+0x68>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a28      	ldr	r2, [pc, #160]	@ (800548c <TIM_OC2_SetConfig+0x104>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d10d      	bne.n	800540c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	011b      	lsls	r3, r3, #4
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	4313      	orrs	r3, r2
 8005402:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800540a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a1e      	ldr	r2, [pc, #120]	@ (8005488 <TIM_OC2_SetConfig+0x100>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d00f      	beq.n	8005434 <TIM_OC2_SetConfig+0xac>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a1d      	ldr	r2, [pc, #116]	@ (800548c <TIM_OC2_SetConfig+0x104>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d00b      	beq.n	8005434 <TIM_OC2_SetConfig+0xac>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a1c      	ldr	r2, [pc, #112]	@ (8005490 <TIM_OC2_SetConfig+0x108>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d007      	beq.n	8005434 <TIM_OC2_SetConfig+0xac>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a1b      	ldr	r2, [pc, #108]	@ (8005494 <TIM_OC2_SetConfig+0x10c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d003      	beq.n	8005434 <TIM_OC2_SetConfig+0xac>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a1a      	ldr	r2, [pc, #104]	@ (8005498 <TIM_OC2_SetConfig+0x110>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d113      	bne.n	800545c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800543a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005442:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	4313      	orrs	r3, r2
 800544e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	4313      	orrs	r3, r2
 800545a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	621a      	str	r2, [r3, #32]
}
 8005476:	bf00      	nop
 8005478:	371c      	adds	r7, #28
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	feff8fff 	.word	0xfeff8fff
 8005488:	40010000 	.word	0x40010000
 800548c:	40010400 	.word	0x40010400
 8005490:	40014000 	.word	0x40014000
 8005494:	40014400 	.word	0x40014400
 8005498:	40014800 	.word	0x40014800

0800549c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	4b33      	ldr	r3, [pc, #204]	@ (8005594 <TIM_OC3_SetConfig+0xf8>)
 80054c8:	4013      	ands	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f023 0303 	bic.w	r3, r3, #3
 80054d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	021b      	lsls	r3, r3, #8
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a28      	ldr	r2, [pc, #160]	@ (8005598 <TIM_OC3_SetConfig+0xfc>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d003      	beq.n	8005502 <TIM_OC3_SetConfig+0x66>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a27      	ldr	r2, [pc, #156]	@ (800559c <TIM_OC3_SetConfig+0x100>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d10d      	bne.n	800551e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005508:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	021b      	lsls	r3, r3, #8
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800551c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a1d      	ldr	r2, [pc, #116]	@ (8005598 <TIM_OC3_SetConfig+0xfc>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00f      	beq.n	8005546 <TIM_OC3_SetConfig+0xaa>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a1c      	ldr	r2, [pc, #112]	@ (800559c <TIM_OC3_SetConfig+0x100>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00b      	beq.n	8005546 <TIM_OC3_SetConfig+0xaa>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a1b      	ldr	r2, [pc, #108]	@ (80055a0 <TIM_OC3_SetConfig+0x104>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d007      	beq.n	8005546 <TIM_OC3_SetConfig+0xaa>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a1a      	ldr	r2, [pc, #104]	@ (80055a4 <TIM_OC3_SetConfig+0x108>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d003      	beq.n	8005546 <TIM_OC3_SetConfig+0xaa>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a19      	ldr	r2, [pc, #100]	@ (80055a8 <TIM_OC3_SetConfig+0x10c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d113      	bne.n	800556e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800554c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	011b      	lsls	r3, r3, #4
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	4313      	orrs	r3, r2
 8005560:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4313      	orrs	r3, r2
 800556c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	621a      	str	r2, [r3, #32]
}
 8005588:	bf00      	nop
 800558a:	371c      	adds	r7, #28
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	fffeff8f 	.word	0xfffeff8f
 8005598:	40010000 	.word	0x40010000
 800559c:	40010400 	.word	0x40010400
 80055a0:	40014000 	.word	0x40014000
 80055a4:	40014400 	.word	0x40014400
 80055a8:	40014800 	.word	0x40014800

080055ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4b24      	ldr	r3, [pc, #144]	@ (8005668 <TIM_OC4_SetConfig+0xbc>)
 80055d8:	4013      	ands	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	021b      	lsls	r3, r3, #8
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	031b      	lsls	r3, r3, #12
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a19      	ldr	r2, [pc, #100]	@ (800566c <TIM_OC4_SetConfig+0xc0>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d00f      	beq.n	800562c <TIM_OC4_SetConfig+0x80>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a18      	ldr	r2, [pc, #96]	@ (8005670 <TIM_OC4_SetConfig+0xc4>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d00b      	beq.n	800562c <TIM_OC4_SetConfig+0x80>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a17      	ldr	r2, [pc, #92]	@ (8005674 <TIM_OC4_SetConfig+0xc8>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d007      	beq.n	800562c <TIM_OC4_SetConfig+0x80>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a16      	ldr	r2, [pc, #88]	@ (8005678 <TIM_OC4_SetConfig+0xcc>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d003      	beq.n	800562c <TIM_OC4_SetConfig+0x80>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a15      	ldr	r2, [pc, #84]	@ (800567c <TIM_OC4_SetConfig+0xd0>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d109      	bne.n	8005640 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005632:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	019b      	lsls	r3, r3, #6
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	4313      	orrs	r3, r2
 800563e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	621a      	str	r2, [r3, #32]
}
 800565a:	bf00      	nop
 800565c:	371c      	adds	r7, #28
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	feff8fff 	.word	0xfeff8fff
 800566c:	40010000 	.word	0x40010000
 8005670:	40010400 	.word	0x40010400
 8005674:	40014000 	.word	0x40014000
 8005678:	40014400 	.word	0x40014400
 800567c:	40014800 	.word	0x40014800

08005680 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4b21      	ldr	r3, [pc, #132]	@ (8005730 <TIM_OC5_SetConfig+0xb0>)
 80056ac:	4013      	ands	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80056c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	041b      	lsls	r3, r3, #16
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a18      	ldr	r2, [pc, #96]	@ (8005734 <TIM_OC5_SetConfig+0xb4>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00f      	beq.n	80056f6 <TIM_OC5_SetConfig+0x76>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a17      	ldr	r2, [pc, #92]	@ (8005738 <TIM_OC5_SetConfig+0xb8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00b      	beq.n	80056f6 <TIM_OC5_SetConfig+0x76>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a16      	ldr	r2, [pc, #88]	@ (800573c <TIM_OC5_SetConfig+0xbc>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d007      	beq.n	80056f6 <TIM_OC5_SetConfig+0x76>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a15      	ldr	r2, [pc, #84]	@ (8005740 <TIM_OC5_SetConfig+0xc0>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d003      	beq.n	80056f6 <TIM_OC5_SetConfig+0x76>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a14      	ldr	r2, [pc, #80]	@ (8005744 <TIM_OC5_SetConfig+0xc4>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d109      	bne.n	800570a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	021b      	lsls	r3, r3, #8
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	4313      	orrs	r3, r2
 8005708:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	621a      	str	r2, [r3, #32]
}
 8005724:	bf00      	nop
 8005726:	371c      	adds	r7, #28
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	fffeff8f 	.word	0xfffeff8f
 8005734:	40010000 	.word	0x40010000
 8005738:	40010400 	.word	0x40010400
 800573c:	40014000 	.word	0x40014000
 8005740:	40014400 	.word	0x40014400
 8005744:	40014800 	.word	0x40014800

08005748 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005748:	b480      	push	{r7}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800576e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	4b22      	ldr	r3, [pc, #136]	@ (80057fc <TIM_OC6_SetConfig+0xb4>)
 8005774:	4013      	ands	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800578a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	051b      	lsls	r3, r3, #20
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	4313      	orrs	r3, r2
 8005796:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a19      	ldr	r2, [pc, #100]	@ (8005800 <TIM_OC6_SetConfig+0xb8>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00f      	beq.n	80057c0 <TIM_OC6_SetConfig+0x78>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a18      	ldr	r2, [pc, #96]	@ (8005804 <TIM_OC6_SetConfig+0xbc>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00b      	beq.n	80057c0 <TIM_OC6_SetConfig+0x78>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a17      	ldr	r2, [pc, #92]	@ (8005808 <TIM_OC6_SetConfig+0xc0>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d007      	beq.n	80057c0 <TIM_OC6_SetConfig+0x78>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a16      	ldr	r2, [pc, #88]	@ (800580c <TIM_OC6_SetConfig+0xc4>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d003      	beq.n	80057c0 <TIM_OC6_SetConfig+0x78>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a15      	ldr	r2, [pc, #84]	@ (8005810 <TIM_OC6_SetConfig+0xc8>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d109      	bne.n	80057d4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	029b      	lsls	r3, r3, #10
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	621a      	str	r2, [r3, #32]
}
 80057ee:	bf00      	nop
 80057f0:	371c      	adds	r7, #28
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	feff8fff 	.word	0xfeff8fff
 8005800:	40010000 	.word	0x40010000
 8005804:	40010400 	.word	0x40010400
 8005808:	40014000 	.word	0x40014000
 800580c:	40014400 	.word	0x40014400
 8005810:	40014800 	.word	0x40014800

08005814 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	f023 0201 	bic.w	r2, r3, #1
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800583e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4313      	orrs	r3, r2
 8005848:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f023 030a 	bic.w	r3, r3, #10
 8005850:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	4313      	orrs	r3, r2
 8005858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	621a      	str	r2, [r3, #32]
}
 8005866:	bf00      	nop
 8005868:	371c      	adds	r7, #28
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005872:	b480      	push	{r7}
 8005874:	b087      	sub	sp, #28
 8005876:	af00      	add	r7, sp, #0
 8005878:	60f8      	str	r0, [r7, #12]
 800587a:	60b9      	str	r1, [r7, #8]
 800587c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	f023 0210 	bic.w	r2, r3, #16
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800589c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	031b      	lsls	r3, r3, #12
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80058ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	011b      	lsls	r3, r3, #4
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	621a      	str	r2, [r3, #32]
}
 80058c6:	bf00      	nop
 80058c8:	371c      	adds	r7, #28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
	...

080058d4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	4b09      	ldr	r3, [pc, #36]	@ (800590c <TIM_ITRx_SetConfig+0x38>)
 80058e8:	4013      	ands	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	f043 0307 	orr.w	r3, r3, #7
 80058f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	609a      	str	r2, [r3, #8]
}
 80058fe:	bf00      	nop
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	ffcfff8f 	.word	0xffcfff8f

08005910 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800592a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	021a      	lsls	r2, r3, #8
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	431a      	orrs	r2, r3
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	4313      	orrs	r3, r2
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	4313      	orrs	r3, r2
 800593c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	609a      	str	r2, [r3, #8]
}
 8005944:	bf00      	nop
 8005946:	371c      	adds	r7, #28
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005960:	2b01      	cmp	r3, #1
 8005962:	d101      	bne.n	8005968 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005964:	2302      	movs	r3, #2
 8005966:	e06d      	b.n	8005a44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2202      	movs	r2, #2
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a30      	ldr	r2, [pc, #192]	@ (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d004      	beq.n	800599c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a2f      	ldr	r2, [pc, #188]	@ (8005a54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d108      	bne.n	80059ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80059a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4313      	orrs	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a20      	ldr	r2, [pc, #128]	@ (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d022      	beq.n	8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059da:	d01d      	beq.n	8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d018      	beq.n	8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a1c      	ldr	r2, [pc, #112]	@ (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d013      	beq.n	8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a1a      	ldr	r2, [pc, #104]	@ (8005a60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d00e      	beq.n	8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a15      	ldr	r2, [pc, #84]	@ (8005a54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d009      	beq.n	8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a16      	ldr	r2, [pc, #88]	@ (8005a64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d004      	beq.n	8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a15      	ldr	r2, [pc, #84]	@ (8005a68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d10c      	bne.n	8005a32 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	40010000 	.word	0x40010000
 8005a54:	40010400 	.word	0x40010400
 8005a58:	40000400 	.word	0x40000400
 8005a5c:	40000800 	.word	0x40000800
 8005a60:	40000c00 	.word	0x40000c00
 8005a64:	40001800 	.word	0x40001800
 8005a68:	40014000 	.word	0x40014000

08005a6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e065      	b.n	8005b54 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	041b      	lsls	r3, r3, #16
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a16      	ldr	r2, [pc, #88]	@ (8005b60 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d004      	beq.n	8005b16 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a14      	ldr	r2, [pc, #80]	@ (8005b64 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d115      	bne.n	8005b42 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b20:	051b      	lsls	r3, r3, #20
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	40010000 	.word	0x40010000
 8005b64:	40010400 	.word	0x40010400

08005b68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e042      	b.n	8005c3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d106      	bne.n	8005bce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7fb f8f1 	bl	8000db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2224      	movs	r2, #36	@ 0x24
 8005bd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0201 	bic.w	r2, r2, #1
 8005be4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fe1e 	bl	8006830 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f8b3 	bl	8005d60 <UART_SetConfig>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e01b      	b.n	8005c3c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689a      	ldr	r2, [r3, #8]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0201 	orr.w	r2, r2, #1
 8005c32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fe9d 	bl	8006974 <UART_CheckIdleState>
 8005c3a:	4603      	mov	r3, r0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b08a      	sub	sp, #40	@ 0x28
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	603b      	str	r3, [r7, #0]
 8005c50:	4613      	mov	r3, r2
 8005c52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c5a:	2b20      	cmp	r3, #32
 8005c5c:	d17b      	bne.n	8005d56 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <HAL_UART_Transmit+0x26>
 8005c64:	88fb      	ldrh	r3, [r7, #6]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e074      	b.n	8005d58 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2221      	movs	r2, #33	@ 0x21
 8005c7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c7e:	f7fb fac7 	bl	8001210 <HAL_GetTick>
 8005c82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	88fa      	ldrh	r2, [r7, #6]
 8005c88:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	88fa      	ldrh	r2, [r7, #6]
 8005c90:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c9c:	d108      	bne.n	8005cb0 <HAL_UART_Transmit+0x6c>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d104      	bne.n	8005cb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	61bb      	str	r3, [r7, #24]
 8005cae:	e003      	b.n	8005cb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005cb8:	e030      	b.n	8005d1c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	2180      	movs	r1, #128	@ 0x80
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 feff 	bl	8006ac8 <UART_WaitOnFlagUntilTimeout>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d005      	beq.n	8005cdc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e03d      	b.n	8005d58 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10b      	bne.n	8005cfa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cf0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	3302      	adds	r3, #2
 8005cf6:	61bb      	str	r3, [r7, #24]
 8005cf8:	e007      	b.n	8005d0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	781a      	ldrb	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	3301      	adds	r3, #1
 8005d08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1c8      	bne.n	8005cba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	2140      	movs	r1, #64	@ 0x40
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 fec8 	bl	8006ac8 <UART_WaitOnFlagUntilTimeout>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d005      	beq.n	8005d4a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2220      	movs	r2, #32
 8005d42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e006      	b.n	8005d58 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005d52:	2300      	movs	r3, #0
 8005d54:	e000      	b.n	8005d58 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005d56:	2302      	movs	r3, #2
  }
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3720      	adds	r7, #32
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d64:	b092      	sub	sp, #72	@ 0x48
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	431a      	orrs	r2, r3
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	69db      	ldr	r3, [r3, #28]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	4bbe      	ldr	r3, [pc, #760]	@ (8006088 <UART_SetConfig+0x328>)
 8005d90:	4013      	ands	r3, r2
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	6812      	ldr	r2, [r2, #0]
 8005d96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4ab3      	ldr	r2, [pc, #716]	@ (800608c <UART_SetConfig+0x32c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d004      	beq.n	8005dcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689a      	ldr	r2, [r3, #8]
 8005dd2:	4baf      	ldr	r3, [pc, #700]	@ (8006090 <UART_SetConfig+0x330>)
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	6812      	ldr	r2, [r2, #0]
 8005dda:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005ddc:	430b      	orrs	r3, r1
 8005dde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de6:	f023 010f 	bic.w	r1, r3, #15
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4aa6      	ldr	r2, [pc, #664]	@ (8006094 <UART_SetConfig+0x334>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d177      	bne.n	8005ef0 <UART_SetConfig+0x190>
 8005e00:	4ba5      	ldr	r3, [pc, #660]	@ (8006098 <UART_SetConfig+0x338>)
 8005e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e08:	2b28      	cmp	r3, #40	@ 0x28
 8005e0a:	d86d      	bhi.n	8005ee8 <UART_SetConfig+0x188>
 8005e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e14 <UART_SetConfig+0xb4>)
 8005e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e12:	bf00      	nop
 8005e14:	08005eb9 	.word	0x08005eb9
 8005e18:	08005ee9 	.word	0x08005ee9
 8005e1c:	08005ee9 	.word	0x08005ee9
 8005e20:	08005ee9 	.word	0x08005ee9
 8005e24:	08005ee9 	.word	0x08005ee9
 8005e28:	08005ee9 	.word	0x08005ee9
 8005e2c:	08005ee9 	.word	0x08005ee9
 8005e30:	08005ee9 	.word	0x08005ee9
 8005e34:	08005ec1 	.word	0x08005ec1
 8005e38:	08005ee9 	.word	0x08005ee9
 8005e3c:	08005ee9 	.word	0x08005ee9
 8005e40:	08005ee9 	.word	0x08005ee9
 8005e44:	08005ee9 	.word	0x08005ee9
 8005e48:	08005ee9 	.word	0x08005ee9
 8005e4c:	08005ee9 	.word	0x08005ee9
 8005e50:	08005ee9 	.word	0x08005ee9
 8005e54:	08005ec9 	.word	0x08005ec9
 8005e58:	08005ee9 	.word	0x08005ee9
 8005e5c:	08005ee9 	.word	0x08005ee9
 8005e60:	08005ee9 	.word	0x08005ee9
 8005e64:	08005ee9 	.word	0x08005ee9
 8005e68:	08005ee9 	.word	0x08005ee9
 8005e6c:	08005ee9 	.word	0x08005ee9
 8005e70:	08005ee9 	.word	0x08005ee9
 8005e74:	08005ed1 	.word	0x08005ed1
 8005e78:	08005ee9 	.word	0x08005ee9
 8005e7c:	08005ee9 	.word	0x08005ee9
 8005e80:	08005ee9 	.word	0x08005ee9
 8005e84:	08005ee9 	.word	0x08005ee9
 8005e88:	08005ee9 	.word	0x08005ee9
 8005e8c:	08005ee9 	.word	0x08005ee9
 8005e90:	08005ee9 	.word	0x08005ee9
 8005e94:	08005ed9 	.word	0x08005ed9
 8005e98:	08005ee9 	.word	0x08005ee9
 8005e9c:	08005ee9 	.word	0x08005ee9
 8005ea0:	08005ee9 	.word	0x08005ee9
 8005ea4:	08005ee9 	.word	0x08005ee9
 8005ea8:	08005ee9 	.word	0x08005ee9
 8005eac:	08005ee9 	.word	0x08005ee9
 8005eb0:	08005ee9 	.word	0x08005ee9
 8005eb4:	08005ee1 	.word	0x08005ee1
 8005eb8:	2301      	movs	r3, #1
 8005eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ebe:	e222      	b.n	8006306 <UART_SetConfig+0x5a6>
 8005ec0:	2304      	movs	r3, #4
 8005ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ec6:	e21e      	b.n	8006306 <UART_SetConfig+0x5a6>
 8005ec8:	2308      	movs	r3, #8
 8005eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ece:	e21a      	b.n	8006306 <UART_SetConfig+0x5a6>
 8005ed0:	2310      	movs	r3, #16
 8005ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ed6:	e216      	b.n	8006306 <UART_SetConfig+0x5a6>
 8005ed8:	2320      	movs	r3, #32
 8005eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ede:	e212      	b.n	8006306 <UART_SetConfig+0x5a6>
 8005ee0:	2340      	movs	r3, #64	@ 0x40
 8005ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ee6:	e20e      	b.n	8006306 <UART_SetConfig+0x5a6>
 8005ee8:	2380      	movs	r3, #128	@ 0x80
 8005eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eee:	e20a      	b.n	8006306 <UART_SetConfig+0x5a6>
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a69      	ldr	r2, [pc, #420]	@ (800609c <UART_SetConfig+0x33c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d130      	bne.n	8005f5c <UART_SetConfig+0x1fc>
 8005efa:	4b67      	ldr	r3, [pc, #412]	@ (8006098 <UART_SetConfig+0x338>)
 8005efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	2b05      	cmp	r3, #5
 8005f04:	d826      	bhi.n	8005f54 <UART_SetConfig+0x1f4>
 8005f06:	a201      	add	r2, pc, #4	@ (adr r2, 8005f0c <UART_SetConfig+0x1ac>)
 8005f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0c:	08005f25 	.word	0x08005f25
 8005f10:	08005f2d 	.word	0x08005f2d
 8005f14:	08005f35 	.word	0x08005f35
 8005f18:	08005f3d 	.word	0x08005f3d
 8005f1c:	08005f45 	.word	0x08005f45
 8005f20:	08005f4d 	.word	0x08005f4d
 8005f24:	2300      	movs	r3, #0
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f2a:	e1ec      	b.n	8006306 <UART_SetConfig+0x5a6>
 8005f2c:	2304      	movs	r3, #4
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f32:	e1e8      	b.n	8006306 <UART_SetConfig+0x5a6>
 8005f34:	2308      	movs	r3, #8
 8005f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f3a:	e1e4      	b.n	8006306 <UART_SetConfig+0x5a6>
 8005f3c:	2310      	movs	r3, #16
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f42:	e1e0      	b.n	8006306 <UART_SetConfig+0x5a6>
 8005f44:	2320      	movs	r3, #32
 8005f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f4a:	e1dc      	b.n	8006306 <UART_SetConfig+0x5a6>
 8005f4c:	2340      	movs	r3, #64	@ 0x40
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f52:	e1d8      	b.n	8006306 <UART_SetConfig+0x5a6>
 8005f54:	2380      	movs	r3, #128	@ 0x80
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5a:	e1d4      	b.n	8006306 <UART_SetConfig+0x5a6>
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a4f      	ldr	r2, [pc, #316]	@ (80060a0 <UART_SetConfig+0x340>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d130      	bne.n	8005fc8 <UART_SetConfig+0x268>
 8005f66:	4b4c      	ldr	r3, [pc, #304]	@ (8006098 <UART_SetConfig+0x338>)
 8005f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f6a:	f003 0307 	and.w	r3, r3, #7
 8005f6e:	2b05      	cmp	r3, #5
 8005f70:	d826      	bhi.n	8005fc0 <UART_SetConfig+0x260>
 8005f72:	a201      	add	r2, pc, #4	@ (adr r2, 8005f78 <UART_SetConfig+0x218>)
 8005f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f78:	08005f91 	.word	0x08005f91
 8005f7c:	08005f99 	.word	0x08005f99
 8005f80:	08005fa1 	.word	0x08005fa1
 8005f84:	08005fa9 	.word	0x08005fa9
 8005f88:	08005fb1 	.word	0x08005fb1
 8005f8c:	08005fb9 	.word	0x08005fb9
 8005f90:	2300      	movs	r3, #0
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f96:	e1b6      	b.n	8006306 <UART_SetConfig+0x5a6>
 8005f98:	2304      	movs	r3, #4
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f9e:	e1b2      	b.n	8006306 <UART_SetConfig+0x5a6>
 8005fa0:	2308      	movs	r3, #8
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fa6:	e1ae      	b.n	8006306 <UART_SetConfig+0x5a6>
 8005fa8:	2310      	movs	r3, #16
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fae:	e1aa      	b.n	8006306 <UART_SetConfig+0x5a6>
 8005fb0:	2320      	movs	r3, #32
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fb6:	e1a6      	b.n	8006306 <UART_SetConfig+0x5a6>
 8005fb8:	2340      	movs	r3, #64	@ 0x40
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fbe:	e1a2      	b.n	8006306 <UART_SetConfig+0x5a6>
 8005fc0:	2380      	movs	r3, #128	@ 0x80
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fc6:	e19e      	b.n	8006306 <UART_SetConfig+0x5a6>
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a35      	ldr	r2, [pc, #212]	@ (80060a4 <UART_SetConfig+0x344>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d130      	bne.n	8006034 <UART_SetConfig+0x2d4>
 8005fd2:	4b31      	ldr	r3, [pc, #196]	@ (8006098 <UART_SetConfig+0x338>)
 8005fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fd6:	f003 0307 	and.w	r3, r3, #7
 8005fda:	2b05      	cmp	r3, #5
 8005fdc:	d826      	bhi.n	800602c <UART_SetConfig+0x2cc>
 8005fde:	a201      	add	r2, pc, #4	@ (adr r2, 8005fe4 <UART_SetConfig+0x284>)
 8005fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe4:	08005ffd 	.word	0x08005ffd
 8005fe8:	08006005 	.word	0x08006005
 8005fec:	0800600d 	.word	0x0800600d
 8005ff0:	08006015 	.word	0x08006015
 8005ff4:	0800601d 	.word	0x0800601d
 8005ff8:	08006025 	.word	0x08006025
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006002:	e180      	b.n	8006306 <UART_SetConfig+0x5a6>
 8006004:	2304      	movs	r3, #4
 8006006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800600a:	e17c      	b.n	8006306 <UART_SetConfig+0x5a6>
 800600c:	2308      	movs	r3, #8
 800600e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006012:	e178      	b.n	8006306 <UART_SetConfig+0x5a6>
 8006014:	2310      	movs	r3, #16
 8006016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800601a:	e174      	b.n	8006306 <UART_SetConfig+0x5a6>
 800601c:	2320      	movs	r3, #32
 800601e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006022:	e170      	b.n	8006306 <UART_SetConfig+0x5a6>
 8006024:	2340      	movs	r3, #64	@ 0x40
 8006026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800602a:	e16c      	b.n	8006306 <UART_SetConfig+0x5a6>
 800602c:	2380      	movs	r3, #128	@ 0x80
 800602e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006032:	e168      	b.n	8006306 <UART_SetConfig+0x5a6>
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a1b      	ldr	r2, [pc, #108]	@ (80060a8 <UART_SetConfig+0x348>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d142      	bne.n	80060c4 <UART_SetConfig+0x364>
 800603e:	4b16      	ldr	r3, [pc, #88]	@ (8006098 <UART_SetConfig+0x338>)
 8006040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006042:	f003 0307 	and.w	r3, r3, #7
 8006046:	2b05      	cmp	r3, #5
 8006048:	d838      	bhi.n	80060bc <UART_SetConfig+0x35c>
 800604a:	a201      	add	r2, pc, #4	@ (adr r2, 8006050 <UART_SetConfig+0x2f0>)
 800604c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006050:	08006069 	.word	0x08006069
 8006054:	08006071 	.word	0x08006071
 8006058:	08006079 	.word	0x08006079
 800605c:	08006081 	.word	0x08006081
 8006060:	080060ad 	.word	0x080060ad
 8006064:	080060b5 	.word	0x080060b5
 8006068:	2300      	movs	r3, #0
 800606a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800606e:	e14a      	b.n	8006306 <UART_SetConfig+0x5a6>
 8006070:	2304      	movs	r3, #4
 8006072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006076:	e146      	b.n	8006306 <UART_SetConfig+0x5a6>
 8006078:	2308      	movs	r3, #8
 800607a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800607e:	e142      	b.n	8006306 <UART_SetConfig+0x5a6>
 8006080:	2310      	movs	r3, #16
 8006082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006086:	e13e      	b.n	8006306 <UART_SetConfig+0x5a6>
 8006088:	cfff69f3 	.word	0xcfff69f3
 800608c:	58000c00 	.word	0x58000c00
 8006090:	11fff4ff 	.word	0x11fff4ff
 8006094:	40011000 	.word	0x40011000
 8006098:	58024400 	.word	0x58024400
 800609c:	40004400 	.word	0x40004400
 80060a0:	40004800 	.word	0x40004800
 80060a4:	40004c00 	.word	0x40004c00
 80060a8:	40005000 	.word	0x40005000
 80060ac:	2320      	movs	r3, #32
 80060ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060b2:	e128      	b.n	8006306 <UART_SetConfig+0x5a6>
 80060b4:	2340      	movs	r3, #64	@ 0x40
 80060b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ba:	e124      	b.n	8006306 <UART_SetConfig+0x5a6>
 80060bc:	2380      	movs	r3, #128	@ 0x80
 80060be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060c2:	e120      	b.n	8006306 <UART_SetConfig+0x5a6>
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4acb      	ldr	r2, [pc, #812]	@ (80063f8 <UART_SetConfig+0x698>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d176      	bne.n	80061bc <UART_SetConfig+0x45c>
 80060ce:	4bcb      	ldr	r3, [pc, #812]	@ (80063fc <UART_SetConfig+0x69c>)
 80060d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060d6:	2b28      	cmp	r3, #40	@ 0x28
 80060d8:	d86c      	bhi.n	80061b4 <UART_SetConfig+0x454>
 80060da:	a201      	add	r2, pc, #4	@ (adr r2, 80060e0 <UART_SetConfig+0x380>)
 80060dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e0:	08006185 	.word	0x08006185
 80060e4:	080061b5 	.word	0x080061b5
 80060e8:	080061b5 	.word	0x080061b5
 80060ec:	080061b5 	.word	0x080061b5
 80060f0:	080061b5 	.word	0x080061b5
 80060f4:	080061b5 	.word	0x080061b5
 80060f8:	080061b5 	.word	0x080061b5
 80060fc:	080061b5 	.word	0x080061b5
 8006100:	0800618d 	.word	0x0800618d
 8006104:	080061b5 	.word	0x080061b5
 8006108:	080061b5 	.word	0x080061b5
 800610c:	080061b5 	.word	0x080061b5
 8006110:	080061b5 	.word	0x080061b5
 8006114:	080061b5 	.word	0x080061b5
 8006118:	080061b5 	.word	0x080061b5
 800611c:	080061b5 	.word	0x080061b5
 8006120:	08006195 	.word	0x08006195
 8006124:	080061b5 	.word	0x080061b5
 8006128:	080061b5 	.word	0x080061b5
 800612c:	080061b5 	.word	0x080061b5
 8006130:	080061b5 	.word	0x080061b5
 8006134:	080061b5 	.word	0x080061b5
 8006138:	080061b5 	.word	0x080061b5
 800613c:	080061b5 	.word	0x080061b5
 8006140:	0800619d 	.word	0x0800619d
 8006144:	080061b5 	.word	0x080061b5
 8006148:	080061b5 	.word	0x080061b5
 800614c:	080061b5 	.word	0x080061b5
 8006150:	080061b5 	.word	0x080061b5
 8006154:	080061b5 	.word	0x080061b5
 8006158:	080061b5 	.word	0x080061b5
 800615c:	080061b5 	.word	0x080061b5
 8006160:	080061a5 	.word	0x080061a5
 8006164:	080061b5 	.word	0x080061b5
 8006168:	080061b5 	.word	0x080061b5
 800616c:	080061b5 	.word	0x080061b5
 8006170:	080061b5 	.word	0x080061b5
 8006174:	080061b5 	.word	0x080061b5
 8006178:	080061b5 	.word	0x080061b5
 800617c:	080061b5 	.word	0x080061b5
 8006180:	080061ad 	.word	0x080061ad
 8006184:	2301      	movs	r3, #1
 8006186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800618a:	e0bc      	b.n	8006306 <UART_SetConfig+0x5a6>
 800618c:	2304      	movs	r3, #4
 800618e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006192:	e0b8      	b.n	8006306 <UART_SetConfig+0x5a6>
 8006194:	2308      	movs	r3, #8
 8006196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800619a:	e0b4      	b.n	8006306 <UART_SetConfig+0x5a6>
 800619c:	2310      	movs	r3, #16
 800619e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061a2:	e0b0      	b.n	8006306 <UART_SetConfig+0x5a6>
 80061a4:	2320      	movs	r3, #32
 80061a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061aa:	e0ac      	b.n	8006306 <UART_SetConfig+0x5a6>
 80061ac:	2340      	movs	r3, #64	@ 0x40
 80061ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061b2:	e0a8      	b.n	8006306 <UART_SetConfig+0x5a6>
 80061b4:	2380      	movs	r3, #128	@ 0x80
 80061b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ba:	e0a4      	b.n	8006306 <UART_SetConfig+0x5a6>
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a8f      	ldr	r2, [pc, #572]	@ (8006400 <UART_SetConfig+0x6a0>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d130      	bne.n	8006228 <UART_SetConfig+0x4c8>
 80061c6:	4b8d      	ldr	r3, [pc, #564]	@ (80063fc <UART_SetConfig+0x69c>)
 80061c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ca:	f003 0307 	and.w	r3, r3, #7
 80061ce:	2b05      	cmp	r3, #5
 80061d0:	d826      	bhi.n	8006220 <UART_SetConfig+0x4c0>
 80061d2:	a201      	add	r2, pc, #4	@ (adr r2, 80061d8 <UART_SetConfig+0x478>)
 80061d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d8:	080061f1 	.word	0x080061f1
 80061dc:	080061f9 	.word	0x080061f9
 80061e0:	08006201 	.word	0x08006201
 80061e4:	08006209 	.word	0x08006209
 80061e8:	08006211 	.word	0x08006211
 80061ec:	08006219 	.word	0x08006219
 80061f0:	2300      	movs	r3, #0
 80061f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061f6:	e086      	b.n	8006306 <UART_SetConfig+0x5a6>
 80061f8:	2304      	movs	r3, #4
 80061fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061fe:	e082      	b.n	8006306 <UART_SetConfig+0x5a6>
 8006200:	2308      	movs	r3, #8
 8006202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006206:	e07e      	b.n	8006306 <UART_SetConfig+0x5a6>
 8006208:	2310      	movs	r3, #16
 800620a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800620e:	e07a      	b.n	8006306 <UART_SetConfig+0x5a6>
 8006210:	2320      	movs	r3, #32
 8006212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006216:	e076      	b.n	8006306 <UART_SetConfig+0x5a6>
 8006218:	2340      	movs	r3, #64	@ 0x40
 800621a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800621e:	e072      	b.n	8006306 <UART_SetConfig+0x5a6>
 8006220:	2380      	movs	r3, #128	@ 0x80
 8006222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006226:	e06e      	b.n	8006306 <UART_SetConfig+0x5a6>
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a75      	ldr	r2, [pc, #468]	@ (8006404 <UART_SetConfig+0x6a4>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d130      	bne.n	8006294 <UART_SetConfig+0x534>
 8006232:	4b72      	ldr	r3, [pc, #456]	@ (80063fc <UART_SetConfig+0x69c>)
 8006234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	2b05      	cmp	r3, #5
 800623c:	d826      	bhi.n	800628c <UART_SetConfig+0x52c>
 800623e:	a201      	add	r2, pc, #4	@ (adr r2, 8006244 <UART_SetConfig+0x4e4>)
 8006240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006244:	0800625d 	.word	0x0800625d
 8006248:	08006265 	.word	0x08006265
 800624c:	0800626d 	.word	0x0800626d
 8006250:	08006275 	.word	0x08006275
 8006254:	0800627d 	.word	0x0800627d
 8006258:	08006285 	.word	0x08006285
 800625c:	2300      	movs	r3, #0
 800625e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006262:	e050      	b.n	8006306 <UART_SetConfig+0x5a6>
 8006264:	2304      	movs	r3, #4
 8006266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800626a:	e04c      	b.n	8006306 <UART_SetConfig+0x5a6>
 800626c:	2308      	movs	r3, #8
 800626e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006272:	e048      	b.n	8006306 <UART_SetConfig+0x5a6>
 8006274:	2310      	movs	r3, #16
 8006276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800627a:	e044      	b.n	8006306 <UART_SetConfig+0x5a6>
 800627c:	2320      	movs	r3, #32
 800627e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006282:	e040      	b.n	8006306 <UART_SetConfig+0x5a6>
 8006284:	2340      	movs	r3, #64	@ 0x40
 8006286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800628a:	e03c      	b.n	8006306 <UART_SetConfig+0x5a6>
 800628c:	2380      	movs	r3, #128	@ 0x80
 800628e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006292:	e038      	b.n	8006306 <UART_SetConfig+0x5a6>
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a5b      	ldr	r2, [pc, #364]	@ (8006408 <UART_SetConfig+0x6a8>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d130      	bne.n	8006300 <UART_SetConfig+0x5a0>
 800629e:	4b57      	ldr	r3, [pc, #348]	@ (80063fc <UART_SetConfig+0x69c>)
 80062a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	2b05      	cmp	r3, #5
 80062a8:	d826      	bhi.n	80062f8 <UART_SetConfig+0x598>
 80062aa:	a201      	add	r2, pc, #4	@ (adr r2, 80062b0 <UART_SetConfig+0x550>)
 80062ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b0:	080062c9 	.word	0x080062c9
 80062b4:	080062d1 	.word	0x080062d1
 80062b8:	080062d9 	.word	0x080062d9
 80062bc:	080062e1 	.word	0x080062e1
 80062c0:	080062e9 	.word	0x080062e9
 80062c4:	080062f1 	.word	0x080062f1
 80062c8:	2302      	movs	r3, #2
 80062ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ce:	e01a      	b.n	8006306 <UART_SetConfig+0x5a6>
 80062d0:	2304      	movs	r3, #4
 80062d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062d6:	e016      	b.n	8006306 <UART_SetConfig+0x5a6>
 80062d8:	2308      	movs	r3, #8
 80062da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062de:	e012      	b.n	8006306 <UART_SetConfig+0x5a6>
 80062e0:	2310      	movs	r3, #16
 80062e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062e6:	e00e      	b.n	8006306 <UART_SetConfig+0x5a6>
 80062e8:	2320      	movs	r3, #32
 80062ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ee:	e00a      	b.n	8006306 <UART_SetConfig+0x5a6>
 80062f0:	2340      	movs	r3, #64	@ 0x40
 80062f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062f6:	e006      	b.n	8006306 <UART_SetConfig+0x5a6>
 80062f8:	2380      	movs	r3, #128	@ 0x80
 80062fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062fe:	e002      	b.n	8006306 <UART_SetConfig+0x5a6>
 8006300:	2380      	movs	r3, #128	@ 0x80
 8006302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a3f      	ldr	r2, [pc, #252]	@ (8006408 <UART_SetConfig+0x6a8>)
 800630c:	4293      	cmp	r3, r2
 800630e:	f040 80f8 	bne.w	8006502 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006312:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006316:	2b20      	cmp	r3, #32
 8006318:	dc46      	bgt.n	80063a8 <UART_SetConfig+0x648>
 800631a:	2b02      	cmp	r3, #2
 800631c:	f2c0 8082 	blt.w	8006424 <UART_SetConfig+0x6c4>
 8006320:	3b02      	subs	r3, #2
 8006322:	2b1e      	cmp	r3, #30
 8006324:	d87e      	bhi.n	8006424 <UART_SetConfig+0x6c4>
 8006326:	a201      	add	r2, pc, #4	@ (adr r2, 800632c <UART_SetConfig+0x5cc>)
 8006328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632c:	080063af 	.word	0x080063af
 8006330:	08006425 	.word	0x08006425
 8006334:	080063b7 	.word	0x080063b7
 8006338:	08006425 	.word	0x08006425
 800633c:	08006425 	.word	0x08006425
 8006340:	08006425 	.word	0x08006425
 8006344:	080063c7 	.word	0x080063c7
 8006348:	08006425 	.word	0x08006425
 800634c:	08006425 	.word	0x08006425
 8006350:	08006425 	.word	0x08006425
 8006354:	08006425 	.word	0x08006425
 8006358:	08006425 	.word	0x08006425
 800635c:	08006425 	.word	0x08006425
 8006360:	08006425 	.word	0x08006425
 8006364:	080063d7 	.word	0x080063d7
 8006368:	08006425 	.word	0x08006425
 800636c:	08006425 	.word	0x08006425
 8006370:	08006425 	.word	0x08006425
 8006374:	08006425 	.word	0x08006425
 8006378:	08006425 	.word	0x08006425
 800637c:	08006425 	.word	0x08006425
 8006380:	08006425 	.word	0x08006425
 8006384:	08006425 	.word	0x08006425
 8006388:	08006425 	.word	0x08006425
 800638c:	08006425 	.word	0x08006425
 8006390:	08006425 	.word	0x08006425
 8006394:	08006425 	.word	0x08006425
 8006398:	08006425 	.word	0x08006425
 800639c:	08006425 	.word	0x08006425
 80063a0:	08006425 	.word	0x08006425
 80063a4:	08006417 	.word	0x08006417
 80063a8:	2b40      	cmp	r3, #64	@ 0x40
 80063aa:	d037      	beq.n	800641c <UART_SetConfig+0x6bc>
 80063ac:	e03a      	b.n	8006424 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80063ae:	f7fd fe2d 	bl	800400c <HAL_RCCEx_GetD3PCLK1Freq>
 80063b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063b4:	e03c      	b.n	8006430 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fd fe3c 	bl	8004038 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063c4:	e034      	b.n	8006430 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063c6:	f107 0318 	add.w	r3, r7, #24
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fd ff88 	bl	80042e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063d4:	e02c      	b.n	8006430 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063d6:	4b09      	ldr	r3, [pc, #36]	@ (80063fc <UART_SetConfig+0x69c>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0320 	and.w	r3, r3, #32
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d016      	beq.n	8006410 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063e2:	4b06      	ldr	r3, [pc, #24]	@ (80063fc <UART_SetConfig+0x69c>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	08db      	lsrs	r3, r3, #3
 80063e8:	f003 0303 	and.w	r3, r3, #3
 80063ec:	4a07      	ldr	r2, [pc, #28]	@ (800640c <UART_SetConfig+0x6ac>)
 80063ee:	fa22 f303 	lsr.w	r3, r2, r3
 80063f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063f4:	e01c      	b.n	8006430 <UART_SetConfig+0x6d0>
 80063f6:	bf00      	nop
 80063f8:	40011400 	.word	0x40011400
 80063fc:	58024400 	.word	0x58024400
 8006400:	40007800 	.word	0x40007800
 8006404:	40007c00 	.word	0x40007c00
 8006408:	58000c00 	.word	0x58000c00
 800640c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006410:	4b9d      	ldr	r3, [pc, #628]	@ (8006688 <UART_SetConfig+0x928>)
 8006412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006414:	e00c      	b.n	8006430 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006416:	4b9d      	ldr	r3, [pc, #628]	@ (800668c <UART_SetConfig+0x92c>)
 8006418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800641a:	e009      	b.n	8006430 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800641c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006422:	e005      	b.n	8006430 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800642e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 81de 	beq.w	80067f4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643c:	4a94      	ldr	r2, [pc, #592]	@ (8006690 <UART_SetConfig+0x930>)
 800643e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006442:	461a      	mov	r2, r3
 8006444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006446:	fbb3 f3f2 	udiv	r3, r3, r2
 800644a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	4613      	mov	r3, r2
 8006452:	005b      	lsls	r3, r3, #1
 8006454:	4413      	add	r3, r2
 8006456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006458:	429a      	cmp	r2, r3
 800645a:	d305      	bcc.n	8006468 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006462:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006464:	429a      	cmp	r2, r3
 8006466:	d903      	bls.n	8006470 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800646e:	e1c1      	b.n	80067f4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006472:	2200      	movs	r2, #0
 8006474:	60bb      	str	r3, [r7, #8]
 8006476:	60fa      	str	r2, [r7, #12]
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647c:	4a84      	ldr	r2, [pc, #528]	@ (8006690 <UART_SetConfig+0x930>)
 800647e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006482:	b29b      	uxth	r3, r3
 8006484:	2200      	movs	r2, #0
 8006486:	603b      	str	r3, [r7, #0]
 8006488:	607a      	str	r2, [r7, #4]
 800648a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800648e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006492:	f7f9 ff25 	bl	80002e0 <__aeabi_uldivmod>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	4610      	mov	r0, r2
 800649c:	4619      	mov	r1, r3
 800649e:	f04f 0200 	mov.w	r2, #0
 80064a2:	f04f 0300 	mov.w	r3, #0
 80064a6:	020b      	lsls	r3, r1, #8
 80064a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064ac:	0202      	lsls	r2, r0, #8
 80064ae:	6979      	ldr	r1, [r7, #20]
 80064b0:	6849      	ldr	r1, [r1, #4]
 80064b2:	0849      	lsrs	r1, r1, #1
 80064b4:	2000      	movs	r0, #0
 80064b6:	460c      	mov	r4, r1
 80064b8:	4605      	mov	r5, r0
 80064ba:	eb12 0804 	adds.w	r8, r2, r4
 80064be:	eb43 0905 	adc.w	r9, r3, r5
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	469a      	mov	sl, r3
 80064ca:	4693      	mov	fp, r2
 80064cc:	4652      	mov	r2, sl
 80064ce:	465b      	mov	r3, fp
 80064d0:	4640      	mov	r0, r8
 80064d2:	4649      	mov	r1, r9
 80064d4:	f7f9 ff04 	bl	80002e0 <__aeabi_uldivmod>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	4613      	mov	r3, r2
 80064de:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064e6:	d308      	bcc.n	80064fa <UART_SetConfig+0x79a>
 80064e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064ee:	d204      	bcs.n	80064fa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064f6:	60da      	str	r2, [r3, #12]
 80064f8:	e17c      	b.n	80067f4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006500:	e178      	b.n	80067f4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800650a:	f040 80c5 	bne.w	8006698 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800650e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006512:	2b20      	cmp	r3, #32
 8006514:	dc48      	bgt.n	80065a8 <UART_SetConfig+0x848>
 8006516:	2b00      	cmp	r3, #0
 8006518:	db7b      	blt.n	8006612 <UART_SetConfig+0x8b2>
 800651a:	2b20      	cmp	r3, #32
 800651c:	d879      	bhi.n	8006612 <UART_SetConfig+0x8b2>
 800651e:	a201      	add	r2, pc, #4	@ (adr r2, 8006524 <UART_SetConfig+0x7c4>)
 8006520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006524:	080065af 	.word	0x080065af
 8006528:	080065b7 	.word	0x080065b7
 800652c:	08006613 	.word	0x08006613
 8006530:	08006613 	.word	0x08006613
 8006534:	080065bf 	.word	0x080065bf
 8006538:	08006613 	.word	0x08006613
 800653c:	08006613 	.word	0x08006613
 8006540:	08006613 	.word	0x08006613
 8006544:	080065cf 	.word	0x080065cf
 8006548:	08006613 	.word	0x08006613
 800654c:	08006613 	.word	0x08006613
 8006550:	08006613 	.word	0x08006613
 8006554:	08006613 	.word	0x08006613
 8006558:	08006613 	.word	0x08006613
 800655c:	08006613 	.word	0x08006613
 8006560:	08006613 	.word	0x08006613
 8006564:	080065df 	.word	0x080065df
 8006568:	08006613 	.word	0x08006613
 800656c:	08006613 	.word	0x08006613
 8006570:	08006613 	.word	0x08006613
 8006574:	08006613 	.word	0x08006613
 8006578:	08006613 	.word	0x08006613
 800657c:	08006613 	.word	0x08006613
 8006580:	08006613 	.word	0x08006613
 8006584:	08006613 	.word	0x08006613
 8006588:	08006613 	.word	0x08006613
 800658c:	08006613 	.word	0x08006613
 8006590:	08006613 	.word	0x08006613
 8006594:	08006613 	.word	0x08006613
 8006598:	08006613 	.word	0x08006613
 800659c:	08006613 	.word	0x08006613
 80065a0:	08006613 	.word	0x08006613
 80065a4:	08006605 	.word	0x08006605
 80065a8:	2b40      	cmp	r3, #64	@ 0x40
 80065aa:	d02e      	beq.n	800660a <UART_SetConfig+0x8aa>
 80065ac:	e031      	b.n	8006612 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065ae:	f7fc fab5 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 80065b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80065b4:	e033      	b.n	800661e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065b6:	f7fc fac7 	bl	8002b48 <HAL_RCC_GetPCLK2Freq>
 80065ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80065bc:	e02f      	b.n	800661e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fd fd38 	bl	8004038 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065cc:	e027      	b.n	800661e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065ce:	f107 0318 	add.w	r3, r7, #24
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fd fe84 	bl	80042e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065dc:	e01f      	b.n	800661e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065de:	4b2d      	ldr	r3, [pc, #180]	@ (8006694 <UART_SetConfig+0x934>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0320 	and.w	r3, r3, #32
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d009      	beq.n	80065fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065ea:	4b2a      	ldr	r3, [pc, #168]	@ (8006694 <UART_SetConfig+0x934>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	08db      	lsrs	r3, r3, #3
 80065f0:	f003 0303 	and.w	r3, r3, #3
 80065f4:	4a24      	ldr	r2, [pc, #144]	@ (8006688 <UART_SetConfig+0x928>)
 80065f6:	fa22 f303 	lsr.w	r3, r2, r3
 80065fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065fc:	e00f      	b.n	800661e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80065fe:	4b22      	ldr	r3, [pc, #136]	@ (8006688 <UART_SetConfig+0x928>)
 8006600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006602:	e00c      	b.n	800661e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006604:	4b21      	ldr	r3, [pc, #132]	@ (800668c <UART_SetConfig+0x92c>)
 8006606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006608:	e009      	b.n	800661e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800660a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800660e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006610:	e005      	b.n	800661e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006612:	2300      	movs	r3, #0
 8006614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800661c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800661e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 80e7 	beq.w	80067f4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800662a:	4a19      	ldr	r2, [pc, #100]	@ (8006690 <UART_SetConfig+0x930>)
 800662c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006630:	461a      	mov	r2, r3
 8006632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006634:	fbb3 f3f2 	udiv	r3, r3, r2
 8006638:	005a      	lsls	r2, r3, #1
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	085b      	lsrs	r3, r3, #1
 8006640:	441a      	add	r2, r3
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	fbb2 f3f3 	udiv	r3, r2, r3
 800664a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800664c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664e:	2b0f      	cmp	r3, #15
 8006650:	d916      	bls.n	8006680 <UART_SetConfig+0x920>
 8006652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006658:	d212      	bcs.n	8006680 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800665a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665c:	b29b      	uxth	r3, r3
 800665e:	f023 030f 	bic.w	r3, r3, #15
 8006662:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006666:	085b      	lsrs	r3, r3, #1
 8006668:	b29b      	uxth	r3, r3
 800666a:	f003 0307 	and.w	r3, r3, #7
 800666e:	b29a      	uxth	r2, r3
 8006670:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006672:	4313      	orrs	r3, r2
 8006674:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800667c:	60da      	str	r2, [r3, #12]
 800667e:	e0b9      	b.n	80067f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006686:	e0b5      	b.n	80067f4 <UART_SetConfig+0xa94>
 8006688:	03d09000 	.word	0x03d09000
 800668c:	003d0900 	.word	0x003d0900
 8006690:	08009e3c 	.word	0x08009e3c
 8006694:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006698:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800669c:	2b20      	cmp	r3, #32
 800669e:	dc49      	bgt.n	8006734 <UART_SetConfig+0x9d4>
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	db7c      	blt.n	800679e <UART_SetConfig+0xa3e>
 80066a4:	2b20      	cmp	r3, #32
 80066a6:	d87a      	bhi.n	800679e <UART_SetConfig+0xa3e>
 80066a8:	a201      	add	r2, pc, #4	@ (adr r2, 80066b0 <UART_SetConfig+0x950>)
 80066aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ae:	bf00      	nop
 80066b0:	0800673b 	.word	0x0800673b
 80066b4:	08006743 	.word	0x08006743
 80066b8:	0800679f 	.word	0x0800679f
 80066bc:	0800679f 	.word	0x0800679f
 80066c0:	0800674b 	.word	0x0800674b
 80066c4:	0800679f 	.word	0x0800679f
 80066c8:	0800679f 	.word	0x0800679f
 80066cc:	0800679f 	.word	0x0800679f
 80066d0:	0800675b 	.word	0x0800675b
 80066d4:	0800679f 	.word	0x0800679f
 80066d8:	0800679f 	.word	0x0800679f
 80066dc:	0800679f 	.word	0x0800679f
 80066e0:	0800679f 	.word	0x0800679f
 80066e4:	0800679f 	.word	0x0800679f
 80066e8:	0800679f 	.word	0x0800679f
 80066ec:	0800679f 	.word	0x0800679f
 80066f0:	0800676b 	.word	0x0800676b
 80066f4:	0800679f 	.word	0x0800679f
 80066f8:	0800679f 	.word	0x0800679f
 80066fc:	0800679f 	.word	0x0800679f
 8006700:	0800679f 	.word	0x0800679f
 8006704:	0800679f 	.word	0x0800679f
 8006708:	0800679f 	.word	0x0800679f
 800670c:	0800679f 	.word	0x0800679f
 8006710:	0800679f 	.word	0x0800679f
 8006714:	0800679f 	.word	0x0800679f
 8006718:	0800679f 	.word	0x0800679f
 800671c:	0800679f 	.word	0x0800679f
 8006720:	0800679f 	.word	0x0800679f
 8006724:	0800679f 	.word	0x0800679f
 8006728:	0800679f 	.word	0x0800679f
 800672c:	0800679f 	.word	0x0800679f
 8006730:	08006791 	.word	0x08006791
 8006734:	2b40      	cmp	r3, #64	@ 0x40
 8006736:	d02e      	beq.n	8006796 <UART_SetConfig+0xa36>
 8006738:	e031      	b.n	800679e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800673a:	f7fc f9ef 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 800673e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006740:	e033      	b.n	80067aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006742:	f7fc fa01 	bl	8002b48 <HAL_RCC_GetPCLK2Freq>
 8006746:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006748:	e02f      	b.n	80067aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800674a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800674e:	4618      	mov	r0, r3
 8006750:	f7fd fc72 	bl	8004038 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006758:	e027      	b.n	80067aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800675a:	f107 0318 	add.w	r3, r7, #24
 800675e:	4618      	mov	r0, r3
 8006760:	f7fd fdbe 	bl	80042e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006768:	e01f      	b.n	80067aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800676a:	4b2d      	ldr	r3, [pc, #180]	@ (8006820 <UART_SetConfig+0xac0>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0320 	and.w	r3, r3, #32
 8006772:	2b00      	cmp	r3, #0
 8006774:	d009      	beq.n	800678a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006776:	4b2a      	ldr	r3, [pc, #168]	@ (8006820 <UART_SetConfig+0xac0>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	08db      	lsrs	r3, r3, #3
 800677c:	f003 0303 	and.w	r3, r3, #3
 8006780:	4a28      	ldr	r2, [pc, #160]	@ (8006824 <UART_SetConfig+0xac4>)
 8006782:	fa22 f303 	lsr.w	r3, r2, r3
 8006786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006788:	e00f      	b.n	80067aa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800678a:	4b26      	ldr	r3, [pc, #152]	@ (8006824 <UART_SetConfig+0xac4>)
 800678c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800678e:	e00c      	b.n	80067aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006790:	4b25      	ldr	r3, [pc, #148]	@ (8006828 <UART_SetConfig+0xac8>)
 8006792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006794:	e009      	b.n	80067aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006796:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800679a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800679c:	e005      	b.n	80067aa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80067a8:	bf00      	nop
    }

    if (pclk != 0U)
 80067aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d021      	beq.n	80067f4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b4:	4a1d      	ldr	r2, [pc, #116]	@ (800682c <UART_SetConfig+0xacc>)
 80067b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067ba:	461a      	mov	r2, r3
 80067bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067be:	fbb3 f2f2 	udiv	r2, r3, r2
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	085b      	lsrs	r3, r3, #1
 80067c8:	441a      	add	r2, r3
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d6:	2b0f      	cmp	r3, #15
 80067d8:	d909      	bls.n	80067ee <UART_SetConfig+0xa8e>
 80067da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067e0:	d205      	bcs.n	80067ee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	60da      	str	r2, [r3, #12]
 80067ec:	e002      	b.n	80067f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	2201      	movs	r2, #1
 8006800:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	2200      	movs	r2, #0
 8006808:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	2200      	movs	r2, #0
 800680e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006810:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006814:	4618      	mov	r0, r3
 8006816:	3748      	adds	r7, #72	@ 0x48
 8006818:	46bd      	mov	sp, r7
 800681a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800681e:	bf00      	nop
 8006820:	58024400 	.word	0x58024400
 8006824:	03d09000 	.word	0x03d09000
 8006828:	003d0900 	.word	0x003d0900
 800682c:	08009e3c 	.word	0x08009e3c

08006830 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800683c:	f003 0308 	and.w	r3, r3, #8
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00a      	beq.n	800685a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00a      	beq.n	800687c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	430a      	orrs	r2, r1
 800687a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00a      	beq.n	800689e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a2:	f003 0304 	and.w	r3, r3, #4
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	430a      	orrs	r2, r1
 80068be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c4:	f003 0310 	and.w	r3, r3, #16
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00a      	beq.n	80068e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	430a      	orrs	r2, r1
 80068e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e6:	f003 0320 	and.w	r3, r3, #32
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00a      	beq.n	8006904 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	430a      	orrs	r2, r1
 8006902:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01a      	beq.n	8006946 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800692a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800692e:	d10a      	bne.n	8006946 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800694a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00a      	beq.n	8006968 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	605a      	str	r2, [r3, #4]
  }
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b098      	sub	sp, #96	@ 0x60
 8006978:	af02      	add	r7, sp, #8
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006984:	f7fa fc44 	bl	8001210 <HAL_GetTick>
 8006988:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0308 	and.w	r3, r3, #8
 8006994:	2b08      	cmp	r3, #8
 8006996:	d12f      	bne.n	80069f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006998:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069a0:	2200      	movs	r2, #0
 80069a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f88e 	bl	8006ac8 <UART_WaitOnFlagUntilTimeout>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d022      	beq.n	80069f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ba:	e853 3f00 	ldrex	r3, [r3]
 80069be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	461a      	mov	r2, r3
 80069ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80069d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069d8:	e841 2300 	strex	r3, r2, [r1]
 80069dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1e6      	bne.n	80069b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2220      	movs	r2, #32
 80069e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e063      	b.n	8006ac0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0304 	and.w	r3, r3, #4
 8006a02:	2b04      	cmp	r3, #4
 8006a04:	d149      	bne.n	8006a9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a06:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f857 	bl	8006ac8 <UART_WaitOnFlagUntilTimeout>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d03c      	beq.n	8006a9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a28:	e853 3f00 	ldrex	r3, [r3]
 8006a2c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a40:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a46:	e841 2300 	strex	r3, r2, [r1]
 8006a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1e6      	bne.n	8006a20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3308      	adds	r3, #8
 8006a58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f023 0301 	bic.w	r3, r3, #1
 8006a68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	3308      	adds	r3, #8
 8006a70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a72:	61fa      	str	r2, [r7, #28]
 8006a74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	69b9      	ldr	r1, [r7, #24]
 8006a78:	69fa      	ldr	r2, [r7, #28]
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	617b      	str	r3, [r7, #20]
   return(result);
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e5      	bne.n	8006a52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e012      	b.n	8006ac0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3758      	adds	r7, #88	@ 0x58
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	603b      	str	r3, [r7, #0]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ad8:	e04f      	b.n	8006b7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ae0:	d04b      	beq.n	8006b7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ae2:	f7fa fb95 	bl	8001210 <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d302      	bcc.n	8006af8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d101      	bne.n	8006afc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e04e      	b.n	8006b9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0304 	and.w	r3, r3, #4
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d037      	beq.n	8006b7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	2b80      	cmp	r3, #128	@ 0x80
 8006b0e:	d034      	beq.n	8006b7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2b40      	cmp	r3, #64	@ 0x40
 8006b14:	d031      	beq.n	8006b7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	69db      	ldr	r3, [r3, #28]
 8006b1c:	f003 0308 	and.w	r3, r3, #8
 8006b20:	2b08      	cmp	r3, #8
 8006b22:	d110      	bne.n	8006b46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2208      	movs	r2, #8
 8006b2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f000 f839 	bl	8006ba4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2208      	movs	r2, #8
 8006b36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e029      	b.n	8006b9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b54:	d111      	bne.n	8006b7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f000 f81f 	bl	8006ba4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e00f      	b.n	8006b9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	69da      	ldr	r2, [r3, #28]
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	4013      	ands	r3, r2
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	bf0c      	ite	eq
 8006b8a:	2301      	moveq	r3, #1
 8006b8c:	2300      	movne	r3, #0
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	461a      	mov	r2, r3
 8006b92:	79fb      	ldrb	r3, [r7, #7]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d0a0      	beq.n	8006ada <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
	...

08006ba4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b095      	sub	sp, #84	@ 0x54
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bb4:	e853 3f00 	ldrex	r3, [r3]
 8006bb8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bca:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bd2:	e841 2300 	strex	r3, r2, [r1]
 8006bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1e6      	bne.n	8006bac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3308      	adds	r3, #8
 8006be4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	e853 3f00 	ldrex	r3, [r3]
 8006bec:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bee:	69fa      	ldr	r2, [r7, #28]
 8006bf0:	4b1e      	ldr	r3, [pc, #120]	@ (8006c6c <UART_EndRxTransfer+0xc8>)
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3308      	adds	r3, #8
 8006bfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c06:	e841 2300 	strex	r3, r2, [r1]
 8006c0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1e5      	bne.n	8006bde <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d118      	bne.n	8006c4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	e853 3f00 	ldrex	r3, [r3]
 8006c26:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	f023 0310 	bic.w	r3, r3, #16
 8006c2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	461a      	mov	r2, r3
 8006c36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c38:	61bb      	str	r3, [r7, #24]
 8006c3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	6979      	ldr	r1, [r7, #20]
 8006c3e:	69ba      	ldr	r2, [r7, #24]
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	613b      	str	r3, [r7, #16]
   return(result);
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e6      	bne.n	8006c1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006c60:	bf00      	nop
 8006c62:	3754      	adds	r7, #84	@ 0x54
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	effffffe 	.word	0xeffffffe

08006c70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d101      	bne.n	8006c86 <HAL_UARTEx_DisableFifoMode+0x16>
 8006c82:	2302      	movs	r3, #2
 8006c84:	e027      	b.n	8006cd6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2224      	movs	r2, #36	@ 0x24
 8006c92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f022 0201 	bic.w	r2, r2, #1
 8006cac:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006cb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b084      	sub	sp, #16
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d101      	bne.n	8006cfa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	e02d      	b.n	8006d56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2224      	movs	r2, #36	@ 0x24
 8006d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f022 0201 	bic.w	r2, r2, #1
 8006d20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f850 	bl	8006ddc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2220      	movs	r2, #32
 8006d48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d101      	bne.n	8006d76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d72:	2302      	movs	r3, #2
 8006d74:	e02d      	b.n	8006dd2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2224      	movs	r2, #36	@ 0x24
 8006d82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f022 0201 	bic.w	r2, r2, #1
 8006d9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	430a      	orrs	r2, r1
 8006db0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f812 	bl	8006ddc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
	...

08006ddc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d108      	bne.n	8006dfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006dfc:	e031      	b.n	8006e62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006dfe:	2310      	movs	r3, #16
 8006e00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e02:	2310      	movs	r3, #16
 8006e04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	0e5b      	lsrs	r3, r3, #25
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	f003 0307 	and.w	r3, r3, #7
 8006e14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	0f5b      	lsrs	r3, r3, #29
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	f003 0307 	and.w	r3, r3, #7
 8006e24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e26:	7bbb      	ldrb	r3, [r7, #14]
 8006e28:	7b3a      	ldrb	r2, [r7, #12]
 8006e2a:	4911      	ldr	r1, [pc, #68]	@ (8006e70 <UARTEx_SetNbDataToProcess+0x94>)
 8006e2c:	5c8a      	ldrb	r2, [r1, r2]
 8006e2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e32:	7b3a      	ldrb	r2, [r7, #12]
 8006e34:	490f      	ldr	r1, [pc, #60]	@ (8006e74 <UARTEx_SetNbDataToProcess+0x98>)
 8006e36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e38:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
 8006e46:	7b7a      	ldrb	r2, [r7, #13]
 8006e48:	4909      	ldr	r1, [pc, #36]	@ (8006e70 <UARTEx_SetNbDataToProcess+0x94>)
 8006e4a:	5c8a      	ldrb	r2, [r1, r2]
 8006e4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e50:	7b7a      	ldrb	r2, [r7, #13]
 8006e52:	4908      	ldr	r1, [pc, #32]	@ (8006e74 <UARTEx_SetNbDataToProcess+0x98>)
 8006e54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e56:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006e62:	bf00      	nop
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	08009e54 	.word	0x08009e54
 8006e74:	08009e5c 	.word	0x08009e5c

08006e78 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006e7c:	4904      	ldr	r1, [pc, #16]	@ (8006e90 <MX_FATFS_Init+0x18>)
 8006e7e:	4805      	ldr	r0, [pc, #20]	@ (8006e94 <MX_FATFS_Init+0x1c>)
 8006e80:	f000 f8b0 	bl	8006fe4 <FATFS_LinkDriver>
 8006e84:	4603      	mov	r3, r0
 8006e86:	461a      	mov	r2, r3
 8006e88:	4b03      	ldr	r3, [pc, #12]	@ (8006e98 <MX_FATFS_Init+0x20>)
 8006e8a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006e8c:	bf00      	nop
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	24000220 	.word	0x24000220
 8006e94:	24000010 	.word	0x24000010
 8006e98:	2400021c 	.word	0x2400021c

08006e9c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8006ea6:	4b06      	ldr	r3, [pc, #24]	@ (8006ec0 <USER_initialize+0x24>)
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006eac:	4b04      	ldr	r3, [pc, #16]	@ (8006ec0 <USER_initialize+0x24>)
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	2400000d 	.word	0x2400000d

08006ec4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8006ece:	4b06      	ldr	r3, [pc, #24]	@ (8006ee8 <USER_status+0x24>)
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006ed4:	4b04      	ldr	r3, [pc, #16]	@ (8006ee8 <USER_status+0x24>)
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	2400000d 	.word	0x2400000d

08006eec <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60b9      	str	r1, [r7, #8]
 8006ef4:	607a      	str	r2, [r7, #4]
 8006ef6:	603b      	str	r3, [r7, #0]
 8006ef8:	4603      	mov	r3, r0
 8006efa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8006efc:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b085      	sub	sp, #20
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
 8006f14:	603b      	str	r3, [r7, #0]
 8006f16:	4603      	mov	r3, r0
 8006f18:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8006f1a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	4603      	mov	r3, r0
 8006f30:	603a      	str	r2, [r7, #0]
 8006f32:	71fb      	strb	r3, [r7, #7]
 8006f34:	460b      	mov	r3, r1
 8006f36:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	73fb      	strb	r3, [r7, #15]
    return res;
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
	...

08006f4c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b087      	sub	sp, #28
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	4613      	mov	r3, r2
 8006f58:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006f62:	4b1f      	ldr	r3, [pc, #124]	@ (8006fe0 <FATFS_LinkDriverEx+0x94>)
 8006f64:	7a5b      	ldrb	r3, [r3, #9]
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d131      	bne.n	8006fd0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8006fe0 <FATFS_LinkDriverEx+0x94>)
 8006f6e:	7a5b      	ldrb	r3, [r3, #9]
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	461a      	mov	r2, r3
 8006f74:	4b1a      	ldr	r3, [pc, #104]	@ (8006fe0 <FATFS_LinkDriverEx+0x94>)
 8006f76:	2100      	movs	r1, #0
 8006f78:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006f7a:	4b19      	ldr	r3, [pc, #100]	@ (8006fe0 <FATFS_LinkDriverEx+0x94>)
 8006f7c:	7a5b      	ldrb	r3, [r3, #9]
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	4a17      	ldr	r2, [pc, #92]	@ (8006fe0 <FATFS_LinkDriverEx+0x94>)
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	4413      	add	r3, r2
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006f8a:	4b15      	ldr	r3, [pc, #84]	@ (8006fe0 <FATFS_LinkDriverEx+0x94>)
 8006f8c:	7a5b      	ldrb	r3, [r3, #9]
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	461a      	mov	r2, r3
 8006f92:	4b13      	ldr	r3, [pc, #76]	@ (8006fe0 <FATFS_LinkDriverEx+0x94>)
 8006f94:	4413      	add	r3, r2
 8006f96:	79fa      	ldrb	r2, [r7, #7]
 8006f98:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006f9a:	4b11      	ldr	r3, [pc, #68]	@ (8006fe0 <FATFS_LinkDriverEx+0x94>)
 8006f9c:	7a5b      	ldrb	r3, [r3, #9]
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	1c5a      	adds	r2, r3, #1
 8006fa2:	b2d1      	uxtb	r1, r2
 8006fa4:	4a0e      	ldr	r2, [pc, #56]	@ (8006fe0 <FATFS_LinkDriverEx+0x94>)
 8006fa6:	7251      	strb	r1, [r2, #9]
 8006fa8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006faa:	7dbb      	ldrb	r3, [r7, #22]
 8006fac:	3330      	adds	r3, #48	@ 0x30
 8006fae:	b2da      	uxtb	r2, r3
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	223a      	movs	r2, #58	@ 0x3a
 8006fba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	3302      	adds	r3, #2
 8006fc0:	222f      	movs	r2, #47	@ 0x2f
 8006fc2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	3303      	adds	r3, #3
 8006fc8:	2200      	movs	r2, #0
 8006fca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	371c      	adds	r7, #28
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	24000224 	.word	0x24000224

08006fe4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006fee:	2200      	movs	r2, #0
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f7ff ffaa 	bl	8006f4c <FATFS_LinkDriverEx>
 8006ff8:	4603      	mov	r3, r0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
	...

08007004 <__NVIC_SetPriority>:
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	4603      	mov	r3, r0
 800700c:	6039      	str	r1, [r7, #0]
 800700e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007010:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007014:	2b00      	cmp	r3, #0
 8007016:	db0a      	blt.n	800702e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	b2da      	uxtb	r2, r3
 800701c:	490c      	ldr	r1, [pc, #48]	@ (8007050 <__NVIC_SetPriority+0x4c>)
 800701e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007022:	0112      	lsls	r2, r2, #4
 8007024:	b2d2      	uxtb	r2, r2
 8007026:	440b      	add	r3, r1
 8007028:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800702c:	e00a      	b.n	8007044 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	b2da      	uxtb	r2, r3
 8007032:	4908      	ldr	r1, [pc, #32]	@ (8007054 <__NVIC_SetPriority+0x50>)
 8007034:	88fb      	ldrh	r3, [r7, #6]
 8007036:	f003 030f 	and.w	r3, r3, #15
 800703a:	3b04      	subs	r3, #4
 800703c:	0112      	lsls	r2, r2, #4
 800703e:	b2d2      	uxtb	r2, r2
 8007040:	440b      	add	r3, r1
 8007042:	761a      	strb	r2, [r3, #24]
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	e000e100 	.word	0xe000e100
 8007054:	e000ed00 	.word	0xe000ed00

08007058 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007058:	b580      	push	{r7, lr}
 800705a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800705c:	4b05      	ldr	r3, [pc, #20]	@ (8007074 <SysTick_Handler+0x1c>)
 800705e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007060:	f001 fd46 	bl	8008af0 <xTaskGetSchedulerState>
 8007064:	4603      	mov	r3, r0
 8007066:	2b01      	cmp	r3, #1
 8007068:	d001      	beq.n	800706e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800706a:	f002 fb3d 	bl	80096e8 <xPortSysTickHandler>
  }
}
 800706e:	bf00      	nop
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	e000e010 	.word	0xe000e010

08007078 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007078:	b580      	push	{r7, lr}
 800707a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800707c:	2100      	movs	r1, #0
 800707e:	f06f 0004 	mvn.w	r0, #4
 8007082:	f7ff ffbf 	bl	8007004 <__NVIC_SetPriority>
#endif
}
 8007086:	bf00      	nop
 8007088:	bd80      	pop	{r7, pc}
	...

0800708c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007092:	f3ef 8305 	mrs	r3, IPSR
 8007096:	603b      	str	r3, [r7, #0]
  return(result);
 8007098:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800709a:	2b00      	cmp	r3, #0
 800709c:	d003      	beq.n	80070a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800709e:	f06f 0305 	mvn.w	r3, #5
 80070a2:	607b      	str	r3, [r7, #4]
 80070a4:	e00c      	b.n	80070c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80070a6:	4b0a      	ldr	r3, [pc, #40]	@ (80070d0 <osKernelInitialize+0x44>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d105      	bne.n	80070ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80070ae:	4b08      	ldr	r3, [pc, #32]	@ (80070d0 <osKernelInitialize+0x44>)
 80070b0:	2201      	movs	r2, #1
 80070b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	607b      	str	r3, [r7, #4]
 80070b8:	e002      	b.n	80070c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80070ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80070be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80070c0:	687b      	ldr	r3, [r7, #4]
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	24000230 	.word	0x24000230

080070d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070da:	f3ef 8305 	mrs	r3, IPSR
 80070de:	603b      	str	r3, [r7, #0]
  return(result);
 80070e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80070e6:	f06f 0305 	mvn.w	r3, #5
 80070ea:	607b      	str	r3, [r7, #4]
 80070ec:	e010      	b.n	8007110 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80070ee:	4b0b      	ldr	r3, [pc, #44]	@ (800711c <osKernelStart+0x48>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d109      	bne.n	800710a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80070f6:	f7ff ffbf 	bl	8007078 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80070fa:	4b08      	ldr	r3, [pc, #32]	@ (800711c <osKernelStart+0x48>)
 80070fc:	2202      	movs	r2, #2
 80070fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007100:	f001 f892 	bl	8008228 <vTaskStartScheduler>
      stat = osOK;
 8007104:	2300      	movs	r3, #0
 8007106:	607b      	str	r3, [r7, #4]
 8007108:	e002      	b.n	8007110 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800710a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800710e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007110:	687b      	ldr	r3, [r7, #4]
}
 8007112:	4618      	mov	r0, r3
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	24000230 	.word	0x24000230

08007120 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007120:	b580      	push	{r7, lr}
 8007122:	b08e      	sub	sp, #56	@ 0x38
 8007124:	af04      	add	r7, sp, #16
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800712c:	2300      	movs	r3, #0
 800712e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007130:	f3ef 8305 	mrs	r3, IPSR
 8007134:	617b      	str	r3, [r7, #20]
  return(result);
 8007136:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007138:	2b00      	cmp	r3, #0
 800713a:	d17e      	bne.n	800723a <osThreadNew+0x11a>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d07b      	beq.n	800723a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007142:	2380      	movs	r3, #128	@ 0x80
 8007144:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007146:	2318      	movs	r3, #24
 8007148:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800714a:	2300      	movs	r3, #0
 800714c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800714e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007152:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d045      	beq.n	80071e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d002      	beq.n	8007168 <osThreadNew+0x48>
        name = attr->name;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d002      	beq.n	8007176 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d008      	beq.n	800718e <osThreadNew+0x6e>
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	2b38      	cmp	r3, #56	@ 0x38
 8007180:	d805      	bhi.n	800718e <osThreadNew+0x6e>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <osThreadNew+0x72>
        return (NULL);
 800718e:	2300      	movs	r3, #0
 8007190:	e054      	b.n	800723c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d003      	beq.n	80071a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	089b      	lsrs	r3, r3, #2
 80071a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00e      	beq.n	80071c8 <osThreadNew+0xa8>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	2ba7      	cmp	r3, #167	@ 0xa7
 80071b0:	d90a      	bls.n	80071c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d006      	beq.n	80071c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d002      	beq.n	80071c8 <osThreadNew+0xa8>
        mem = 1;
 80071c2:	2301      	movs	r3, #1
 80071c4:	61bb      	str	r3, [r7, #24]
 80071c6:	e010      	b.n	80071ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10c      	bne.n	80071ea <osThreadNew+0xca>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d108      	bne.n	80071ea <osThreadNew+0xca>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d104      	bne.n	80071ea <osThreadNew+0xca>
          mem = 0;
 80071e0:	2300      	movs	r3, #0
 80071e2:	61bb      	str	r3, [r7, #24]
 80071e4:	e001      	b.n	80071ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80071e6:	2300      	movs	r3, #0
 80071e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d110      	bne.n	8007212 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80071f8:	9202      	str	r2, [sp, #8]
 80071fa:	9301      	str	r3, [sp, #4]
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	6a3a      	ldr	r2, [r7, #32]
 8007204:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f000 fe1a 	bl	8007e40 <xTaskCreateStatic>
 800720c:	4603      	mov	r3, r0
 800720e:	613b      	str	r3, [r7, #16]
 8007210:	e013      	b.n	800723a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d110      	bne.n	800723a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007218:	6a3b      	ldr	r3, [r7, #32]
 800721a:	b29a      	uxth	r2, r3
 800721c:	f107 0310 	add.w	r3, r7, #16
 8007220:	9301      	str	r3, [sp, #4]
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f000 fe68 	bl	8007f00 <xTaskCreate>
 8007230:	4603      	mov	r3, r0
 8007232:	2b01      	cmp	r3, #1
 8007234:	d001      	beq.n	800723a <osThreadNew+0x11a>
            hTask = NULL;
 8007236:	2300      	movs	r3, #0
 8007238:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800723a:	693b      	ldr	r3, [r7, #16]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3728      	adds	r7, #40	@ 0x28
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800724c:	f3ef 8305 	mrs	r3, IPSR
 8007250:	60bb      	str	r3, [r7, #8]
  return(result);
 8007252:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <osDelay+0x1c>
    stat = osErrorISR;
 8007258:	f06f 0305 	mvn.w	r3, #5
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	e007      	b.n	8007270 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007260:	2300      	movs	r3, #0
 8007262:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d002      	beq.n	8007270 <osDelay+0x2c>
      vTaskDelay(ticks);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 ffa6 	bl	80081bc <vTaskDelay>
    }
  }

  return (stat);
 8007270:	68fb      	ldr	r3, [r7, #12]
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
	...

0800727c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	4a07      	ldr	r2, [pc, #28]	@ (80072a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800728c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	4a06      	ldr	r2, [pc, #24]	@ (80072ac <vApplicationGetIdleTaskMemory+0x30>)
 8007292:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2280      	movs	r2, #128	@ 0x80
 8007298:	601a      	str	r2, [r3, #0]
}
 800729a:	bf00      	nop
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	24000234 	.word	0x24000234
 80072ac:	240002dc 	.word	0x240002dc

080072b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4a07      	ldr	r2, [pc, #28]	@ (80072dc <vApplicationGetTimerTaskMemory+0x2c>)
 80072c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	4a06      	ldr	r2, [pc, #24]	@ (80072e0 <vApplicationGetTimerTaskMemory+0x30>)
 80072c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80072ce:	601a      	str	r2, [r3, #0]
}
 80072d0:	bf00      	nop
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	240004dc 	.word	0x240004dc
 80072e0:	24000584 	.word	0x24000584

080072e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f103 0208 	add.w	r2, r3, #8
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80072fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f103 0208 	add.w	r2, r3, #8
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f103 0208 	add.w	r2, r3, #8
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007332:	bf00      	nop
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800733e:	b480      	push	{r7}
 8007340:	b085      	sub	sp, #20
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	689a      	ldr	r2, [r3, #8]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	1c5a      	adds	r2, r3, #1
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	601a      	str	r2, [r3, #0]
}
 800737a:	bf00      	nop
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007386:	b480      	push	{r7}
 8007388:	b085      	sub	sp, #20
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800739c:	d103      	bne.n	80073a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	60fb      	str	r3, [r7, #12]
 80073a4:	e00c      	b.n	80073c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	3308      	adds	r3, #8
 80073aa:	60fb      	str	r3, [r7, #12]
 80073ac:	e002      	b.n	80073b4 <vListInsert+0x2e>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	60fb      	str	r3, [r7, #12]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d2f6      	bcs.n	80073ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	1c5a      	adds	r2, r3, #1
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	601a      	str	r2, [r3, #0]
}
 80073ec:	bf00      	nop
 80073ee:	3714      	adds	r7, #20
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	6892      	ldr	r2, [r2, #8]
 800740e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	6852      	ldr	r2, [r2, #4]
 8007418:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	429a      	cmp	r2, r3
 8007422:	d103      	bne.n	800742c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	689a      	ldr	r2, [r3, #8]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	1e5a      	subs	r2, r3, #1
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10b      	bne.n	8007478 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007472:	bf00      	nop
 8007474:	bf00      	nop
 8007476:	e7fd      	b.n	8007474 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007478:	f002 f8a6 	bl	80095c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007484:	68f9      	ldr	r1, [r7, #12]
 8007486:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007488:	fb01 f303 	mul.w	r3, r1, r3
 800748c:	441a      	add	r2, r3
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074a8:	3b01      	subs	r3, #1
 80074aa:	68f9      	ldr	r1, [r7, #12]
 80074ac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80074ae:	fb01 f303 	mul.w	r3, r1, r3
 80074b2:	441a      	add	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	22ff      	movs	r2, #255	@ 0xff
 80074bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	22ff      	movs	r2, #255	@ 0xff
 80074c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d114      	bne.n	80074f8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d01a      	beq.n	800750c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	3310      	adds	r3, #16
 80074da:	4618      	mov	r0, r3
 80074dc:	f001 f942 	bl	8008764 <xTaskRemoveFromEventList>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d012      	beq.n	800750c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80074e6:	4b0d      	ldr	r3, [pc, #52]	@ (800751c <xQueueGenericReset+0xd0>)
 80074e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074ec:	601a      	str	r2, [r3, #0]
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	e009      	b.n	800750c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	3310      	adds	r3, #16
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7ff fef1 	bl	80072e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	3324      	adds	r3, #36	@ 0x24
 8007506:	4618      	mov	r0, r3
 8007508:	f7ff feec 	bl	80072e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800750c:	f002 f88e 	bl	800962c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007510:	2301      	movs	r3, #1
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	e000ed04 	.word	0xe000ed04

08007520 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007520:	b580      	push	{r7, lr}
 8007522:	b08e      	sub	sp, #56	@ 0x38
 8007524:	af02      	add	r7, sp, #8
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
 800752c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10b      	bne.n	800754c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007546:	bf00      	nop
 8007548:	bf00      	nop
 800754a:	e7fd      	b.n	8007548 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10b      	bne.n	800756a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007564:	bf00      	nop
 8007566:	bf00      	nop
 8007568:	e7fd      	b.n	8007566 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <xQueueGenericCreateStatic+0x56>
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <xQueueGenericCreateStatic+0x5a>
 8007576:	2301      	movs	r3, #1
 8007578:	e000      	b.n	800757c <xQueueGenericCreateStatic+0x5c>
 800757a:	2300      	movs	r3, #0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10b      	bne.n	8007598 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007584:	f383 8811 	msr	BASEPRI, r3
 8007588:	f3bf 8f6f 	isb	sy
 800758c:	f3bf 8f4f 	dsb	sy
 8007590:	623b      	str	r3, [r7, #32]
}
 8007592:	bf00      	nop
 8007594:	bf00      	nop
 8007596:	e7fd      	b.n	8007594 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d102      	bne.n	80075a4 <xQueueGenericCreateStatic+0x84>
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d101      	bne.n	80075a8 <xQueueGenericCreateStatic+0x88>
 80075a4:	2301      	movs	r3, #1
 80075a6:	e000      	b.n	80075aa <xQueueGenericCreateStatic+0x8a>
 80075a8:	2300      	movs	r3, #0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10b      	bne.n	80075c6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	61fb      	str	r3, [r7, #28]
}
 80075c0:	bf00      	nop
 80075c2:	bf00      	nop
 80075c4:	e7fd      	b.n	80075c2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80075c6:	2350      	movs	r3, #80	@ 0x50
 80075c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2b50      	cmp	r3, #80	@ 0x50
 80075ce:	d00b      	beq.n	80075e8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80075d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	61bb      	str	r3, [r7, #24]
}
 80075e2:	bf00      	nop
 80075e4:	bf00      	nop
 80075e6:	e7fd      	b.n	80075e4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80075e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80075ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00d      	beq.n	8007610 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80075f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80075fc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	4613      	mov	r3, r2
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	68b9      	ldr	r1, [r7, #8]
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 f805 	bl	800761a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007612:	4618      	mov	r0, r3
 8007614:	3730      	adds	r7, #48	@ 0x30
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b084      	sub	sp, #16
 800761e:	af00      	add	r7, sp, #0
 8007620:	60f8      	str	r0, [r7, #12]
 8007622:	60b9      	str	r1, [r7, #8]
 8007624:	607a      	str	r2, [r7, #4]
 8007626:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d103      	bne.n	8007636 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	69ba      	ldr	r2, [r7, #24]
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	e002      	b.n	800763c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007648:	2101      	movs	r1, #1
 800764a:	69b8      	ldr	r0, [r7, #24]
 800764c:	f7ff fefe 	bl	800744c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	78fa      	ldrb	r2, [r7, #3]
 8007654:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007658:	bf00      	nop
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b08e      	sub	sp, #56	@ 0x38
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
 800766c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800766e:	2300      	movs	r3, #0
 8007670:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10b      	bne.n	8007694 <xQueueGenericSend+0x34>
	__asm volatile
 800767c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007680:	f383 8811 	msr	BASEPRI, r3
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800768e:	bf00      	nop
 8007690:	bf00      	nop
 8007692:	e7fd      	b.n	8007690 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d103      	bne.n	80076a2 <xQueueGenericSend+0x42>
 800769a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d101      	bne.n	80076a6 <xQueueGenericSend+0x46>
 80076a2:	2301      	movs	r3, #1
 80076a4:	e000      	b.n	80076a8 <xQueueGenericSend+0x48>
 80076a6:	2300      	movs	r3, #0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10b      	bne.n	80076c4 <xQueueGenericSend+0x64>
	__asm volatile
 80076ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80076be:	bf00      	nop
 80076c0:	bf00      	nop
 80076c2:	e7fd      	b.n	80076c0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d103      	bne.n	80076d2 <xQueueGenericSend+0x72>
 80076ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d101      	bne.n	80076d6 <xQueueGenericSend+0x76>
 80076d2:	2301      	movs	r3, #1
 80076d4:	e000      	b.n	80076d8 <xQueueGenericSend+0x78>
 80076d6:	2300      	movs	r3, #0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10b      	bne.n	80076f4 <xQueueGenericSend+0x94>
	__asm volatile
 80076dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	623b      	str	r3, [r7, #32]
}
 80076ee:	bf00      	nop
 80076f0:	bf00      	nop
 80076f2:	e7fd      	b.n	80076f0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076f4:	f001 f9fc 	bl	8008af0 <xTaskGetSchedulerState>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d102      	bne.n	8007704 <xQueueGenericSend+0xa4>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <xQueueGenericSend+0xa8>
 8007704:	2301      	movs	r3, #1
 8007706:	e000      	b.n	800770a <xQueueGenericSend+0xaa>
 8007708:	2300      	movs	r3, #0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10b      	bne.n	8007726 <xQueueGenericSend+0xc6>
	__asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	61fb      	str	r3, [r7, #28]
}
 8007720:	bf00      	nop
 8007722:	bf00      	nop
 8007724:	e7fd      	b.n	8007722 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007726:	f001 ff4f 	bl	80095c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800772a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800772e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007732:	429a      	cmp	r2, r3
 8007734:	d302      	bcc.n	800773c <xQueueGenericSend+0xdc>
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2b02      	cmp	r3, #2
 800773a:	d129      	bne.n	8007790 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	68b9      	ldr	r1, [r7, #8]
 8007740:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007742:	f000 fa0f 	bl	8007b64 <prvCopyDataToQueue>
 8007746:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800774c:	2b00      	cmp	r3, #0
 800774e:	d010      	beq.n	8007772 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007752:	3324      	adds	r3, #36	@ 0x24
 8007754:	4618      	mov	r0, r3
 8007756:	f001 f805 	bl	8008764 <xTaskRemoveFromEventList>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d013      	beq.n	8007788 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007760:	4b3f      	ldr	r3, [pc, #252]	@ (8007860 <xQueueGenericSend+0x200>)
 8007762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007766:	601a      	str	r2, [r3, #0]
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	e00a      	b.n	8007788 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007774:	2b00      	cmp	r3, #0
 8007776:	d007      	beq.n	8007788 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007778:	4b39      	ldr	r3, [pc, #228]	@ (8007860 <xQueueGenericSend+0x200>)
 800777a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800777e:	601a      	str	r2, [r3, #0]
 8007780:	f3bf 8f4f 	dsb	sy
 8007784:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007788:	f001 ff50 	bl	800962c <vPortExitCritical>
				return pdPASS;
 800778c:	2301      	movs	r3, #1
 800778e:	e063      	b.n	8007858 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d103      	bne.n	800779e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007796:	f001 ff49 	bl	800962c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800779a:	2300      	movs	r3, #0
 800779c:	e05c      	b.n	8007858 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800779e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d106      	bne.n	80077b2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077a4:	f107 0314 	add.w	r3, r7, #20
 80077a8:	4618      	mov	r0, r3
 80077aa:	f001 f83f 	bl	800882c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077ae:	2301      	movs	r3, #1
 80077b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077b2:	f001 ff3b 	bl	800962c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077b6:	f000 fda7 	bl	8008308 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077ba:	f001 ff05 	bl	80095c8 <vPortEnterCritical>
 80077be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80077c4:	b25b      	sxtb	r3, r3
 80077c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077ca:	d103      	bne.n	80077d4 <xQueueGenericSend+0x174>
 80077cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077da:	b25b      	sxtb	r3, r3
 80077dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077e0:	d103      	bne.n	80077ea <xQueueGenericSend+0x18a>
 80077e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077ea:	f001 ff1f 	bl	800962c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077ee:	1d3a      	adds	r2, r7, #4
 80077f0:	f107 0314 	add.w	r3, r7, #20
 80077f4:	4611      	mov	r1, r2
 80077f6:	4618      	mov	r0, r3
 80077f8:	f001 f82e 	bl	8008858 <xTaskCheckForTimeOut>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d124      	bne.n	800784c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007802:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007804:	f000 faa6 	bl	8007d54 <prvIsQueueFull>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d018      	beq.n	8007840 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800780e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007810:	3310      	adds	r3, #16
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	4611      	mov	r1, r2
 8007816:	4618      	mov	r0, r3
 8007818:	f000 ff52 	bl	80086c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800781c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800781e:	f000 fa31 	bl	8007c84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007822:	f000 fd7f 	bl	8008324 <xTaskResumeAll>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	f47f af7c 	bne.w	8007726 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800782e:	4b0c      	ldr	r3, [pc, #48]	@ (8007860 <xQueueGenericSend+0x200>)
 8007830:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007834:	601a      	str	r2, [r3, #0]
 8007836:	f3bf 8f4f 	dsb	sy
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	e772      	b.n	8007726 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007840:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007842:	f000 fa1f 	bl	8007c84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007846:	f000 fd6d 	bl	8008324 <xTaskResumeAll>
 800784a:	e76c      	b.n	8007726 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800784c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800784e:	f000 fa19 	bl	8007c84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007852:	f000 fd67 	bl	8008324 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007856:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007858:	4618      	mov	r0, r3
 800785a:	3738      	adds	r7, #56	@ 0x38
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	e000ed04 	.word	0xe000ed04

08007864 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b090      	sub	sp, #64	@ 0x40
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	607a      	str	r2, [r7, #4]
 8007870:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10b      	bne.n	8007894 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800787c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800788e:	bf00      	nop
 8007890:	bf00      	nop
 8007892:	e7fd      	b.n	8007890 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d103      	bne.n	80078a2 <xQueueGenericSendFromISR+0x3e>
 800789a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800789c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <xQueueGenericSendFromISR+0x42>
 80078a2:	2301      	movs	r3, #1
 80078a4:	e000      	b.n	80078a8 <xQueueGenericSendFromISR+0x44>
 80078a6:	2300      	movs	r3, #0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10b      	bne.n	80078c4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80078ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80078be:	bf00      	nop
 80078c0:	bf00      	nop
 80078c2:	e7fd      	b.n	80078c0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d103      	bne.n	80078d2 <xQueueGenericSendFromISR+0x6e>
 80078ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d101      	bne.n	80078d6 <xQueueGenericSendFromISR+0x72>
 80078d2:	2301      	movs	r3, #1
 80078d4:	e000      	b.n	80078d8 <xQueueGenericSendFromISR+0x74>
 80078d6:	2300      	movs	r3, #0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10b      	bne.n	80078f4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80078dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e0:	f383 8811 	msr	BASEPRI, r3
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	623b      	str	r3, [r7, #32]
}
 80078ee:	bf00      	nop
 80078f0:	bf00      	nop
 80078f2:	e7fd      	b.n	80078f0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078f4:	f001 ff48 	bl	8009788 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80078f8:	f3ef 8211 	mrs	r2, BASEPRI
 80078fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007900:	f383 8811 	msr	BASEPRI, r3
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	61fa      	str	r2, [r7, #28]
 800790e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007910:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007912:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007916:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800791a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800791c:	429a      	cmp	r2, r3
 800791e:	d302      	bcc.n	8007926 <xQueueGenericSendFromISR+0xc2>
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	2b02      	cmp	r3, #2
 8007924:	d12f      	bne.n	8007986 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007928:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800792c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007934:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	68b9      	ldr	r1, [r7, #8]
 800793a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800793c:	f000 f912 	bl	8007b64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007940:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007944:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007948:	d112      	bne.n	8007970 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800794a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800794e:	2b00      	cmp	r3, #0
 8007950:	d016      	beq.n	8007980 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007954:	3324      	adds	r3, #36	@ 0x24
 8007956:	4618      	mov	r0, r3
 8007958:	f000 ff04 	bl	8008764 <xTaskRemoveFromEventList>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00e      	beq.n	8007980 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00b      	beq.n	8007980 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	601a      	str	r2, [r3, #0]
 800796e:	e007      	b.n	8007980 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007970:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007974:	3301      	adds	r3, #1
 8007976:	b2db      	uxtb	r3, r3
 8007978:	b25a      	sxtb	r2, r3
 800797a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007980:	2301      	movs	r3, #1
 8007982:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007984:	e001      	b.n	800798a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007986:	2300      	movs	r3, #0
 8007988:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800798a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800798c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007994:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007998:	4618      	mov	r0, r3
 800799a:	3740      	adds	r7, #64	@ 0x40
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b08c      	sub	sp, #48	@ 0x30
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80079ac:	2300      	movs	r3, #0
 80079ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80079b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10b      	bne.n	80079d2 <xQueueReceive+0x32>
	__asm volatile
 80079ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079be:	f383 8811 	msr	BASEPRI, r3
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	623b      	str	r3, [r7, #32]
}
 80079cc:	bf00      	nop
 80079ce:	bf00      	nop
 80079d0:	e7fd      	b.n	80079ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d103      	bne.n	80079e0 <xQueueReceive+0x40>
 80079d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <xQueueReceive+0x44>
 80079e0:	2301      	movs	r3, #1
 80079e2:	e000      	b.n	80079e6 <xQueueReceive+0x46>
 80079e4:	2300      	movs	r3, #0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10b      	bne.n	8007a02 <xQueueReceive+0x62>
	__asm volatile
 80079ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	61fb      	str	r3, [r7, #28]
}
 80079fc:	bf00      	nop
 80079fe:	bf00      	nop
 8007a00:	e7fd      	b.n	80079fe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a02:	f001 f875 	bl	8008af0 <xTaskGetSchedulerState>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d102      	bne.n	8007a12 <xQueueReceive+0x72>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <xQueueReceive+0x76>
 8007a12:	2301      	movs	r3, #1
 8007a14:	e000      	b.n	8007a18 <xQueueReceive+0x78>
 8007a16:	2300      	movs	r3, #0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10b      	bne.n	8007a34 <xQueueReceive+0x94>
	__asm volatile
 8007a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a20:	f383 8811 	msr	BASEPRI, r3
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	61bb      	str	r3, [r7, #24]
}
 8007a2e:	bf00      	nop
 8007a30:	bf00      	nop
 8007a32:	e7fd      	b.n	8007a30 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a34:	f001 fdc8 	bl	80095c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a3c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d01f      	beq.n	8007a84 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a44:	68b9      	ldr	r1, [r7, #8]
 8007a46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a48:	f000 f8f6 	bl	8007c38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4e:	1e5a      	subs	r2, r3, #1
 8007a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a52:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00f      	beq.n	8007a7c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5e:	3310      	adds	r3, #16
 8007a60:	4618      	mov	r0, r3
 8007a62:	f000 fe7f 	bl	8008764 <xTaskRemoveFromEventList>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d007      	beq.n	8007a7c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a6c:	4b3c      	ldr	r3, [pc, #240]	@ (8007b60 <xQueueReceive+0x1c0>)
 8007a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a7c:	f001 fdd6 	bl	800962c <vPortExitCritical>
				return pdPASS;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e069      	b.n	8007b58 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d103      	bne.n	8007a92 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a8a:	f001 fdcf 	bl	800962c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	e062      	b.n	8007b58 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d106      	bne.n	8007aa6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a98:	f107 0310 	add.w	r3, r7, #16
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 fec5 	bl	800882c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007aa6:	f001 fdc1 	bl	800962c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007aaa:	f000 fc2d 	bl	8008308 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007aae:	f001 fd8b 	bl	80095c8 <vPortEnterCritical>
 8007ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ab8:	b25b      	sxtb	r3, r3
 8007aba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007abe:	d103      	bne.n	8007ac8 <xQueueReceive+0x128>
 8007ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ace:	b25b      	sxtb	r3, r3
 8007ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ad4:	d103      	bne.n	8007ade <xQueueReceive+0x13e>
 8007ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ade:	f001 fda5 	bl	800962c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ae2:	1d3a      	adds	r2, r7, #4
 8007ae4:	f107 0310 	add.w	r3, r7, #16
 8007ae8:	4611      	mov	r1, r2
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 feb4 	bl	8008858 <xTaskCheckForTimeOut>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d123      	bne.n	8007b3e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007af6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007af8:	f000 f916 	bl	8007d28 <prvIsQueueEmpty>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d017      	beq.n	8007b32 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b04:	3324      	adds	r3, #36	@ 0x24
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	4611      	mov	r1, r2
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 fdd8 	bl	80086c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b12:	f000 f8b7 	bl	8007c84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b16:	f000 fc05 	bl	8008324 <xTaskResumeAll>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d189      	bne.n	8007a34 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007b20:	4b0f      	ldr	r3, [pc, #60]	@ (8007b60 <xQueueReceive+0x1c0>)
 8007b22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b26:	601a      	str	r2, [r3, #0]
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	e780      	b.n	8007a34 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007b32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b34:	f000 f8a6 	bl	8007c84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b38:	f000 fbf4 	bl	8008324 <xTaskResumeAll>
 8007b3c:	e77a      	b.n	8007a34 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007b3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b40:	f000 f8a0 	bl	8007c84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b44:	f000 fbee 	bl	8008324 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b4a:	f000 f8ed 	bl	8007d28 <prvIsQueueEmpty>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f43f af6f 	beq.w	8007a34 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b56:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3730      	adds	r7, #48	@ 0x30
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	e000ed04 	.word	0xe000ed04

08007b64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007b70:	2300      	movs	r3, #0
 8007b72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10d      	bne.n	8007b9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d14d      	bne.n	8007c26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f000 ffcc 	bl	8008b2c <xTaskPriorityDisinherit>
 8007b94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	609a      	str	r2, [r3, #8]
 8007b9c:	e043      	b.n	8007c26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d119      	bne.n	8007bd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6858      	ldr	r0, [r3, #4]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bac:	461a      	mov	r2, r3
 8007bae:	68b9      	ldr	r1, [r7, #8]
 8007bb0:	f002 f89e 	bl	8009cf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	685a      	ldr	r2, [r3, #4]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bbc:	441a      	add	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d32b      	bcc.n	8007c26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	605a      	str	r2, [r3, #4]
 8007bd6:	e026      	b.n	8007c26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	68d8      	ldr	r0, [r3, #12]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be0:	461a      	mov	r2, r3
 8007be2:	68b9      	ldr	r1, [r7, #8]
 8007be4:	f002 f884 	bl	8009cf0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	68da      	ldr	r2, [r3, #12]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bf0:	425b      	negs	r3, r3
 8007bf2:	441a      	add	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	68da      	ldr	r2, [r3, #12]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d207      	bcs.n	8007c14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	689a      	ldr	r2, [r3, #8]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c0c:	425b      	negs	r3, r3
 8007c0e:	441a      	add	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d105      	bne.n	8007c26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d002      	beq.n	8007c26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	3b01      	subs	r3, #1
 8007c24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	1c5a      	adds	r2, r3, #1
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007c2e:	697b      	ldr	r3, [r7, #20]
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3718      	adds	r7, #24
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d018      	beq.n	8007c7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68da      	ldr	r2, [r3, #12]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c52:	441a      	add	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68da      	ldr	r2, [r3, #12]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d303      	bcc.n	8007c6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	68d9      	ldr	r1, [r3, #12]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c74:	461a      	mov	r2, r3
 8007c76:	6838      	ldr	r0, [r7, #0]
 8007c78:	f002 f83a 	bl	8009cf0 <memcpy>
	}
}
 8007c7c:	bf00      	nop
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007c8c:	f001 fc9c 	bl	80095c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c98:	e011      	b.n	8007cbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d012      	beq.n	8007cc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	3324      	adds	r3, #36	@ 0x24
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 fd5c 	bl	8008764 <xTaskRemoveFromEventList>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007cb2:	f000 fe35 	bl	8008920 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	dce9      	bgt.n	8007c9a <prvUnlockQueue+0x16>
 8007cc6:	e000      	b.n	8007cca <prvUnlockQueue+0x46>
					break;
 8007cc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	22ff      	movs	r2, #255	@ 0xff
 8007cce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007cd2:	f001 fcab 	bl	800962c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007cd6:	f001 fc77 	bl	80095c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ce0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ce2:	e011      	b.n	8007d08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d012      	beq.n	8007d12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	3310      	adds	r3, #16
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f000 fd37 	bl	8008764 <xTaskRemoveFromEventList>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d001      	beq.n	8007d00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007cfc:	f000 fe10 	bl	8008920 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d00:	7bbb      	ldrb	r3, [r7, #14]
 8007d02:	3b01      	subs	r3, #1
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	dce9      	bgt.n	8007ce4 <prvUnlockQueue+0x60>
 8007d10:	e000      	b.n	8007d14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	22ff      	movs	r2, #255	@ 0xff
 8007d18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007d1c:	f001 fc86 	bl	800962c <vPortExitCritical>
}
 8007d20:	bf00      	nop
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d30:	f001 fc4a 	bl	80095c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d102      	bne.n	8007d42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	60fb      	str	r3, [r7, #12]
 8007d40:	e001      	b.n	8007d46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007d42:	2300      	movs	r3, #0
 8007d44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d46:	f001 fc71 	bl	800962c <vPortExitCritical>

	return xReturn;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d5c:	f001 fc34 	bl	80095c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d102      	bne.n	8007d72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	e001      	b.n	8007d76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007d72:	2300      	movs	r3, #0
 8007d74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d76:	f001 fc59 	bl	800962c <vPortExitCritical>

	return xReturn;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d8e:	2300      	movs	r3, #0
 8007d90:	60fb      	str	r3, [r7, #12]
 8007d92:	e014      	b.n	8007dbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007d94:	4a0f      	ldr	r2, [pc, #60]	@ (8007dd4 <vQueueAddToRegistry+0x50>)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10b      	bne.n	8007db8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007da0:	490c      	ldr	r1, [pc, #48]	@ (8007dd4 <vQueueAddToRegistry+0x50>)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	683a      	ldr	r2, [r7, #0]
 8007da6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007daa:	4a0a      	ldr	r2, [pc, #40]	@ (8007dd4 <vQueueAddToRegistry+0x50>)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	00db      	lsls	r3, r3, #3
 8007db0:	4413      	add	r3, r2
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007db6:	e006      	b.n	8007dc6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	60fb      	str	r3, [r7, #12]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2b07      	cmp	r3, #7
 8007dc2:	d9e7      	bls.n	8007d94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007dc4:	bf00      	nop
 8007dc6:	bf00      	nop
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	24000984 	.word	0x24000984

08007dd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b086      	sub	sp, #24
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007de8:	f001 fbee 	bl	80095c8 <vPortEnterCritical>
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007df2:	b25b      	sxtb	r3, r3
 8007df4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007df8:	d103      	bne.n	8007e02 <vQueueWaitForMessageRestricted+0x2a>
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e08:	b25b      	sxtb	r3, r3
 8007e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e0e:	d103      	bne.n	8007e18 <vQueueWaitForMessageRestricted+0x40>
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e18:	f001 fc08 	bl	800962c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d106      	bne.n	8007e32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	3324      	adds	r3, #36	@ 0x24
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	68b9      	ldr	r1, [r7, #8]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f000 fc6d 	bl	800870c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007e32:	6978      	ldr	r0, [r7, #20]
 8007e34:	f7ff ff26 	bl	8007c84 <prvUnlockQueue>
	}
 8007e38:	bf00      	nop
 8007e3a:	3718      	adds	r7, #24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b08e      	sub	sp, #56	@ 0x38
 8007e44:	af04      	add	r7, sp, #16
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d10b      	bne.n	8007e6c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e58:	f383 8811 	msr	BASEPRI, r3
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	623b      	str	r3, [r7, #32]
}
 8007e66:	bf00      	nop
 8007e68:	bf00      	nop
 8007e6a:	e7fd      	b.n	8007e68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10b      	bne.n	8007e8a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	61fb      	str	r3, [r7, #28]
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop
 8007e88:	e7fd      	b.n	8007e86 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e8a:	23a8      	movs	r3, #168	@ 0xa8
 8007e8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	2ba8      	cmp	r3, #168	@ 0xa8
 8007e92:	d00b      	beq.n	8007eac <xTaskCreateStatic+0x6c>
	__asm volatile
 8007e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e98:	f383 8811 	msr	BASEPRI, r3
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	61bb      	str	r3, [r7, #24]
}
 8007ea6:	bf00      	nop
 8007ea8:	bf00      	nop
 8007eaa:	e7fd      	b.n	8007ea8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007eac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d01e      	beq.n	8007ef2 <xTaskCreateStatic+0xb2>
 8007eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d01b      	beq.n	8007ef2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ebc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ec2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec6:	2202      	movs	r2, #2
 8007ec8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007ecc:	2300      	movs	r3, #0
 8007ece:	9303      	str	r3, [sp, #12]
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed2:	9302      	str	r3, [sp, #8]
 8007ed4:	f107 0314 	add.w	r3, r7, #20
 8007ed8:	9301      	str	r3, [sp, #4]
 8007eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	68b9      	ldr	r1, [r7, #8]
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f000 f851 	bl	8007f8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007eea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007eec:	f000 f8f6 	bl	80080dc <prvAddNewTaskToReadyList>
 8007ef0:	e001      	b.n	8007ef6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ef6:	697b      	ldr	r3, [r7, #20]
	}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3728      	adds	r7, #40	@ 0x28
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b08c      	sub	sp, #48	@ 0x30
 8007f04:	af04      	add	r7, sp, #16
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	603b      	str	r3, [r7, #0]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007f10:	88fb      	ldrh	r3, [r7, #6]
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	4618      	mov	r0, r3
 8007f16:	f001 fc79 	bl	800980c <pvPortMalloc>
 8007f1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00e      	beq.n	8007f40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007f22:	20a8      	movs	r0, #168	@ 0xa8
 8007f24:	f001 fc72 	bl	800980c <pvPortMalloc>
 8007f28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d003      	beq.n	8007f38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	697a      	ldr	r2, [r7, #20]
 8007f34:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f36:	e005      	b.n	8007f44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007f38:	6978      	ldr	r0, [r7, #20]
 8007f3a:	f001 fd35 	bl	80099a8 <vPortFree>
 8007f3e:	e001      	b.n	8007f44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007f40:	2300      	movs	r3, #0
 8007f42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d017      	beq.n	8007f7a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f52:	88fa      	ldrh	r2, [r7, #6]
 8007f54:	2300      	movs	r3, #0
 8007f56:	9303      	str	r3, [sp, #12]
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	9302      	str	r3, [sp, #8]
 8007f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f5e:	9301      	str	r3, [sp, #4]
 8007f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	68b9      	ldr	r1, [r7, #8]
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f000 f80f 	bl	8007f8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f6e:	69f8      	ldr	r0, [r7, #28]
 8007f70:	f000 f8b4 	bl	80080dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f74:	2301      	movs	r3, #1
 8007f76:	61bb      	str	r3, [r7, #24]
 8007f78:	e002      	b.n	8007f80 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f7e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f80:	69bb      	ldr	r3, [r7, #24]
	}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3720      	adds	r7, #32
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
	...

08007f8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b088      	sub	sp, #32
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
 8007f98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f9c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	21a5      	movs	r1, #165	@ 0xa5
 8007fa6:	f001 fe1f 	bl	8009be8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fae:	6879      	ldr	r1, [r7, #4]
 8007fb0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007fb4:	440b      	add	r3, r1
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4413      	add	r3, r2
 8007fba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	f023 0307 	bic.w	r3, r3, #7
 8007fc2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	f003 0307 	and.w	r3, r3, #7
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00b      	beq.n	8007fe6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	617b      	str	r3, [r7, #20]
}
 8007fe0:	bf00      	nop
 8007fe2:	bf00      	nop
 8007fe4:	e7fd      	b.n	8007fe2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d01f      	beq.n	800802c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fec:	2300      	movs	r3, #0
 8007fee:	61fb      	str	r3, [r7, #28]
 8007ff0:	e012      	b.n	8008018 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	7819      	ldrb	r1, [r3, #0]
 8007ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	4413      	add	r3, r2
 8008000:	3334      	adds	r3, #52	@ 0x34
 8008002:	460a      	mov	r2, r1
 8008004:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	4413      	add	r3, r2
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d006      	beq.n	8008020 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	3301      	adds	r3, #1
 8008016:	61fb      	str	r3, [r7, #28]
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	2b0f      	cmp	r3, #15
 800801c:	d9e9      	bls.n	8007ff2 <prvInitialiseNewTask+0x66>
 800801e:	e000      	b.n	8008022 <prvInitialiseNewTask+0x96>
			{
				break;
 8008020:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008024:	2200      	movs	r2, #0
 8008026:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800802a:	e003      	b.n	8008034 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800802c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800802e:	2200      	movs	r2, #0
 8008030:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008036:	2b37      	cmp	r3, #55	@ 0x37
 8008038:	d901      	bls.n	800803e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800803a:	2337      	movs	r3, #55	@ 0x37
 800803c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800803e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008040:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008042:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008046:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008048:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800804a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804c:	2200      	movs	r2, #0
 800804e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008052:	3304      	adds	r3, #4
 8008054:	4618      	mov	r0, r3
 8008056:	f7ff f965 	bl	8007324 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800805a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805c:	3318      	adds	r3, #24
 800805e:	4618      	mov	r0, r3
 8008060:	f7ff f960 	bl	8007324 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008068:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800806a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800806c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008072:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008076:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008078:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800807a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807c:	2200      	movs	r2, #0
 800807e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008084:	2200      	movs	r2, #0
 8008086:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800808a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808c:	3354      	adds	r3, #84	@ 0x54
 800808e:	224c      	movs	r2, #76	@ 0x4c
 8008090:	2100      	movs	r1, #0
 8008092:	4618      	mov	r0, r3
 8008094:	f001 fda8 	bl	8009be8 <memset>
 8008098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809a:	4a0d      	ldr	r2, [pc, #52]	@ (80080d0 <prvInitialiseNewTask+0x144>)
 800809c:	659a      	str	r2, [r3, #88]	@ 0x58
 800809e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a0:	4a0c      	ldr	r2, [pc, #48]	@ (80080d4 <prvInitialiseNewTask+0x148>)
 80080a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80080a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a6:	4a0c      	ldr	r2, [pc, #48]	@ (80080d8 <prvInitialiseNewTask+0x14c>)
 80080a8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80080aa:	683a      	ldr	r2, [r7, #0]
 80080ac:	68f9      	ldr	r1, [r7, #12]
 80080ae:	69b8      	ldr	r0, [r7, #24]
 80080b0:	f001 f95a 	bl	8009368 <pxPortInitialiseStack>
 80080b4:	4602      	mov	r2, r0
 80080b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80080ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80080c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080c6:	bf00      	nop
 80080c8:	3720      	adds	r7, #32
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	24004c18 	.word	0x24004c18
 80080d4:	24004c80 	.word	0x24004c80
 80080d8:	24004ce8 	.word	0x24004ce8

080080dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80080e4:	f001 fa70 	bl	80095c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80080e8:	4b2d      	ldr	r3, [pc, #180]	@ (80081a0 <prvAddNewTaskToReadyList+0xc4>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	3301      	adds	r3, #1
 80080ee:	4a2c      	ldr	r2, [pc, #176]	@ (80081a0 <prvAddNewTaskToReadyList+0xc4>)
 80080f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80080f2:	4b2c      	ldr	r3, [pc, #176]	@ (80081a4 <prvAddNewTaskToReadyList+0xc8>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d109      	bne.n	800810e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80080fa:	4a2a      	ldr	r2, [pc, #168]	@ (80081a4 <prvAddNewTaskToReadyList+0xc8>)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008100:	4b27      	ldr	r3, [pc, #156]	@ (80081a0 <prvAddNewTaskToReadyList+0xc4>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d110      	bne.n	800812a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008108:	f000 fc2e 	bl	8008968 <prvInitialiseTaskLists>
 800810c:	e00d      	b.n	800812a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800810e:	4b26      	ldr	r3, [pc, #152]	@ (80081a8 <prvAddNewTaskToReadyList+0xcc>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d109      	bne.n	800812a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008116:	4b23      	ldr	r3, [pc, #140]	@ (80081a4 <prvAddNewTaskToReadyList+0xc8>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008120:	429a      	cmp	r2, r3
 8008122:	d802      	bhi.n	800812a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008124:	4a1f      	ldr	r2, [pc, #124]	@ (80081a4 <prvAddNewTaskToReadyList+0xc8>)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800812a:	4b20      	ldr	r3, [pc, #128]	@ (80081ac <prvAddNewTaskToReadyList+0xd0>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	3301      	adds	r3, #1
 8008130:	4a1e      	ldr	r2, [pc, #120]	@ (80081ac <prvAddNewTaskToReadyList+0xd0>)
 8008132:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008134:	4b1d      	ldr	r3, [pc, #116]	@ (80081ac <prvAddNewTaskToReadyList+0xd0>)
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008140:	4b1b      	ldr	r3, [pc, #108]	@ (80081b0 <prvAddNewTaskToReadyList+0xd4>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	429a      	cmp	r2, r3
 8008146:	d903      	bls.n	8008150 <prvAddNewTaskToReadyList+0x74>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800814c:	4a18      	ldr	r2, [pc, #96]	@ (80081b0 <prvAddNewTaskToReadyList+0xd4>)
 800814e:	6013      	str	r3, [r2, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008154:	4613      	mov	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4a15      	ldr	r2, [pc, #84]	@ (80081b4 <prvAddNewTaskToReadyList+0xd8>)
 800815e:	441a      	add	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	3304      	adds	r3, #4
 8008164:	4619      	mov	r1, r3
 8008166:	4610      	mov	r0, r2
 8008168:	f7ff f8e9 	bl	800733e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800816c:	f001 fa5e 	bl	800962c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008170:	4b0d      	ldr	r3, [pc, #52]	@ (80081a8 <prvAddNewTaskToReadyList+0xcc>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00e      	beq.n	8008196 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008178:	4b0a      	ldr	r3, [pc, #40]	@ (80081a4 <prvAddNewTaskToReadyList+0xc8>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008182:	429a      	cmp	r2, r3
 8008184:	d207      	bcs.n	8008196 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008186:	4b0c      	ldr	r3, [pc, #48]	@ (80081b8 <prvAddNewTaskToReadyList+0xdc>)
 8008188:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800818c:	601a      	str	r2, [r3, #0]
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008196:	bf00      	nop
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	24000e98 	.word	0x24000e98
 80081a4:	240009c4 	.word	0x240009c4
 80081a8:	24000ea4 	.word	0x24000ea4
 80081ac:	24000eb4 	.word	0x24000eb4
 80081b0:	24000ea0 	.word	0x24000ea0
 80081b4:	240009c8 	.word	0x240009c8
 80081b8:	e000ed04 	.word	0xe000ed04

080081bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80081c4:	2300      	movs	r3, #0
 80081c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d018      	beq.n	8008200 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80081ce:	4b14      	ldr	r3, [pc, #80]	@ (8008220 <vTaskDelay+0x64>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00b      	beq.n	80081ee <vTaskDelay+0x32>
	__asm volatile
 80081d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081da:	f383 8811 	msr	BASEPRI, r3
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f3bf 8f4f 	dsb	sy
 80081e6:	60bb      	str	r3, [r7, #8]
}
 80081e8:	bf00      	nop
 80081ea:	bf00      	nop
 80081ec:	e7fd      	b.n	80081ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80081ee:	f000 f88b 	bl	8008308 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80081f2:	2100      	movs	r1, #0
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fd09 	bl	8008c0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80081fa:	f000 f893 	bl	8008324 <xTaskResumeAll>
 80081fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d107      	bne.n	8008216 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008206:	4b07      	ldr	r3, [pc, #28]	@ (8008224 <vTaskDelay+0x68>)
 8008208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800820c:	601a      	str	r2, [r3, #0]
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008216:	bf00      	nop
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	24000ec0 	.word	0x24000ec0
 8008224:	e000ed04 	.word	0xe000ed04

08008228 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b08a      	sub	sp, #40	@ 0x28
 800822c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800822e:	2300      	movs	r3, #0
 8008230:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008232:	2300      	movs	r3, #0
 8008234:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008236:	463a      	mov	r2, r7
 8008238:	1d39      	adds	r1, r7, #4
 800823a:	f107 0308 	add.w	r3, r7, #8
 800823e:	4618      	mov	r0, r3
 8008240:	f7ff f81c 	bl	800727c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	9202      	str	r2, [sp, #8]
 800824c:	9301      	str	r3, [sp, #4]
 800824e:	2300      	movs	r3, #0
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	2300      	movs	r3, #0
 8008254:	460a      	mov	r2, r1
 8008256:	4924      	ldr	r1, [pc, #144]	@ (80082e8 <vTaskStartScheduler+0xc0>)
 8008258:	4824      	ldr	r0, [pc, #144]	@ (80082ec <vTaskStartScheduler+0xc4>)
 800825a:	f7ff fdf1 	bl	8007e40 <xTaskCreateStatic>
 800825e:	4603      	mov	r3, r0
 8008260:	4a23      	ldr	r2, [pc, #140]	@ (80082f0 <vTaskStartScheduler+0xc8>)
 8008262:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008264:	4b22      	ldr	r3, [pc, #136]	@ (80082f0 <vTaskStartScheduler+0xc8>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d002      	beq.n	8008272 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800826c:	2301      	movs	r3, #1
 800826e:	617b      	str	r3, [r7, #20]
 8008270:	e001      	b.n	8008276 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008272:	2300      	movs	r3, #0
 8008274:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d102      	bne.n	8008282 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800827c:	f000 fd1a 	bl	8008cb4 <xTimerCreateTimerTask>
 8008280:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	2b01      	cmp	r3, #1
 8008286:	d11b      	bne.n	80082c0 <vTaskStartScheduler+0x98>
	__asm volatile
 8008288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800828c:	f383 8811 	msr	BASEPRI, r3
 8008290:	f3bf 8f6f 	isb	sy
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	613b      	str	r3, [r7, #16]
}
 800829a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800829c:	4b15      	ldr	r3, [pc, #84]	@ (80082f4 <vTaskStartScheduler+0xcc>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	3354      	adds	r3, #84	@ 0x54
 80082a2:	4a15      	ldr	r2, [pc, #84]	@ (80082f8 <vTaskStartScheduler+0xd0>)
 80082a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80082a6:	4b15      	ldr	r3, [pc, #84]	@ (80082fc <vTaskStartScheduler+0xd4>)
 80082a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80082ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80082ae:	4b14      	ldr	r3, [pc, #80]	@ (8008300 <vTaskStartScheduler+0xd8>)
 80082b0:	2201      	movs	r2, #1
 80082b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80082b4:	4b13      	ldr	r3, [pc, #76]	@ (8008304 <vTaskStartScheduler+0xdc>)
 80082b6:	2200      	movs	r2, #0
 80082b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80082ba:	f001 f8e1 	bl	8009480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80082be:	e00f      	b.n	80082e0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082c6:	d10b      	bne.n	80082e0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80082c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082cc:	f383 8811 	msr	BASEPRI, r3
 80082d0:	f3bf 8f6f 	isb	sy
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	60fb      	str	r3, [r7, #12]
}
 80082da:	bf00      	nop
 80082dc:	bf00      	nop
 80082de:	e7fd      	b.n	80082dc <vTaskStartScheduler+0xb4>
}
 80082e0:	bf00      	nop
 80082e2:	3718      	adds	r7, #24
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	08009df0 	.word	0x08009df0
 80082ec:	08008939 	.word	0x08008939
 80082f0:	24000ebc 	.word	0x24000ebc
 80082f4:	240009c4 	.word	0x240009c4
 80082f8:	24000028 	.word	0x24000028
 80082fc:	24000eb8 	.word	0x24000eb8
 8008300:	24000ea4 	.word	0x24000ea4
 8008304:	24000e9c 	.word	0x24000e9c

08008308 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008308:	b480      	push	{r7}
 800830a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800830c:	4b04      	ldr	r3, [pc, #16]	@ (8008320 <vTaskSuspendAll+0x18>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	3301      	adds	r3, #1
 8008312:	4a03      	ldr	r2, [pc, #12]	@ (8008320 <vTaskSuspendAll+0x18>)
 8008314:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008316:	bf00      	nop
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr
 8008320:	24000ec0 	.word	0x24000ec0

08008324 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800832a:	2300      	movs	r3, #0
 800832c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800832e:	2300      	movs	r3, #0
 8008330:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008332:	4b42      	ldr	r3, [pc, #264]	@ (800843c <xTaskResumeAll+0x118>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d10b      	bne.n	8008352 <xTaskResumeAll+0x2e>
	__asm volatile
 800833a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800833e:	f383 8811 	msr	BASEPRI, r3
 8008342:	f3bf 8f6f 	isb	sy
 8008346:	f3bf 8f4f 	dsb	sy
 800834a:	603b      	str	r3, [r7, #0]
}
 800834c:	bf00      	nop
 800834e:	bf00      	nop
 8008350:	e7fd      	b.n	800834e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008352:	f001 f939 	bl	80095c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008356:	4b39      	ldr	r3, [pc, #228]	@ (800843c <xTaskResumeAll+0x118>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	3b01      	subs	r3, #1
 800835c:	4a37      	ldr	r2, [pc, #220]	@ (800843c <xTaskResumeAll+0x118>)
 800835e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008360:	4b36      	ldr	r3, [pc, #216]	@ (800843c <xTaskResumeAll+0x118>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d162      	bne.n	800842e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008368:	4b35      	ldr	r3, [pc, #212]	@ (8008440 <xTaskResumeAll+0x11c>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d05e      	beq.n	800842e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008370:	e02f      	b.n	80083d2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008372:	4b34      	ldr	r3, [pc, #208]	@ (8008444 <xTaskResumeAll+0x120>)
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	3318      	adds	r3, #24
 800837e:	4618      	mov	r0, r3
 8008380:	f7ff f83a 	bl	80073f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	3304      	adds	r3, #4
 8008388:	4618      	mov	r0, r3
 800838a:	f7ff f835 	bl	80073f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008392:	4b2d      	ldr	r3, [pc, #180]	@ (8008448 <xTaskResumeAll+0x124>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	429a      	cmp	r2, r3
 8008398:	d903      	bls.n	80083a2 <xTaskResumeAll+0x7e>
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839e:	4a2a      	ldr	r2, [pc, #168]	@ (8008448 <xTaskResumeAll+0x124>)
 80083a0:	6013      	str	r3, [r2, #0]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083a6:	4613      	mov	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4a27      	ldr	r2, [pc, #156]	@ (800844c <xTaskResumeAll+0x128>)
 80083b0:	441a      	add	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	3304      	adds	r3, #4
 80083b6:	4619      	mov	r1, r3
 80083b8:	4610      	mov	r0, r2
 80083ba:	f7fe ffc0 	bl	800733e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083c2:	4b23      	ldr	r3, [pc, #140]	@ (8008450 <xTaskResumeAll+0x12c>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d302      	bcc.n	80083d2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80083cc:	4b21      	ldr	r3, [pc, #132]	@ (8008454 <xTaskResumeAll+0x130>)
 80083ce:	2201      	movs	r2, #1
 80083d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083d2:	4b1c      	ldr	r3, [pc, #112]	@ (8008444 <xTaskResumeAll+0x120>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1cb      	bne.n	8008372 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d001      	beq.n	80083e4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80083e0:	f000 fb66 	bl	8008ab0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80083e4:	4b1c      	ldr	r3, [pc, #112]	@ (8008458 <xTaskResumeAll+0x134>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d010      	beq.n	8008412 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80083f0:	f000 f846 	bl	8008480 <xTaskIncrementTick>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d002      	beq.n	8008400 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80083fa:	4b16      	ldr	r3, [pc, #88]	@ (8008454 <xTaskResumeAll+0x130>)
 80083fc:	2201      	movs	r2, #1
 80083fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	3b01      	subs	r3, #1
 8008404:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1f1      	bne.n	80083f0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800840c:	4b12      	ldr	r3, [pc, #72]	@ (8008458 <xTaskResumeAll+0x134>)
 800840e:	2200      	movs	r2, #0
 8008410:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008412:	4b10      	ldr	r3, [pc, #64]	@ (8008454 <xTaskResumeAll+0x130>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d009      	beq.n	800842e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800841a:	2301      	movs	r3, #1
 800841c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800841e:	4b0f      	ldr	r3, [pc, #60]	@ (800845c <xTaskResumeAll+0x138>)
 8008420:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800842e:	f001 f8fd 	bl	800962c <vPortExitCritical>

	return xAlreadyYielded;
 8008432:	68bb      	ldr	r3, [r7, #8]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	24000ec0 	.word	0x24000ec0
 8008440:	24000e98 	.word	0x24000e98
 8008444:	24000e58 	.word	0x24000e58
 8008448:	24000ea0 	.word	0x24000ea0
 800844c:	240009c8 	.word	0x240009c8
 8008450:	240009c4 	.word	0x240009c4
 8008454:	24000eac 	.word	0x24000eac
 8008458:	24000ea8 	.word	0x24000ea8
 800845c:	e000ed04 	.word	0xe000ed04

08008460 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008466:	4b05      	ldr	r3, [pc, #20]	@ (800847c <xTaskGetTickCount+0x1c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800846c:	687b      	ldr	r3, [r7, #4]
}
 800846e:	4618      	mov	r0, r3
 8008470:	370c      	adds	r7, #12
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	24000e9c 	.word	0x24000e9c

08008480 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008486:	2300      	movs	r3, #0
 8008488:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800848a:	4b4f      	ldr	r3, [pc, #316]	@ (80085c8 <xTaskIncrementTick+0x148>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	f040 8090 	bne.w	80085b4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008494:	4b4d      	ldr	r3, [pc, #308]	@ (80085cc <xTaskIncrementTick+0x14c>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	3301      	adds	r3, #1
 800849a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800849c:	4a4b      	ldr	r2, [pc, #300]	@ (80085cc <xTaskIncrementTick+0x14c>)
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d121      	bne.n	80084ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80084a8:	4b49      	ldr	r3, [pc, #292]	@ (80085d0 <xTaskIncrementTick+0x150>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00b      	beq.n	80084ca <xTaskIncrementTick+0x4a>
	__asm volatile
 80084b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b6:	f383 8811 	msr	BASEPRI, r3
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	603b      	str	r3, [r7, #0]
}
 80084c4:	bf00      	nop
 80084c6:	bf00      	nop
 80084c8:	e7fd      	b.n	80084c6 <xTaskIncrementTick+0x46>
 80084ca:	4b41      	ldr	r3, [pc, #260]	@ (80085d0 <xTaskIncrementTick+0x150>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	60fb      	str	r3, [r7, #12]
 80084d0:	4b40      	ldr	r3, [pc, #256]	@ (80085d4 <xTaskIncrementTick+0x154>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a3e      	ldr	r2, [pc, #248]	@ (80085d0 <xTaskIncrementTick+0x150>)
 80084d6:	6013      	str	r3, [r2, #0]
 80084d8:	4a3e      	ldr	r2, [pc, #248]	@ (80085d4 <xTaskIncrementTick+0x154>)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6013      	str	r3, [r2, #0]
 80084de:	4b3e      	ldr	r3, [pc, #248]	@ (80085d8 <xTaskIncrementTick+0x158>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	3301      	adds	r3, #1
 80084e4:	4a3c      	ldr	r2, [pc, #240]	@ (80085d8 <xTaskIncrementTick+0x158>)
 80084e6:	6013      	str	r3, [r2, #0]
 80084e8:	f000 fae2 	bl	8008ab0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80084ec:	4b3b      	ldr	r3, [pc, #236]	@ (80085dc <xTaskIncrementTick+0x15c>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d349      	bcc.n	800858a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084f6:	4b36      	ldr	r3, [pc, #216]	@ (80085d0 <xTaskIncrementTick+0x150>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d104      	bne.n	800850a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008500:	4b36      	ldr	r3, [pc, #216]	@ (80085dc <xTaskIncrementTick+0x15c>)
 8008502:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008506:	601a      	str	r2, [r3, #0]
					break;
 8008508:	e03f      	b.n	800858a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800850a:	4b31      	ldr	r3, [pc, #196]	@ (80085d0 <xTaskIncrementTick+0x150>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800851a:	693a      	ldr	r2, [r7, #16]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	429a      	cmp	r2, r3
 8008520:	d203      	bcs.n	800852a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008522:	4a2e      	ldr	r2, [pc, #184]	@ (80085dc <xTaskIncrementTick+0x15c>)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008528:	e02f      	b.n	800858a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	3304      	adds	r3, #4
 800852e:	4618      	mov	r0, r3
 8008530:	f7fe ff62 	bl	80073f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008538:	2b00      	cmp	r3, #0
 800853a:	d004      	beq.n	8008546 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	3318      	adds	r3, #24
 8008540:	4618      	mov	r0, r3
 8008542:	f7fe ff59 	bl	80073f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800854a:	4b25      	ldr	r3, [pc, #148]	@ (80085e0 <xTaskIncrementTick+0x160>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	429a      	cmp	r2, r3
 8008550:	d903      	bls.n	800855a <xTaskIncrementTick+0xda>
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008556:	4a22      	ldr	r2, [pc, #136]	@ (80085e0 <xTaskIncrementTick+0x160>)
 8008558:	6013      	str	r3, [r2, #0]
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800855e:	4613      	mov	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4413      	add	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4a1f      	ldr	r2, [pc, #124]	@ (80085e4 <xTaskIncrementTick+0x164>)
 8008568:	441a      	add	r2, r3
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	3304      	adds	r3, #4
 800856e:	4619      	mov	r1, r3
 8008570:	4610      	mov	r0, r2
 8008572:	f7fe fee4 	bl	800733e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800857a:	4b1b      	ldr	r3, [pc, #108]	@ (80085e8 <xTaskIncrementTick+0x168>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008580:	429a      	cmp	r2, r3
 8008582:	d3b8      	bcc.n	80084f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008584:	2301      	movs	r3, #1
 8008586:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008588:	e7b5      	b.n	80084f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800858a:	4b17      	ldr	r3, [pc, #92]	@ (80085e8 <xTaskIncrementTick+0x168>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008590:	4914      	ldr	r1, [pc, #80]	@ (80085e4 <xTaskIncrementTick+0x164>)
 8008592:	4613      	mov	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4413      	add	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	440b      	add	r3, r1
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d901      	bls.n	80085a6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80085a2:	2301      	movs	r3, #1
 80085a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80085a6:	4b11      	ldr	r3, [pc, #68]	@ (80085ec <xTaskIncrementTick+0x16c>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d007      	beq.n	80085be <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80085ae:	2301      	movs	r3, #1
 80085b0:	617b      	str	r3, [r7, #20]
 80085b2:	e004      	b.n	80085be <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80085b4:	4b0e      	ldr	r3, [pc, #56]	@ (80085f0 <xTaskIncrementTick+0x170>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	3301      	adds	r3, #1
 80085ba:	4a0d      	ldr	r2, [pc, #52]	@ (80085f0 <xTaskIncrementTick+0x170>)
 80085bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80085be:	697b      	ldr	r3, [r7, #20]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3718      	adds	r7, #24
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	24000ec0 	.word	0x24000ec0
 80085cc:	24000e9c 	.word	0x24000e9c
 80085d0:	24000e50 	.word	0x24000e50
 80085d4:	24000e54 	.word	0x24000e54
 80085d8:	24000eb0 	.word	0x24000eb0
 80085dc:	24000eb8 	.word	0x24000eb8
 80085e0:	24000ea0 	.word	0x24000ea0
 80085e4:	240009c8 	.word	0x240009c8
 80085e8:	240009c4 	.word	0x240009c4
 80085ec:	24000eac 	.word	0x24000eac
 80085f0:	24000ea8 	.word	0x24000ea8

080085f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80085fa:	4b2b      	ldr	r3, [pc, #172]	@ (80086a8 <vTaskSwitchContext+0xb4>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d003      	beq.n	800860a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008602:	4b2a      	ldr	r3, [pc, #168]	@ (80086ac <vTaskSwitchContext+0xb8>)
 8008604:	2201      	movs	r2, #1
 8008606:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008608:	e047      	b.n	800869a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800860a:	4b28      	ldr	r3, [pc, #160]	@ (80086ac <vTaskSwitchContext+0xb8>)
 800860c:	2200      	movs	r2, #0
 800860e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008610:	4b27      	ldr	r3, [pc, #156]	@ (80086b0 <vTaskSwitchContext+0xbc>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	60fb      	str	r3, [r7, #12]
 8008616:	e011      	b.n	800863c <vTaskSwitchContext+0x48>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10b      	bne.n	8008636 <vTaskSwitchContext+0x42>
	__asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	607b      	str	r3, [r7, #4]
}
 8008630:	bf00      	nop
 8008632:	bf00      	nop
 8008634:	e7fd      	b.n	8008632 <vTaskSwitchContext+0x3e>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	3b01      	subs	r3, #1
 800863a:	60fb      	str	r3, [r7, #12]
 800863c:	491d      	ldr	r1, [pc, #116]	@ (80086b4 <vTaskSwitchContext+0xc0>)
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	4613      	mov	r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	4413      	add	r3, r2
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	440b      	add	r3, r1
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d0e3      	beq.n	8008618 <vTaskSwitchContext+0x24>
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	4613      	mov	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4413      	add	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4a16      	ldr	r2, [pc, #88]	@ (80086b4 <vTaskSwitchContext+0xc0>)
 800865c:	4413      	add	r3, r2
 800865e:	60bb      	str	r3, [r7, #8]
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	685a      	ldr	r2, [r3, #4]
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	605a      	str	r2, [r3, #4]
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	3308      	adds	r3, #8
 8008672:	429a      	cmp	r2, r3
 8008674:	d104      	bne.n	8008680 <vTaskSwitchContext+0x8c>
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	685a      	ldr	r2, [r3, #4]
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	605a      	str	r2, [r3, #4]
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	4a0c      	ldr	r2, [pc, #48]	@ (80086b8 <vTaskSwitchContext+0xc4>)
 8008688:	6013      	str	r3, [r2, #0]
 800868a:	4a09      	ldr	r2, [pc, #36]	@ (80086b0 <vTaskSwitchContext+0xbc>)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008690:	4b09      	ldr	r3, [pc, #36]	@ (80086b8 <vTaskSwitchContext+0xc4>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3354      	adds	r3, #84	@ 0x54
 8008696:	4a09      	ldr	r2, [pc, #36]	@ (80086bc <vTaskSwitchContext+0xc8>)
 8008698:	6013      	str	r3, [r2, #0]
}
 800869a:	bf00      	nop
 800869c:	3714      	adds	r7, #20
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	24000ec0 	.word	0x24000ec0
 80086ac:	24000eac 	.word	0x24000eac
 80086b0:	24000ea0 	.word	0x24000ea0
 80086b4:	240009c8 	.word	0x240009c8
 80086b8:	240009c4 	.word	0x240009c4
 80086bc:	24000028 	.word	0x24000028

080086c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10b      	bne.n	80086e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	60fb      	str	r3, [r7, #12]
}
 80086e2:	bf00      	nop
 80086e4:	bf00      	nop
 80086e6:	e7fd      	b.n	80086e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80086e8:	4b07      	ldr	r3, [pc, #28]	@ (8008708 <vTaskPlaceOnEventList+0x48>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	3318      	adds	r3, #24
 80086ee:	4619      	mov	r1, r3
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f7fe fe48 	bl	8007386 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80086f6:	2101      	movs	r1, #1
 80086f8:	6838      	ldr	r0, [r7, #0]
 80086fa:	f000 fa87 	bl	8008c0c <prvAddCurrentTaskToDelayedList>
}
 80086fe:	bf00      	nop
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	240009c4 	.word	0x240009c4

0800870c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10b      	bne.n	8008736 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800871e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008722:	f383 8811 	msr	BASEPRI, r3
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	617b      	str	r3, [r7, #20]
}
 8008730:	bf00      	nop
 8008732:	bf00      	nop
 8008734:	e7fd      	b.n	8008732 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008736:	4b0a      	ldr	r3, [pc, #40]	@ (8008760 <vTaskPlaceOnEventListRestricted+0x54>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	3318      	adds	r3, #24
 800873c:	4619      	mov	r1, r3
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	f7fe fdfd 	bl	800733e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d002      	beq.n	8008750 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800874a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800874e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008750:	6879      	ldr	r1, [r7, #4]
 8008752:	68b8      	ldr	r0, [r7, #8]
 8008754:	f000 fa5a 	bl	8008c0c <prvAddCurrentTaskToDelayedList>
	}
 8008758:	bf00      	nop
 800875a:	3718      	adds	r7, #24
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	240009c4 	.word	0x240009c4

08008764 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b086      	sub	sp, #24
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10b      	bne.n	8008792 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800877a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800877e:	f383 8811 	msr	BASEPRI, r3
 8008782:	f3bf 8f6f 	isb	sy
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	60fb      	str	r3, [r7, #12]
}
 800878c:	bf00      	nop
 800878e:	bf00      	nop
 8008790:	e7fd      	b.n	800878e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	3318      	adds	r3, #24
 8008796:	4618      	mov	r0, r3
 8008798:	f7fe fe2e 	bl	80073f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800879c:	4b1d      	ldr	r3, [pc, #116]	@ (8008814 <xTaskRemoveFromEventList+0xb0>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d11d      	bne.n	80087e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	3304      	adds	r3, #4
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7fe fe25 	bl	80073f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087b2:	4b19      	ldr	r3, [pc, #100]	@ (8008818 <xTaskRemoveFromEventList+0xb4>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d903      	bls.n	80087c2 <xTaskRemoveFromEventList+0x5e>
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087be:	4a16      	ldr	r2, [pc, #88]	@ (8008818 <xTaskRemoveFromEventList+0xb4>)
 80087c0:	6013      	str	r3, [r2, #0]
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087c6:	4613      	mov	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	4413      	add	r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4a13      	ldr	r2, [pc, #76]	@ (800881c <xTaskRemoveFromEventList+0xb8>)
 80087d0:	441a      	add	r2, r3
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	3304      	adds	r3, #4
 80087d6:	4619      	mov	r1, r3
 80087d8:	4610      	mov	r0, r2
 80087da:	f7fe fdb0 	bl	800733e <vListInsertEnd>
 80087de:	e005      	b.n	80087ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	3318      	adds	r3, #24
 80087e4:	4619      	mov	r1, r3
 80087e6:	480e      	ldr	r0, [pc, #56]	@ (8008820 <xTaskRemoveFromEventList+0xbc>)
 80087e8:	f7fe fda9 	bl	800733e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087f0:	4b0c      	ldr	r3, [pc, #48]	@ (8008824 <xTaskRemoveFromEventList+0xc0>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d905      	bls.n	8008806 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80087fa:	2301      	movs	r3, #1
 80087fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80087fe:	4b0a      	ldr	r3, [pc, #40]	@ (8008828 <xTaskRemoveFromEventList+0xc4>)
 8008800:	2201      	movs	r2, #1
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	e001      	b.n	800880a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008806:	2300      	movs	r3, #0
 8008808:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800880a:	697b      	ldr	r3, [r7, #20]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3718      	adds	r7, #24
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	24000ec0 	.word	0x24000ec0
 8008818:	24000ea0 	.word	0x24000ea0
 800881c:	240009c8 	.word	0x240009c8
 8008820:	24000e58 	.word	0x24000e58
 8008824:	240009c4 	.word	0x240009c4
 8008828:	24000eac 	.word	0x24000eac

0800882c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008834:	4b06      	ldr	r3, [pc, #24]	@ (8008850 <vTaskInternalSetTimeOutState+0x24>)
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800883c:	4b05      	ldr	r3, [pc, #20]	@ (8008854 <vTaskInternalSetTimeOutState+0x28>)
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	605a      	str	r2, [r3, #4]
}
 8008844:	bf00      	nop
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr
 8008850:	24000eb0 	.word	0x24000eb0
 8008854:	24000e9c 	.word	0x24000e9c

08008858 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b088      	sub	sp, #32
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d10b      	bne.n	8008880 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800886c:	f383 8811 	msr	BASEPRI, r3
 8008870:	f3bf 8f6f 	isb	sy
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	613b      	str	r3, [r7, #16]
}
 800887a:	bf00      	nop
 800887c:	bf00      	nop
 800887e:	e7fd      	b.n	800887c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10b      	bne.n	800889e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800888a:	f383 8811 	msr	BASEPRI, r3
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	60fb      	str	r3, [r7, #12]
}
 8008898:	bf00      	nop
 800889a:	bf00      	nop
 800889c:	e7fd      	b.n	800889a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800889e:	f000 fe93 	bl	80095c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80088a2:	4b1d      	ldr	r3, [pc, #116]	@ (8008918 <xTaskCheckForTimeOut+0xc0>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	69ba      	ldr	r2, [r7, #24]
 80088ae:	1ad3      	subs	r3, r2, r3
 80088b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088ba:	d102      	bne.n	80088c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80088bc:	2300      	movs	r3, #0
 80088be:	61fb      	str	r3, [r7, #28]
 80088c0:	e023      	b.n	800890a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	4b15      	ldr	r3, [pc, #84]	@ (800891c <xTaskCheckForTimeOut+0xc4>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d007      	beq.n	80088de <xTaskCheckForTimeOut+0x86>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	69ba      	ldr	r2, [r7, #24]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d302      	bcc.n	80088de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80088d8:	2301      	movs	r3, #1
 80088da:	61fb      	str	r3, [r7, #28]
 80088dc:	e015      	b.n	800890a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	697a      	ldr	r2, [r7, #20]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d20b      	bcs.n	8008900 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	1ad2      	subs	r2, r2, r3
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f7ff ff99 	bl	800882c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80088fa:	2300      	movs	r3, #0
 80088fc:	61fb      	str	r3, [r7, #28]
 80088fe:	e004      	b.n	800890a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	2200      	movs	r2, #0
 8008904:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008906:	2301      	movs	r3, #1
 8008908:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800890a:	f000 fe8f 	bl	800962c <vPortExitCritical>

	return xReturn;
 800890e:	69fb      	ldr	r3, [r7, #28]
}
 8008910:	4618      	mov	r0, r3
 8008912:	3720      	adds	r7, #32
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	24000e9c 	.word	0x24000e9c
 800891c:	24000eb0 	.word	0x24000eb0

08008920 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008920:	b480      	push	{r7}
 8008922:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008924:	4b03      	ldr	r3, [pc, #12]	@ (8008934 <vTaskMissedYield+0x14>)
 8008926:	2201      	movs	r2, #1
 8008928:	601a      	str	r2, [r3, #0]
}
 800892a:	bf00      	nop
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr
 8008934:	24000eac 	.word	0x24000eac

08008938 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008940:	f000 f852 	bl	80089e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008944:	4b06      	ldr	r3, [pc, #24]	@ (8008960 <prvIdleTask+0x28>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2b01      	cmp	r3, #1
 800894a:	d9f9      	bls.n	8008940 <prvIdleTask+0x8>
			{
				taskYIELD();
 800894c:	4b05      	ldr	r3, [pc, #20]	@ (8008964 <prvIdleTask+0x2c>)
 800894e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008952:	601a      	str	r2, [r3, #0]
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800895c:	e7f0      	b.n	8008940 <prvIdleTask+0x8>
 800895e:	bf00      	nop
 8008960:	240009c8 	.word	0x240009c8
 8008964:	e000ed04 	.word	0xe000ed04

08008968 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800896e:	2300      	movs	r3, #0
 8008970:	607b      	str	r3, [r7, #4]
 8008972:	e00c      	b.n	800898e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	4613      	mov	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4a12      	ldr	r2, [pc, #72]	@ (80089c8 <prvInitialiseTaskLists+0x60>)
 8008980:	4413      	add	r3, r2
 8008982:	4618      	mov	r0, r3
 8008984:	f7fe fcae 	bl	80072e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	3301      	adds	r3, #1
 800898c:	607b      	str	r3, [r7, #4]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2b37      	cmp	r3, #55	@ 0x37
 8008992:	d9ef      	bls.n	8008974 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008994:	480d      	ldr	r0, [pc, #52]	@ (80089cc <prvInitialiseTaskLists+0x64>)
 8008996:	f7fe fca5 	bl	80072e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800899a:	480d      	ldr	r0, [pc, #52]	@ (80089d0 <prvInitialiseTaskLists+0x68>)
 800899c:	f7fe fca2 	bl	80072e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80089a0:	480c      	ldr	r0, [pc, #48]	@ (80089d4 <prvInitialiseTaskLists+0x6c>)
 80089a2:	f7fe fc9f 	bl	80072e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80089a6:	480c      	ldr	r0, [pc, #48]	@ (80089d8 <prvInitialiseTaskLists+0x70>)
 80089a8:	f7fe fc9c 	bl	80072e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80089ac:	480b      	ldr	r0, [pc, #44]	@ (80089dc <prvInitialiseTaskLists+0x74>)
 80089ae:	f7fe fc99 	bl	80072e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80089b2:	4b0b      	ldr	r3, [pc, #44]	@ (80089e0 <prvInitialiseTaskLists+0x78>)
 80089b4:	4a05      	ldr	r2, [pc, #20]	@ (80089cc <prvInitialiseTaskLists+0x64>)
 80089b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80089b8:	4b0a      	ldr	r3, [pc, #40]	@ (80089e4 <prvInitialiseTaskLists+0x7c>)
 80089ba:	4a05      	ldr	r2, [pc, #20]	@ (80089d0 <prvInitialiseTaskLists+0x68>)
 80089bc:	601a      	str	r2, [r3, #0]
}
 80089be:	bf00      	nop
 80089c0:	3708      	adds	r7, #8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	240009c8 	.word	0x240009c8
 80089cc:	24000e28 	.word	0x24000e28
 80089d0:	24000e3c 	.word	0x24000e3c
 80089d4:	24000e58 	.word	0x24000e58
 80089d8:	24000e6c 	.word	0x24000e6c
 80089dc:	24000e84 	.word	0x24000e84
 80089e0:	24000e50 	.word	0x24000e50
 80089e4:	24000e54 	.word	0x24000e54

080089e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089ee:	e019      	b.n	8008a24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80089f0:	f000 fdea 	bl	80095c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089f4:	4b10      	ldr	r3, [pc, #64]	@ (8008a38 <prvCheckTasksWaitingTermination+0x50>)
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	3304      	adds	r3, #4
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7fe fcf9 	bl	80073f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a06:	4b0d      	ldr	r3, [pc, #52]	@ (8008a3c <prvCheckTasksWaitingTermination+0x54>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	4a0b      	ldr	r2, [pc, #44]	@ (8008a3c <prvCheckTasksWaitingTermination+0x54>)
 8008a0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008a10:	4b0b      	ldr	r3, [pc, #44]	@ (8008a40 <prvCheckTasksWaitingTermination+0x58>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	3b01      	subs	r3, #1
 8008a16:	4a0a      	ldr	r2, [pc, #40]	@ (8008a40 <prvCheckTasksWaitingTermination+0x58>)
 8008a18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008a1a:	f000 fe07 	bl	800962c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f810 	bl	8008a44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a24:	4b06      	ldr	r3, [pc, #24]	@ (8008a40 <prvCheckTasksWaitingTermination+0x58>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1e1      	bne.n	80089f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008a2c:	bf00      	nop
 8008a2e:	bf00      	nop
 8008a30:	3708      	adds	r7, #8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	24000e6c 	.word	0x24000e6c
 8008a3c:	24000e98 	.word	0x24000e98
 8008a40:	24000e80 	.word	0x24000e80

08008a44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	3354      	adds	r3, #84	@ 0x54
 8008a50:	4618      	mov	r0, r3
 8008a52:	f001 f8d1 	bl	8009bf8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d108      	bne.n	8008a72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a64:	4618      	mov	r0, r3
 8008a66:	f000 ff9f 	bl	80099a8 <vPortFree>
				vPortFree( pxTCB );
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 ff9c 	bl	80099a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008a70:	e019      	b.n	8008aa6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d103      	bne.n	8008a84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 ff93 	bl	80099a8 <vPortFree>
	}
 8008a82:	e010      	b.n	8008aa6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d00b      	beq.n	8008aa6 <prvDeleteTCB+0x62>
	__asm volatile
 8008a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	60fb      	str	r3, [r7, #12]
}
 8008aa0:	bf00      	nop
 8008aa2:	bf00      	nop
 8008aa4:	e7fd      	b.n	8008aa2 <prvDeleteTCB+0x5e>
	}
 8008aa6:	bf00      	nop
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
	...

08008ab0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8008ae8 <prvResetNextTaskUnblockTime+0x38>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d104      	bne.n	8008aca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8008aec <prvResetNextTaskUnblockTime+0x3c>)
 8008ac2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ac6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ac8:	e008      	b.n	8008adc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aca:	4b07      	ldr	r3, [pc, #28]	@ (8008ae8 <prvResetNextTaskUnblockTime+0x38>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	4a04      	ldr	r2, [pc, #16]	@ (8008aec <prvResetNextTaskUnblockTime+0x3c>)
 8008ada:	6013      	str	r3, [r2, #0]
}
 8008adc:	bf00      	nop
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr
 8008ae8:	24000e50 	.word	0x24000e50
 8008aec:	24000eb8 	.word	0x24000eb8

08008af0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008af6:	4b0b      	ldr	r3, [pc, #44]	@ (8008b24 <xTaskGetSchedulerState+0x34>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d102      	bne.n	8008b04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008afe:	2301      	movs	r3, #1
 8008b00:	607b      	str	r3, [r7, #4]
 8008b02:	e008      	b.n	8008b16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b04:	4b08      	ldr	r3, [pc, #32]	@ (8008b28 <xTaskGetSchedulerState+0x38>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d102      	bne.n	8008b12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008b0c:	2302      	movs	r3, #2
 8008b0e:	607b      	str	r3, [r7, #4]
 8008b10:	e001      	b.n	8008b16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008b12:	2300      	movs	r3, #0
 8008b14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008b16:	687b      	ldr	r3, [r7, #4]
	}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr
 8008b24:	24000ea4 	.word	0x24000ea4
 8008b28:	24000ec0 	.word	0x24000ec0

08008b2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d058      	beq.n	8008bf4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008b42:	4b2f      	ldr	r3, [pc, #188]	@ (8008c00 <xTaskPriorityDisinherit+0xd4>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d00b      	beq.n	8008b64 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b50:	f383 8811 	msr	BASEPRI, r3
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	60fb      	str	r3, [r7, #12]
}
 8008b5e:	bf00      	nop
 8008b60:	bf00      	nop
 8008b62:	e7fd      	b.n	8008b60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10b      	bne.n	8008b84 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b70:	f383 8811 	msr	BASEPRI, r3
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	60bb      	str	r3, [r7, #8]
}
 8008b7e:	bf00      	nop
 8008b80:	bf00      	nop
 8008b82:	e7fd      	b.n	8008b80 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b88:	1e5a      	subs	r2, r3, #1
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d02c      	beq.n	8008bf4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d128      	bne.n	8008bf4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	3304      	adds	r3, #4
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7fe fc26 	bl	80073f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8008c04 <xTaskPriorityDisinherit+0xd8>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d903      	bls.n	8008bd4 <xTaskPriorityDisinherit+0xa8>
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8008c04 <xTaskPriorityDisinherit+0xd8>)
 8008bd2:	6013      	str	r3, [r2, #0]
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bd8:	4613      	mov	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	4413      	add	r3, r2
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4a09      	ldr	r2, [pc, #36]	@ (8008c08 <xTaskPriorityDisinherit+0xdc>)
 8008be2:	441a      	add	r2, r3
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	3304      	adds	r3, #4
 8008be8:	4619      	mov	r1, r3
 8008bea:	4610      	mov	r0, r2
 8008bec:	f7fe fba7 	bl	800733e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008bf4:	697b      	ldr	r3, [r7, #20]
	}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3718      	adds	r7, #24
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	240009c4 	.word	0x240009c4
 8008c04:	24000ea0 	.word	0x24000ea0
 8008c08:	240009c8 	.word	0x240009c8

08008c0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008c16:	4b21      	ldr	r3, [pc, #132]	@ (8008c9c <prvAddCurrentTaskToDelayedList+0x90>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c1c:	4b20      	ldr	r3, [pc, #128]	@ (8008ca0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	3304      	adds	r3, #4
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fe fbe8 	bl	80073f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c2e:	d10a      	bne.n	8008c46 <prvAddCurrentTaskToDelayedList+0x3a>
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d007      	beq.n	8008c46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c36:	4b1a      	ldr	r3, [pc, #104]	@ (8008ca0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	3304      	adds	r3, #4
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	4819      	ldr	r0, [pc, #100]	@ (8008ca4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008c40:	f7fe fb7d 	bl	800733e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008c44:	e026      	b.n	8008c94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c4e:	4b14      	ldr	r3, [pc, #80]	@ (8008ca0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68ba      	ldr	r2, [r7, #8]
 8008c54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008c56:	68ba      	ldr	r2, [r7, #8]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d209      	bcs.n	8008c72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c5e:	4b12      	ldr	r3, [pc, #72]	@ (8008ca8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	4b0f      	ldr	r3, [pc, #60]	@ (8008ca0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	3304      	adds	r3, #4
 8008c68:	4619      	mov	r1, r3
 8008c6a:	4610      	mov	r0, r2
 8008c6c:	f7fe fb8b 	bl	8007386 <vListInsert>
}
 8008c70:	e010      	b.n	8008c94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c72:	4b0e      	ldr	r3, [pc, #56]	@ (8008cac <prvAddCurrentTaskToDelayedList+0xa0>)
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	4b0a      	ldr	r3, [pc, #40]	@ (8008ca0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	4610      	mov	r0, r2
 8008c80:	f7fe fb81 	bl	8007386 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c84:	4b0a      	ldr	r3, [pc, #40]	@ (8008cb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d202      	bcs.n	8008c94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008c8e:	4a08      	ldr	r2, [pc, #32]	@ (8008cb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	6013      	str	r3, [r2, #0]
}
 8008c94:	bf00      	nop
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	24000e9c 	.word	0x24000e9c
 8008ca0:	240009c4 	.word	0x240009c4
 8008ca4:	24000e84 	.word	0x24000e84
 8008ca8:	24000e54 	.word	0x24000e54
 8008cac:	24000e50 	.word	0x24000e50
 8008cb0:	24000eb8 	.word	0x24000eb8

08008cb4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b08a      	sub	sp, #40	@ 0x28
 8008cb8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008cbe:	f000 fb13 	bl	80092e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8008d38 <xTimerCreateTimerTask+0x84>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d021      	beq.n	8008d0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008cd2:	1d3a      	adds	r2, r7, #4
 8008cd4:	f107 0108 	add.w	r1, r7, #8
 8008cd8:	f107 030c 	add.w	r3, r7, #12
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7fe fae7 	bl	80072b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008ce2:	6879      	ldr	r1, [r7, #4]
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	9202      	str	r2, [sp, #8]
 8008cea:	9301      	str	r3, [sp, #4]
 8008cec:	2302      	movs	r3, #2
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	460a      	mov	r2, r1
 8008cf4:	4911      	ldr	r1, [pc, #68]	@ (8008d3c <xTimerCreateTimerTask+0x88>)
 8008cf6:	4812      	ldr	r0, [pc, #72]	@ (8008d40 <xTimerCreateTimerTask+0x8c>)
 8008cf8:	f7ff f8a2 	bl	8007e40 <xTaskCreateStatic>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	4a11      	ldr	r2, [pc, #68]	@ (8008d44 <xTimerCreateTimerTask+0x90>)
 8008d00:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008d02:	4b10      	ldr	r3, [pc, #64]	@ (8008d44 <xTimerCreateTimerTask+0x90>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d001      	beq.n	8008d0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10b      	bne.n	8008d2c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	613b      	str	r3, [r7, #16]
}
 8008d26:	bf00      	nop
 8008d28:	bf00      	nop
 8008d2a:	e7fd      	b.n	8008d28 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008d2c:	697b      	ldr	r3, [r7, #20]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3718      	adds	r7, #24
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	24000ef4 	.word	0x24000ef4
 8008d3c:	08009df8 	.word	0x08009df8
 8008d40:	08008e81 	.word	0x08008e81
 8008d44:	24000ef8 	.word	0x24000ef8

08008d48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b08a      	sub	sp, #40	@ 0x28
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
 8008d54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008d56:	2300      	movs	r3, #0
 8008d58:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d10b      	bne.n	8008d78 <xTimerGenericCommand+0x30>
	__asm volatile
 8008d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d64:	f383 8811 	msr	BASEPRI, r3
 8008d68:	f3bf 8f6f 	isb	sy
 8008d6c:	f3bf 8f4f 	dsb	sy
 8008d70:	623b      	str	r3, [r7, #32]
}
 8008d72:	bf00      	nop
 8008d74:	bf00      	nop
 8008d76:	e7fd      	b.n	8008d74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008d78:	4b19      	ldr	r3, [pc, #100]	@ (8008de0 <xTimerGenericCommand+0x98>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d02a      	beq.n	8008dd6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	2b05      	cmp	r3, #5
 8008d90:	dc18      	bgt.n	8008dc4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008d92:	f7ff fead 	bl	8008af0 <xTaskGetSchedulerState>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d109      	bne.n	8008db0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008d9c:	4b10      	ldr	r3, [pc, #64]	@ (8008de0 <xTimerGenericCommand+0x98>)
 8008d9e:	6818      	ldr	r0, [r3, #0]
 8008da0:	f107 0110 	add.w	r1, r7, #16
 8008da4:	2300      	movs	r3, #0
 8008da6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008da8:	f7fe fc5a 	bl	8007660 <xQueueGenericSend>
 8008dac:	6278      	str	r0, [r7, #36]	@ 0x24
 8008dae:	e012      	b.n	8008dd6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008db0:	4b0b      	ldr	r3, [pc, #44]	@ (8008de0 <xTimerGenericCommand+0x98>)
 8008db2:	6818      	ldr	r0, [r3, #0]
 8008db4:	f107 0110 	add.w	r1, r7, #16
 8008db8:	2300      	movs	r3, #0
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f7fe fc50 	bl	8007660 <xQueueGenericSend>
 8008dc0:	6278      	str	r0, [r7, #36]	@ 0x24
 8008dc2:	e008      	b.n	8008dd6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008dc4:	4b06      	ldr	r3, [pc, #24]	@ (8008de0 <xTimerGenericCommand+0x98>)
 8008dc6:	6818      	ldr	r0, [r3, #0]
 8008dc8:	f107 0110 	add.w	r1, r7, #16
 8008dcc:	2300      	movs	r3, #0
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	f7fe fd48 	bl	8007864 <xQueueGenericSendFromISR>
 8008dd4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3728      	adds	r7, #40	@ 0x28
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	24000ef4 	.word	0x24000ef4

08008de4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b088      	sub	sp, #32
 8008de8:	af02      	add	r7, sp, #8
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dee:	4b23      	ldr	r3, [pc, #140]	@ (8008e7c <prvProcessExpiredTimer+0x98>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	3304      	adds	r3, #4
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7fe fafb 	bl	80073f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e08:	f003 0304 	and.w	r3, r3, #4
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d023      	beq.n	8008e58 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	699a      	ldr	r2, [r3, #24]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	18d1      	adds	r1, r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	683a      	ldr	r2, [r7, #0]
 8008e1c:	6978      	ldr	r0, [r7, #20]
 8008e1e:	f000 f8d5 	bl	8008fcc <prvInsertTimerInActiveList>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d020      	beq.n	8008e6a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e28:	2300      	movs	r3, #0
 8008e2a:	9300      	str	r3, [sp, #0]
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	2100      	movs	r1, #0
 8008e32:	6978      	ldr	r0, [r7, #20]
 8008e34:	f7ff ff88 	bl	8008d48 <xTimerGenericCommand>
 8008e38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d114      	bne.n	8008e6a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e44:	f383 8811 	msr	BASEPRI, r3
 8008e48:	f3bf 8f6f 	isb	sy
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	60fb      	str	r3, [r7, #12]
}
 8008e52:	bf00      	nop
 8008e54:	bf00      	nop
 8008e56:	e7fd      	b.n	8008e54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e5e:	f023 0301 	bic.w	r3, r3, #1
 8008e62:	b2da      	uxtb	r2, r3
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	6978      	ldr	r0, [r7, #20]
 8008e70:	4798      	blx	r3
}
 8008e72:	bf00      	nop
 8008e74:	3718      	adds	r7, #24
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	24000eec 	.word	0x24000eec

08008e80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e88:	f107 0308 	add.w	r3, r7, #8
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f000 f859 	bl	8008f44 <prvGetNextExpireTime>
 8008e92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	4619      	mov	r1, r3
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	f000 f805 	bl	8008ea8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008e9e:	f000 f8d7 	bl	8009050 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ea2:	bf00      	nop
 8008ea4:	e7f0      	b.n	8008e88 <prvTimerTask+0x8>
	...

08008ea8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008eb2:	f7ff fa29 	bl	8008308 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008eb6:	f107 0308 	add.w	r3, r7, #8
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f000 f866 	bl	8008f8c <prvSampleTimeNow>
 8008ec0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d130      	bne.n	8008f2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10a      	bne.n	8008ee4 <prvProcessTimerOrBlockTask+0x3c>
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d806      	bhi.n	8008ee4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008ed6:	f7ff fa25 	bl	8008324 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008eda:	68f9      	ldr	r1, [r7, #12]
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f7ff ff81 	bl	8008de4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008ee2:	e024      	b.n	8008f2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d008      	beq.n	8008efc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008eea:	4b13      	ldr	r3, [pc, #76]	@ (8008f38 <prvProcessTimerOrBlockTask+0x90>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d101      	bne.n	8008ef8 <prvProcessTimerOrBlockTask+0x50>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e000      	b.n	8008efa <prvProcessTimerOrBlockTask+0x52>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008efc:	4b0f      	ldr	r3, [pc, #60]	@ (8008f3c <prvProcessTimerOrBlockTask+0x94>)
 8008efe:	6818      	ldr	r0, [r3, #0]
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	683a      	ldr	r2, [r7, #0]
 8008f08:	4619      	mov	r1, r3
 8008f0a:	f7fe ff65 	bl	8007dd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008f0e:	f7ff fa09 	bl	8008324 <xTaskResumeAll>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d10a      	bne.n	8008f2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008f18:	4b09      	ldr	r3, [pc, #36]	@ (8008f40 <prvProcessTimerOrBlockTask+0x98>)
 8008f1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f1e:	601a      	str	r2, [r3, #0]
 8008f20:	f3bf 8f4f 	dsb	sy
 8008f24:	f3bf 8f6f 	isb	sy
}
 8008f28:	e001      	b.n	8008f2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008f2a:	f7ff f9fb 	bl	8008324 <xTaskResumeAll>
}
 8008f2e:	bf00      	nop
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	24000ef0 	.word	0x24000ef0
 8008f3c:	24000ef4 	.word	0x24000ef4
 8008f40:	e000ed04 	.word	0xe000ed04

08008f44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8008f88 <prvGetNextExpireTime+0x44>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d101      	bne.n	8008f5a <prvGetNextExpireTime+0x16>
 8008f56:	2201      	movs	r2, #1
 8008f58:	e000      	b.n	8008f5c <prvGetNextExpireTime+0x18>
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d105      	bne.n	8008f74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f68:	4b07      	ldr	r3, [pc, #28]	@ (8008f88 <prvGetNextExpireTime+0x44>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	60fb      	str	r3, [r7, #12]
 8008f72:	e001      	b.n	8008f78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008f74:	2300      	movs	r3, #0
 8008f76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008f78:	68fb      	ldr	r3, [r7, #12]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3714      	adds	r7, #20
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	24000eec 	.word	0x24000eec

08008f8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008f94:	f7ff fa64 	bl	8008460 <xTaskGetTickCount>
 8008f98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8008fc8 <prvSampleTimeNow+0x3c>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d205      	bcs.n	8008fb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008fa4:	f000 f93a 	bl	800921c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	601a      	str	r2, [r3, #0]
 8008fae:	e002      	b.n	8008fb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008fb6:	4a04      	ldr	r2, [pc, #16]	@ (8008fc8 <prvSampleTimeNow+0x3c>)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	24000efc 	.word	0x24000efc

08008fcc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b086      	sub	sp, #24
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
 8008fd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	68ba      	ldr	r2, [r7, #8]
 8008fe2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008fea:	68ba      	ldr	r2, [r7, #8]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d812      	bhi.n	8009018 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	1ad2      	subs	r2, r2, r3
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d302      	bcc.n	8009006 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009000:	2301      	movs	r3, #1
 8009002:	617b      	str	r3, [r7, #20]
 8009004:	e01b      	b.n	800903e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009006:	4b10      	ldr	r3, [pc, #64]	@ (8009048 <prvInsertTimerInActiveList+0x7c>)
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	3304      	adds	r3, #4
 800900e:	4619      	mov	r1, r3
 8009010:	4610      	mov	r0, r2
 8009012:	f7fe f9b8 	bl	8007386 <vListInsert>
 8009016:	e012      	b.n	800903e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	429a      	cmp	r2, r3
 800901e:	d206      	bcs.n	800902e <prvInsertTimerInActiveList+0x62>
 8009020:	68ba      	ldr	r2, [r7, #8]
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	429a      	cmp	r2, r3
 8009026:	d302      	bcc.n	800902e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009028:	2301      	movs	r3, #1
 800902a:	617b      	str	r3, [r7, #20]
 800902c:	e007      	b.n	800903e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800902e:	4b07      	ldr	r3, [pc, #28]	@ (800904c <prvInsertTimerInActiveList+0x80>)
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	3304      	adds	r3, #4
 8009036:	4619      	mov	r1, r3
 8009038:	4610      	mov	r0, r2
 800903a:	f7fe f9a4 	bl	8007386 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800903e:	697b      	ldr	r3, [r7, #20]
}
 8009040:	4618      	mov	r0, r3
 8009042:	3718      	adds	r7, #24
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	24000ef0 	.word	0x24000ef0
 800904c:	24000eec 	.word	0x24000eec

08009050 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b08e      	sub	sp, #56	@ 0x38
 8009054:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009056:	e0ce      	b.n	80091f6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2b00      	cmp	r3, #0
 800905c:	da19      	bge.n	8009092 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800905e:	1d3b      	adds	r3, r7, #4
 8009060:	3304      	adds	r3, #4
 8009062:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009066:	2b00      	cmp	r3, #0
 8009068:	d10b      	bne.n	8009082 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800906a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800906e:	f383 8811 	msr	BASEPRI, r3
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	f3bf 8f4f 	dsb	sy
 800907a:	61fb      	str	r3, [r7, #28]
}
 800907c:	bf00      	nop
 800907e:	bf00      	nop
 8009080:	e7fd      	b.n	800907e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009088:	6850      	ldr	r0, [r2, #4]
 800908a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800908c:	6892      	ldr	r2, [r2, #8]
 800908e:	4611      	mov	r1, r2
 8009090:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2b00      	cmp	r3, #0
 8009096:	f2c0 80ae 	blt.w	80091f6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800909e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d004      	beq.n	80090b0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090a8:	3304      	adds	r3, #4
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7fe f9a4 	bl	80073f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80090b0:	463b      	mov	r3, r7
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7ff ff6a 	bl	8008f8c <prvSampleTimeNow>
 80090b8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2b09      	cmp	r3, #9
 80090be:	f200 8097 	bhi.w	80091f0 <prvProcessReceivedCommands+0x1a0>
 80090c2:	a201      	add	r2, pc, #4	@ (adr r2, 80090c8 <prvProcessReceivedCommands+0x78>)
 80090c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c8:	080090f1 	.word	0x080090f1
 80090cc:	080090f1 	.word	0x080090f1
 80090d0:	080090f1 	.word	0x080090f1
 80090d4:	08009167 	.word	0x08009167
 80090d8:	0800917b 	.word	0x0800917b
 80090dc:	080091c7 	.word	0x080091c7
 80090e0:	080090f1 	.word	0x080090f1
 80090e4:	080090f1 	.word	0x080090f1
 80090e8:	08009167 	.word	0x08009167
 80090ec:	0800917b 	.word	0x0800917b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80090f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090f6:	f043 0301 	orr.w	r3, r3, #1
 80090fa:	b2da      	uxtb	r2, r3
 80090fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009106:	699b      	ldr	r3, [r3, #24]
 8009108:	18d1      	adds	r1, r2, r3
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800910e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009110:	f7ff ff5c 	bl	8008fcc <prvInsertTimerInActiveList>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d06c      	beq.n	80091f4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800911a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009120:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009124:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009128:	f003 0304 	and.w	r3, r3, #4
 800912c:	2b00      	cmp	r3, #0
 800912e:	d061      	beq.n	80091f4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	441a      	add	r2, r3
 8009138:	2300      	movs	r3, #0
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	2300      	movs	r3, #0
 800913e:	2100      	movs	r1, #0
 8009140:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009142:	f7ff fe01 	bl	8008d48 <xTimerGenericCommand>
 8009146:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009148:	6a3b      	ldr	r3, [r7, #32]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d152      	bne.n	80091f4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800914e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	61bb      	str	r3, [r7, #24]
}
 8009160:	bf00      	nop
 8009162:	bf00      	nop
 8009164:	e7fd      	b.n	8009162 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009168:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800916c:	f023 0301 	bic.w	r3, r3, #1
 8009170:	b2da      	uxtb	r2, r3
 8009172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009174:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009178:	e03d      	b.n	80091f6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800917a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800917c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009180:	f043 0301 	orr.w	r3, r3, #1
 8009184:	b2da      	uxtb	r2, r3
 8009186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009188:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800918c:	68ba      	ldr	r2, [r7, #8]
 800918e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009190:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009194:	699b      	ldr	r3, [r3, #24]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10b      	bne.n	80091b2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800919a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	617b      	str	r3, [r7, #20]
}
 80091ac:	bf00      	nop
 80091ae:	bf00      	nop
 80091b0:	e7fd      	b.n	80091ae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80091b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b4:	699a      	ldr	r2, [r3, #24]
 80091b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b8:	18d1      	adds	r1, r2, r3
 80091ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091c0:	f7ff ff04 	bl	8008fcc <prvInsertTimerInActiveList>
					break;
 80091c4:	e017      	b.n	80091f6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80091c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091cc:	f003 0302 	and.w	r3, r3, #2
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d103      	bne.n	80091dc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80091d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091d6:	f000 fbe7 	bl	80099a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80091da:	e00c      	b.n	80091f6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80091dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091e2:	f023 0301 	bic.w	r3, r3, #1
 80091e6:	b2da      	uxtb	r2, r3
 80091e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80091ee:	e002      	b.n	80091f6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80091f0:	bf00      	nop
 80091f2:	e000      	b.n	80091f6 <prvProcessReceivedCommands+0x1a6>
					break;
 80091f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80091f6:	4b08      	ldr	r3, [pc, #32]	@ (8009218 <prvProcessReceivedCommands+0x1c8>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	1d39      	adds	r1, r7, #4
 80091fc:	2200      	movs	r2, #0
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fe fbce 	bl	80079a0 <xQueueReceive>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	f47f af26 	bne.w	8009058 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800920c:	bf00      	nop
 800920e:	bf00      	nop
 8009210:	3730      	adds	r7, #48	@ 0x30
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	24000ef4 	.word	0x24000ef4

0800921c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b088      	sub	sp, #32
 8009220:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009222:	e049      	b.n	80092b8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009224:	4b2e      	ldr	r3, [pc, #184]	@ (80092e0 <prvSwitchTimerLists+0xc4>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800922e:	4b2c      	ldr	r3, [pc, #176]	@ (80092e0 <prvSwitchTimerLists+0xc4>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	3304      	adds	r3, #4
 800923c:	4618      	mov	r0, r3
 800923e:	f7fe f8db 	bl	80073f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6a1b      	ldr	r3, [r3, #32]
 8009246:	68f8      	ldr	r0, [r7, #12]
 8009248:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009250:	f003 0304 	and.w	r3, r3, #4
 8009254:	2b00      	cmp	r3, #0
 8009256:	d02f      	beq.n	80092b8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	4413      	add	r3, r2
 8009260:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009262:	68ba      	ldr	r2, [r7, #8]
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	429a      	cmp	r2, r3
 8009268:	d90e      	bls.n	8009288 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009276:	4b1a      	ldr	r3, [pc, #104]	@ (80092e0 <prvSwitchTimerLists+0xc4>)
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	3304      	adds	r3, #4
 800927e:	4619      	mov	r1, r3
 8009280:	4610      	mov	r0, r2
 8009282:	f7fe f880 	bl	8007386 <vListInsert>
 8009286:	e017      	b.n	80092b8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009288:	2300      	movs	r3, #0
 800928a:	9300      	str	r3, [sp, #0]
 800928c:	2300      	movs	r3, #0
 800928e:	693a      	ldr	r2, [r7, #16]
 8009290:	2100      	movs	r1, #0
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f7ff fd58 	bl	8008d48 <xTimerGenericCommand>
 8009298:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10b      	bne.n	80092b8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80092a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a4:	f383 8811 	msr	BASEPRI, r3
 80092a8:	f3bf 8f6f 	isb	sy
 80092ac:	f3bf 8f4f 	dsb	sy
 80092b0:	603b      	str	r3, [r7, #0]
}
 80092b2:	bf00      	nop
 80092b4:	bf00      	nop
 80092b6:	e7fd      	b.n	80092b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80092b8:	4b09      	ldr	r3, [pc, #36]	@ (80092e0 <prvSwitchTimerLists+0xc4>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1b0      	bne.n	8009224 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80092c2:	4b07      	ldr	r3, [pc, #28]	@ (80092e0 <prvSwitchTimerLists+0xc4>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80092c8:	4b06      	ldr	r3, [pc, #24]	@ (80092e4 <prvSwitchTimerLists+0xc8>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a04      	ldr	r2, [pc, #16]	@ (80092e0 <prvSwitchTimerLists+0xc4>)
 80092ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80092d0:	4a04      	ldr	r2, [pc, #16]	@ (80092e4 <prvSwitchTimerLists+0xc8>)
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	6013      	str	r3, [r2, #0]
}
 80092d6:	bf00      	nop
 80092d8:	3718      	adds	r7, #24
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	24000eec 	.word	0x24000eec
 80092e4:	24000ef0 	.word	0x24000ef0

080092e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80092ee:	f000 f96b 	bl	80095c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80092f2:	4b15      	ldr	r3, [pc, #84]	@ (8009348 <prvCheckForValidListAndQueue+0x60>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d120      	bne.n	800933c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80092fa:	4814      	ldr	r0, [pc, #80]	@ (800934c <prvCheckForValidListAndQueue+0x64>)
 80092fc:	f7fd fff2 	bl	80072e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009300:	4813      	ldr	r0, [pc, #76]	@ (8009350 <prvCheckForValidListAndQueue+0x68>)
 8009302:	f7fd ffef 	bl	80072e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009306:	4b13      	ldr	r3, [pc, #76]	@ (8009354 <prvCheckForValidListAndQueue+0x6c>)
 8009308:	4a10      	ldr	r2, [pc, #64]	@ (800934c <prvCheckForValidListAndQueue+0x64>)
 800930a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800930c:	4b12      	ldr	r3, [pc, #72]	@ (8009358 <prvCheckForValidListAndQueue+0x70>)
 800930e:	4a10      	ldr	r2, [pc, #64]	@ (8009350 <prvCheckForValidListAndQueue+0x68>)
 8009310:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009312:	2300      	movs	r3, #0
 8009314:	9300      	str	r3, [sp, #0]
 8009316:	4b11      	ldr	r3, [pc, #68]	@ (800935c <prvCheckForValidListAndQueue+0x74>)
 8009318:	4a11      	ldr	r2, [pc, #68]	@ (8009360 <prvCheckForValidListAndQueue+0x78>)
 800931a:	2110      	movs	r1, #16
 800931c:	200a      	movs	r0, #10
 800931e:	f7fe f8ff 	bl	8007520 <xQueueGenericCreateStatic>
 8009322:	4603      	mov	r3, r0
 8009324:	4a08      	ldr	r2, [pc, #32]	@ (8009348 <prvCheckForValidListAndQueue+0x60>)
 8009326:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009328:	4b07      	ldr	r3, [pc, #28]	@ (8009348 <prvCheckForValidListAndQueue+0x60>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d005      	beq.n	800933c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009330:	4b05      	ldr	r3, [pc, #20]	@ (8009348 <prvCheckForValidListAndQueue+0x60>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	490b      	ldr	r1, [pc, #44]	@ (8009364 <prvCheckForValidListAndQueue+0x7c>)
 8009336:	4618      	mov	r0, r3
 8009338:	f7fe fd24 	bl	8007d84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800933c:	f000 f976 	bl	800962c <vPortExitCritical>
}
 8009340:	bf00      	nop
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	24000ef4 	.word	0x24000ef4
 800934c:	24000ec4 	.word	0x24000ec4
 8009350:	24000ed8 	.word	0x24000ed8
 8009354:	24000eec 	.word	0x24000eec
 8009358:	24000ef0 	.word	0x24000ef0
 800935c:	24000fa0 	.word	0x24000fa0
 8009360:	24000f00 	.word	0x24000f00
 8009364:	08009e00 	.word	0x08009e00

08009368 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	3b04      	subs	r3, #4
 8009378:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009380:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	3b04      	subs	r3, #4
 8009386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	f023 0201 	bic.w	r2, r3, #1
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	3b04      	subs	r3, #4
 8009396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009398:	4a0c      	ldr	r2, [pc, #48]	@ (80093cc <pxPortInitialiseStack+0x64>)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	3b14      	subs	r3, #20
 80093a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	3b04      	subs	r3, #4
 80093ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f06f 0202 	mvn.w	r2, #2
 80093b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	3b20      	subs	r3, #32
 80093bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80093be:	68fb      	ldr	r3, [r7, #12]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3714      	adds	r7, #20
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr
 80093cc:	080093d1 	.word	0x080093d1

080093d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80093d6:	2300      	movs	r3, #0
 80093d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80093da:	4b13      	ldr	r3, [pc, #76]	@ (8009428 <prvTaskExitError+0x58>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093e2:	d00b      	beq.n	80093fc <prvTaskExitError+0x2c>
	__asm volatile
 80093e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e8:	f383 8811 	msr	BASEPRI, r3
 80093ec:	f3bf 8f6f 	isb	sy
 80093f0:	f3bf 8f4f 	dsb	sy
 80093f4:	60fb      	str	r3, [r7, #12]
}
 80093f6:	bf00      	nop
 80093f8:	bf00      	nop
 80093fa:	e7fd      	b.n	80093f8 <prvTaskExitError+0x28>
	__asm volatile
 80093fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009400:	f383 8811 	msr	BASEPRI, r3
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	f3bf 8f4f 	dsb	sy
 800940c:	60bb      	str	r3, [r7, #8]
}
 800940e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009410:	bf00      	nop
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d0fc      	beq.n	8009412 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009418:	bf00      	nop
 800941a:	bf00      	nop
 800941c:	3714      	adds	r7, #20
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr
 8009426:	bf00      	nop
 8009428:	24000024 	.word	0x24000024
 800942c:	00000000 	.word	0x00000000

08009430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009430:	4b07      	ldr	r3, [pc, #28]	@ (8009450 <pxCurrentTCBConst2>)
 8009432:	6819      	ldr	r1, [r3, #0]
 8009434:	6808      	ldr	r0, [r1, #0]
 8009436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800943a:	f380 8809 	msr	PSP, r0
 800943e:	f3bf 8f6f 	isb	sy
 8009442:	f04f 0000 	mov.w	r0, #0
 8009446:	f380 8811 	msr	BASEPRI, r0
 800944a:	4770      	bx	lr
 800944c:	f3af 8000 	nop.w

08009450 <pxCurrentTCBConst2>:
 8009450:	240009c4 	.word	0x240009c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009454:	bf00      	nop
 8009456:	bf00      	nop

08009458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009458:	4808      	ldr	r0, [pc, #32]	@ (800947c <prvPortStartFirstTask+0x24>)
 800945a:	6800      	ldr	r0, [r0, #0]
 800945c:	6800      	ldr	r0, [r0, #0]
 800945e:	f380 8808 	msr	MSP, r0
 8009462:	f04f 0000 	mov.w	r0, #0
 8009466:	f380 8814 	msr	CONTROL, r0
 800946a:	b662      	cpsie	i
 800946c:	b661      	cpsie	f
 800946e:	f3bf 8f4f 	dsb	sy
 8009472:	f3bf 8f6f 	isb	sy
 8009476:	df00      	svc	0
 8009478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800947a:	bf00      	nop
 800947c:	e000ed08 	.word	0xe000ed08

08009480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b086      	sub	sp, #24
 8009484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009486:	4b47      	ldr	r3, [pc, #284]	@ (80095a4 <xPortStartScheduler+0x124>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a47      	ldr	r2, [pc, #284]	@ (80095a8 <xPortStartScheduler+0x128>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d10b      	bne.n	80094a8 <xPortStartScheduler+0x28>
	__asm volatile
 8009490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009494:	f383 8811 	msr	BASEPRI, r3
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	613b      	str	r3, [r7, #16]
}
 80094a2:	bf00      	nop
 80094a4:	bf00      	nop
 80094a6:	e7fd      	b.n	80094a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80094a8:	4b3e      	ldr	r3, [pc, #248]	@ (80095a4 <xPortStartScheduler+0x124>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a3f      	ldr	r2, [pc, #252]	@ (80095ac <xPortStartScheduler+0x12c>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d10b      	bne.n	80094ca <xPortStartScheduler+0x4a>
	__asm volatile
 80094b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	60fb      	str	r3, [r7, #12]
}
 80094c4:	bf00      	nop
 80094c6:	bf00      	nop
 80094c8:	e7fd      	b.n	80094c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80094ca:	4b39      	ldr	r3, [pc, #228]	@ (80095b0 <xPortStartScheduler+0x130>)
 80094cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	22ff      	movs	r2, #255	@ 0xff
 80094da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80094e4:	78fb      	ldrb	r3, [r7, #3]
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80094ec:	b2da      	uxtb	r2, r3
 80094ee:	4b31      	ldr	r3, [pc, #196]	@ (80095b4 <xPortStartScheduler+0x134>)
 80094f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80094f2:	4b31      	ldr	r3, [pc, #196]	@ (80095b8 <xPortStartScheduler+0x138>)
 80094f4:	2207      	movs	r2, #7
 80094f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80094f8:	e009      	b.n	800950e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80094fa:	4b2f      	ldr	r3, [pc, #188]	@ (80095b8 <xPortStartScheduler+0x138>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	3b01      	subs	r3, #1
 8009500:	4a2d      	ldr	r2, [pc, #180]	@ (80095b8 <xPortStartScheduler+0x138>)
 8009502:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009504:	78fb      	ldrb	r3, [r7, #3]
 8009506:	b2db      	uxtb	r3, r3
 8009508:	005b      	lsls	r3, r3, #1
 800950a:	b2db      	uxtb	r3, r3
 800950c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800950e:	78fb      	ldrb	r3, [r7, #3]
 8009510:	b2db      	uxtb	r3, r3
 8009512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009516:	2b80      	cmp	r3, #128	@ 0x80
 8009518:	d0ef      	beq.n	80094fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800951a:	4b27      	ldr	r3, [pc, #156]	@ (80095b8 <xPortStartScheduler+0x138>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f1c3 0307 	rsb	r3, r3, #7
 8009522:	2b04      	cmp	r3, #4
 8009524:	d00b      	beq.n	800953e <xPortStartScheduler+0xbe>
	__asm volatile
 8009526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800952a:	f383 8811 	msr	BASEPRI, r3
 800952e:	f3bf 8f6f 	isb	sy
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	60bb      	str	r3, [r7, #8]
}
 8009538:	bf00      	nop
 800953a:	bf00      	nop
 800953c:	e7fd      	b.n	800953a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800953e:	4b1e      	ldr	r3, [pc, #120]	@ (80095b8 <xPortStartScheduler+0x138>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	021b      	lsls	r3, r3, #8
 8009544:	4a1c      	ldr	r2, [pc, #112]	@ (80095b8 <xPortStartScheduler+0x138>)
 8009546:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009548:	4b1b      	ldr	r3, [pc, #108]	@ (80095b8 <xPortStartScheduler+0x138>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009550:	4a19      	ldr	r2, [pc, #100]	@ (80095b8 <xPortStartScheduler+0x138>)
 8009552:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	b2da      	uxtb	r2, r3
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800955c:	4b17      	ldr	r3, [pc, #92]	@ (80095bc <xPortStartScheduler+0x13c>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a16      	ldr	r2, [pc, #88]	@ (80095bc <xPortStartScheduler+0x13c>)
 8009562:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009566:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009568:	4b14      	ldr	r3, [pc, #80]	@ (80095bc <xPortStartScheduler+0x13c>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a13      	ldr	r2, [pc, #76]	@ (80095bc <xPortStartScheduler+0x13c>)
 800956e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009572:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009574:	f000 f8da 	bl	800972c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009578:	4b11      	ldr	r3, [pc, #68]	@ (80095c0 <xPortStartScheduler+0x140>)
 800957a:	2200      	movs	r2, #0
 800957c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800957e:	f000 f8f9 	bl	8009774 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009582:	4b10      	ldr	r3, [pc, #64]	@ (80095c4 <xPortStartScheduler+0x144>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a0f      	ldr	r2, [pc, #60]	@ (80095c4 <xPortStartScheduler+0x144>)
 8009588:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800958c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800958e:	f7ff ff63 	bl	8009458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009592:	f7ff f82f 	bl	80085f4 <vTaskSwitchContext>
	prvTaskExitError();
 8009596:	f7ff ff1b 	bl	80093d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3718      	adds	r7, #24
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	e000ed00 	.word	0xe000ed00
 80095a8:	410fc271 	.word	0x410fc271
 80095ac:	410fc270 	.word	0x410fc270
 80095b0:	e000e400 	.word	0xe000e400
 80095b4:	24000ff0 	.word	0x24000ff0
 80095b8:	24000ff4 	.word	0x24000ff4
 80095bc:	e000ed20 	.word	0xe000ed20
 80095c0:	24000024 	.word	0x24000024
 80095c4:	e000ef34 	.word	0xe000ef34

080095c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
	__asm volatile
 80095ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d2:	f383 8811 	msr	BASEPRI, r3
 80095d6:	f3bf 8f6f 	isb	sy
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	607b      	str	r3, [r7, #4]
}
 80095e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80095e2:	4b10      	ldr	r3, [pc, #64]	@ (8009624 <vPortEnterCritical+0x5c>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	3301      	adds	r3, #1
 80095e8:	4a0e      	ldr	r2, [pc, #56]	@ (8009624 <vPortEnterCritical+0x5c>)
 80095ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80095ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009624 <vPortEnterCritical+0x5c>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d110      	bne.n	8009616 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80095f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009628 <vPortEnterCritical+0x60>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00b      	beq.n	8009616 <vPortEnterCritical+0x4e>
	__asm volatile
 80095fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	603b      	str	r3, [r7, #0]
}
 8009610:	bf00      	nop
 8009612:	bf00      	nop
 8009614:	e7fd      	b.n	8009612 <vPortEnterCritical+0x4a>
	}
}
 8009616:	bf00      	nop
 8009618:	370c      	adds	r7, #12
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	24000024 	.word	0x24000024
 8009628:	e000ed04 	.word	0xe000ed04

0800962c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009632:	4b12      	ldr	r3, [pc, #72]	@ (800967c <vPortExitCritical+0x50>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d10b      	bne.n	8009652 <vPortExitCritical+0x26>
	__asm volatile
 800963a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	607b      	str	r3, [r7, #4]
}
 800964c:	bf00      	nop
 800964e:	bf00      	nop
 8009650:	e7fd      	b.n	800964e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009652:	4b0a      	ldr	r3, [pc, #40]	@ (800967c <vPortExitCritical+0x50>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	3b01      	subs	r3, #1
 8009658:	4a08      	ldr	r2, [pc, #32]	@ (800967c <vPortExitCritical+0x50>)
 800965a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800965c:	4b07      	ldr	r3, [pc, #28]	@ (800967c <vPortExitCritical+0x50>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d105      	bne.n	8009670 <vPortExitCritical+0x44>
 8009664:	2300      	movs	r3, #0
 8009666:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	f383 8811 	msr	BASEPRI, r3
}
 800966e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009670:	bf00      	nop
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr
 800967c:	24000024 	.word	0x24000024

08009680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009680:	f3ef 8009 	mrs	r0, PSP
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	4b15      	ldr	r3, [pc, #84]	@ (80096e0 <pxCurrentTCBConst>)
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	f01e 0f10 	tst.w	lr, #16
 8009690:	bf08      	it	eq
 8009692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969a:	6010      	str	r0, [r2, #0]
 800969c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80096a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80096a4:	f380 8811 	msr	BASEPRI, r0
 80096a8:	f3bf 8f4f 	dsb	sy
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	f7fe ffa0 	bl	80085f4 <vTaskSwitchContext>
 80096b4:	f04f 0000 	mov.w	r0, #0
 80096b8:	f380 8811 	msr	BASEPRI, r0
 80096bc:	bc09      	pop	{r0, r3}
 80096be:	6819      	ldr	r1, [r3, #0]
 80096c0:	6808      	ldr	r0, [r1, #0]
 80096c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c6:	f01e 0f10 	tst.w	lr, #16
 80096ca:	bf08      	it	eq
 80096cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80096d0:	f380 8809 	msr	PSP, r0
 80096d4:	f3bf 8f6f 	isb	sy
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	f3af 8000 	nop.w

080096e0 <pxCurrentTCBConst>:
 80096e0:	240009c4 	.word	0x240009c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80096e4:	bf00      	nop
 80096e6:	bf00      	nop

080096e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
	__asm volatile
 80096ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f2:	f383 8811 	msr	BASEPRI, r3
 80096f6:	f3bf 8f6f 	isb	sy
 80096fa:	f3bf 8f4f 	dsb	sy
 80096fe:	607b      	str	r3, [r7, #4]
}
 8009700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009702:	f7fe febd 	bl	8008480 <xTaskIncrementTick>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d003      	beq.n	8009714 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800970c:	4b06      	ldr	r3, [pc, #24]	@ (8009728 <xPortSysTickHandler+0x40>)
 800970e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009712:	601a      	str	r2, [r3, #0]
 8009714:	2300      	movs	r3, #0
 8009716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	f383 8811 	msr	BASEPRI, r3
}
 800971e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009720:	bf00      	nop
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	e000ed04 	.word	0xe000ed04

0800972c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800972c:	b480      	push	{r7}
 800972e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009730:	4b0b      	ldr	r3, [pc, #44]	@ (8009760 <vPortSetupTimerInterrupt+0x34>)
 8009732:	2200      	movs	r2, #0
 8009734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009736:	4b0b      	ldr	r3, [pc, #44]	@ (8009764 <vPortSetupTimerInterrupt+0x38>)
 8009738:	2200      	movs	r2, #0
 800973a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800973c:	4b0a      	ldr	r3, [pc, #40]	@ (8009768 <vPortSetupTimerInterrupt+0x3c>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a0a      	ldr	r2, [pc, #40]	@ (800976c <vPortSetupTimerInterrupt+0x40>)
 8009742:	fba2 2303 	umull	r2, r3, r2, r3
 8009746:	099b      	lsrs	r3, r3, #6
 8009748:	4a09      	ldr	r2, [pc, #36]	@ (8009770 <vPortSetupTimerInterrupt+0x44>)
 800974a:	3b01      	subs	r3, #1
 800974c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800974e:	4b04      	ldr	r3, [pc, #16]	@ (8009760 <vPortSetupTimerInterrupt+0x34>)
 8009750:	2207      	movs	r2, #7
 8009752:	601a      	str	r2, [r3, #0]
}
 8009754:	bf00      	nop
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	e000e010 	.word	0xe000e010
 8009764:	e000e018 	.word	0xe000e018
 8009768:	24000000 	.word	0x24000000
 800976c:	10624dd3 	.word	0x10624dd3
 8009770:	e000e014 	.word	0xe000e014

08009774 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009774:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009784 <vPortEnableVFP+0x10>
 8009778:	6801      	ldr	r1, [r0, #0]
 800977a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800977e:	6001      	str	r1, [r0, #0]
 8009780:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009782:	bf00      	nop
 8009784:	e000ed88 	.word	0xe000ed88

08009788 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800978e:	f3ef 8305 	mrs	r3, IPSR
 8009792:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2b0f      	cmp	r3, #15
 8009798:	d915      	bls.n	80097c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800979a:	4a18      	ldr	r2, [pc, #96]	@ (80097fc <vPortValidateInterruptPriority+0x74>)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	4413      	add	r3, r2
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80097a4:	4b16      	ldr	r3, [pc, #88]	@ (8009800 <vPortValidateInterruptPriority+0x78>)
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	7afa      	ldrb	r2, [r7, #11]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d20b      	bcs.n	80097c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80097ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	607b      	str	r3, [r7, #4]
}
 80097c0:	bf00      	nop
 80097c2:	bf00      	nop
 80097c4:	e7fd      	b.n	80097c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80097c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009804 <vPortValidateInterruptPriority+0x7c>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80097ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009808 <vPortValidateInterruptPriority+0x80>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d90b      	bls.n	80097ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80097d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	603b      	str	r3, [r7, #0]
}
 80097e8:	bf00      	nop
 80097ea:	bf00      	nop
 80097ec:	e7fd      	b.n	80097ea <vPortValidateInterruptPriority+0x62>
	}
 80097ee:	bf00      	nop
 80097f0:	3714      	adds	r7, #20
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	e000e3f0 	.word	0xe000e3f0
 8009800:	24000ff0 	.word	0x24000ff0
 8009804:	e000ed0c 	.word	0xe000ed0c
 8009808:	24000ff4 	.word	0x24000ff4

0800980c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b08a      	sub	sp, #40	@ 0x28
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009814:	2300      	movs	r3, #0
 8009816:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009818:	f7fe fd76 	bl	8008308 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800981c:	4b5c      	ldr	r3, [pc, #368]	@ (8009990 <pvPortMalloc+0x184>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d101      	bne.n	8009828 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009824:	f000 f924 	bl	8009a70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009828:	4b5a      	ldr	r3, [pc, #360]	@ (8009994 <pvPortMalloc+0x188>)
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	4013      	ands	r3, r2
 8009830:	2b00      	cmp	r3, #0
 8009832:	f040 8095 	bne.w	8009960 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d01e      	beq.n	800987a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800983c:	2208      	movs	r2, #8
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4413      	add	r3, r2
 8009842:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f003 0307 	and.w	r3, r3, #7
 800984a:	2b00      	cmp	r3, #0
 800984c:	d015      	beq.n	800987a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f023 0307 	bic.w	r3, r3, #7
 8009854:	3308      	adds	r3, #8
 8009856:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f003 0307 	and.w	r3, r3, #7
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00b      	beq.n	800987a <pvPortMalloc+0x6e>
	__asm volatile
 8009862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009866:	f383 8811 	msr	BASEPRI, r3
 800986a:	f3bf 8f6f 	isb	sy
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	617b      	str	r3, [r7, #20]
}
 8009874:	bf00      	nop
 8009876:	bf00      	nop
 8009878:	e7fd      	b.n	8009876 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d06f      	beq.n	8009960 <pvPortMalloc+0x154>
 8009880:	4b45      	ldr	r3, [pc, #276]	@ (8009998 <pvPortMalloc+0x18c>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	429a      	cmp	r2, r3
 8009888:	d86a      	bhi.n	8009960 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800988a:	4b44      	ldr	r3, [pc, #272]	@ (800999c <pvPortMalloc+0x190>)
 800988c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800988e:	4b43      	ldr	r3, [pc, #268]	@ (800999c <pvPortMalloc+0x190>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009894:	e004      	b.n	80098a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009898:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800989a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80098a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d903      	bls.n	80098b2 <pvPortMalloc+0xa6>
 80098aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1f1      	bne.n	8009896 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80098b2:	4b37      	ldr	r3, [pc, #220]	@ (8009990 <pvPortMalloc+0x184>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d051      	beq.n	8009960 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80098bc:	6a3b      	ldr	r3, [r7, #32]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2208      	movs	r2, #8
 80098c2:	4413      	add	r3, r2
 80098c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80098c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	6a3b      	ldr	r3, [r7, #32]
 80098cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80098ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d0:	685a      	ldr	r2, [r3, #4]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	1ad2      	subs	r2, r2, r3
 80098d6:	2308      	movs	r3, #8
 80098d8:	005b      	lsls	r3, r3, #1
 80098da:	429a      	cmp	r2, r3
 80098dc:	d920      	bls.n	8009920 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80098de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4413      	add	r3, r2
 80098e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	f003 0307 	and.w	r3, r3, #7
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00b      	beq.n	8009908 <pvPortMalloc+0xfc>
	__asm volatile
 80098f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	613b      	str	r3, [r7, #16]
}
 8009902:	bf00      	nop
 8009904:	bf00      	nop
 8009906:	e7fd      	b.n	8009904 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800990a:	685a      	ldr	r2, [r3, #4]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	1ad2      	subs	r2, r2, r3
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800991a:	69b8      	ldr	r0, [r7, #24]
 800991c:	f000 f90a 	bl	8009b34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009920:	4b1d      	ldr	r3, [pc, #116]	@ (8009998 <pvPortMalloc+0x18c>)
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	1ad3      	subs	r3, r2, r3
 800992a:	4a1b      	ldr	r2, [pc, #108]	@ (8009998 <pvPortMalloc+0x18c>)
 800992c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800992e:	4b1a      	ldr	r3, [pc, #104]	@ (8009998 <pvPortMalloc+0x18c>)
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	4b1b      	ldr	r3, [pc, #108]	@ (80099a0 <pvPortMalloc+0x194>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	429a      	cmp	r2, r3
 8009938:	d203      	bcs.n	8009942 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800993a:	4b17      	ldr	r3, [pc, #92]	@ (8009998 <pvPortMalloc+0x18c>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a18      	ldr	r2, [pc, #96]	@ (80099a0 <pvPortMalloc+0x194>)
 8009940:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009944:	685a      	ldr	r2, [r3, #4]
 8009946:	4b13      	ldr	r3, [pc, #76]	@ (8009994 <pvPortMalloc+0x188>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	431a      	orrs	r2, r3
 800994c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800994e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009952:	2200      	movs	r2, #0
 8009954:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009956:	4b13      	ldr	r3, [pc, #76]	@ (80099a4 <pvPortMalloc+0x198>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	3301      	adds	r3, #1
 800995c:	4a11      	ldr	r2, [pc, #68]	@ (80099a4 <pvPortMalloc+0x198>)
 800995e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009960:	f7fe fce0 	bl	8008324 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	f003 0307 	and.w	r3, r3, #7
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00b      	beq.n	8009986 <pvPortMalloc+0x17a>
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	60fb      	str	r3, [r7, #12]
}
 8009980:	bf00      	nop
 8009982:	bf00      	nop
 8009984:	e7fd      	b.n	8009982 <pvPortMalloc+0x176>
	return pvReturn;
 8009986:	69fb      	ldr	r3, [r7, #28]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3728      	adds	r7, #40	@ 0x28
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	24004c00 	.word	0x24004c00
 8009994:	24004c14 	.word	0x24004c14
 8009998:	24004c04 	.word	0x24004c04
 800999c:	24004bf8 	.word	0x24004bf8
 80099a0:	24004c08 	.word	0x24004c08
 80099a4:	24004c0c 	.word	0x24004c0c

080099a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d04f      	beq.n	8009a5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80099ba:	2308      	movs	r3, #8
 80099bc:	425b      	negs	r3, r3
 80099be:	697a      	ldr	r2, [r7, #20]
 80099c0:	4413      	add	r3, r2
 80099c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	685a      	ldr	r2, [r3, #4]
 80099cc:	4b25      	ldr	r3, [pc, #148]	@ (8009a64 <vPortFree+0xbc>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4013      	ands	r3, r2
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d10b      	bne.n	80099ee <vPortFree+0x46>
	__asm volatile
 80099d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099da:	f383 8811 	msr	BASEPRI, r3
 80099de:	f3bf 8f6f 	isb	sy
 80099e2:	f3bf 8f4f 	dsb	sy
 80099e6:	60fb      	str	r3, [r7, #12]
}
 80099e8:	bf00      	nop
 80099ea:	bf00      	nop
 80099ec:	e7fd      	b.n	80099ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00b      	beq.n	8009a0e <vPortFree+0x66>
	__asm volatile
 80099f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099fa:	f383 8811 	msr	BASEPRI, r3
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	f3bf 8f4f 	dsb	sy
 8009a06:	60bb      	str	r3, [r7, #8]
}
 8009a08:	bf00      	nop
 8009a0a:	bf00      	nop
 8009a0c:	e7fd      	b.n	8009a0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	685a      	ldr	r2, [r3, #4]
 8009a12:	4b14      	ldr	r3, [pc, #80]	@ (8009a64 <vPortFree+0xbc>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4013      	ands	r3, r2
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d01e      	beq.n	8009a5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d11a      	bne.n	8009a5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	685a      	ldr	r2, [r3, #4]
 8009a28:	4b0e      	ldr	r3, [pc, #56]	@ (8009a64 <vPortFree+0xbc>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	43db      	mvns	r3, r3
 8009a2e:	401a      	ands	r2, r3
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009a34:	f7fe fc68 	bl	8008308 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	685a      	ldr	r2, [r3, #4]
 8009a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8009a68 <vPortFree+0xc0>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4413      	add	r3, r2
 8009a42:	4a09      	ldr	r2, [pc, #36]	@ (8009a68 <vPortFree+0xc0>)
 8009a44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009a46:	6938      	ldr	r0, [r7, #16]
 8009a48:	f000 f874 	bl	8009b34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009a4c:	4b07      	ldr	r3, [pc, #28]	@ (8009a6c <vPortFree+0xc4>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	3301      	adds	r3, #1
 8009a52:	4a06      	ldr	r2, [pc, #24]	@ (8009a6c <vPortFree+0xc4>)
 8009a54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009a56:	f7fe fc65 	bl	8008324 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009a5a:	bf00      	nop
 8009a5c:	3718      	adds	r7, #24
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	24004c14 	.word	0x24004c14
 8009a68:	24004c04 	.word	0x24004c04
 8009a6c:	24004c10 	.word	0x24004c10

08009a70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009a76:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009a7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009a7c:	4b27      	ldr	r3, [pc, #156]	@ (8009b1c <prvHeapInit+0xac>)
 8009a7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f003 0307 	and.w	r3, r3, #7
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00c      	beq.n	8009aa4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	3307      	adds	r3, #7
 8009a8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f023 0307 	bic.w	r3, r3, #7
 8009a96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a98:	68ba      	ldr	r2, [r7, #8]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8009b1c <prvHeapInit+0xac>)
 8009aa0:	4413      	add	r3, r2
 8009aa2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8009b20 <prvHeapInit+0xb0>)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009aae:	4b1c      	ldr	r3, [pc, #112]	@ (8009b20 <prvHeapInit+0xb0>)
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	68ba      	ldr	r2, [r7, #8]
 8009ab8:	4413      	add	r3, r2
 8009aba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009abc:	2208      	movs	r2, #8
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	1a9b      	subs	r3, r3, r2
 8009ac2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f023 0307 	bic.w	r3, r3, #7
 8009aca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	4a15      	ldr	r2, [pc, #84]	@ (8009b24 <prvHeapInit+0xb4>)
 8009ad0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ad2:	4b14      	ldr	r3, [pc, #80]	@ (8009b24 <prvHeapInit+0xb4>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009ada:	4b12      	ldr	r3, [pc, #72]	@ (8009b24 <prvHeapInit+0xb4>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	1ad2      	subs	r2, r2, r3
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009af0:	4b0c      	ldr	r3, [pc, #48]	@ (8009b24 <prvHeapInit+0xb4>)
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	4a0a      	ldr	r2, [pc, #40]	@ (8009b28 <prvHeapInit+0xb8>)
 8009afe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	4a09      	ldr	r2, [pc, #36]	@ (8009b2c <prvHeapInit+0xbc>)
 8009b06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b08:	4b09      	ldr	r3, [pc, #36]	@ (8009b30 <prvHeapInit+0xc0>)
 8009b0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009b0e:	601a      	str	r2, [r3, #0]
}
 8009b10:	bf00      	nop
 8009b12:	3714      	adds	r7, #20
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr
 8009b1c:	24000ff8 	.word	0x24000ff8
 8009b20:	24004bf8 	.word	0x24004bf8
 8009b24:	24004c00 	.word	0x24004c00
 8009b28:	24004c08 	.word	0x24004c08
 8009b2c:	24004c04 	.word	0x24004c04
 8009b30:	24004c14 	.word	0x24004c14

08009b34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009b3c:	4b28      	ldr	r3, [pc, #160]	@ (8009be0 <prvInsertBlockIntoFreeList+0xac>)
 8009b3e:	60fb      	str	r3, [r7, #12]
 8009b40:	e002      	b.n	8009b48 <prvInsertBlockIntoFreeList+0x14>
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	60fb      	str	r3, [r7, #12]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d8f7      	bhi.n	8009b42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	68ba      	ldr	r2, [r7, #8]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d108      	bne.n	8009b76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	685a      	ldr	r2, [r3, #4]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	441a      	add	r2, r3
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	68ba      	ldr	r2, [r7, #8]
 8009b80:	441a      	add	r2, r3
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d118      	bne.n	8009bbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	4b15      	ldr	r3, [pc, #84]	@ (8009be4 <prvInsertBlockIntoFreeList+0xb0>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d00d      	beq.n	8009bb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	685a      	ldr	r2, [r3, #4]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	441a      	add	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	601a      	str	r2, [r3, #0]
 8009bb0:	e008      	b.n	8009bc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8009be4 <prvInsertBlockIntoFreeList+0xb0>)
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	601a      	str	r2, [r3, #0]
 8009bba:	e003      	b.n	8009bc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009bc4:	68fa      	ldr	r2, [r7, #12]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d002      	beq.n	8009bd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bd2:	bf00      	nop
 8009bd4:	3714      	adds	r7, #20
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	24004bf8 	.word	0x24004bf8
 8009be4:	24004c00 	.word	0x24004c00

08009be8 <memset>:
 8009be8:	4402      	add	r2, r0
 8009bea:	4603      	mov	r3, r0
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d100      	bne.n	8009bf2 <memset+0xa>
 8009bf0:	4770      	bx	lr
 8009bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8009bf6:	e7f9      	b.n	8009bec <memset+0x4>

08009bf8 <_reclaim_reent>:
 8009bf8:	4b29      	ldr	r3, [pc, #164]	@ (8009ca0 <_reclaim_reent+0xa8>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4283      	cmp	r3, r0
 8009bfe:	b570      	push	{r4, r5, r6, lr}
 8009c00:	4604      	mov	r4, r0
 8009c02:	d04b      	beq.n	8009c9c <_reclaim_reent+0xa4>
 8009c04:	69c3      	ldr	r3, [r0, #28]
 8009c06:	b1ab      	cbz	r3, 8009c34 <_reclaim_reent+0x3c>
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	b16b      	cbz	r3, 8009c28 <_reclaim_reent+0x30>
 8009c0c:	2500      	movs	r5, #0
 8009c0e:	69e3      	ldr	r3, [r4, #28]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	5959      	ldr	r1, [r3, r5]
 8009c14:	2900      	cmp	r1, #0
 8009c16:	d13b      	bne.n	8009c90 <_reclaim_reent+0x98>
 8009c18:	3504      	adds	r5, #4
 8009c1a:	2d80      	cmp	r5, #128	@ 0x80
 8009c1c:	d1f7      	bne.n	8009c0e <_reclaim_reent+0x16>
 8009c1e:	69e3      	ldr	r3, [r4, #28]
 8009c20:	4620      	mov	r0, r4
 8009c22:	68d9      	ldr	r1, [r3, #12]
 8009c24:	f000 f872 	bl	8009d0c <_free_r>
 8009c28:	69e3      	ldr	r3, [r4, #28]
 8009c2a:	6819      	ldr	r1, [r3, #0]
 8009c2c:	b111      	cbz	r1, 8009c34 <_reclaim_reent+0x3c>
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f000 f86c 	bl	8009d0c <_free_r>
 8009c34:	6961      	ldr	r1, [r4, #20]
 8009c36:	b111      	cbz	r1, 8009c3e <_reclaim_reent+0x46>
 8009c38:	4620      	mov	r0, r4
 8009c3a:	f000 f867 	bl	8009d0c <_free_r>
 8009c3e:	69e1      	ldr	r1, [r4, #28]
 8009c40:	b111      	cbz	r1, 8009c48 <_reclaim_reent+0x50>
 8009c42:	4620      	mov	r0, r4
 8009c44:	f000 f862 	bl	8009d0c <_free_r>
 8009c48:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009c4a:	b111      	cbz	r1, 8009c52 <_reclaim_reent+0x5a>
 8009c4c:	4620      	mov	r0, r4
 8009c4e:	f000 f85d 	bl	8009d0c <_free_r>
 8009c52:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c54:	b111      	cbz	r1, 8009c5c <_reclaim_reent+0x64>
 8009c56:	4620      	mov	r0, r4
 8009c58:	f000 f858 	bl	8009d0c <_free_r>
 8009c5c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009c5e:	b111      	cbz	r1, 8009c66 <_reclaim_reent+0x6e>
 8009c60:	4620      	mov	r0, r4
 8009c62:	f000 f853 	bl	8009d0c <_free_r>
 8009c66:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009c68:	b111      	cbz	r1, 8009c70 <_reclaim_reent+0x78>
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	f000 f84e 	bl	8009d0c <_free_r>
 8009c70:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009c72:	b111      	cbz	r1, 8009c7a <_reclaim_reent+0x82>
 8009c74:	4620      	mov	r0, r4
 8009c76:	f000 f849 	bl	8009d0c <_free_r>
 8009c7a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009c7c:	b111      	cbz	r1, 8009c84 <_reclaim_reent+0x8c>
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f000 f844 	bl	8009d0c <_free_r>
 8009c84:	6a23      	ldr	r3, [r4, #32]
 8009c86:	b14b      	cbz	r3, 8009c9c <_reclaim_reent+0xa4>
 8009c88:	4620      	mov	r0, r4
 8009c8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009c8e:	4718      	bx	r3
 8009c90:	680e      	ldr	r6, [r1, #0]
 8009c92:	4620      	mov	r0, r4
 8009c94:	f000 f83a 	bl	8009d0c <_free_r>
 8009c98:	4631      	mov	r1, r6
 8009c9a:	e7bb      	b.n	8009c14 <_reclaim_reent+0x1c>
 8009c9c:	bd70      	pop	{r4, r5, r6, pc}
 8009c9e:	bf00      	nop
 8009ca0:	24000028 	.word	0x24000028

08009ca4 <__libc_init_array>:
 8009ca4:	b570      	push	{r4, r5, r6, lr}
 8009ca6:	4d0d      	ldr	r5, [pc, #52]	@ (8009cdc <__libc_init_array+0x38>)
 8009ca8:	4c0d      	ldr	r4, [pc, #52]	@ (8009ce0 <__libc_init_array+0x3c>)
 8009caa:	1b64      	subs	r4, r4, r5
 8009cac:	10a4      	asrs	r4, r4, #2
 8009cae:	2600      	movs	r6, #0
 8009cb0:	42a6      	cmp	r6, r4
 8009cb2:	d109      	bne.n	8009cc8 <__libc_init_array+0x24>
 8009cb4:	4d0b      	ldr	r5, [pc, #44]	@ (8009ce4 <__libc_init_array+0x40>)
 8009cb6:	4c0c      	ldr	r4, [pc, #48]	@ (8009ce8 <__libc_init_array+0x44>)
 8009cb8:	f000 f87e 	bl	8009db8 <_init>
 8009cbc:	1b64      	subs	r4, r4, r5
 8009cbe:	10a4      	asrs	r4, r4, #2
 8009cc0:	2600      	movs	r6, #0
 8009cc2:	42a6      	cmp	r6, r4
 8009cc4:	d105      	bne.n	8009cd2 <__libc_init_array+0x2e>
 8009cc6:	bd70      	pop	{r4, r5, r6, pc}
 8009cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ccc:	4798      	blx	r3
 8009cce:	3601      	adds	r6, #1
 8009cd0:	e7ee      	b.n	8009cb0 <__libc_init_array+0xc>
 8009cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cd6:	4798      	blx	r3
 8009cd8:	3601      	adds	r6, #1
 8009cda:	e7f2      	b.n	8009cc2 <__libc_init_array+0x1e>
 8009cdc:	08009e6c 	.word	0x08009e6c
 8009ce0:	08009e6c 	.word	0x08009e6c
 8009ce4:	08009e6c 	.word	0x08009e6c
 8009ce8:	08009e70 	.word	0x08009e70

08009cec <__retarget_lock_acquire_recursive>:
 8009cec:	4770      	bx	lr

08009cee <__retarget_lock_release_recursive>:
 8009cee:	4770      	bx	lr

08009cf0 <memcpy>:
 8009cf0:	440a      	add	r2, r1
 8009cf2:	4291      	cmp	r1, r2
 8009cf4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009cf8:	d100      	bne.n	8009cfc <memcpy+0xc>
 8009cfa:	4770      	bx	lr
 8009cfc:	b510      	push	{r4, lr}
 8009cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d06:	4291      	cmp	r1, r2
 8009d08:	d1f9      	bne.n	8009cfe <memcpy+0xe>
 8009d0a:	bd10      	pop	{r4, pc}

08009d0c <_free_r>:
 8009d0c:	b538      	push	{r3, r4, r5, lr}
 8009d0e:	4605      	mov	r5, r0
 8009d10:	2900      	cmp	r1, #0
 8009d12:	d041      	beq.n	8009d98 <_free_r+0x8c>
 8009d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d18:	1f0c      	subs	r4, r1, #4
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	bfb8      	it	lt
 8009d1e:	18e4      	addlt	r4, r4, r3
 8009d20:	f000 f83e 	bl	8009da0 <__malloc_lock>
 8009d24:	4a1d      	ldr	r2, [pc, #116]	@ (8009d9c <_free_r+0x90>)
 8009d26:	6813      	ldr	r3, [r2, #0]
 8009d28:	b933      	cbnz	r3, 8009d38 <_free_r+0x2c>
 8009d2a:	6063      	str	r3, [r4, #4]
 8009d2c:	6014      	str	r4, [r2, #0]
 8009d2e:	4628      	mov	r0, r5
 8009d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d34:	f000 b83a 	b.w	8009dac <__malloc_unlock>
 8009d38:	42a3      	cmp	r3, r4
 8009d3a:	d908      	bls.n	8009d4e <_free_r+0x42>
 8009d3c:	6820      	ldr	r0, [r4, #0]
 8009d3e:	1821      	adds	r1, r4, r0
 8009d40:	428b      	cmp	r3, r1
 8009d42:	bf01      	itttt	eq
 8009d44:	6819      	ldreq	r1, [r3, #0]
 8009d46:	685b      	ldreq	r3, [r3, #4]
 8009d48:	1809      	addeq	r1, r1, r0
 8009d4a:	6021      	streq	r1, [r4, #0]
 8009d4c:	e7ed      	b.n	8009d2a <_free_r+0x1e>
 8009d4e:	461a      	mov	r2, r3
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	b10b      	cbz	r3, 8009d58 <_free_r+0x4c>
 8009d54:	42a3      	cmp	r3, r4
 8009d56:	d9fa      	bls.n	8009d4e <_free_r+0x42>
 8009d58:	6811      	ldr	r1, [r2, #0]
 8009d5a:	1850      	adds	r0, r2, r1
 8009d5c:	42a0      	cmp	r0, r4
 8009d5e:	d10b      	bne.n	8009d78 <_free_r+0x6c>
 8009d60:	6820      	ldr	r0, [r4, #0]
 8009d62:	4401      	add	r1, r0
 8009d64:	1850      	adds	r0, r2, r1
 8009d66:	4283      	cmp	r3, r0
 8009d68:	6011      	str	r1, [r2, #0]
 8009d6a:	d1e0      	bne.n	8009d2e <_free_r+0x22>
 8009d6c:	6818      	ldr	r0, [r3, #0]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	6053      	str	r3, [r2, #4]
 8009d72:	4408      	add	r0, r1
 8009d74:	6010      	str	r0, [r2, #0]
 8009d76:	e7da      	b.n	8009d2e <_free_r+0x22>
 8009d78:	d902      	bls.n	8009d80 <_free_r+0x74>
 8009d7a:	230c      	movs	r3, #12
 8009d7c:	602b      	str	r3, [r5, #0]
 8009d7e:	e7d6      	b.n	8009d2e <_free_r+0x22>
 8009d80:	6820      	ldr	r0, [r4, #0]
 8009d82:	1821      	adds	r1, r4, r0
 8009d84:	428b      	cmp	r3, r1
 8009d86:	bf04      	itt	eq
 8009d88:	6819      	ldreq	r1, [r3, #0]
 8009d8a:	685b      	ldreq	r3, [r3, #4]
 8009d8c:	6063      	str	r3, [r4, #4]
 8009d8e:	bf04      	itt	eq
 8009d90:	1809      	addeq	r1, r1, r0
 8009d92:	6021      	streq	r1, [r4, #0]
 8009d94:	6054      	str	r4, [r2, #4]
 8009d96:	e7ca      	b.n	8009d2e <_free_r+0x22>
 8009d98:	bd38      	pop	{r3, r4, r5, pc}
 8009d9a:	bf00      	nop
 8009d9c:	24004d54 	.word	0x24004d54

08009da0 <__malloc_lock>:
 8009da0:	4801      	ldr	r0, [pc, #4]	@ (8009da8 <__malloc_lock+0x8>)
 8009da2:	f7ff bfa3 	b.w	8009cec <__retarget_lock_acquire_recursive>
 8009da6:	bf00      	nop
 8009da8:	24004d50 	.word	0x24004d50

08009dac <__malloc_unlock>:
 8009dac:	4801      	ldr	r0, [pc, #4]	@ (8009db4 <__malloc_unlock+0x8>)
 8009dae:	f7ff bf9e 	b.w	8009cee <__retarget_lock_release_recursive>
 8009db2:	bf00      	nop
 8009db4:	24004d50 	.word	0x24004d50

08009db8 <_init>:
 8009db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dba:	bf00      	nop
 8009dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dbe:	bc08      	pop	{r3}
 8009dc0:	469e      	mov	lr, r3
 8009dc2:	4770      	bx	lr

08009dc4 <_fini>:
 8009dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dc6:	bf00      	nop
 8009dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dca:	bc08      	pop	{r3}
 8009dcc:	469e      	mov	lr, r3
 8009dce:	4770      	bx	lr
