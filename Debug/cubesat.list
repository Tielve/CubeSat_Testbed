
cubesat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f518  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  0800f7b8  0800f7b8  000107b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fa98  0800fa98  00010a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800faa0  0800faa0  00010aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800faa4  0800faa4  00010aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000084  24000000  0800faa8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004d04  24000084  0800fb2c  00011084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004d88  0800fb2c  00011d88  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00011084  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002e155  00000000  00000000  000110b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004ca5  00000000  00000000  0003f207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002618  00000000  00000000  00043eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001e60  00000000  00000000  000464c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00009752  00000000  00000000  00048328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002cbd5  00000000  00000000  00051a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017eceb  00000000  00000000  0007e64f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001fd33a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b114  00000000  00000000  001fd380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000056  00000000  00000000  00208494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000084 	.word	0x24000084
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f7a0 	.word	0x0800f7a0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000088 	.word	0x24000088
 80002dc:	0800f7a0 	.word	0x0800f7a0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80006b4:	23ff      	movs	r3, #255	@ 0xff
 80006b6:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 80006bc:	2300      	movs	r3, #0
 80006be:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 80006c0:	2300      	movs	r3, #0
 80006c2:	813b      	strh	r3, [r7, #8]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 80006c4:	4a58      	ldr	r2, [pc, #352]	@ (8000828 <bno055_init+0x17c>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80006ca:	4b57      	ldr	r3, [pc, #348]	@ (8000828 <bno055_init+0x17c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	68dc      	ldr	r4, [r3, #12]
 80006d0:	4b55      	ldr	r3, [pc, #340]	@ (8000828 <bno055_init+0x17c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	7a58      	ldrb	r0, [r3, #9]
 80006d6:	f107 020d 	add.w	r2, r7, #13
 80006da:	2301      	movs	r3, #1
 80006dc:	2107      	movs	r1, #7
 80006de:	47a0      	blx	r4
 80006e0:	4603      	mov	r3, r0
 80006e2:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80006e4:	4b50      	ldr	r3, [pc, #320]	@ (8000828 <bno055_init+0x17c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	691c      	ldr	r4, [r3, #16]
 80006ea:	4b4f      	ldr	r3, [pc, #316]	@ (8000828 <bno055_init+0x17c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	7a58      	ldrb	r0, [r3, #9]
 80006f0:	f107 020e 	add.w	r2, r7, #14
 80006f4:	2301      	movs	r3, #1
 80006f6:	2100      	movs	r1, #0
 80006f8:	47a0      	blx	r4
 80006fa:	4603      	mov	r3, r0
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	4413      	add	r3, r2
 8000702:	b2db      	uxtb	r3, r3
 8000704:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 8000706:	4b48      	ldr	r3, [pc, #288]	@ (8000828 <bno055_init+0x17c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	7bba      	ldrb	r2, [r7, #14]
 800070c:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800070e:	4b46      	ldr	r3, [pc, #280]	@ (8000828 <bno055_init+0x17c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	691c      	ldr	r4, [r3, #16]
 8000714:	4b44      	ldr	r3, [pc, #272]	@ (8000828 <bno055_init+0x17c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	7a58      	ldrb	r0, [r3, #9]
 800071a:	f107 020e 	add.w	r2, r7, #14
 800071e:	2301      	movs	r3, #1
 8000720:	2101      	movs	r1, #1
 8000722:	47a0      	blx	r4
 8000724:	4603      	mov	r3, r0
 8000726:	b2da      	uxtb	r2, r3
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	4413      	add	r3, r2
 800072c:	b2db      	uxtb	r3, r3
 800072e:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 8000730:	4b3d      	ldr	r3, [pc, #244]	@ (8000828 <bno055_init+0x17c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	7bba      	ldrb	r2, [r7, #14]
 8000736:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000738:	4b3b      	ldr	r3, [pc, #236]	@ (8000828 <bno055_init+0x17c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	691c      	ldr	r4, [r3, #16]
 800073e:	4b3a      	ldr	r3, [pc, #232]	@ (8000828 <bno055_init+0x17c>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	7a58      	ldrb	r0, [r3, #9]
 8000744:	f107 020e 	add.w	r2, r7, #14
 8000748:	2301      	movs	r3, #1
 800074a:	2102      	movs	r1, #2
 800074c:	47a0      	blx	r4
 800074e:	4603      	mov	r3, r0
 8000750:	b2da      	uxtb	r2, r3
 8000752:	7bfb      	ldrb	r3, [r7, #15]
 8000754:	4413      	add	r3, r2
 8000756:	b2db      	uxtb	r3, r3
 8000758:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 800075a:	4b33      	ldr	r3, [pc, #204]	@ (8000828 <bno055_init+0x17c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	7bba      	ldrb	r2, [r7, #14]
 8000760:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000762:	4b31      	ldr	r3, [pc, #196]	@ (8000828 <bno055_init+0x17c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	691c      	ldr	r4, [r3, #16]
 8000768:	4b2f      	ldr	r3, [pc, #188]	@ (8000828 <bno055_init+0x17c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	7a58      	ldrb	r0, [r3, #9]
 800076e:	f107 020e 	add.w	r2, r7, #14
 8000772:	2301      	movs	r3, #1
 8000774:	2103      	movs	r1, #3
 8000776:	47a0      	blx	r4
 8000778:	4603      	mov	r3, r0
 800077a:	b2da      	uxtb	r2, r3
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	4413      	add	r3, r2
 8000780:	b2db      	uxtb	r3, r3
 8000782:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 8000784:	4b28      	ldr	r3, [pc, #160]	@ (8000828 <bno055_init+0x17c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	7bba      	ldrb	r2, [r7, #14]
 800078a:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800078c:	4b26      	ldr	r3, [pc, #152]	@ (8000828 <bno055_init+0x17c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	691c      	ldr	r4, [r3, #16]
 8000792:	4b25      	ldr	r3, [pc, #148]	@ (8000828 <bno055_init+0x17c>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	7a58      	ldrb	r0, [r3, #9]
 8000798:	f107 020e 	add.w	r2, r7, #14
 800079c:	2301      	movs	r3, #1
 800079e:	2106      	movs	r1, #6
 80007a0:	47a0      	blx	r4
 80007a2:	4603      	mov	r3, r0
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	4413      	add	r3, r2
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 80007ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000828 <bno055_init+0x17c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	7bba      	ldrb	r2, [r7, #14]
 80007b4:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80007b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000828 <bno055_init+0x17c>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	691c      	ldr	r4, [r3, #16]
 80007bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <bno055_init+0x17c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	7a58      	ldrb	r0, [r3, #9]
 80007c2:	f107 0208 	add.w	r2, r7, #8
 80007c6:	2302      	movs	r3, #2
 80007c8:	2104      	movs	r1, #4
 80007ca:	47a0      	blx	r4
 80007cc:	4603      	mov	r3, r0
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	4413      	add	r3, r2
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 80007d8:	7a3b      	ldrb	r3, [r7, #8]
 80007da:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 80007dc:	7a7b      	ldrb	r3, [r7, #9]
 80007de:	021b      	lsls	r3, r3, #8
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	7a3b      	ldrb	r3, [r7, #8]
 80007e4:	4619      	mov	r1, r3
    p_bno055->sw_rev_id =
 80007e6:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <bno055_init+0x17c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 80007ea:	430a      	orrs	r2, r1
 80007ec:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 80007ee:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80007f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000828 <bno055_init+0x17c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	691c      	ldr	r4, [r3, #16]
 80007f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <bno055_init+0x17c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	7a58      	ldrb	r0, [r3, #9]
 80007fc:	f107 020e 	add.w	r2, r7, #14
 8000800:	2301      	movs	r3, #1
 8000802:	2107      	movs	r1, #7
 8000804:	47a0      	blx	r4
 8000806:	4603      	mov	r3, r0
 8000808:	b2da      	uxtb	r2, r3
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	4413      	add	r3, r2
 800080e:	b2db      	uxtb	r3, r3
 8000810:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 8000812:	4b05      	ldr	r3, [pc, #20]	@ (8000828 <bno055_init+0x17c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	7bba      	ldrb	r2, [r7, #14]
 8000818:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 800081a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	bd90      	pop	{r4, r7, pc}
 8000826:	bf00      	nop
 8000828:	240000a0 	.word	0x240000a0

0800082c <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	6039      	str	r1, [r7, #0]
 8000836:	71fb      	strb	r3, [r7, #7]
 8000838:	4613      	mov	r3, r2
 800083a:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800083c:	23ff      	movs	r3, #255	@ 0xff
 800083e:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <bno055_write_register+0x48>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d102      	bne.n	800084e <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000848:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800084c:	e00d      	b.n	800086a <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <bno055_write_register+0x48>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	68dc      	ldr	r4, [r3, #12]
 8000854:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <bno055_write_register+0x48>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	7a58      	ldrb	r0, [r3, #9]
 800085a:	79bb      	ldrb	r3, [r7, #6]
 800085c:	79f9      	ldrb	r1, [r7, #7]
 800085e:	683a      	ldr	r2, [r7, #0]
 8000860:	47a0      	blx	r4
 8000862:	4603      	mov	r3, r0
 8000864:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000866:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800086a:	4618      	mov	r0, r3
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	bd90      	pop	{r4, r7, pc}
 8000872:	bf00      	nop
 8000874:	240000a0 	.word	0x240000a0

08000878 <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000882:	23ff      	movs	r3, #255	@ 0xff
 8000884:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000886:	2300      	movs	r3, #0
 8000888:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800088a:	4b1e      	ldr	r3, [pc, #120]	@ (8000904 <bno055_write_page_id+0x8c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d102      	bne.n	8000898 <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 8000892:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000896:	e030      	b.n	80008fa <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000898:	4b1a      	ldr	r3, [pc, #104]	@ (8000904 <bno055_write_page_id+0x8c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	691c      	ldr	r4, [r3, #16]
 800089e:	4b19      	ldr	r3, [pc, #100]	@ (8000904 <bno055_write_page_id+0x8c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	7a58      	ldrb	r0, [r3, #9]
 80008a4:	f107 020e 	add.w	r2, r7, #14
 80008a8:	2301      	movs	r3, #1
 80008aa:	2107      	movs	r1, #7
 80008ac:	47a0      	blx	r4
 80008ae:	4603      	mov	r3, r0
 80008b0:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 80008b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d11b      	bne.n	80008f2 <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80008be:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <bno055_write_page_id+0x8c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	68dc      	ldr	r4, [r3, #12]
 80008c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <bno055_write_page_id+0x8c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	7a58      	ldrb	r0, [r3, #9]
 80008ca:	f107 020e 	add.w	r2, r7, #14
 80008ce:	2301      	movs	r3, #1
 80008d0:	2107      	movs	r1, #7
 80008d2:	47a0      	blx	r4
 80008d4:	4603      	mov	r3, r0
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
 80008da:	4413      	add	r3, r2
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 80008e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d106      	bne.n	80008f6 <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <bno055_write_page_id+0x8c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	79fa      	ldrb	r2, [r7, #7]
 80008ee:	711a      	strb	r2, [r3, #4]
 80008f0:	e001      	b.n	80008f6 <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80008f2:	23ff      	movs	r3, #255	@ 0xff
 80008f4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80008f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3714      	adds	r7, #20
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd90      	pop	{r4, r7, pc}
 8000902:	bf00      	nop
 8000904:	240000a0 	.word	0x240000a0

08000908 <bno055_read_accel_xyz>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_accel_xyz(struct bno055_accel_t *accel)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000910:	23ff      	movs	r3, #255	@ 0xff
 8000912:	73fb      	strb	r3, [r7, #15]
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] - z->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] - z->MSB
     */
    u8 data_u8[BNO055_ACCEL_XYZ_DATA_SIZE] = {
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	809a      	strh	r2, [r3, #4]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 800091e:	23ff      	movs	r3, #255	@ 0xff
 8000920:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000922:	4b2d      	ldr	r3, [pc, #180]	@ (80009d8 <bno055_read_accel_xyz+0xd0>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d102      	bne.n	8000930 <bno055_read_accel_xyz+0x28>
    {
        return BNO055_E_NULL_PTR;
 800092a:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800092e:	e04e      	b.n	80009ce <bno055_read_accel_xyz+0xc6>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000930:	4b29      	ldr	r3, [pc, #164]	@ (80009d8 <bno055_read_accel_xyz+0xd0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	791b      	ldrb	r3, [r3, #4]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d004      	beq.n	8000944 <bno055_read_accel_xyz+0x3c>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 800093a:	2000      	movs	r0, #0
 800093c:	f7ff ff9c 	bl	8000878 <bno055_write_page_id>
 8000940:	4603      	mov	r3, r0
 8000942:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000944:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d004      	beq.n	8000956 <bno055_read_accel_xyz+0x4e>
 800094c:	4b22      	ldr	r3, [pc, #136]	@ (80009d8 <bno055_read_accel_xyz+0xd0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	791b      	ldrb	r3, [r3, #4]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d137      	bne.n	80009c6 <bno055_read_accel_xyz+0xbe>
        {
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000956:	4b20      	ldr	r3, [pc, #128]	@ (80009d8 <bno055_read_accel_xyz+0xd0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	691c      	ldr	r4, [r3, #16]
 800095c:	4b1e      	ldr	r3, [pc, #120]	@ (80009d8 <bno055_read_accel_xyz+0xd0>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	7a58      	ldrb	r0, [r3, #9]
 8000962:	f107 0208 	add.w	r2, r7, #8
 8000966:	2306      	movs	r3, #6
 8000968:	2108      	movs	r1, #8
 800096a:	47a0      	blx	r4
 800096c:	4603      	mov	r3, r0
 800096e:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_ACCEL_DATA_X_LSB_VALUEX_REG,
                                                      data_u8,
                                                      BNO055_ACCEL_XYZ_DATA_SIZE);

            /* Data X*/
            data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB],
 8000970:	7a3b      	ldrb	r3, [r7, #8]
 8000972:	723b      	strb	r3, [r7, #8]
                                                                        BNO055_ACCEL_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB],
 8000974:	7a7b      	ldrb	r3, [r7, #9]
 8000976:	727b      	strb	r3, [r7, #9]
                                                                        BNO055_ACCEL_DATA_X_MSB_VALUEX);
            accel->x =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000978:	7a7b      	ldrb	r3, [r7, #9]
 800097a:	b25b      	sxtb	r3, r3
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB]));
 8000980:	7a3b      	ldrb	r3, [r7, #8]
 8000982:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000984:	4313      	orrs	r3, r2
 8000986:	b21a      	sxth	r2, r3
            accel->x =
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	801a      	strh	r2, [r3, #0]

            /* Data Y*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB],
 800098c:	7abb      	ldrb	r3, [r7, #10]
 800098e:	72bb      	strb	r3, [r7, #10]
                                                                        BNO055_ACCEL_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB],
 8000990:	7afb      	ldrb	r3, [r7, #11]
 8000992:	72fb      	strb	r3, [r7, #11]
                                                                        BNO055_ACCEL_DATA_Y_MSB_VALUEY);
            accel->y =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000994:	7afb      	ldrb	r3, [r7, #11]
 8000996:	b25b      	sxtb	r3, r3
 8000998:	021b      	lsls	r3, r3, #8
 800099a:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB]));
 800099c:	7abb      	ldrb	r3, [r7, #10]
 800099e:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80009a0:	4313      	orrs	r3, r2
 80009a2:	b21a      	sxth	r2, r3
            accel->y =
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	805a      	strh	r2, [r3, #2]

            /* Data Z*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB],
 80009a8:	7b3b      	ldrb	r3, [r7, #12]
 80009aa:	733b      	strb	r3, [r7, #12]
                                                                        BNO055_ACCEL_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB],
 80009ac:	7b7b      	ldrb	r3, [r7, #13]
 80009ae:	737b      	strb	r3, [r7, #13]
                                                                        BNO055_ACCEL_DATA_Z_MSB_VALUEZ);
            accel->z =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80009b0:	7b7b      	ldrb	r3, [r7, #13]
 80009b2:	b25b      	sxtb	r3, r3
 80009b4:	021b      	lsls	r3, r3, #8
 80009b6:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB]));
 80009b8:	7b3b      	ldrb	r3, [r7, #12]
 80009ba:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80009bc:	4313      	orrs	r3, r2
 80009be:	b21a      	sxth	r2, r3
            accel->z =
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	809a      	strh	r2, [r3, #4]
 80009c4:	e001      	b.n	80009ca <bno055_read_accel_xyz+0xc2>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80009c6:	23ff      	movs	r3, #255	@ 0xff
 80009c8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80009ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3714      	adds	r7, #20
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd90      	pop	{r4, r7, pc}
 80009d6:	bf00      	nop
 80009d8:	240000a0 	.word	0x240000a0

080009dc <bno055_read_mag_xyz>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_mag_xyz(struct bno055_mag_t *mag)
{
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80009e4:	23ff      	movs	r3, #255	@ 0xff
 80009e6:	73fb      	strb	r3, [r7, #15]
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] - z->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] - z->MSB
     */
    u8 data_u8[BNO055_MAG_XYZ_DATA_SIZE] = {
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	809a      	strh	r2, [r3, #4]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 80009f2:	23ff      	movs	r3, #255	@ 0xff
 80009f4:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80009f6:	4b2d      	ldr	r3, [pc, #180]	@ (8000aac <bno055_read_mag_xyz+0xd0>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d102      	bne.n	8000a04 <bno055_read_mag_xyz+0x28>
    {
        return BNO055_E_NULL_PTR;
 80009fe:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000a02:	e04e      	b.n	8000aa2 <bno055_read_mag_xyz+0xc6>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000a04:	4b29      	ldr	r3, [pc, #164]	@ (8000aac <bno055_read_mag_xyz+0xd0>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	791b      	ldrb	r3, [r3, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d004      	beq.n	8000a18 <bno055_read_mag_xyz+0x3c>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f7ff ff32 	bl	8000878 <bno055_write_page_id>
 8000a14:	4603      	mov	r3, r0
 8000a16:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000a18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d004      	beq.n	8000a2a <bno055_read_mag_xyz+0x4e>
 8000a20:	4b22      	ldr	r3, [pc, #136]	@ (8000aac <bno055_read_mag_xyz+0xd0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	791b      	ldrb	r3, [r3, #4]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d137      	bne.n	8000a9a <bno055_read_mag_xyz+0xbe>
        {
            /*Read the six byte value of mag xyz*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000a2a:	4b20      	ldr	r3, [pc, #128]	@ (8000aac <bno055_read_mag_xyz+0xd0>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	691c      	ldr	r4, [r3, #16]
 8000a30:	4b1e      	ldr	r3, [pc, #120]	@ (8000aac <bno055_read_mag_xyz+0xd0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	7a58      	ldrb	r0, [r3, #9]
 8000a36:	f107 0208 	add.w	r2, r7, #8
 8000a3a:	2306      	movs	r3, #6
 8000a3c:	210e      	movs	r1, #14
 8000a3e:	47a0      	blx	r4
 8000a40:	4603      	mov	r3, r0
 8000a42:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_MAG_DATA_X_LSB_VALUEX_REG,
                                                      data_u8,
                                                      BNO055_MAG_XYZ_DATA_SIZE);

            /* Data X*/
            data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB],
 8000a44:	7a3b      	ldrb	r3, [r7, #8]
 8000a46:	723b      	strb	r3, [r7, #8]
                                                                        BNO055_MAG_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB],
 8000a48:	7a7b      	ldrb	r3, [r7, #9]
 8000a4a:	727b      	strb	r3, [r7, #9]
                                                                        BNO055_MAG_DATA_X_MSB_VALUEX);
            mag->x =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000a4c:	7a7b      	ldrb	r3, [r7, #9]
 8000a4e:	b25b      	sxtb	r3, r3
 8000a50:	021b      	lsls	r3, r3, #8
 8000a52:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB]));
 8000a54:	7a3b      	ldrb	r3, [r7, #8]
 8000a56:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	b21a      	sxth	r2, r3
            mag->x =
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	801a      	strh	r2, [r3, #0]

            /* Data Y*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB],
 8000a60:	7abb      	ldrb	r3, [r7, #10]
 8000a62:	72bb      	strb	r3, [r7, #10]
                                                                        BNO055_MAG_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB],
 8000a64:	7afb      	ldrb	r3, [r7, #11]
 8000a66:	72fb      	strb	r3, [r7, #11]
                                                                        BNO055_MAG_DATA_Y_MSB_VALUEY);
            mag->y =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000a68:	7afb      	ldrb	r3, [r7, #11]
 8000a6a:	b25b      	sxtb	r3, r3
 8000a6c:	021b      	lsls	r3, r3, #8
 8000a6e:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB]));
 8000a70:	7abb      	ldrb	r3, [r7, #10]
 8000a72:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000a74:	4313      	orrs	r3, r2
 8000a76:	b21a      	sxth	r2, r3
            mag->y =
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	805a      	strh	r2, [r3, #2]

            /* Data Z*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB],
 8000a7c:	7b3b      	ldrb	r3, [r7, #12]
 8000a7e:	733b      	strb	r3, [r7, #12]
                                                                        BNO055_MAG_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB],
 8000a80:	7b7b      	ldrb	r3, [r7, #13]
 8000a82:	737b      	strb	r3, [r7, #13]
                                                                        BNO055_MAG_DATA_Z_MSB_VALUEZ);
            mag->z =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000a84:	7b7b      	ldrb	r3, [r7, #13]
 8000a86:	b25b      	sxtb	r3, r3
 8000a88:	021b      	lsls	r3, r3, #8
 8000a8a:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB]));
 8000a8c:	7b3b      	ldrb	r3, [r7, #12]
 8000a8e:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000a90:	4313      	orrs	r3, r2
 8000a92:	b21a      	sxth	r2, r3
            mag->z =
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	809a      	strh	r2, [r3, #4]
 8000a98:	e001      	b.n	8000a9e <bno055_read_mag_xyz+0xc2>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000a9a:	23ff      	movs	r3, #255	@ 0xff
 8000a9c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd90      	pop	{r4, r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	240000a0 	.word	0x240000a0

08000ab0 <bno055_read_gyro_xyz>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_gyro_xyz(struct bno055_gyro_t *gyro)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000ab8:	23ff      	movs	r3, #255	@ 0xff
 8000aba:	73fb      	strb	r3, [r7, #15]
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] - z->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] - z->MSB
     */
    u8 data_u8[BNO055_GYRO_XYZ_DATA_SIZE] = {
 8000abc:	f107 0308 	add.w	r3, r7, #8
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	809a      	strh	r2, [r3, #4]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 8000ac6:	23ff      	movs	r3, #255	@ 0xff
 8000ac8:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000aca:	4b2d      	ldr	r3, [pc, #180]	@ (8000b80 <bno055_read_gyro_xyz+0xd0>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d102      	bne.n	8000ad8 <bno055_read_gyro_xyz+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000ad2:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000ad6:	e04e      	b.n	8000b76 <bno055_read_gyro_xyz+0xc6>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000ad8:	4b29      	ldr	r3, [pc, #164]	@ (8000b80 <bno055_read_gyro_xyz+0xd0>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	791b      	ldrb	r3, [r3, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d004      	beq.n	8000aec <bno055_read_gyro_xyz+0x3c>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f7ff fec8 	bl	8000878 <bno055_write_page_id>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000aec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d004      	beq.n	8000afe <bno055_read_gyro_xyz+0x4e>
 8000af4:	4b22      	ldr	r3, [pc, #136]	@ (8000b80 <bno055_read_gyro_xyz+0xd0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	791b      	ldrb	r3, [r3, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d137      	bne.n	8000b6e <bno055_read_gyro_xyz+0xbe>
        {
            /* Read the six bytes data of gyro xyz*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000afe:	4b20      	ldr	r3, [pc, #128]	@ (8000b80 <bno055_read_gyro_xyz+0xd0>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	691c      	ldr	r4, [r3, #16]
 8000b04:	4b1e      	ldr	r3, [pc, #120]	@ (8000b80 <bno055_read_gyro_xyz+0xd0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	7a58      	ldrb	r0, [r3, #9]
 8000b0a:	f107 0208 	add.w	r2, r7, #8
 8000b0e:	2306      	movs	r3, #6
 8000b10:	2114      	movs	r1, #20
 8000b12:	47a0      	blx	r4
 8000b14:	4603      	mov	r3, r0
 8000b16:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_GYRO_DATA_X_LSB_VALUEX_REG,
                                                      data_u8,
                                                      BNO055_GYRO_XYZ_DATA_SIZE);

            /* Data x*/
            data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB],
 8000b18:	7a3b      	ldrb	r3, [r7, #8]
 8000b1a:	723b      	strb	r3, [r7, #8]
                                                                        BNO055_GYRO_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB],
 8000b1c:	7a7b      	ldrb	r3, [r7, #9]
 8000b1e:	727b      	strb	r3, [r7, #9]
                                                                        BNO055_GYRO_DATA_X_MSB_VALUEX);
            gyro->x =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000b20:	7a7b      	ldrb	r3, [r7, #9]
 8000b22:	b25b      	sxtb	r3, r3
 8000b24:	021b      	lsls	r3, r3, #8
 8000b26:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB]));
 8000b28:	7a3b      	ldrb	r3, [r7, #8]
 8000b2a:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	b21a      	sxth	r2, r3
            gyro->x =
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	801a      	strh	r2, [r3, #0]

            /* Data y*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB],
 8000b34:	7abb      	ldrb	r3, [r7, #10]
 8000b36:	72bb      	strb	r3, [r7, #10]
                                                                        BNO055_GYRO_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB],
 8000b38:	7afb      	ldrb	r3, [r7, #11]
 8000b3a:	72fb      	strb	r3, [r7, #11]
                                                                        BNO055_GYRO_DATA_Y_MSB_VALUEY);
            gyro->y =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000b3c:	7afb      	ldrb	r3, [r7, #11]
 8000b3e:	b25b      	sxtb	r3, r3
 8000b40:	021b      	lsls	r3, r3, #8
 8000b42:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB]));
 8000b44:	7abb      	ldrb	r3, [r7, #10]
 8000b46:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	b21a      	sxth	r2, r3
            gyro->y =
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	805a      	strh	r2, [r3, #2]

            /* Data z*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB],
 8000b50:	7b3b      	ldrb	r3, [r7, #12]
 8000b52:	733b      	strb	r3, [r7, #12]
                                                                        BNO055_GYRO_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB],
 8000b54:	7b7b      	ldrb	r3, [r7, #13]
 8000b56:	737b      	strb	r3, [r7, #13]
                                                                        BNO055_GYRO_DATA_Z_MSB_VALUEZ);
            gyro->z =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000b58:	7b7b      	ldrb	r3, [r7, #13]
 8000b5a:	b25b      	sxtb	r3, r3
 8000b5c:	021b      	lsls	r3, r3, #8
 8000b5e:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB]));
 8000b60:	7b3b      	ldrb	r3, [r7, #12]
 8000b62:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000b64:	4313      	orrs	r3, r2
 8000b66:	b21a      	sxth	r2, r3
            gyro->z =
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	809a      	strh	r2, [r3, #4]
 8000b6c:	e001      	b.n	8000b72 <bno055_read_gyro_xyz+0xc2>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000b6e:	23ff      	movs	r3, #255	@ 0xff
 8000b70:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd90      	pop	{r4, r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	240000a0 	.word	0x240000a0

08000b84 <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000b8c:	23ff      	movs	r3, #255	@ 0xff
 8000b8e:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8000b94:	23ff      	movs	r3, #255	@ 0xff
 8000b96:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000b98:	4b1a      	ldr	r3, [pc, #104]	@ (8000c04 <bno055_get_operation_mode+0x80>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d102      	bne.n	8000ba6 <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000ba0:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000ba4:	e02a      	b.n	8000bfc <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000ba6:	4b17      	ldr	r3, [pc, #92]	@ (8000c04 <bno055_get_operation_mode+0x80>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	791b      	ldrb	r3, [r3, #4]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d004      	beq.n	8000bba <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f7ff fe61 	bl	8000878 <bno055_write_page_id>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000bba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d004      	beq.n	8000bcc <bno055_get_operation_mode+0x48>
 8000bc2:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <bno055_get_operation_mode+0x80>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	791b      	ldrb	r3, [r3, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d113      	bne.n	8000bf4 <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c04 <bno055_get_operation_mode+0x80>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	691c      	ldr	r4, [r3, #16]
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c04 <bno055_get_operation_mode+0x80>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	7a58      	ldrb	r0, [r3, #9]
 8000bd8:	f107 020d 	add.w	r2, r7, #13
 8000bdc:	2301      	movs	r3, #1
 8000bde:	213d      	movs	r1, #61	@ 0x3d
 8000be0:	47a0      	blx	r4
 8000be2:	4603      	mov	r3, r0
 8000be4:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 8000be6:	7b7b      	ldrb	r3, [r7, #13]
 8000be8:	f003 030f 	and.w	r3, r3, #15
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	701a      	strb	r2, [r3, #0]
 8000bf2:	e001      	b.n	8000bf8 <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000bf4:	23ff      	movs	r3, #255	@ 0xff
 8000bf6:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd90      	pop	{r4, r7, pc}
 8000c04:	240000a0 	.word	0x240000a0

08000c08 <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000c12:	23ff      	movs	r3, #255	@ 0xff
 8000c14:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000c1e:	23ff      	movs	r3, #255	@ 0xff
 8000c20:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000c22:	4b5c      	ldr	r3, [pc, #368]	@ (8000d94 <bno055_set_operation_mode+0x18c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d102      	bne.n	8000c30 <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000c2a:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000c2e:	e0ac      	b.n	8000d8a <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ffa5 	bl	8000b84 <bno055_get_operation_mode>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8000c3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 809d 	bne.w	8000d82 <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8000c48:	7b3b      	ldrb	r3, [r7, #12]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d137      	bne.n	8000cbe <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000c4e:	4b51      	ldr	r3, [pc, #324]	@ (8000d94 <bno055_set_operation_mode+0x18c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	691c      	ldr	r4, [r3, #16]
 8000c54:	4b4f      	ldr	r3, [pc, #316]	@ (8000d94 <bno055_set_operation_mode+0x18c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	7a58      	ldrb	r0, [r3, #9]
 8000c5a:	f107 020d 	add.w	r2, r7, #13
 8000c5e:	2301      	movs	r3, #1
 8000c60:	213d      	movs	r1, #61	@ 0x3d
 8000c62:	47a0      	blx	r4
 8000c64:	4603      	mov	r3, r0
 8000c66:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	f040 808a 	bne.w	8000d86 <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8000c72:	7b7b      	ldrb	r3, [r7, #13]
 8000c74:	b25b      	sxtb	r3, r3
 8000c76:	f023 030f 	bic.w	r3, r3, #15
 8000c7a:	b25a      	sxtb	r2, r3
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	f003 030f 	and.w	r3, r3, #15
 8000c84:	b25b      	sxtb	r3, r3
 8000c86:	4313      	orrs	r3, r2
 8000c88:	b25b      	sxtb	r3, r3
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000c8e:	4b41      	ldr	r3, [pc, #260]	@ (8000d94 <bno055_set_operation_mode+0x18c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	68dc      	ldr	r4, [r3, #12]
 8000c94:	4b3f      	ldr	r3, [pc, #252]	@ (8000d94 <bno055_set_operation_mode+0x18c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	7a58      	ldrb	r0, [r3, #9]
 8000c9a:	f107 020d 	add.w	r2, r7, #13
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	213d      	movs	r1, #61	@ 0x3d
 8000ca2:	47a0      	blx	r4
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	4413      	add	r3, r2
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8000cb0:	4b38      	ldr	r3, [pc, #224]	@ (8000d94 <bno055_set_operation_mode+0x18c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000cba:	4798      	blx	r3
 8000cbc:	e063      	b.n	8000d86 <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000cbe:	4b35      	ldr	r3, [pc, #212]	@ (8000d94 <bno055_set_operation_mode+0x18c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	691c      	ldr	r4, [r3, #16]
 8000cc4:	4b33      	ldr	r3, [pc, #204]	@ (8000d94 <bno055_set_operation_mode+0x18c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	7a58      	ldrb	r0, [r3, #9]
 8000cca:	f107 020d 	add.w	r2, r7, #13
 8000cce:	2301      	movs	r3, #1
 8000cd0:	213d      	movs	r1, #61	@ 0x3d
 8000cd2:	47a0      	blx	r4
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d116      	bne.n	8000d0e <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 8000ce0:	7b7b      	ldrb	r3, [r7, #13]
 8000ce2:	f023 030f 	bic.w	r3, r3, #15
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 8000cea:	f107 030d 	add.w	r3, r7, #13
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	203d      	movs	r0, #61	@ 0x3d
 8000cf4:	f7ff fd9a 	bl	800082c <bno055_write_register>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	b2da      	uxtb	r2, r3
                    com_rslt +=
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	4413      	add	r3, r2
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 8000d04:	4b23      	ldr	r3, [pc, #140]	@ (8000d94 <bno055_set_operation_mode+0x18c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	2014      	movs	r0, #20
 8000d0c:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d038      	beq.n	8000d86 <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000d14:	4b1f      	ldr	r3, [pc, #124]	@ (8000d94 <bno055_set_operation_mode+0x18c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	691c      	ldr	r4, [r3, #16]
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d94 <bno055_set_operation_mode+0x18c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	7a58      	ldrb	r0, [r3, #9]
 8000d20:	f107 020d 	add.w	r2, r7, #13
 8000d24:	2301      	movs	r3, #1
 8000d26:	213d      	movs	r1, #61	@ 0x3d
 8000d28:	47a0      	blx	r4
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 8000d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d127      	bne.n	8000d86 <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8000d36:	7b7b      	ldrb	r3, [r7, #13]
 8000d38:	b25b      	sxtb	r3, r3
 8000d3a:	f023 030f 	bic.w	r3, r3, #15
 8000d3e:	b25a      	sxtb	r2, r3
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	f003 030f 	and.w	r3, r3, #15
 8000d48:	b25b      	sxtb	r3, r3
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	b25b      	sxtb	r3, r3
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000d52:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <bno055_set_operation_mode+0x18c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	68dc      	ldr	r4, [r3, #12]
 8000d58:	4b0e      	ldr	r3, [pc, #56]	@ (8000d94 <bno055_set_operation_mode+0x18c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	7a58      	ldrb	r0, [r3, #9]
 8000d5e:	f107 020d 	add.w	r2, r7, #13
 8000d62:	2301      	movs	r3, #1
 8000d64:	213d      	movs	r1, #61	@ 0x3d
 8000d66:	47a0      	blx	r4
 8000d68:	4603      	mov	r3, r0
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	4413      	add	r3, r2
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8000d74:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <bno055_set_operation_mode+0x18c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000d7e:	4798      	blx	r3
 8000d80:	e001      	b.n	8000d86 <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000d82:	23ff      	movs	r3, #255	@ 0xff
 8000d84:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd90      	pop	{r4, r7, pc}
 8000d92:	bf00      	nop
 8000d94:	240000a0 	.word	0x240000a0

08000d98 <init_kalman>:
#include "kalman.h"

void init_kalman(Kalman *k) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  printf("here among us");
 8000da0:	4836      	ldr	r0, [pc, #216]	@ (8000e7c <init_kalman+0xe4>)
 8000da2:	f00c fe53 	bl	800da4c <iprintf>
  memset(k->q, 0, sizeof(k->q));
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2210      	movs	r2, #16
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f00c fea2 	bl	800daf6 <memset>
  k->q[0] = 1;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000db8:	601a      	str	r2, [r3, #0]
  k->q[1] = 0;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f04f 0200 	mov.w	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
  k->q[2] = 0;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f04f 0200 	mov.w	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  k->q[3] = 0;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f04f 0200 	mov.w	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]

  printf("here lkllad");
 8000dd2:	482b      	ldr	r0, [pc, #172]	@ (8000e80 <init_kalman+0xe8>)
 8000dd4:	f00c fe3a 	bl	800da4c <iprintf>
  memset(k->b, 0, sizeof(k->b));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3310      	adds	r3, #16
 8000ddc:	220c      	movs	r2, #12
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f00c fe88 	bl	800daf6 <memset>
  k->b[0] = .005f;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a26      	ldr	r2, [pc, #152]	@ (8000e84 <init_kalman+0xec>)
 8000dea:	611a      	str	r2, [r3, #16]
  k->b[1] = .005f;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a25      	ldr	r2, [pc, #148]	@ (8000e84 <init_kalman+0xec>)
 8000df0:	615a      	str	r2, [r3, #20]
  k->b[2] = .005f;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a23      	ldr	r2, [pc, #140]	@ (8000e84 <init_kalman+0xec>)
 8000df6:	619a      	str	r2, [r3, #24]

  memset(k->P, 0, sizeof(k->P));
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	331c      	adds	r3, #28
 8000dfc:	2290      	movs	r2, #144	@ 0x90
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f00c fe78 	bl	800daf6 <memset>

  for (int i = 0; i < 3; i++) {
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	e01c      	b.n	8000e46 <init_kalman+0xae>
    k->P[i][i] = .1745f * .1745f;
 8000e0c:	6879      	ldr	r1, [r7, #4]
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	4613      	mov	r3, r2
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	1a9b      	subs	r3, r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	440b      	add	r3, r1
 8000e1a:	331c      	adds	r3, #28
 8000e1c:	4a1a      	ldr	r2, [pc, #104]	@ (8000e88 <init_kalman+0xf0>)
 8000e1e:	601a      	str	r2, [r3, #0]
    k->P[i + 3][i + 3] = .00873f * .00873f;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	1cda      	adds	r2, r3, #3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	1cd8      	adds	r0, r3, #3
 8000e28:	6879      	ldr	r1, [r7, #4]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	4413      	add	r3, r2
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	4403      	add	r3, r0
 8000e34:	3306      	adds	r3, #6
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	440b      	add	r3, r1
 8000e3a:	3304      	adds	r3, #4
 8000e3c:	4a13      	ldr	r2, [pc, #76]	@ (8000e8c <init_kalman+0xf4>)
 8000e3e:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 3; i++) {
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	3301      	adds	r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	dddf      	ble.n	8000e0c <init_kalman+0x74>
  }

  k->noise_g = 0.02f;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a10      	ldr	r2, [pc, #64]	@ (8000e90 <init_kalman+0xf8>)
 8000e50:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  k->bias_g = 0.002f;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a0f      	ldr	r2, [pc, #60]	@ (8000e94 <init_kalman+0xfc>)
 8000e58:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  k->noise_a = 0.02f;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8000e90 <init_kalman+0xf8>)
 8000e60:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  k->noise_m = 0.05f;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a0c      	ldr	r2, [pc, #48]	@ (8000e98 <init_kalman+0x100>)
 8000e68:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  k->dt = 0.002f;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a09      	ldr	r2, [pc, #36]	@ (8000e94 <init_kalman+0xfc>)
 8000e70:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
}
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	0800f7b8 	.word	0x0800f7b8
 8000e80:	0800f7c8 	.word	0x0800f7c8
 8000e84:	3ba3d70a 	.word	0x3ba3d70a
 8000e88:	3cf972ce 	.word	0x3cf972ce
 8000e8c:	389fd47d 	.word	0x389fd47d
 8000e90:	3ca3d70a 	.word	0x3ca3d70a
 8000e94:	3b03126f 	.word	0x3b03126f
 8000e98:	3d4ccccd 	.word	0x3d4ccccd

08000e9c <vec_dot>:
  res[0] = v1[1] * v2[2] - v1[2] * v2[1];
  res[1] = v1[2] * v2[0] - v1[0] * v2[2];
  res[2] = v1[0] * v2[1] - v1[1] * v2[0];
}

float vec_dot(float v1[3], float v2[3]) {
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  return (v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2]);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	ed93 7a00 	vldr	s14, [r3]
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	edd3 7a00 	vldr	s15, [r3]
 8000eb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	edd3 6a00 	vldr	s13, [r3]
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	edd3 7a00 	vldr	s15, [r3]
 8000ec6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3308      	adds	r3, #8
 8000ed2:	edd3 6a00 	vldr	s13, [r3]
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	3308      	adds	r3, #8
 8000eda:	edd3 7a00 	vldr	s15, [r3]
 8000ede:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ee2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <magnitude>:

float magnitude(float v1[3]) { return sqrt(vec_dot(v1, v1)); }
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6879      	ldr	r1, [r7, #4]
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ffcc 	bl	8000e9c <vec_dot>
 8000f04:	eef0 7a40 	vmov.f32	s15, s0
 8000f08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f0c:	eeb0 0b47 	vmov.f64	d0, d7
 8000f10:	f00d fc76 	bl	800e800 <sqrt>
 8000f14:	eeb0 7b40 	vmov.f64	d7, d0
 8000f18:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <magnitudeq>:

float magnitudeq(float v1[4]) {
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  return sqrt((v1[0] * v1[0] + v1[1] * v1[1] + v1[2] * v1[2] + v1[3] * v1[3]));
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	ed93 7a00 	vldr	s14, [r3]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	edd3 7a00 	vldr	s15, [r3]
 8000f3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3304      	adds	r3, #4
 8000f42:	edd3 6a00 	vldr	s13, [r3]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	edd3 7a00 	vldr	s15, [r3]
 8000f4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3308      	adds	r3, #8
 8000f5a:	edd3 6a00 	vldr	s13, [r3]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3308      	adds	r3, #8
 8000f62:	edd3 7a00 	vldr	s15, [r3]
 8000f66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	330c      	adds	r3, #12
 8000f72:	edd3 6a00 	vldr	s13, [r3]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	330c      	adds	r3, #12
 8000f7a:	edd3 7a00 	vldr	s15, [r3]
 8000f7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f8a:	eeb0 0b47 	vmov.f64	d0, d7
 8000f8e:	f00d fc37 	bl	800e800 <sqrt>
 8000f92:	eeb0 7b40 	vmov.f64	d7, d0
 8000f96:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8000f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <skew>:

void skew(float v1[3], float A[3][3]) {
 8000fa4:	b480      	push	{r7}
 8000fa6:	b08d      	sub	sp, #52	@ 0x34
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  float temp[3][3] = {
 8000fae:	f04f 0300 	mov.w	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
      {0, -v1[2], v1[1]}, {v1[2], 0, -v1[0]}, {-v1[1], v1[0], 0}};
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3308      	adds	r3, #8
 8000fb8:	edd3 7a00 	vldr	s15, [r3]
 8000fbc:	eef1 7a67 	vneg.f32	s15, s15
  float temp[3][3] = {
 8000fc0:	edc7 7a04 	vstr	s15, [r7, #16]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	61bb      	str	r3, [r7, #24]
 8000fd0:	f04f 0300 	mov.w	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
      {0, -v1[2], v1[1]}, {v1[2], 0, -v1[0]}, {-v1[1], v1[0], 0}};
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	edd3 7a00 	vldr	s15, [r3]
 8000fdc:	eef1 7a67 	vneg.f32	s15, s15
  float temp[3][3] = {
 8000fe0:	edc7 7a08 	vstr	s15, [r7, #32]
      {0, -v1[2], v1[1]}, {v1[2], 0, -v1[0]}, {-v1[1], v1[0], 0}};
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3304      	adds	r3, #4
 8000fe8:	edd3 7a00 	vldr	s15, [r3]
 8000fec:	eef1 7a67 	vneg.f32	s15, s15
  float temp[3][3] = {
 8000ff0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      {0, -v1[2], v1[1]}, {v1[2], 0, -v1[0]}, {-v1[1], v1[0], 0}};
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
  float temp[3][3] = {
 8000ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  A = temp;
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	603b      	str	r3, [r7, #0]
}
 8001006:	bf00      	nop
 8001008:	3734      	adds	r7, #52	@ 0x34
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <transpose6>:
  for (int i = 0; i < 3; i++)
    for (int j = 0; j < 3; j++)
      C[i][j] = A[j][i];
}

void transpose6(float A[6][6], float C[6][6]) {
 8001012:	b480      	push	{r7}
 8001014:	b085      	sub	sp, #20
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 6; i++)
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	e023      	b.n	800106a <transpose6+0x58>
    for (int j = 0; j < 6; j++)
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	e01a      	b.n	800105e <transpose6+0x4c>
      C[i][j] = A[j][i];
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	4613      	mov	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	4413      	add	r3, r2
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	461a      	mov	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	1898      	adds	r0, r3, r2
 8001038:	68fa      	ldr	r2, [r7, #12]
 800103a:	4613      	mov	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	4413      	add	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	461a      	mov	r2, r3
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	1899      	adds	r1, r3, r2
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4403      	add	r3, r0
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	601a      	str	r2, [r3, #0]
    for (int j = 0; j < 6; j++)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	3301      	adds	r3, #1
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	2b05      	cmp	r3, #5
 8001062:	dde1      	ble.n	8001028 <transpose6+0x16>
  for (int i = 0; i < 6; i++)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3301      	adds	r3, #1
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2b05      	cmp	r3, #5
 800106e:	ddd8      	ble.n	8001022 <transpose6+0x10>
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <mat_mul3>:

void mat_mul3(float A[3][3], float B[3][3], float C[3][3]) {
 800107e:	b480      	push	{r7}
 8001080:	b089      	sub	sp, #36	@ 0x24
 8001082:	af00      	add	r7, sp, #0
 8001084:	60f8      	str	r0, [r7, #12]
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < 3; i++) {
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
 800108e:	e046      	b.n	800111e <mat_mul3+0xa0>
    for (int j = 0; j < 3; j++) {
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
 8001094:	e03d      	b.n	8001112 <mat_mul3+0x94>
      float sum = 0;
 8001096:	f04f 0300 	mov.w	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
      for (int k = 0; k < 3; k++) {
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	e024      	b.n	80010ec <mat_mul3+0x6e>
        sum += A[i][k] * B[k][j];
 80010a2:	69fa      	ldr	r2, [r7, #28]
 80010a4:	4613      	mov	r3, r2
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4413      	add	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	461a      	mov	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	441a      	add	r2, r3
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	ed93 7a00 	vldr	s14, [r3]
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4613      	mov	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	4413      	add	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	461a      	mov	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	441a      	add	r2, r3
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	edd3 7a00 	vldr	s15, [r3]
 80010d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010da:	ed97 7a05 	vldr	s14, [r7, #20]
 80010de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e2:	edc7 7a05 	vstr	s15, [r7, #20]
      for (int k = 0; k < 3; k++) {
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	3301      	adds	r3, #1
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	ddd7      	ble.n	80010a2 <mat_mul3+0x24>
      }
      C[i][j] = sum;
 80010f2:	69fa      	ldr	r2, [r7, #28]
 80010f4:	4613      	mov	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4413      	add	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	461a      	mov	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	441a      	add	r2, r3
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	601a      	str	r2, [r3, #0]
    for (int j = 0; j < 3; j++) {
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	3301      	adds	r3, #1
 8001110:	61bb      	str	r3, [r7, #24]
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	2b02      	cmp	r3, #2
 8001116:	ddbe      	ble.n	8001096 <mat_mul3+0x18>
  for (int i = 0; i < 3; i++) {
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	3301      	adds	r3, #1
 800111c:	61fb      	str	r3, [r7, #28]
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	2b02      	cmp	r3, #2
 8001122:	ddb5      	ble.n	8001090 <mat_mul3+0x12>
    }
  }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3724      	adds	r7, #36	@ 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <mat_mul6>:

void mat_mul6(float A[6][6], float B[6][6], float C[6][6]) {
 8001132:	b480      	push	{r7}
 8001134:	b089      	sub	sp, #36	@ 0x24
 8001136:	af00      	add	r7, sp, #0
 8001138:	60f8      	str	r0, [r7, #12]
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < 6; i++) {
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
 8001142:	e046      	b.n	80011d2 <mat_mul6+0xa0>
    for (int j = 0; j < 6; j++) {
 8001144:	2300      	movs	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]
 8001148:	e03d      	b.n	80011c6 <mat_mul6+0x94>
      float sum = 0;
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
      for (int k = 0; k < 6; k++) {
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	e024      	b.n	80011a0 <mat_mul6+0x6e>
        sum += A[i][k] * B[k][j];
 8001156:	69fa      	ldr	r2, [r7, #28]
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	461a      	mov	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	441a      	add	r2, r3
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	ed93 7a00 	vldr	s14, [r3]
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4613      	mov	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4413      	add	r3, r2
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	461a      	mov	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	441a      	add	r2, r3
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	edd3 7a00 	vldr	s15, [r3]
 800118a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800118e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001196:	edc7 7a05 	vstr	s15, [r7, #20]
      for (int k = 0; k < 6; k++) {
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	3301      	adds	r3, #1
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	2b05      	cmp	r3, #5
 80011a4:	ddd7      	ble.n	8001156 <mat_mul6+0x24>
      }
      C[i][j] = sum;
 80011a6:	69fa      	ldr	r2, [r7, #28]
 80011a8:	4613      	mov	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4413      	add	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	461a      	mov	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	441a      	add	r2, r3
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	601a      	str	r2, [r3, #0]
    for (int j = 0; j < 6; j++) {
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	3301      	adds	r3, #1
 80011c4:	61bb      	str	r3, [r7, #24]
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	2b05      	cmp	r3, #5
 80011ca:	ddbe      	ble.n	800114a <mat_mul6+0x18>
  for (int i = 0; i < 6; i++) {
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	3301      	adds	r3, #1
 80011d0:	61fb      	str	r3, [r7, #28]
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	2b05      	cmp	r3, #5
 80011d6:	ddb5      	ble.n	8001144 <mat_mul6+0x12>
    }
  }
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	3724      	adds	r7, #36	@ 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <mat_add6>:

void mat_add6(float A[6][6], float B[6][6], float C[6][6]) {
 80011e6:	b480      	push	{r7}
 80011e8:	b087      	sub	sp, #28
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	60f8      	str	r0, [r7, #12]
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < 6; i++) {
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	e034      	b.n	8001262 <mat_add6+0x7c>
    for (int j = 0; j < 6; j++) {
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	e02b      	b.n	8001256 <mat_add6+0x70>
      C[i][j] = A[i][j] + B[i][j];
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	461a      	mov	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	441a      	add	r2, r3
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	ed93 7a00 	vldr	s14, [r3]
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	461a      	mov	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	441a      	add	r2, r3
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	4613      	mov	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4413      	add	r3, r2
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	461a      	mov	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	441a      	add	r2, r3
 8001242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	edc3 7a00 	vstr	s15, [r3]
    for (int j = 0; j < 6; j++) {
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	3301      	adds	r3, #1
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	2b05      	cmp	r3, #5
 800125a:	ddd0      	ble.n	80011fe <mat_add6+0x18>
  for (int i = 0; i < 6; i++) {
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	3301      	adds	r3, #1
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	2b05      	cmp	r3, #5
 8001266:	ddc7      	ble.n	80011f8 <mat_add6+0x12>
    }
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	371c      	adds	r7, #28
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <mat_sub6>:

void mat_sub6(float A[6][6], float B[6][6], float C[6][6]) {
 8001276:	b480      	push	{r7}
 8001278:	b087      	sub	sp, #28
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < 6; i++) {
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	e034      	b.n	80012f2 <mat_sub6+0x7c>
    for (int j = 0; j < 6; j++) {
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	e02b      	b.n	80012e6 <mat_sub6+0x70>
      C[i][j] = A[i][j] - B[i][j];
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	4613      	mov	r3, r2
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	4413      	add	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	461a      	mov	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	441a      	add	r2, r3
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	ed93 7a00 	vldr	s14, [r3]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	4613      	mov	r3, r2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4413      	add	r3, r2
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	461a      	mov	r2, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	441a      	add	r2, r3
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	edd3 7a00 	vldr	s15, [r3]
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	4613      	mov	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4413      	add	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	461a      	mov	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	441a      	add	r2, r3
 80012d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	edc3 7a00 	vstr	s15, [r3]
    for (int j = 0; j < 6; j++) {
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	3301      	adds	r3, #1
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	2b05      	cmp	r3, #5
 80012ea:	ddd0      	ble.n	800128e <mat_sub6+0x18>
  for (int i = 0; i < 6; i++) {
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	3301      	adds	r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	2b05      	cmp	r3, #5
 80012f6:	ddc7      	ble.n	8001288 <mat_sub6+0x12>
    }
  }
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	371c      	adds	r7, #28
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <cholesky>:

void cholesky(float A[6][6], float B[6][6]) {
 8001306:	b590      	push	{r4, r7, lr}
 8001308:	b089      	sub	sp, #36	@ 0x24
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 6; i++) {
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
 8001314:	e0be      	b.n	8001494 <cholesky+0x18e>
    for (int j = 0; j <= i; j++) {
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
 800131a:	e0b3      	b.n	8001484 <cholesky+0x17e>
      float sum = 0;
 800131c:	f04f 0300 	mov.w	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
      if (j == i) {
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	429a      	cmp	r2, r3
 8001328:	d150      	bne.n	80013cc <cholesky+0xc6>
        for (int k = 0; k < j; k++)
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	e024      	b.n	800137a <cholesky+0x74>
          sum += B[j][k] * B[j][k];
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	461a      	mov	r2, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	441a      	add	r2, r3
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	ed93 7a00 	vldr	s14, [r3]
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4613      	mov	r3, r2
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4413      	add	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	461a      	mov	r2, r3
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	441a      	add	r2, r3
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	edd3 7a00 	vldr	s15, [r3]
 8001364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001368:	ed97 7a05 	vldr	s14, [r7, #20]
 800136c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001370:	edc7 7a05 	vstr	s15, [r7, #20]
        for (int k = 0; k < j; k++)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	3301      	adds	r3, #1
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	429a      	cmp	r2, r3
 8001380:	dbd6      	blt.n	8001330 <cholesky+0x2a>
        B[j][j] = sqrtf(A[j][j] - sum);
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4613      	mov	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	461a      	mov	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	441a      	add	r2, r3
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	ed93 7a00 	vldr	s14, [r3]
 800139c:	edd7 7a05 	vldr	s15, [r7, #20]
 80013a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4613      	mov	r3, r2
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4413      	add	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	461a      	mov	r2, r3
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	189c      	adds	r4, r3, r2
 80013b4:	eeb0 0a67 	vmov.f32	s0, s15
 80013b8:	f00d fadc 	bl	800e974 <sqrtf>
 80013bc:	eef0 7a40 	vmov.f32	s15, s0
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4423      	add	r3, r4
 80013c6:	edc3 7a00 	vstr	s15, [r3]
 80013ca:	e058      	b.n	800147e <cholesky+0x178>
      } else {
        for (int k = 0; k < j; k++)
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	e024      	b.n	800141c <cholesky+0x116>
          sum += (B[i][k] * B[j][k]);
 80013d2:	69fa      	ldr	r2, [r7, #28]
 80013d4:	4613      	mov	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4413      	add	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	461a      	mov	r2, r3
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	441a      	add	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	ed93 7a00 	vldr	s14, [r3]
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4613      	mov	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4413      	add	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	461a      	mov	r2, r3
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	441a      	add	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	edd3 7a00 	vldr	s15, [r3]
 8001406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800140a:	ed97 7a05 	vldr	s14, [r7, #20]
 800140e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001412:	edc7 7a05 	vstr	s15, [r7, #20]
        for (int k = 0; k < j; k++)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3301      	adds	r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	429a      	cmp	r2, r3
 8001422:	dbd6      	blt.n	80013d2 <cholesky+0xcc>
        B[i][j] = (A[i][j] - sum) / B[j][j];
 8001424:	69fa      	ldr	r2, [r7, #28]
 8001426:	4613      	mov	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	4413      	add	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	461a      	mov	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	441a      	add	r2, r3
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	ed93 7a00 	vldr	s14, [r3]
 800143e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001442:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	461a      	mov	r2, r3
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	441a      	add	r2, r3
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	ed93 7a00 	vldr	s14, [r3]
 8001460:	69fa      	ldr	r2, [r7, #28]
 8001462:	4613      	mov	r3, r2
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	4413      	add	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	461a      	mov	r2, r3
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	441a      	add	r2, r3
 8001470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	edc3 7a00 	vstr	s15, [r3]
    for (int j = 0; j <= i; j++) {
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	3301      	adds	r3, #1
 8001482:	61bb      	str	r3, [r7, #24]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	429a      	cmp	r2, r3
 800148a:	f77f af47 	ble.w	800131c <cholesky+0x16>
  for (int i = 0; i < 6; i++) {
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3301      	adds	r3, #1
 8001492:	61fb      	str	r3, [r7, #28]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	2b05      	cmp	r3, #5
 8001498:	f77f af3d 	ble.w	8001316 <cholesky+0x10>
      }
    }
  }
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3724      	adds	r7, #36	@ 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd90      	pop	{r4, r7, pc}

080014a6 <kalman_predict>:

void kalman_predict(Kalman *k, float g[3], float P_est[6][6]) {
 80014a6:	b580      	push	{r7, lr}
 80014a8:	ed2d 8b02 	vpush	{d8}
 80014ac:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014b6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80014ba:	6018      	str	r0, [r3, #0]
 80014bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014c0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80014c4:	6019      	str	r1, [r3, #0]
 80014c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014ce:	601a      	str	r2, [r3, #0]
  float theta = 0;
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
  float ug[3];
  // Remove bias from gyro readings
  ug[0] = g[0] - k->b[0];
 80014d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014dc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	ed93 7a00 	vldr	s14, [r3]
 80014e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014ea:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80014f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f8:	edc7 7a79 	vstr	s15, [r7, #484]	@ 0x1e4
  ug[1] = g[1] - k->b[1];
 80014fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001500:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	3304      	adds	r3, #4
 8001508:	ed93 7a00 	vldr	s14, [r3]
 800150c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001510:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	edd3 7a05 	vldr	s15, [r3, #20]
 800151a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800151e:	edc7 7a7a 	vstr	s15, [r7, #488]	@ 0x1e8
  ug[2] = g[2] - k->b[2];
 8001522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001526:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	3308      	adds	r3, #8
 800152e:	ed93 7a00 	vldr	s14, [r3]
 8001532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001536:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001540:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001544:	edc7 7a7b 	vstr	s15, [r7, #492]	@ 0x1ec

  // Normalize gyro vector
  float mag_g = magnitude(ug);
 8001548:	f507 73f2 	add.w	r3, r7, #484	@ 0x1e4
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fcd1 	bl	8000ef4 <magnitude>
 8001552:	ed87 0a7e 	vstr	s0, [r7, #504]	@ 0x1f8
  if (mag_g == 0) {
 8001556:	edd7 7a7e 	vldr	s15, [r7, #504]	@ 0x1f8
 800155a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800155e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001562:	d110      	bne.n	8001586 <kalman_predict+0xe0>
    theta = 0;
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
    ug[0] = 1;
 800156c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001570:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    ug[1] = 1;
 8001574:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001578:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
    ug[2] = 1;
 800157c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001580:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8001584:	e02c      	b.n	80015e0 <kalman_predict+0x13a>
  } else {
    theta = mag_g * k->dt;
 8001586:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800158a:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 8001594:	ed97 7a7e 	vldr	s14, [r7, #504]	@ 0x1f8
 8001598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800159c:	edc7 7a7f 	vstr	s15, [r7, #508]	@ 0x1fc
    float norm_mag_g = 1 / mag_g;
 80015a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80015a4:	ed97 7a7e 	vldr	s14, [r7, #504]	@ 0x1f8
 80015a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015ac:	edc7 7a7d 	vstr	s15, [r7, #500]	@ 0x1f4
    ug[0] *= norm_mag_g;
 80015b0:	ed97 7a79 	vldr	s14, [r7, #484]	@ 0x1e4
 80015b4:	edd7 7a7d 	vldr	s15, [r7, #500]	@ 0x1f4
 80015b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015bc:	edc7 7a79 	vstr	s15, [r7, #484]	@ 0x1e4
    ug[1] *= norm_mag_g;
 80015c0:	ed97 7a7a 	vldr	s14, [r7, #488]	@ 0x1e8
 80015c4:	edd7 7a7d 	vldr	s15, [r7, #500]	@ 0x1f4
 80015c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015cc:	edc7 7a7a 	vstr	s15, [r7, #488]	@ 0x1e8
    ug[2] *= norm_mag_g;
 80015d0:	ed97 7a7b 	vldr	s14, [r7, #492]	@ 0x1ec
 80015d4:	edd7 7a7d 	vldr	s15, [r7, #500]	@ 0x1f4
 80015d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015dc:	edc7 7a7b 	vstr	s15, [r7, #492]	@ 0x1ec
  }

  // Compute deltaq
  float dq[4];
  dq[0] = cos(theta / 2);
 80015e0:	ed97 7a7f 	vldr	s14, [r7, #508]	@ 0x1fc
 80015e4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80015e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015f0:	eeb0 0b47 	vmov.f64	d0, d7
 80015f4:	f00d f924 	bl	800e840 <cos>
 80015f8:	eeb0 7b40 	vmov.f64	d7, d0
 80015fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001600:	edc7 7a75 	vstr	s15, [r7, #468]	@ 0x1d4
  dq[1] = ug[0] * sin(theta / 2);
 8001604:	edd7 7a79 	vldr	s15, [r7, #484]	@ 0x1e4
 8001608:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800160c:	ed97 7a7f 	vldr	s14, [r7, #508]	@ 0x1fc
 8001610:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001614:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001618:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800161c:	eeb0 0b47 	vmov.f64	d0, d7
 8001620:	f00d f95a 	bl	800e8d8 <sin>
 8001624:	eeb0 7b40 	vmov.f64	d7, d0
 8001628:	ee28 7b07 	vmul.f64	d7, d8, d7
 800162c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001630:	edc7 7a76 	vstr	s15, [r7, #472]	@ 0x1d8
  dq[2] = ug[1] * sin(theta / 2);
 8001634:	edd7 7a7a 	vldr	s15, [r7, #488]	@ 0x1e8
 8001638:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800163c:	ed97 7a7f 	vldr	s14, [r7, #508]	@ 0x1fc
 8001640:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001644:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001648:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800164c:	eeb0 0b47 	vmov.f64	d0, d7
 8001650:	f00d f942 	bl	800e8d8 <sin>
 8001654:	eeb0 7b40 	vmov.f64	d7, d0
 8001658:	ee28 7b07 	vmul.f64	d7, d8, d7
 800165c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001660:	edc7 7a77 	vstr	s15, [r7, #476]	@ 0x1dc
  dq[3] = ug[2] * sin(theta / 2);
 8001664:	edd7 7a7b 	vldr	s15, [r7, #492]	@ 0x1ec
 8001668:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800166c:	ed97 7a7f 	vldr	s14, [r7, #508]	@ 0x1fc
 8001670:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001674:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001678:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800167c:	eeb0 0b47 	vmov.f64	d0, d7
 8001680:	f00d f92a 	bl	800e8d8 <sin>
 8001684:	eeb0 7b40 	vmov.f64	d7, d0
 8001688:	ee28 7b07 	vmul.f64	d7, d8, d7
 800168c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001690:	edc7 7a78 	vstr	s15, [r7, #480]	@ 0x1e0

  // Compute and normalize qk+1
  float qk[4];
  qk[0] = (k->q[0] * dq[0]) - (dq[1] * k->q[1]) - (dq[2] * k->q[2]) -
 8001694:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001698:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	ed93 7a00 	vldr	s14, [r3]
 80016a2:	edd7 7a75 	vldr	s15, [r7, #468]	@ 0x1d4
 80016a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016aa:	edd7 6a76 	vldr	s13, [r7, #472]	@ 0x1d8
 80016ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016b2:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80016bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016c4:	edd7 6a77 	vldr	s13, [r7, #476]	@ 0x1dc
 80016c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016cc:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80016d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016da:	ee37 7a67 	vsub.f32	s14, s14, s15
          (dq[3] * k->q[3]);
 80016de:	edd7 6a78 	vldr	s13, [r7, #480]	@ 0x1e0
 80016e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016e6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80016f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
  qk[0] = (k->q[0] * dq[0]) - (dq[1] * k->q[1]) - (dq[2] * k->q[2]) -
 80016f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f8:	edc7 7a71 	vstr	s15, [r7, #452]	@ 0x1c4
  qk[1] = (dq[0] * k->q[1]) + (dq[1] * k->q[0]) + (dq[2] * k->q[3]) -
 80016fc:	ed97 7a75 	vldr	s14, [r7, #468]	@ 0x1d4
 8001700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001704:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	edd3 7a01 	vldr	s15, [r3, #4]
 800170e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001712:	edd7 6a76 	vldr	s13, [r7, #472]	@ 0x1d8
 8001716:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800171a:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	edd3 7a00 	vldr	s15, [r3]
 8001724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001728:	ee37 7a27 	vadd.f32	s14, s14, s15
 800172c:	edd7 6a77 	vldr	s13, [r7, #476]	@ 0x1dc
 8001730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001734:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	edd3 7a03 	vldr	s15, [r3, #12]
 800173e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001742:	ee37 7a27 	vadd.f32	s14, s14, s15
          (dq[3] * k->q[2]);
 8001746:	edd7 6a78 	vldr	s13, [r7, #480]	@ 0x1e0
 800174a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800174e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	edd3 7a02 	vldr	s15, [r3, #8]
 8001758:	ee66 7aa7 	vmul.f32	s15, s13, s15
  qk[1] = (dq[0] * k->q[1]) + (dq[1] * k->q[0]) + (dq[2] * k->q[3]) -
 800175c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001760:	edc7 7a72 	vstr	s15, [r7, #456]	@ 0x1c8
  qk[2] = (dq[0] * k->q[2]) - (dq[1] * k->q[3]) + (dq[2] * k->q[0]) +
 8001764:	ed97 7a75 	vldr	s14, [r7, #468]	@ 0x1d4
 8001768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800176c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	edd3 7a02 	vldr	s15, [r3, #8]
 8001776:	ee27 7a27 	vmul.f32	s14, s14, s15
 800177a:	edd7 6a76 	vldr	s13, [r7, #472]	@ 0x1d8
 800177e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001782:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	edd3 7a03 	vldr	s15, [r3, #12]
 800178c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001790:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001794:	edd7 6a77 	vldr	s13, [r7, #476]	@ 0x1dc
 8001798:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800179c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017aa:	ee37 7a27 	vadd.f32	s14, s14, s15
          (dq[3] * k->q[1]);
 80017ae:	edd7 6a78 	vldr	s13, [r7, #480]	@ 0x1e0
 80017b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017b6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80017c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
  qk[2] = (dq[0] * k->q[2]) - (dq[1] * k->q[3]) + (dq[2] * k->q[0]) +
 80017c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c8:	edc7 7a73 	vstr	s15, [r7, #460]	@ 0x1cc
  qk[3] = (dq[0] * k->q[3]) + (dq[1] * k->q[2]) - (dq[2] * k->q[1]) +
 80017cc:	ed97 7a75 	vldr	s14, [r7, #468]	@ 0x1d4
 80017d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d4:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	edd3 7a03 	vldr	s15, [r3, #12]
 80017de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017e2:	edd7 6a76 	vldr	s13, [r7, #472]	@ 0x1d8
 80017e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ea:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80017f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017fc:	edd7 6a77 	vldr	s13, [r7, #476]	@ 0x1dc
 8001800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001804:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	edd3 7a01 	vldr	s15, [r3, #4]
 800180e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001812:	ee37 7a67 	vsub.f32	s14, s14, s15
          (dq[3] * k->q[0]);
 8001816:	edd7 6a78 	vldr	s13, [r7, #480]	@ 0x1e0
 800181a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800181e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	edd3 7a00 	vldr	s15, [r3]
 8001828:	ee66 7aa7 	vmul.f32	s15, s13, s15
  qk[3] = (dq[0] * k->q[3]) + (dq[1] * k->q[2]) - (dq[2] * k->q[1]) +
 800182c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001830:	edc7 7a74 	vstr	s15, [r7, #464]	@ 0x1d0

  float mag_q = magnitudeq(qk);
 8001834:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fb74 	bl	8000f26 <magnitudeq>
 800183e:	ed87 0a7c 	vstr	s0, [r7, #496]	@ 0x1f0
  mag_q = 1 / mag_q;
 8001842:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001846:	ed97 7a7c 	vldr	s14, [r7, #496]	@ 0x1f0
 800184a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800184e:	edc7 7a7c 	vstr	s15, [r7, #496]	@ 0x1f0
  k->q[0] = qk[0] * mag_q;
 8001852:	ed97 7a71 	vldr	s14, [r7, #452]	@ 0x1c4
 8001856:	edd7 7a7c 	vldr	s15, [r7, #496]	@ 0x1f0
 800185a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800185e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001862:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	edc3 7a00 	vstr	s15, [r3]
  k->q[1] = qk[1] * mag_q;
 800186c:	ed97 7a72 	vldr	s14, [r7, #456]	@ 0x1c8
 8001870:	edd7 7a7c 	vldr	s15, [r7, #496]	@ 0x1f0
 8001874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800187c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	edc3 7a01 	vstr	s15, [r3, #4]
  k->q[2] = qk[2] * mag_q;
 8001886:	ed97 7a73 	vldr	s14, [r7, #460]	@ 0x1cc
 800188a:	edd7 7a7c 	vldr	s15, [r7, #496]	@ 0x1f0
 800188e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001892:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001896:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	edc3 7a02 	vstr	s15, [r3, #8]
  k->q[3] = qk[3] * mag_q;
 80018a0:	ed97 7a74 	vldr	s14, [r7, #464]	@ 0x1d0
 80018a4:	edd7 7a7c 	vldr	s15, [r7, #496]	@ 0x1f0
 80018a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b0:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	edc3 7a03 	vstr	s15, [r3, #12]

  // Find state transition matrix
  float phi[6][6] = {{1, ug[2] * k->dt, -ug[1] * k->dt, -k->dt, 0, 0},
 80018ba:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80018be:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80018c2:	ed97 7a7b 	vldr	s14, [r7, #492]	@ 0x1ec
 80018c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ca:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 80018d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d8:	edc7 7a4e 	vstr	s15, [r7, #312]	@ 0x138
 80018dc:	edd7 7a7a 	vldr	s15, [r7, #488]	@ 0x1e8
 80018e0:	eeb1 7a67 	vneg.f32	s14, s15
 80018e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e8:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 80018f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f6:	edc7 7a4f 	vstr	s15, [r7, #316]	@ 0x13c
 80018fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018fe:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 8001908:	eef1 7a67 	vneg.f32	s15, s15
 800190c:	edc7 7a50 	vstr	s15, [r7, #320]	@ 0x140
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
                     {-ug[2] * k->dt, 1, ug[0] * k->dt, 0, -k->dt, 0},
 8001920:	edd7 7a7b 	vldr	s15, [r7, #492]	@ 0x1ec
 8001924:	eeb1 7a67 	vneg.f32	s14, s15
 8001928:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800192c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 8001936:	ee67 7a27 	vmul.f32	s15, s14, s15
  float phi[6][6] = {{1, ug[2] * k->dt, -ug[1] * k->dt, -k->dt, 0, 0},
 800193a:	edc7 7a53 	vstr	s15, [r7, #332]	@ 0x14c
 800193e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001942:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
                     {-ug[2] * k->dt, 1, ug[0] * k->dt, 0, -k->dt, 0},
 8001946:	ed97 7a79 	vldr	s14, [r7, #484]	@ 0x1e4
 800194a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800194e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 8001958:	ee67 7a27 	vmul.f32	s15, s14, s15
  float phi[6][6] = {{1, ug[2] * k->dt, -ug[1] * k->dt, -k->dt, 0, 0},
 800195c:	edc7 7a55 	vstr	s15, [r7, #340]	@ 0x154
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
                     {-ug[2] * k->dt, 1, ug[0] * k->dt, 0, -k->dt, 0},
 8001968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800196c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 8001976:	eef1 7a67 	vneg.f32	s15, s15
  float phi[6][6] = {{1, ug[2] * k->dt, -ug[1] * k->dt, -k->dt, 0, 0},
 800197a:	edc7 7a57 	vstr	s15, [r7, #348]	@ 0x15c
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
                     {ug[1] * k->dt, -ug[0] * k->dt, 1, 0, 0, -k->dt},
 8001986:	ed97 7a7a 	vldr	s14, [r7, #488]	@ 0x1e8
 800198a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800198e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 8001998:	ee67 7a27 	vmul.f32	s15, s14, s15
  float phi[6][6] = {{1, ug[2] * k->dt, -ug[1] * k->dt, -k->dt, 0, 0},
 800199c:	edc7 7a59 	vstr	s15, [r7, #356]	@ 0x164
                     {ug[1] * k->dt, -ug[0] * k->dt, 1, 0, 0, -k->dt},
 80019a0:	edd7 7a79 	vldr	s15, [r7, #484]	@ 0x1e4
 80019a4:	eeb1 7a67 	vneg.f32	s14, s15
 80019a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ac:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 80019b6:	ee67 7a27 	vmul.f32	s15, s14, s15
  float phi[6][6] = {{1, ug[2] * k->dt, -ug[1] * k->dt, -k->dt, 0, 0},
 80019ba:	edc7 7a5a 	vstr	s15, [r7, #360]	@ 0x168
 80019be:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80019c2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
                     {ug[1] * k->dt, -ug[0] * k->dt, 1, 0, 0, -k->dt},
 80019d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019da:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 80019e4:	eef1 7a67 	vneg.f32	s15, s15
  float phi[6][6] = {{1, ug[2] * k->dt, -ug[1] * k->dt, -k->dt, 0, 0},
 80019e8:	edc7 7a5e 	vstr	s15, [r7, #376]	@ 0x178
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001a04:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001a08:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001a3c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001a40:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001a74:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001a78:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
                     {0, 0, 0, 1, 0, 0},
                     {0, 0, 0, 0, 1, 0},
                     {0, 0, 0, 0, 0, 1}};

  // Find noise covariance
  float Qd[6][6] = {{k->noise_g * k->noise_g * k->dt, 0, 0, 0, 0, 0},
 8001a7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a80:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001a84:	4618      	mov	r0, r3
 8001a86:	2390      	movs	r3, #144	@ 0x90
 8001a88:	461a      	mov	r2, r3
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	f00c f833 	bl	800daf6 <memset>
 8001a90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a94:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	ed93 7a2b 	vldr	s14, [r3, #172]	@ 0xac
 8001a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa2:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 8001aac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ab0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab4:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 8001abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001aca:	edc3 7a00 	vstr	s15, [r3]
                    {0, k->noise_g * k->noise_g * k->dt, 0, 0, 0, 0},
 8001ace:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad2:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	ed93 7a2b 	vldr	s14, [r3, #172]	@ 0xac
 8001adc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae0:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 8001aea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af2:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 8001afc:	ee67 7a27 	vmul.f32	s15, s14, s15
  float Qd[6][6] = {{k->noise_g * k->noise_g * k->dt, 0, 0, 0, 0, 0},
 8001b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b04:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001b08:	edc3 7a07 	vstr	s15, [r3, #28]
                    {0, 0, k->noise_g * k->noise_g * k->dt, 0, 0, 0},
 8001b0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b10:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	ed93 7a2b 	vldr	s14, [r3, #172]	@ 0xac
 8001b1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b1e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 8001b28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b30:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 8001b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
  float Qd[6][6] = {{k->noise_g * k->noise_g * k->dt, 0, 0, 0, 0, 0},
 8001b3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b42:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001b46:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
                    {0, 0, 0, k->bias_g * k->bias_g * k->dt, 0, 0},
 8001b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b4e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	ed93 7a2c 	vldr	s14, [r3, #176]	@ 0xb0
 8001b58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b5c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8001b66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b6e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 8001b78:	ee67 7a27 	vmul.f32	s15, s14, s15
  float Qd[6][6] = {{k->noise_g * k->noise_g * k->dt, 0, 0, 0, 0, 0},
 8001b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b80:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001b84:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
                    {0, 0, 0, 0, k->bias_g * k->bias_g * k->dt, 0},
 8001b88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b8c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	ed93 7a2c 	vldr	s14, [r3, #176]	@ 0xb0
 8001b96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b9a:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8001ba4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bac:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 8001bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
  float Qd[6][6] = {{k->noise_g * k->noise_g * k->dt, 0, 0, 0, 0, 0},
 8001bba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bbe:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001bc2:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
                    {0, 0, 0, 0, 0, k->bias_g * k->bias_g * k->dt}};
 8001bc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bca:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	ed93 7a2c 	vldr	s14, [r3, #176]	@ 0xb0
 8001bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd8:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8001be2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001be6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bea:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	edd3 7a2f 	vldr	s15, [r3, #188]	@ 0xbc
 8001bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
  float Qd[6][6] = {{k->noise_g * k->noise_g * k->dt, 0, 0, 0, 0, 0},
 8001bf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfc:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001c00:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c

  // Solve for P_est
  float phi_t[6][6];
  transpose6(phi, phi_t);
 8001c04:	f107 0214 	add.w	r2, r7, #20
 8001c08:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff f9ff 	bl	8001012 <transpose6>
  mat_mul6(phi, k->P, P_est);
 8001c14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c18:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f103 011c 	add.w	r1, r3, #28
 8001c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c2a:	f507 709a 	add.w	r0, r7, #308	@ 0x134
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	f7ff fa7f 	bl	8001132 <mat_mul6>
  mat_mul6(P_est, phi_t, phi);
 8001c34:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 8001c38:	f107 0114 	add.w	r1, r7, #20
 8001c3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	f7ff fa74 	bl	8001132 <mat_mul6>
  mat_add6(phi, Qd, P_est);
 8001c4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c52:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8001c56:	f507 709a 	add.w	r0, r7, #308	@ 0x134
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	f7ff fac3 	bl	80011e6 <mat_add6>
}
 8001c60:	bf00      	nop
 8001c62:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001c66:	46bd      	mov	sp, r7
 8001c68:	ecbd 8b02 	vpop	{d8}
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <kalman_correction>:

void kalman_correction(Kalman *k, float a[3], float m[3], float P_est[6][6]) {
 8001c70:	b590      	push	{r4, r7, lr}
 8001c72:	f6ad 0d4c 	subw	sp, sp, #2124	@ 0x84c
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	f607 0448 	addw	r4, r7, #2120	@ 0x848
 8001c7c:	f6a4 043c 	subw	r4, r4, #2108	@ 0x83c
 8001c80:	6020      	str	r0, [r4, #0]
 8001c82:	f607 0048 	addw	r0, r7, #2120	@ 0x848
 8001c86:	f5a0 6004 	sub.w	r0, r0, #2112	@ 0x840
 8001c8a:	6001      	str	r1, [r0, #0]
 8001c8c:	f607 0148 	addw	r1, r7, #2120	@ 0x848
 8001c90:	f6a1 0144 	subw	r1, r1, #2116	@ 0x844
 8001c94:	600a      	str	r2, [r1, #0]
 8001c96:	f607 0248 	addw	r2, r7, #2120	@ 0x848
 8001c9a:	f6a2 0248 	subw	r2, r2, #2120	@ 0x848
 8001c9e:	6013      	str	r3, [r2, #0]
  float Rq[3][3] = {{k->q[0] * k->q[0] + k->q[1] * k->q[1] - k->q[2] * k->q[2] -
 8001ca0:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001ca4:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	ed93 7a00 	vldr	s14, [r3]
 8001cae:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001cb2:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	edd3 7a00 	vldr	s15, [r3]
 8001cbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cc0:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001cc4:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	edd3 6a01 	vldr	s13, [r3, #4]
 8001cce:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001cd2:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ce0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ce4:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001ce8:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	edd3 6a02 	vldr	s13, [r3, #8]
 8001cf2:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001cf6:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d04:	ee37 7a67 	vsub.f32	s14, s14, s15
                         k->q[3] * k->q[3],
 8001d08:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001d0c:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	edd3 6a03 	vldr	s13, [r3, #12]
 8001d16:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001d1a:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d24:	ee66 7aa7 	vmul.f32	s15, s13, s15
  float Rq[3][3] = {{k->q[0] * k->q[0] + k->q[1] * k->q[1] - k->q[2] * k->q[2] -
 8001d28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d2c:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 8001d30:	edc3 7a00 	vstr	s15, [r3]
                     2 * (k->q[1] * k->q[2] - k->q[0] * k->q[3]),
 8001d34:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001d38:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d42:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001d46:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d54:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001d58:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	edd3 6a00 	vldr	s13, [r3]
 8001d62:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001d66:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d78:	ee77 7aa7 	vadd.f32	s15, s15, s15
  float Rq[3][3] = {{k->q[0] * k->q[0] + k->q[1] * k->q[1] - k->q[2] * k->q[2] -
 8001d7c:	f207 73e4 	addw	r3, r7, #2020	@ 0x7e4
 8001d80:	edc3 7a00 	vstr	s15, [r3]
                     2 * (k->q[1] * k->q[3] + k->q[0] * k->q[2])},
 8001d84:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001d88:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d92:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001d96:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001da0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001da4:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001da8:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	edd3 6a00 	vldr	s13, [r3]
 8001db2:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001db6:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001dc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc8:	ee77 7aa7 	vadd.f32	s15, s15, s15
  float Rq[3][3] = {{k->q[0] * k->q[0] + k->q[1] * k->q[1] - k->q[2] * k->q[2] -
 8001dcc:	f507 63fd 	add.w	r3, r7, #2024	@ 0x7e8
 8001dd0:	edc3 7a00 	vstr	s15, [r3]
                    {2 * (k->q[1] * k->q[2] + k->q[0] * k->q[3]),
 8001dd4:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001dd8:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	ed93 7a01 	vldr	s14, [r3, #4]
 8001de2:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001de6:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	edd3 7a02 	vldr	s15, [r3, #8]
 8001df0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001df4:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001df8:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	edd3 6a00 	vldr	s13, [r3]
 8001e02:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001e06:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e18:	ee77 7aa7 	vadd.f32	s15, s15, s15
  float Rq[3][3] = {{k->q[0] * k->q[0] + k->q[1] * k->q[1] - k->q[2] * k->q[2] -
 8001e1c:	f207 73ec 	addw	r3, r7, #2028	@ 0x7ec
 8001e20:	edc3 7a00 	vstr	s15, [r3]
                     k->q[0] * k->q[0] - k->q[1] * k->q[1] + k->q[2] * k->q[2] -
 8001e24:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001e28:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	ed93 7a00 	vldr	s14, [r3]
 8001e32:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001e36:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	edd3 7a00 	vldr	s15, [r3]
 8001e40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e44:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001e48:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e52:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001e56:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e68:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001e6c:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e76:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001e7a:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e88:	ee37 7a27 	vadd.f32	s14, s14, s15
                         k->q[3] * k->q[3],
 8001e8c:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001e90:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	edd3 6a03 	vldr	s13, [r3, #12]
 8001e9a:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001e9e:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ea8:	ee66 7aa7 	vmul.f32	s15, s13, s15
                     k->q[0] * k->q[0] - k->q[1] * k->q[1] + k->q[2] * k->q[2] -
 8001eac:	ee77 7a67 	vsub.f32	s15, s14, s15
  float Rq[3][3] = {{k->q[0] * k->q[0] + k->q[1] * k->q[1] - k->q[2] * k->q[2] -
 8001eb0:	f507 63fe 	add.w	r3, r7, #2032	@ 0x7f0
 8001eb4:	edc3 7a00 	vstr	s15, [r3]
                     2 * (k->q[2] * k->q[3] - k->q[0] * k->q[1])},
 8001eb8:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001ebc:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ec6:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001eca:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ed4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ed8:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001edc:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	edd3 6a00 	vldr	s13, [r3]
 8001ee6:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001eea:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ef4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001efc:	ee77 7aa7 	vadd.f32	s15, s15, s15
  float Rq[3][3] = {{k->q[0] * k->q[0] + k->q[1] * k->q[1] - k->q[2] * k->q[2] -
 8001f00:	f207 73f4 	addw	r3, r7, #2036	@ 0x7f4
 8001f04:	edc3 7a00 	vstr	s15, [r3]
                    {2 * (k->q[1] * k->q[3] - k->q[0] * k->q[2]),
 8001f08:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001f0c:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f16:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001f1a:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f28:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001f2c:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	edd3 6a00 	vldr	s13, [r3]
 8001f36:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001f3a:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
  float Rq[3][3] = {{k->q[0] * k->q[0] + k->q[1] * k->q[1] - k->q[2] * k->q[2] -
 8001f50:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 8001f54:	edc3 7a00 	vstr	s15, [r3]
                     2 * (k->q[2] * k->q[3] + k->q[0] * k->q[1]),
 8001f58:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001f5c:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f66:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001f6a:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f78:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001f7c:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	edd3 6a00 	vldr	s13, [r3]
 8001f86:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001f8a:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
  float Rq[3][3] = {{k->q[0] * k->q[0] + k->q[1] * k->q[1] - k->q[2] * k->q[2] -
 8001fa0:	f207 73fc 	addw	r3, r7, #2044	@ 0x7fc
 8001fa4:	edc3 7a00 	vstr	s15, [r3]
                     k->q[0] * k->q[0] - k->q[1] * k->q[1] - k->q[2] * k->q[2] +
 8001fa8:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001fac:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	ed93 7a00 	vldr	s14, [r3]
 8001fb6:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001fba:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	edd3 7a00 	vldr	s15, [r3]
 8001fc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc8:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001fcc:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	edd3 6a01 	vldr	s13, [r3, #4]
 8001fd6:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001fda:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fe4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fec:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001ff0:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ffa:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001ffe:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	edd3 7a02 	vldr	s15, [r3, #8]
 8002008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800200c:	ee37 7a67 	vsub.f32	s14, s14, s15
                         k->q[3] * k->q[3]}};
 8002010:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002014:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	edd3 6a03 	vldr	s13, [r3, #12]
 800201e:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002022:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	edd3 7a03 	vldr	s15, [r3, #12]
 800202c:	ee66 7aa7 	vmul.f32	s15, s13, s15
                     k->q[0] * k->q[0] - k->q[1] * k->q[1] - k->q[2] * k->q[2] +
 8002030:	ee77 7a27 	vadd.f32	s15, s14, s15
  float Rq[3][3] = {{k->q[0] * k->q[0] + k->q[1] * k->q[1] - k->q[2] * k->q[2] -
 8002034:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002038:	edc3 7a00 	vstr	s15, [r3]
  float gw[3] = {0, 0, -1};
 800203c:	f04f 0300 	mov.w	r3, #0
 8002040:	f207 72d4 	addw	r2, r7, #2004	@ 0x7d4
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	f04f 0300 	mov.w	r3, #0
 800204a:	f507 62fb 	add.w	r2, r7, #2008	@ 0x7d8
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	4ba5      	ldr	r3, [pc, #660]	@ (80022e8 <kalman_correction+0x678>)
 8002052:	f207 72dc 	addw	r2, r7, #2012	@ 0x7dc
 8002056:	6013      	str	r3, [r2, #0]
  float mw[3] = {1, 0, 0};
 8002058:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800205c:	f507 62f9 	add.w	r2, r7, #1992	@ 0x7c8
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	f207 72cc 	addw	r2, r7, #1996	@ 0x7cc
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	f04f 0300 	mov.w	r3, #0
 8002070:	f507 62fa 	add.w	r2, r7, #2000	@ 0x7d0
 8002074:	6013      	str	r3, [r2, #0]

  float r[6] = {a[0] - Rq[0][2] * gw[0], a[1] - Rq[1][2] * gw[1],
 8002076:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 800207a:	f5a3 6304 	sub.w	r3, r3, #2112	@ 0x840
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	ed93 7a00 	vldr	s14, [r3]
 8002084:	f507 63fd 	add.w	r3, r7, #2024	@ 0x7e8
 8002088:	edd3 6a00 	vldr	s13, [r3]
 800208c:	f207 73d4 	addw	r3, r7, #2004	@ 0x7d4
 8002090:	edd3 7a00 	vldr	s15, [r3]
 8002094:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800209c:	f507 63f6 	add.w	r3, r7, #1968	@ 0x7b0
 80020a0:	edc3 7a00 	vstr	s15, [r3]
 80020a4:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80020a8:	f5a3 6304 	sub.w	r3, r3, #2112	@ 0x840
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	3304      	adds	r3, #4
 80020b0:	ed93 7a00 	vldr	s14, [r3]
 80020b4:	f207 73f4 	addw	r3, r7, #2036	@ 0x7f4
 80020b8:	edd3 6a00 	vldr	s13, [r3]
 80020bc:	f507 63fb 	add.w	r3, r7, #2008	@ 0x7d8
 80020c0:	edd3 7a00 	vldr	s15, [r3]
 80020c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020cc:	f207 73b4 	addw	r3, r7, #1972	@ 0x7b4
 80020d0:	edc3 7a00 	vstr	s15, [r3]
                a[2] - Rq[2][2] * gw[2], // Accelerometer meas - pred
 80020d4:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80020d8:	f5a3 6304 	sub.w	r3, r3, #2112	@ 0x840
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	3308      	adds	r3, #8
 80020e0:	ed93 7a00 	vldr	s14, [r3]
 80020e4:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80020e8:	edd3 6a00 	vldr	s13, [r3]
 80020ec:	f207 73dc 	addw	r3, r7, #2012	@ 0x7dc
 80020f0:	edd3 7a00 	vldr	s15, [r3]
 80020f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f8:	ee77 7a67 	vsub.f32	s15, s14, s15
  float r[6] = {a[0] - Rq[0][2] * gw[0], a[1] - Rq[1][2] * gw[1],
 80020fc:	f507 63f7 	add.w	r3, r7, #1976	@ 0x7b8
 8002100:	edc3 7a00 	vstr	s15, [r3]
                m[0] - Rq[0][0],         m[1] - Rq[0][1],
 8002104:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002108:	f6a3 0344 	subw	r3, r3, #2116	@ 0x844
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	ed93 7a00 	vldr	s14, [r3]
 8002112:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 8002116:	edd3 7a00 	vldr	s15, [r3]
 800211a:	ee77 7a67 	vsub.f32	s15, s14, s15
  float r[6] = {a[0] - Rq[0][2] * gw[0], a[1] - Rq[1][2] * gw[1],
 800211e:	f207 73bc 	addw	r3, r7, #1980	@ 0x7bc
 8002122:	edc3 7a00 	vstr	s15, [r3]
                m[0] - Rq[0][0],         m[1] - Rq[0][1],
 8002126:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 800212a:	f6a3 0344 	subw	r3, r3, #2116	@ 0x844
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	3304      	adds	r3, #4
 8002132:	ed93 7a00 	vldr	s14, [r3]
 8002136:	f207 73e4 	addw	r3, r7, #2020	@ 0x7e4
 800213a:	edd3 7a00 	vldr	s15, [r3]
 800213e:	ee77 7a67 	vsub.f32	s15, s14, s15
  float r[6] = {a[0] - Rq[0][2] * gw[0], a[1] - Rq[1][2] * gw[1],
 8002142:	f507 63f8 	add.w	r3, r7, #1984	@ 0x7c0
 8002146:	edc3 7a00 	vstr	s15, [r3]
                m[2] - Rq[0][2]}; // Magnetometer meas - pred
 800214a:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 800214e:	f6a3 0344 	subw	r3, r3, #2116	@ 0x844
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	3308      	adds	r3, #8
 8002156:	ed93 7a00 	vldr	s14, [r3]
 800215a:	f507 63fd 	add.w	r3, r7, #2024	@ 0x7e8
 800215e:	edd3 7a00 	vldr	s15, [r3]
 8002162:	ee77 7a67 	vsub.f32	s15, s14, s15
  float r[6] = {a[0] - Rq[0][2] * gw[0], a[1] - Rq[1][2] * gw[1],
 8002166:	f207 73c4 	addw	r3, r7, #1988	@ 0x7c4
 800216a:	edc3 7a00 	vstr	s15, [r3]
  float s_gw[3][3] = {0};
 800216e:	f207 738c 	addw	r3, r7, #1932	@ 0x78c
 8002172:	2224      	movs	r2, #36	@ 0x24
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f00b fcbd 	bl	800daf6 <memset>
  float s_mw[3][3] = {0};
 800217c:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8002180:	2224      	movs	r2, #36	@ 0x24
 8002182:	2100      	movs	r1, #0
 8002184:	4618      	mov	r0, r3
 8002186:	f00b fcb6 	bl	800daf6 <memset>
  skew(gw, s_gw);
 800218a:	f207 728c 	addw	r2, r7, #1932	@ 0x78c
 800218e:	f207 73d4 	addw	r3, r7, #2004	@ 0x7d4
 8002192:	4611      	mov	r1, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe ff05 	bl	8000fa4 <skew>
  skew(mw, s_mw);
 800219a:	f507 62ed 	add.w	r2, r7, #1896	@ 0x768
 800219e:	f507 63f9 	add.w	r3, r7, #1992	@ 0x7c8
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe fefd 	bl	8000fa4 <skew>

  float Rgw[3][3] = {0}, Rmw[3][3] = {0};
 80021aa:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80021ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80021b2:	4618      	mov	r0, r3
 80021b4:	2324      	movs	r3, #36	@ 0x24
 80021b6:	461a      	mov	r2, r3
 80021b8:	2100      	movs	r1, #0
 80021ba:	f00b fc9c 	bl	800daf6 <memset>
 80021be:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80021c2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80021c6:	4618      	mov	r0, r3
 80021c8:	2324      	movs	r3, #36	@ 0x24
 80021ca:	461a      	mov	r2, r3
 80021cc:	2100      	movs	r1, #0
 80021ce:	f00b fc92 	bl	800daf6 <memset>
  mat_mul3(Rq, s_gw, Rgw);
 80021d2:	f207 7244 	addw	r2, r7, #1860	@ 0x744
 80021d6:	f207 718c 	addw	r1, r7, #1932	@ 0x78c
 80021da:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe ff4d 	bl	800107e <mat_mul3>
  mat_mul3(Rq, s_mw, Rmw);
 80021e4:	f507 62e4 	add.w	r2, r7, #1824	@ 0x720
 80021e8:	f507 61ed 	add.w	r1, r7, #1896	@ 0x768
 80021ec:	f507 63fc 	add.w	r3, r7, #2016	@ 0x7e0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe ff44 	bl	800107e <mat_mul3>

  float H[6][6] = {0}; // Set H to zero
 80021f6:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80021fa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80021fe:	4618      	mov	r0, r3
 8002200:	2390      	movs	r3, #144	@ 0x90
 8002202:	461a      	mov	r2, r3
 8002204:	2100      	movs	r1, #0
 8002206:	f00b fc76 	bl	800daf6 <memset>
  for (int i = 0; i < 3; i++) {
 800220a:	2300      	movs	r3, #0
 800220c:	f8c7 3844 	str.w	r3, [r7, #2116]	@ 0x844
 8002210:	e058      	b.n	80022c4 <kalman_correction+0x654>
    for (int j = 0; j < 3; j++) {
 8002212:	2300      	movs	r3, #0
 8002214:	f8c7 3840 	str.w	r3, [r7, #2112]	@ 0x840
 8002218:	e04b      	b.n	80022b2 <kalman_correction+0x642>
      H[i][j] = -Rgw[i][j];
 800221a:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 800221e:	f5a3 7182 	sub.w	r1, r3, #260	@ 0x104
 8002222:	f8d7 2844 	ldr.w	r2, [r7, #2116]	@ 0x844
 8002226:	4613      	mov	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	4413      	add	r3, r2
 800222c:	f8d7 2840 	ldr.w	r2, [r7, #2112]	@ 0x840
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	edd3 7a00 	vldr	s15, [r3]
 800223a:	eef1 7a67 	vneg.f32	s15, s15
 800223e:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002242:	f5a3 71dc 	sub.w	r1, r3, #440	@ 0x1b8
 8002246:	f8d7 2844 	ldr.w	r2, [r7, #2116]	@ 0x844
 800224a:	4613      	mov	r3, r2
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	4413      	add	r3, r2
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	f8d7 2840 	ldr.w	r2, [r7, #2112]	@ 0x840
 8002256:	4413      	add	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	edc3 7a00 	vstr	s15, [r3]
      H[i + 3][j] = -Rmw[i][j];
 8002260:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002264:	f5a3 7194 	sub.w	r1, r3, #296	@ 0x128
 8002268:	f8d7 2844 	ldr.w	r2, [r7, #2116]	@ 0x844
 800226c:	4613      	mov	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4413      	add	r3, r2
 8002272:	f8d7 2840 	ldr.w	r2, [r7, #2112]	@ 0x840
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	edd3 7a00 	vldr	s15, [r3]
 8002280:	f8d7 3844 	ldr.w	r3, [r7, #2116]	@ 0x844
 8002284:	1cda      	adds	r2, r3, #3
 8002286:	eef1 7a67 	vneg.f32	s15, s15
 800228a:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 800228e:	f5a3 71dc 	sub.w	r1, r3, #440	@ 0x1b8
 8002292:	4613      	mov	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	f8d7 2840 	ldr.w	r2, [r7, #2112]	@ 0x840
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	edc3 7a00 	vstr	s15, [r3]
    for (int j = 0; j < 3; j++) {
 80022a8:	f8d7 3840 	ldr.w	r3, [r7, #2112]	@ 0x840
 80022ac:	3301      	adds	r3, #1
 80022ae:	f8c7 3840 	str.w	r3, [r7, #2112]	@ 0x840
 80022b2:	f8d7 3840 	ldr.w	r3, [r7, #2112]	@ 0x840
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	ddaf      	ble.n	800221a <kalman_correction+0x5aa>
  for (int i = 0; i < 3; i++) {
 80022ba:	f8d7 3844 	ldr.w	r3, [r7, #2116]	@ 0x844
 80022be:	3301      	adds	r3, #1
 80022c0:	f8c7 3844 	str.w	r3, [r7, #2116]	@ 0x844
 80022c4:	f8d7 3844 	ldr.w	r3, [r7, #2116]	@ 0x844
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	dda2      	ble.n	8002212 <kalman_correction+0x5a2>
    }
  }

  float noise_R[6][6] = {0};
 80022cc:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80022d0:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80022d4:	4618      	mov	r0, r3
 80022d6:	2390      	movs	r3, #144	@ 0x90
 80022d8:	461a      	mov	r2, r3
 80022da:	2100      	movs	r1, #0
 80022dc:	f00b fc0b 	bl	800daf6 <memset>
  for (int i = 0; i < 3; i++) {
 80022e0:	2300      	movs	r3, #0
 80022e2:	f8c7 383c 	str.w	r3, [r7, #2108]	@ 0x83c
 80022e6:	e046      	b.n	8002376 <kalman_correction+0x706>
 80022e8:	bf800000 	.word	0xbf800000
    noise_R[i][i] = k->noise_a * k->noise_a;
 80022ec:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80022f0:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	ed93 7a2d 	vldr	s14, [r3, #180]	@ 0xb4
 80022fa:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80022fe:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8002308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800230c:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002310:	f5a3 7112 	sub.w	r1, r3, #584	@ 0x248
 8002314:	f8d7 283c 	ldr.w	r2, [r7, #2108]	@ 0x83c
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	edc3 7a00 	vstr	s15, [r3]
    noise_R[i + 3][i + 3] = k->noise_m * k->noise_m;
 8002326:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 800232a:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	ed93 7a2e 	vldr	s14, [r3, #184]	@ 0xb8
 8002334:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002338:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	edd3 7a2e 	vldr	s15, [r3, #184]	@ 0xb8
 8002342:	f8d7 383c 	ldr.w	r3, [r7, #2108]	@ 0x83c
 8002346:	1cda      	adds	r2, r3, #3
 8002348:	f8d7 383c 	ldr.w	r3, [r7, #2108]	@ 0x83c
 800234c:	1cd8      	adds	r0, r3, #3
 800234e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002352:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002356:	f5a3 7112 	sub.w	r1, r3, #584	@ 0x248
 800235a:	4613      	mov	r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4413      	add	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4403      	add	r3, r0
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < 3; i++) {
 800236c:	f8d7 383c 	ldr.w	r3, [r7, #2108]	@ 0x83c
 8002370:	3301      	adds	r3, #1
 8002372:	f8c7 383c 	str.w	r3, [r7, #2108]	@ 0x83c
 8002376:	f8d7 383c 	ldr.w	r3, [r7, #2108]	@ 0x83c
 800237a:	2b02      	cmp	r3, #2
 800237c:	ddb6      	ble.n	80022ec <kalman_correction+0x67c>
  }
  float Ht[6][6] = {0};
 800237e:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002382:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8002386:	4618      	mov	r0, r3
 8002388:	2390      	movs	r3, #144	@ 0x90
 800238a:	461a      	mov	r2, r3
 800238c:	2100      	movs	r1, #0
 800238e:	f00b fbb2 	bl	800daf6 <memset>
  transpose6(H, Ht);
 8002392:	f507 62ae 	add.w	r2, r7, #1392	@ 0x570
 8002396:	f507 63d2 	add.w	r3, r7, #1680	@ 0x690
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe fe38 	bl	8001012 <transpose6>

  float U[6][6] = {0};
 80023a2:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80023a6:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 80023aa:	4618      	mov	r0, r3
 80023ac:	2390      	movs	r3, #144	@ 0x90
 80023ae:	461a      	mov	r2, r3
 80023b0:	2100      	movs	r1, #0
 80023b2:	f00b fba0 	bl	800daf6 <memset>
  mat_mul6(P_est, Ht, U);
 80023b6:	f507 629c 	add.w	r2, r7, #1248	@ 0x4e0
 80023ba:	f507 61ae 	add.w	r1, r7, #1392	@ 0x570
 80023be:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80023c2:	f6a3 0348 	subw	r3, r3, #2120	@ 0x848
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	f7fe feb3 	bl	8001132 <mat_mul6>

  float S[6][6] = {0};
 80023cc:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80023d0:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 80023d4:	4618      	mov	r0, r3
 80023d6:	2390      	movs	r3, #144	@ 0x90
 80023d8:	461a      	mov	r2, r3
 80023da:	2100      	movs	r1, #0
 80023dc:	f00b fb8b 	bl	800daf6 <memset>
  mat_mul6(H, U, S);
 80023e0:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 80023e4:	f507 619c 	add.w	r1, r7, #1248	@ 0x4e0
 80023e8:	f507 63d2 	add.w	r3, r7, #1680	@ 0x690
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe fea0 	bl	8001132 <mat_mul6>
  mat_add6(S, noise_R, S);
 80023f2:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 80023f6:	f507 61c0 	add.w	r1, r7, #1536	@ 0x600
 80023fa:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe fef1 	bl	80011e6 <mat_add6>

  float L[6][6] = {0};
 8002404:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002408:	f5a3 6391 	sub.w	r3, r3, #1160	@ 0x488
 800240c:	4618      	mov	r0, r3
 800240e:	2390      	movs	r3, #144	@ 0x90
 8002410:	461a      	mov	r2, r3
 8002412:	2100      	movs	r1, #0
 8002414:	f00b fb6f 	bl	800daf6 <memset>
  float Lt[6][6] = {0};
 8002418:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 800241c:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8002420:	4618      	mov	r0, r3
 8002422:	2390      	movs	r3, #144	@ 0x90
 8002424:	461a      	mov	r2, r3
 8002426:	2100      	movs	r1, #0
 8002428:	f00b fb65 	bl	800daf6 <memset>
  cholesky(S, L);
 800242c:	f507 7270 	add.w	r2, r7, #960	@ 0x3c0
 8002430:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8002434:	4611      	mov	r1, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe ff65 	bl	8001306 <cholesky>
  transpose6(L, Lt);
 800243c:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 8002440:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8002444:	4611      	mov	r1, r2
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe fde3 	bl	8001012 <transpose6>

  // Forward Solve L * Y = U
  float Y[6][6] = {0};
 800244c:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002450:	f5a3 63b5 	sub.w	r3, r3, #1448	@ 0x5a8
 8002454:	4618      	mov	r0, r3
 8002456:	2390      	movs	r3, #144	@ 0x90
 8002458:	461a      	mov	r2, r3
 800245a:	2100      	movs	r1, #0
 800245c:	f00b fb4b 	bl	800daf6 <memset>
  for (int j = 0; j < 6; ++j) {
 8002460:	2300      	movs	r3, #0
 8002462:	f8c7 3838 	str.w	r3, [r7, #2104]	@ 0x838
 8002466:	e085      	b.n	8002574 <kalman_correction+0x904>
    for (int i = 0; i < 6; ++i) {
 8002468:	2300      	movs	r3, #0
 800246a:	f8c7 3834 	str.w	r3, [r7, #2100]	@ 0x834
 800246e:	e078      	b.n	8002562 <kalman_correction+0x8f2>
      float s = U[i][j];
 8002470:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002474:	f5a3 715a 	sub.w	r1, r3, #872	@ 0x368
 8002478:	f8d7 2834 	ldr.w	r2, [r7, #2100]	@ 0x834
 800247c:	4613      	mov	r3, r2
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4413      	add	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	f8d7 2838 	ldr.w	r2, [r7, #2104]	@ 0x838
 8002488:	4413      	add	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8002494:	6013      	str	r3, [r2, #0]
      for (int k = 0; k < i; ++k) {
 8002496:	2300      	movs	r3, #0
 8002498:	f8c7 382c 	str.w	r3, [r7, #2092]	@ 0x82c
 800249c:	e032      	b.n	8002504 <kalman_correction+0x894>
        s -= L[i][k] * U[k][j];
 800249e:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80024a2:	f5a3 6191 	sub.w	r1, r3, #1160	@ 0x488
 80024a6:	f8d7 2834 	ldr.w	r2, [r7, #2100]	@ 0x834
 80024aa:	4613      	mov	r3, r2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	4413      	add	r3, r2
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	f8d7 282c 	ldr.w	r2, [r7, #2092]	@ 0x82c
 80024b6:	4413      	add	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	ed93 7a00 	vldr	s14, [r3]
 80024c0:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80024c4:	f5a3 715a 	sub.w	r1, r3, #872	@ 0x368
 80024c8:	f8d7 282c 	ldr.w	r2, [r7, #2092]	@ 0x82c
 80024cc:	4613      	mov	r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4413      	add	r3, r2
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	f8d7 2838 	ldr.w	r2, [r7, #2104]	@ 0x838
 80024d8:	4413      	add	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	edd3 7a00 	vldr	s15, [r3]
 80024e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e6:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 80024ea:	ed93 7a00 	vldr	s14, [r3]
 80024ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024f2:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 80024f6:	edc3 7a00 	vstr	s15, [r3]
      for (int k = 0; k < i; ++k) {
 80024fa:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 80024fe:	3301      	adds	r3, #1
 8002500:	f8c7 382c 	str.w	r3, [r7, #2092]	@ 0x82c
 8002504:	f8d7 282c 	ldr.w	r2, [r7, #2092]	@ 0x82c
 8002508:	f8d7 3834 	ldr.w	r3, [r7, #2100]	@ 0x834
 800250c:	429a      	cmp	r2, r3
 800250e:	dbc6      	blt.n	800249e <kalman_correction+0x82e>
      }
      Y[i][j] = s / L[i][i];
 8002510:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002514:	f5a3 6191 	sub.w	r1, r3, #1160	@ 0x488
 8002518:	f8d7 2834 	ldr.w	r2, [r7, #2100]	@ 0x834
 800251c:	4613      	mov	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	ed93 7a00 	vldr	s14, [r3]
 800252a:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 800252e:	edd3 6a00 	vldr	s13, [r3]
 8002532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002536:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 800253a:	f5a3 61b5 	sub.w	r1, r3, #1448	@ 0x5a8
 800253e:	f8d7 2834 	ldr.w	r2, [r7, #2100]	@ 0x834
 8002542:	4613      	mov	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	4413      	add	r3, r2
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	f8d7 2838 	ldr.w	r2, [r7, #2104]	@ 0x838
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 6; ++i) {
 8002558:	f8d7 3834 	ldr.w	r3, [r7, #2100]	@ 0x834
 800255c:	3301      	adds	r3, #1
 800255e:	f8c7 3834 	str.w	r3, [r7, #2100]	@ 0x834
 8002562:	f8d7 3834 	ldr.w	r3, [r7, #2100]	@ 0x834
 8002566:	2b05      	cmp	r3, #5
 8002568:	dd82      	ble.n	8002470 <kalman_correction+0x800>
  for (int j = 0; j < 6; ++j) {
 800256a:	f8d7 3838 	ldr.w	r3, [r7, #2104]	@ 0x838
 800256e:	3301      	adds	r3, #1
 8002570:	f8c7 3838 	str.w	r3, [r7, #2104]	@ 0x838
 8002574:	f8d7 3838 	ldr.w	r3, [r7, #2104]	@ 0x838
 8002578:	2b05      	cmp	r3, #5
 800257a:	f77f af75 	ble.w	8002468 <kalman_correction+0x7f8>
    }
  }

  // Backward Solve L^T * K = Y
  float K[6][6] = {0};
 800257e:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002582:	f5a3 63c7 	sub.w	r3, r3, #1592	@ 0x638
 8002586:	4618      	mov	r0, r3
 8002588:	2390      	movs	r3, #144	@ 0x90
 800258a:	461a      	mov	r2, r3
 800258c:	2100      	movs	r1, #0
 800258e:	f00b fab2 	bl	800daf6 <memset>
  for (int j = 0; j < 6; ++j) {
 8002592:	2300      	movs	r3, #0
 8002594:	f8c7 3828 	str.w	r3, [r7, #2088]	@ 0x828
 8002598:	e085      	b.n	80026a6 <kalman_correction+0xa36>
    for (int i = 5; i >= 0; --i) {
 800259a:	2305      	movs	r3, #5
 800259c:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 80025a0:	e078      	b.n	8002694 <kalman_correction+0xa24>
      float s = Y[i][j];
 80025a2:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80025a6:	f5a3 61b5 	sub.w	r1, r3, #1448	@ 0x5a8
 80025aa:	f8d7 2824 	ldr.w	r2, [r7, #2084]	@ 0x824
 80025ae:	4613      	mov	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	4413      	add	r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	f8d7 2828 	ldr.w	r2, [r7, #2088]	@ 0x828
 80025ba:	4413      	add	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80025c6:	6013      	str	r3, [r2, #0]
      for (int k = i + 1; k < 6; ++k) {
 80025c8:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 80025cc:	3301      	adds	r3, #1
 80025ce:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
 80025d2:	e032      	b.n	800263a <kalman_correction+0x9ca>
        s -= L[k][i] * K[k][j];
 80025d4:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80025d8:	f5a3 6191 	sub.w	r1, r3, #1160	@ 0x488
 80025dc:	f8d7 281c 	ldr.w	r2, [r7, #2076]	@ 0x81c
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	f8d7 2824 	ldr.w	r2, [r7, #2084]	@ 0x824
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	ed93 7a00 	vldr	s14, [r3]
 80025f6:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80025fa:	f5a3 61c7 	sub.w	r1, r3, #1592	@ 0x638
 80025fe:	f8d7 281c 	ldr.w	r2, [r7, #2076]	@ 0x81c
 8002602:	4613      	mov	r3, r2
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4413      	add	r3, r2
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	f8d7 2828 	ldr.w	r2, [r7, #2088]	@ 0x828
 800260e:	4413      	add	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	440b      	add	r3, r1
 8002614:	edd3 7a00 	vldr	s15, [r3]
 8002618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002620:	ed93 7a00 	vldr	s14, [r3]
 8002624:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002628:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800262c:	edc3 7a00 	vstr	s15, [r3]
      for (int k = i + 1; k < 6; ++k) {
 8002630:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8002634:	3301      	adds	r3, #1
 8002636:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
 800263a:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800263e:	2b05      	cmp	r3, #5
 8002640:	ddc8      	ble.n	80025d4 <kalman_correction+0x964>
      }
      K[i][j] = s / L[i][i];
 8002642:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002646:	f5a3 6191 	sub.w	r1, r3, #1160	@ 0x488
 800264a:	f8d7 2824 	ldr.w	r2, [r7, #2084]	@ 0x824
 800264e:	4613      	mov	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	1a9b      	subs	r3, r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	ed93 7a00 	vldr	s14, [r3]
 800265c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002660:	edd3 6a00 	vldr	s13, [r3]
 8002664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002668:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 800266c:	f5a3 61c7 	sub.w	r1, r3, #1592	@ 0x638
 8002670:	f8d7 2824 	ldr.w	r2, [r7, #2084]	@ 0x824
 8002674:	4613      	mov	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4413      	add	r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	f8d7 2828 	ldr.w	r2, [r7, #2088]	@ 0x828
 8002680:	4413      	add	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 5; i >= 0; --i) {
 800268a:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 800268e:	3b01      	subs	r3, #1
 8002690:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 8002694:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8002698:	2b00      	cmp	r3, #0
 800269a:	da82      	bge.n	80025a2 <kalman_correction+0x932>
  for (int j = 0; j < 6; ++j) {
 800269c:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 80026a0:	3301      	adds	r3, #1
 80026a2:	f8c7 3828 	str.w	r3, [r7, #2088]	@ 0x828
 80026a6:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 80026aa:	2b05      	cmp	r3, #5
 80026ac:	f77f af75 	ble.w	800259a <kalman_correction+0x92a>
    }
  }

  // dx = K * r
  float dx[6] = {0};
 80026b0:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80026b4:	f5a3 63ca 	sub.w	r3, r3, #1616	@ 0x650
 80026b8:	461a      	mov	r2, r3
 80026ba:	2300      	movs	r3, #0
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	6053      	str	r3, [r2, #4]
 80026c0:	6093      	str	r3, [r2, #8]
 80026c2:	60d3      	str	r3, [r2, #12]
 80026c4:	6113      	str	r3, [r2, #16]
 80026c6:	6153      	str	r3, [r2, #20]
  for (int i = 0; i < 6; ++i) {
 80026c8:	2300      	movs	r3, #0
 80026ca:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
 80026ce:	e048      	b.n	8002762 <kalman_correction+0xaf2>
    float s = 0.0f;
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	f607 0214 	addw	r2, r7, #2068	@ 0x814
 80026d8:	6013      	str	r3, [r2, #0]
    for (int j = 0; j < 6; ++j) {
 80026da:	2300      	movs	r3, #0
 80026dc:	f8c7 3810 	str.w	r3, [r7, #2064]	@ 0x810
 80026e0:	e02a      	b.n	8002738 <kalman_correction+0xac8>
      s += K[i][j] * r[j];
 80026e2:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80026e6:	f5a3 61c7 	sub.w	r1, r3, #1592	@ 0x638
 80026ea:	f8d7 2818 	ldr.w	r2, [r7, #2072]	@ 0x818
 80026ee:	4613      	mov	r3, r2
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4413      	add	r3, r2
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	f8d7 2810 	ldr.w	r2, [r7, #2064]	@ 0x810
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	440b      	add	r3, r1
 8002700:	ed93 7a00 	vldr	s14, [r3]
 8002704:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	f603 0348 	addw	r3, r3, #2120	@ 0x848
 800270e:	443b      	add	r3, r7
 8002710:	3b98      	subs	r3, #152	@ 0x98
 8002712:	edd3 7a00 	vldr	s15, [r3]
 8002716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271a:	f607 0314 	addw	r3, r7, #2068	@ 0x814
 800271e:	ed93 7a00 	vldr	s14, [r3]
 8002722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002726:	f607 0314 	addw	r3, r7, #2068	@ 0x814
 800272a:	edc3 7a00 	vstr	s15, [r3]
    for (int j = 0; j < 6; ++j) {
 800272e:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8002732:	3301      	adds	r3, #1
 8002734:	f8c7 3810 	str.w	r3, [r7, #2064]	@ 0x810
 8002738:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800273c:	2b05      	cmp	r3, #5
 800273e:	ddd0      	ble.n	80026e2 <kalman_correction+0xa72>
    }
    dx[i] = s;
 8002740:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002744:	f5a3 62ca 	sub.w	r2, r3, #1616	@ 0x650
 8002748:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	f607 0214 	addw	r2, r7, #2068	@ 0x814
 8002754:	6812      	ldr	r2, [r2, #0]
 8002756:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 6; ++i) {
 8002758:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 800275c:	3301      	adds	r3, #1
 800275e:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
 8002762:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8002766:	2b05      	cmp	r3, #5
 8002768:	ddb2      	ble.n	80026d0 <kalman_correction+0xa60>
  }

  float dth[3] = {dx[0], dx[1], dx[2]};
 800276a:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 800276e:	f5a3 63ca 	sub.w	r3, r3, #1616	@ 0x650
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002778:	f2a3 635c 	subw	r3, r3, #1628	@ 0x65c
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002782:	f5a3 63ca 	sub.w	r3, r3, #1616	@ 0x650
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 800278c:	f2a3 635c 	subw	r3, r3, #1628	@ 0x65c
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002796:	f5a3 63ca 	sub.w	r3, r3, #1616	@ 0x650
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80027a0:	f2a3 635c 	subw	r3, r3, #1628	@ 0x65c
 80027a4:	609a      	str	r2, [r3, #8]
  float db[3] = {dx[3], dx[4], dx[5]};
 80027a6:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80027aa:	f5a3 63ca 	sub.w	r3, r3, #1616	@ 0x650
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80027b4:	f5a3 63cd 	sub.w	r3, r3, #1640	@ 0x668
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80027be:	f5a3 63ca 	sub.w	r3, r3, #1616	@ 0x650
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80027c8:	f5a3 63cd 	sub.w	r3, r3, #1640	@ 0x668
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80027d2:	f5a3 63ca 	sub.w	r3, r3, #1616	@ 0x650
 80027d6:	695a      	ldr	r2, [r3, #20]
 80027d8:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80027dc:	f5a3 63cd 	sub.w	r3, r3, #1640	@ 0x668
 80027e0:	609a      	str	r2, [r3, #8]

  float dq[4] = {1, 0.5f * dth[0], 0.5f * dth[1], 0.5f * dth[2]};
 80027e2:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80027e6:	f5a3 63cf 	sub.w	r3, r3, #1656	@ 0x678
 80027ea:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80027f4:	f2a3 635c 	subw	r3, r3, #1628	@ 0x65c
 80027f8:	edd3 7a00 	vldr	s15, [r3]
 80027fc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002800:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002804:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002808:	f5a3 63cf 	sub.w	r3, r3, #1656	@ 0x678
 800280c:	edc3 7a01 	vstr	s15, [r3, #4]
 8002810:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002814:	f2a3 635c 	subw	r3, r3, #1628	@ 0x65c
 8002818:	edd3 7a01 	vldr	s15, [r3, #4]
 800281c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002820:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002824:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002828:	f5a3 63cf 	sub.w	r3, r3, #1656	@ 0x678
 800282c:	edc3 7a02 	vstr	s15, [r3, #8]
 8002830:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002834:	f2a3 635c 	subw	r3, r3, #1628	@ 0x65c
 8002838:	edd3 7a02 	vldr	s15, [r3, #8]
 800283c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002840:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002844:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002848:	f5a3 63cf 	sub.w	r3, r3, #1656	@ 0x678
 800284c:	edc3 7a03 	vstr	s15, [r3, #12]
  float qk[4];
  qk[0] = (k->q[0] * dq[0]) - (dq[1] * k->q[1]) - (dq[2] * k->q[2]) -
 8002850:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002854:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	ed93 7a00 	vldr	s14, [r3]
 800285e:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002862:	f5a3 63cf 	sub.w	r3, r3, #1656	@ 0x678
 8002866:	edd3 7a00 	vldr	s15, [r3]
 800286a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800286e:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002872:	f5a3 63cf 	sub.w	r3, r3, #1656	@ 0x678
 8002876:	edd3 6a01 	vldr	s13, [r3, #4]
 800287a:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 800287e:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	edd3 7a01 	vldr	s15, [r3, #4]
 8002888:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800288c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002890:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002894:	f5a3 63cf 	sub.w	r3, r3, #1656	@ 0x678
 8002898:	edd3 6a02 	vldr	s13, [r3, #8]
 800289c:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80028a0:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80028aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ae:	ee37 7a67 	vsub.f32	s14, s14, s15
          (dq[3] * k->q[3]);
 80028b2:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80028b6:	f5a3 63cf 	sub.w	r3, r3, #1656	@ 0x678
 80028ba:	edd3 6a03 	vldr	s13, [r3, #12]
 80028be:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80028c2:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80028cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
  qk[0] = (k->q[0] * dq[0]) - (dq[1] * k->q[1]) - (dq[2] * k->q[2]) -
 80028d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d4:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80028d8:	f5a3 63d1 	sub.w	r3, r3, #1672	@ 0x688
 80028dc:	edc3 7a00 	vstr	s15, [r3]
  qk[1] = (dq[0] * k->q[1]) + (dq[1] * k->q[0]) + (dq[2] * k->q[3]) -
 80028e0:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80028e4:	f5a3 63cf 	sub.w	r3, r3, #1656	@ 0x678
 80028e8:	ed93 7a00 	vldr	s14, [r3]
 80028ec:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80028f0:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80028fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028fe:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002902:	f5a3 63cf 	sub.w	r3, r3, #1656	@ 0x678
 8002906:	edd3 6a01 	vldr	s13, [r3, #4]
 800290a:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 800290e:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	edd3 7a00 	vldr	s15, [r3]
 8002918:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800291c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002920:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002924:	f5a3 63cf 	sub.w	r3, r3, #1656	@ 0x678
 8002928:	edd3 6a02 	vldr	s13, [r3, #8]
 800292c:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002930:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	edd3 7a03 	vldr	s15, [r3, #12]
 800293a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800293e:	ee37 7a27 	vadd.f32	s14, s14, s15
          (dq[3] * k->q[2]);
 8002942:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002946:	f5a3 63cf 	sub.w	r3, r3, #1656	@ 0x678
 800294a:	edd3 6a03 	vldr	s13, [r3, #12]
 800294e:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002952:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	edd3 7a02 	vldr	s15, [r3, #8]
 800295c:	ee66 7aa7 	vmul.f32	s15, s13, s15
  qk[1] = (dq[0] * k->q[1]) + (dq[1] * k->q[0]) + (dq[2] * k->q[3]) -
 8002960:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002964:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002968:	f5a3 63d1 	sub.w	r3, r3, #1672	@ 0x688
 800296c:	edc3 7a01 	vstr	s15, [r3, #4]
  qk[2] = (dq[0] * k->q[2]) - (dq[1] * k->q[3]) + (dq[2] * k->q[0]) +
 8002970:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002974:	f5a3 63cf 	sub.w	r3, r3, #1656	@ 0x678
 8002978:	ed93 7a00 	vldr	s14, [r3]
 800297c:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002980:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	edd3 7a02 	vldr	s15, [r3, #8]
 800298a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800298e:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002992:	f5a3 63cf 	sub.w	r3, r3, #1656	@ 0x678
 8002996:	edd3 6a01 	vldr	s13, [r3, #4]
 800299a:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 800299e:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80029a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029b0:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80029b4:	f5a3 63cf 	sub.w	r3, r3, #1656	@ 0x678
 80029b8:	edd3 6a02 	vldr	s13, [r3, #8]
 80029bc:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80029c0:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	edd3 7a00 	vldr	s15, [r3]
 80029ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029ce:	ee37 7a27 	vadd.f32	s14, s14, s15
          (dq[3] * k->q[1]);
 80029d2:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80029d6:	f5a3 63cf 	sub.w	r3, r3, #1656	@ 0x678
 80029da:	edd3 6a03 	vldr	s13, [r3, #12]
 80029de:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80029e2:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80029ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
  qk[2] = (dq[0] * k->q[2]) - (dq[1] * k->q[3]) + (dq[2] * k->q[0]) +
 80029f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f4:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80029f8:	f5a3 63d1 	sub.w	r3, r3, #1672	@ 0x688
 80029fc:	edc3 7a02 	vstr	s15, [r3, #8]
  qk[3] = (dq[0] * k->q[3]) + (dq[1] * k->q[2]) - (dq[2] * k->q[1]) +
 8002a00:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002a04:	f5a3 63cf 	sub.w	r3, r3, #1656	@ 0x678
 8002a08:	ed93 7a00 	vldr	s14, [r3]
 8002a0c:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002a10:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a1e:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002a22:	f5a3 63cf 	sub.w	r3, r3, #1656	@ 0x678
 8002a26:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a2a:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002a2e:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a40:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002a44:	f5a3 63cf 	sub.w	r3, r3, #1656	@ 0x678
 8002a48:	edd3 6a02 	vldr	s13, [r3, #8]
 8002a4c:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002a50:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a5e:	ee37 7a67 	vsub.f32	s14, s14, s15
          (dq[3] * k->q[0]);
 8002a62:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002a66:	f5a3 63cf 	sub.w	r3, r3, #1656	@ 0x678
 8002a6a:	edd3 6a03 	vldr	s13, [r3, #12]
 8002a6e:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002a72:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	edd3 7a00 	vldr	s15, [r3]
 8002a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
  qk[3] = (dq[0] * k->q[3]) + (dq[1] * k->q[2]) - (dq[2] * k->q[1]) +
 8002a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a84:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002a88:	f5a3 63d1 	sub.w	r3, r3, #1672	@ 0x688
 8002a8c:	edc3 7a03 	vstr	s15, [r3, #12]

  float mag_q = magnitudeq(qk);
 8002a90:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fe fa46 	bl	8000f26 <magnitudeq>
 8002a9a:	f607 0304 	addw	r3, r7, #2052	@ 0x804
 8002a9e:	ed83 0a00 	vstr	s0, [r3]
  mag_q = 1 / mag_q;
 8002aa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002aa6:	f607 0304 	addw	r3, r7, #2052	@ 0x804
 8002aaa:	ed93 7a00 	vldr	s14, [r3]
 8002aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ab2:	f607 0304 	addw	r3, r7, #2052	@ 0x804
 8002ab6:	edc3 7a00 	vstr	s15, [r3]
  k->q[0] = qk[0] * mag_q;
 8002aba:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002abe:	f5a3 63d1 	sub.w	r3, r3, #1672	@ 0x688
 8002ac2:	ed93 7a00 	vldr	s14, [r3]
 8002ac6:	f607 0304 	addw	r3, r7, #2052	@ 0x804
 8002aca:	edd3 7a00 	vldr	s15, [r3]
 8002ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad2:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002ad6:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	edc3 7a00 	vstr	s15, [r3]
  k->q[1] = qk[1] * mag_q;
 8002ae0:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002ae4:	f5a3 63d1 	sub.w	r3, r3, #1672	@ 0x688
 8002ae8:	ed93 7a01 	vldr	s14, [r3, #4]
 8002aec:	f607 0304 	addw	r3, r7, #2052	@ 0x804
 8002af0:	edd3 7a00 	vldr	s15, [r3]
 8002af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af8:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002afc:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	edc3 7a01 	vstr	s15, [r3, #4]
  k->q[2] = qk[2] * mag_q;
 8002b06:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002b0a:	f5a3 63d1 	sub.w	r3, r3, #1672	@ 0x688
 8002b0e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002b12:	f607 0304 	addw	r3, r7, #2052	@ 0x804
 8002b16:	edd3 7a00 	vldr	s15, [r3]
 8002b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b1e:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002b22:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	edc3 7a02 	vstr	s15, [r3, #8]
  k->q[3] = qk[3] * mag_q;
 8002b2c:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002b30:	f5a3 63d1 	sub.w	r3, r3, #1672	@ 0x688
 8002b34:	ed93 7a03 	vldr	s14, [r3, #12]
 8002b38:	f607 0304 	addw	r3, r7, #2052	@ 0x804
 8002b3c:	edd3 7a00 	vldr	s15, [r3]
 8002b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b44:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002b48:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	edc3 7a03 	vstr	s15, [r3, #12]

  k->b[0] += db[0];
 8002b52:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002b56:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002b60:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002b64:	f5a3 63cd 	sub.w	r3, r3, #1640	@ 0x668
 8002b68:	edd3 7a00 	vldr	s15, [r3]
 8002b6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b70:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002b74:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	edc3 7a04 	vstr	s15, [r3, #16]
  k->b[1] += db[1];
 8002b7e:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002b82:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	ed93 7a05 	vldr	s14, [r3, #20]
 8002b8c:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002b90:	f5a3 63cd 	sub.w	r3, r3, #1640	@ 0x668
 8002b94:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b9c:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002ba0:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	edc3 7a05 	vstr	s15, [r3, #20]
  k->b[2] += db[2];
 8002baa:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002bae:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	ed93 7a06 	vldr	s14, [r3, #24]
 8002bb8:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002bbc:	f5a3 63cd 	sub.w	r3, r3, #1640	@ 0x668
 8002bc0:	edd3 7a02 	vldr	s15, [r3, #8]
 8002bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bc8:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002bcc:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	edc3 7a06 	vstr	s15, [r3, #24]

  float Kt[6][6], UKt[6][6], P_new[6][6];
  ;
  transpose6(K, Kt);
 8002bd6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8002bda:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002bde:	4611      	mov	r1, r2
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fe fa16 	bl	8001012 <transpose6>
  mat_mul6(U, Kt, UKt);
 8002be6:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8002bea:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8002bee:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fe fa9d 	bl	8001132 <mat_mul6>
  mat_sub6(P_est, UKt, P_new);
 8002bf8:	f107 0210 	add.w	r2, r7, #16
 8002bfc:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8002c00:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002c04:	f6a3 0348 	subw	r3, r3, #2120	@ 0x848
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	f7fe fb34 	bl	8001276 <mat_sub6>

  for (int i = 0; i < 6; i++) {
 8002c0e:	2300      	movs	r3, #0
 8002c10:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8002c14:	e034      	b.n	8002c80 <kalman_correction+0x1010>
    for (int j = 0; j < 6; j++) {
 8002c16:	2300      	movs	r3, #0
 8002c18:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8002c1c:	e027      	b.n	8002c6e <kalman_correction+0xffe>
      k->P[i][j] = P_new[i][j];
 8002c1e:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002c22:	f6a3 0138 	subw	r1, r3, #2104	@ 0x838
 8002c26:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	4413      	add	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	6819      	ldr	r1, [r3, #0]
 8002c3e:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8002c42:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 8002c46:	6818      	ldr	r0, [r3, #0]
 8002c48:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4413      	add	r3, r2
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8002c58:	4413      	add	r3, r2
 8002c5a:	3306      	adds	r3, #6
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4403      	add	r3, r0
 8002c60:	3304      	adds	r3, #4
 8002c62:	6019      	str	r1, [r3, #0]
    for (int j = 0; j < 6; j++) {
 8002c64:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8002c68:	3301      	adds	r3, #1
 8002c6a:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8002c6e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8002c72:	2b05      	cmp	r3, #5
 8002c74:	ddd3      	ble.n	8002c1e <kalman_correction+0xfae>
  for (int i = 0; i < 6; i++) {
 8002c76:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8002c80:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8002c84:	2b05      	cmp	r3, #5
 8002c86:	ddc6      	ble.n	8002c16 <kalman_correction+0xfa6>
    }
  }
}
 8002c88:	bf00      	nop
 8002c8a:	bf00      	nop
 8002c8c:	f607 074c 	addw	r7, r7, #2124	@ 0x84c
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd90      	pop	{r4, r7, pc}

08002c94 <tca_ch>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static inline void tca_ch(uint8_t channel) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Master_Transmit(&hi2c1, (0x70u << 1), &channel, 1, 100);
 8002c9e:	1dfa      	adds	r2, r7, #7
 8002ca0:	2364      	movs	r3, #100	@ 0x64
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	21e0      	movs	r1, #224	@ 0xe0
 8002ca8:	4803      	ldr	r0, [pc, #12]	@ (8002cb8 <tca_ch+0x24>)
 8002caa:	f001 fe69 	bl	8004980 <HAL_I2C_Master_Transmit>
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	240000a4 	.word	0x240000a4

08002cbc <bno055_i2c_read>:
static inline uint32_t tim_get_arr(TIM_HandleTypeDef *htim) {
  return __HAL_TIM_GET_AUTORELOAD(htim);
}
static inline s8 bno055_i2c_read(uint8_t dev_addr, uint8_t reg_addr,
                                 uint8_t *reg_data, uint8_t sz) {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af04      	add	r7, sp, #16
 8002cc2:	603a      	str	r2, [r7, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	71bb      	strb	r3, [r7, #6]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	717b      	strb	r3, [r7, #5]
  if (HAL_I2C_Mem_Read(&hi2c1, dev_addr, reg_addr, I2C_MEMADD_SIZE_8BIT,
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	b299      	uxth	r1, r3
 8002cd6:	79bb      	ldrb	r3, [r7, #6]
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	797b      	ldrb	r3, [r7, #5]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002ce2:	9002      	str	r0, [sp, #8]
 8002ce4:	9301      	str	r3, [sp, #4]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	2301      	movs	r3, #1
 8002cec:	4806      	ldr	r0, [pc, #24]	@ (8002d08 <bno055_i2c_read+0x4c>)
 8002cee:	f002 f873 	bl	8004dd8 <HAL_I2C_Mem_Read>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <bno055_i2c_read+0x40>
                       reg_data, sz, 500) == HAL_OK) {
    return 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	e001      	b.n	8002d00 <bno055_i2c_read+0x44>
  }
  return -1;
 8002cfc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	240000a4 	.word	0x240000a4

08002d0c <bno055_i2c_write>:

static inline s8 bno055_i2c_write(uint8_t dev_addr, uint8_t reg_addr,
                                  uint8_t *reg_data, uint8_t sz) {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af04      	add	r7, sp, #16
 8002d12:	603a      	str	r2, [r7, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	4603      	mov	r3, r0
 8002d18:	71fb      	strb	r3, [r7, #7]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	71bb      	strb	r3, [r7, #6]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	717b      	strb	r3, [r7, #5]
  if (HAL_I2C_Mem_Write(&hi2c1, dev_addr, reg_addr, I2C_MEMADD_SIZE_8BIT,
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	b299      	uxth	r1, r3
 8002d26:	79bb      	ldrb	r3, [r7, #6]
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	797b      	ldrb	r3, [r7, #5]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d32:	9002      	str	r0, [sp, #8]
 8002d34:	9301      	str	r3, [sp, #4]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	4806      	ldr	r0, [pc, #24]	@ (8002d58 <bno055_i2c_write+0x4c>)
 8002d3e:	f001 ff37 	bl	8004bb0 <HAL_I2C_Mem_Write>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <bno055_i2c_write+0x40>
                        reg_data, sz, 500) == HAL_OK) {
    return 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	e001      	b.n	8002d50 <bno055_i2c_write+0x44>
  }
  return -1;
 8002d4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	240000a4 	.word	0x240000a4

08002d5c <quat_to_yaw>:
static inline float quat_to_yaw(const float q[4]) {
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  float s2 = 2 * (q[0] * q[3] + q[1] * q[2]);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	ed93 7a00 	vldr	s14, [r3]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	330c      	adds	r3, #12
 8002d6e:	edd3 7a00 	vldr	s15, [r3]
 8002d72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	edd3 6a00 	vldr	s13, [r3]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3308      	adds	r3, #8
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d8e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d92:	edc7 7a03 	vstr	s15, [r7, #12]
  float c2 = 1 - 2 * (q[2] * q[2] + q[3] * q[3]);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3308      	adds	r3, #8
 8002d9a:	ed93 7a00 	vldr	s14, [r3]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3308      	adds	r3, #8
 8002da2:	edd3 7a00 	vldr	s15, [r3]
 8002da6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	330c      	adds	r3, #12
 8002dae:	edd3 6a00 	vldr	s13, [r3]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	330c      	adds	r3, #12
 8002db6:	edd3 7a00 	vldr	s15, [r3]
 8002dba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002dc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002dca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dce:	edc7 7a02 	vstr	s15, [r7, #8]
  return atan2f(s2, c2);
 8002dd2:	edd7 0a02 	vldr	s1, [r7, #8]
 8002dd6:	ed97 0a03 	vldr	s0, [r7, #12]
 8002dda:	f00b fdc9 	bl	800e970 <atan2f>
 8002dde:	eef0 7a40 	vmov.f32	s15, s0
}
 8002de2:	eeb0 0a67 	vmov.f32	s0, s15
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	0000      	movs	r0, r0
	...

08002df0 <wrap_pi>:

static inline float wrap_pi(float a) {
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	ed87 0a01 	vstr	s0, [r7, #4]
  // wrap to (-pi, pi]
  while (a <= -M_PI)
 8002dfa:	e00b      	b.n	8002e14 <wrap_pi+0x24>
    a += 2.0f * M_PI;
 8002dfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e04:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8002e70 <wrap_pi+0x80>
 8002e08:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002e0c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e10:	edc7 7a01 	vstr	s15, [r7, #4]
  while (a <= -M_PI)
 8002e14:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e1c:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8002e78 <wrap_pi+0x88>
 8002e20:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e28:	d9e8      	bls.n	8002dfc <wrap_pi+0xc>
  while (a > M_PI)
 8002e2a:	e00b      	b.n	8002e44 <wrap_pi+0x54>
    a -= 2.0f * M_PI;
 8002e2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e34:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8002e70 <wrap_pi+0x80>
 8002e38:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002e3c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e40:	edc7 7a01 	vstr	s15, [r7, #4]
  while (a > M_PI)
 8002e44:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e4c:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8002e80 <wrap_pi+0x90>
 8002e50:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e58:	dce8      	bgt.n	8002e2c <wrap_pi+0x3c>
  return a;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	ee07 3a90 	vmov	s15, r3
}
 8002e60:	eeb0 0a67 	vmov.f32	s0, s15
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	54442d18 	.word	0x54442d18
 8002e74:	401921fb 	.word	0x401921fb
 8002e78:	54442d18 	.word	0x54442d18
 8002e7c:	c00921fb 	.word	0xc00921fb
 8002e80:	54442d18 	.word	0x54442d18
 8002e84:	400921fb 	.word	0x400921fb

08002e88 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002e8c:	f000 fc94 	bl	80037b8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8002e90:	f001 f92c 	bl	80040ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e94:	f000 f824 	bl	8002ee0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  htim1.Init.Period = 65535;
 8002e98:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed0 <main+0x48>)
 8002e9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e9e:	60da      	str	r2, [r3, #12]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ea0:	f000 f9da 	bl	8003258 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002ea4:	f000 f888 	bl	8002fb8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8002ea8:	f000 f8c6 	bl	8003038 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8002eac:	f000 f988 	bl	80031c0 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8002eb0:	f007 fe50 	bl	800ab54 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002eb4:	f007 ff58 	bl	800ad68 <osKernelInitialize>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle =
      osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002eb8:	4a06      	ldr	r2, [pc, #24]	@ (8002ed4 <main+0x4c>)
 8002eba:	2100      	movs	r1, #0
 8002ebc:	4806      	ldr	r0, [pc, #24]	@ (8002ed8 <main+0x50>)
 8002ebe:	f007 ff9d 	bl	800adfc <osThreadNew>
 8002ec2:	4603      	mov	r3, r0
  defaultTaskHandle =
 8002ec4:	4a05      	ldr	r2, [pc, #20]	@ (8002edc <main+0x54>)
 8002ec6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002ec8:	f007 ff72 	bl	800adb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8002ecc:	bf00      	nop
 8002ece:	e7fd      	b.n	8002ecc <main+0x44>
 8002ed0:	240000f8 	.word	0x240000f8
 8002ed4:	0800f7f8 	.word	0x0800f7f8
 8002ed8:	080033e9 	.word	0x080033e9
 8002edc:	240001d8 	.word	0x240001d8

08002ee0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b09c      	sub	sp, #112	@ 0x70
 8002ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ee6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002eea:	224c      	movs	r2, #76	@ 0x4c
 8002eec:	2100      	movs	r1, #0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f00a fe01 	bl	800daf6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ef4:	1d3b      	adds	r3, r7, #4
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	2100      	movs	r1, #0
 8002efa:	4618      	mov	r0, r3
 8002efc:	f00a fdfb 	bl	800daf6 <memset>

  /** Supply configuration update enable
   */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002f00:	2002      	movs	r0, #2
 8002f02:	f002 fbdd 	bl	80056c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002f06:	2300      	movs	r3, #0
 8002f08:	603b      	str	r3, [r7, #0]
 8002f0a:	4b29      	ldr	r3, [pc, #164]	@ (8002fb0 <SystemClock_Config+0xd0>)
 8002f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0e:	4a28      	ldr	r2, [pc, #160]	@ (8002fb0 <SystemClock_Config+0xd0>)
 8002f10:	f023 0301 	bic.w	r3, r3, #1
 8002f14:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002f16:	4b26      	ldr	r3, [pc, #152]	@ (8002fb0 <SystemClock_Config+0xd0>)
 8002f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	4b24      	ldr	r3, [pc, #144]	@ (8002fb4 <SystemClock_Config+0xd4>)
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002f28:	4a22      	ldr	r2, [pc, #136]	@ (8002fb4 <SystemClock_Config+0xd4>)
 8002f2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f2e:	6193      	str	r3, [r2, #24]
 8002f30:	4b20      	ldr	r3, [pc, #128]	@ (8002fb4 <SystemClock_Config+0xd4>)
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002f38:	603b      	str	r3, [r7, #0]
 8002f3a:	683b      	ldr	r3, [r7, #0]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8002f3c:	bf00      	nop
 8002f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb4 <SystemClock_Config+0xd4>)
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f4a:	d1f8      	bne.n	8002f3e <SystemClock_Config+0x5e>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002f50:	2301      	movs	r3, #1
 8002f52:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f54:	2340      	movs	r3, #64	@ 0x40
 8002f56:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002f5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f60:	4618      	mov	r0, r3
 8002f62:	f002 fbe7 	bl	8005734 <HAL_RCC_OscConfig>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <SystemClock_Config+0x90>
    Error_Handler();
 8002f6c:	f000 fc62 	bl	8003834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8002f70:	233f      	movs	r3, #63	@ 0x3f
 8002f72:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |
                                RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002f74:	2300      	movs	r3, #0
 8002f76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002f84:	2340      	movs	r3, #64	@ 0x40
 8002f86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002f88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f8c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002f92:	1d3b      	adds	r3, r7, #4
 8002f94:	2101      	movs	r1, #1
 8002f96:	4618      	mov	r0, r3
 8002f98:	f003 f826 	bl	8005fe8 <HAL_RCC_ClockConfig>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <SystemClock_Config+0xc6>
    Error_Handler();
 8002fa2:	f000 fc47 	bl	8003834 <Error_Handler>
  }
}
 8002fa6:	bf00      	nop
 8002fa8:	3770      	adds	r7, #112	@ 0x70
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	58000400 	.word	0x58000400
 8002fb4:	58024800 	.word	0x58024800

08002fb8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800302c <MX_I2C1_Init+0x74>)
 8002fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8003030 <MX_I2C1_Init+0x78>)
 8002fc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8002fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800302c <MX_I2C1_Init+0x74>)
 8002fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8003034 <MX_I2C1_Init+0x7c>)
 8002fc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002fc8:	4b18      	ldr	r3, [pc, #96]	@ (800302c <MX_I2C1_Init+0x74>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fce:	4b17      	ldr	r3, [pc, #92]	@ (800302c <MX_I2C1_Init+0x74>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fd4:	4b15      	ldr	r3, [pc, #84]	@ (800302c <MX_I2C1_Init+0x74>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002fda:	4b14      	ldr	r3, [pc, #80]	@ (800302c <MX_I2C1_Init+0x74>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002fe0:	4b12      	ldr	r3, [pc, #72]	@ (800302c <MX_I2C1_Init+0x74>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fe6:	4b11      	ldr	r3, [pc, #68]	@ (800302c <MX_I2C1_Init+0x74>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fec:	4b0f      	ldr	r3, [pc, #60]	@ (800302c <MX_I2C1_Init+0x74>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002ff2:	480e      	ldr	r0, [pc, #56]	@ (800302c <MX_I2C1_Init+0x74>)
 8002ff4:	f001 fc28 	bl	8004848 <HAL_I2C_Init>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <MX_I2C1_Init+0x4a>
    Error_Handler();
 8002ffe:	f000 fc19 	bl	8003834 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8003002:	2100      	movs	r1, #0
 8003004:	4809      	ldr	r0, [pc, #36]	@ (800302c <MX_I2C1_Init+0x74>)
 8003006:	f002 fac3 	bl	8005590 <HAL_I2CEx_ConfigAnalogFilter>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <MX_I2C1_Init+0x5c>
    Error_Handler();
 8003010:	f000 fc10 	bl	8003834 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8003014:	2100      	movs	r1, #0
 8003016:	4805      	ldr	r0, [pc, #20]	@ (800302c <MX_I2C1_Init+0x74>)
 8003018:	f002 fb05 	bl	8005626 <HAL_I2CEx_ConfigDigitalFilter>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <MX_I2C1_Init+0x6e>
    Error_Handler();
 8003022:	f000 fc07 	bl	8003834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	240000a4 	.word	0x240000a4
 8003030:	40005400 	.word	0x40005400
 8003034:	00707cbb 	.word	0x00707cbb

08003038 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8003038:	b580      	push	{r7, lr}
 800303a:	b09a      	sub	sp, #104	@ 0x68
 800303c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800303e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	605a      	str	r2, [r3, #4]
 8003048:	609a      	str	r2, [r3, #8]
 800304a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800304c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003058:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	60da      	str	r2, [r3, #12]
 8003066:	611a      	str	r2, [r3, #16]
 8003068:	615a      	str	r2, [r3, #20]
 800306a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800306c:	1d3b      	adds	r3, r7, #4
 800306e:	222c      	movs	r2, #44	@ 0x2c
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f00a fd3f 	bl	800daf6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003078:	4b4f      	ldr	r3, [pc, #316]	@ (80031b8 <MX_TIM1_Init+0x180>)
 800307a:	4a50      	ldr	r2, [pc, #320]	@ (80031bc <MX_TIM1_Init+0x184>)
 800307c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800307e:	4b4e      	ldr	r3, [pc, #312]	@ (80031b8 <MX_TIM1_Init+0x180>)
 8003080:	2200      	movs	r2, #0
 8003082:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003084:	4b4c      	ldr	r3, [pc, #304]	@ (80031b8 <MX_TIM1_Init+0x180>)
 8003086:	2200      	movs	r2, #0
 8003088:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800308a:	4b4b      	ldr	r3, [pc, #300]	@ (80031b8 <MX_TIM1_Init+0x180>)
 800308c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003090:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003092:	4b49      	ldr	r3, [pc, #292]	@ (80031b8 <MX_TIM1_Init+0x180>)
 8003094:	2200      	movs	r2, #0
 8003096:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003098:	4b47      	ldr	r3, [pc, #284]	@ (80031b8 <MX_TIM1_Init+0x180>)
 800309a:	2200      	movs	r2, #0
 800309c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800309e:	4b46      	ldr	r3, [pc, #280]	@ (80031b8 <MX_TIM1_Init+0x180>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80030a4:	4844      	ldr	r0, [pc, #272]	@ (80031b8 <MX_TIM1_Init+0x180>)
 80030a6:	f005 f999 	bl	80083dc <HAL_TIM_Base_Init>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_TIM1_Init+0x7c>
    Error_Handler();
 80030b0:	f000 fbc0 	bl	8003834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030b8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80030ba:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80030be:	4619      	mov	r1, r3
 80030c0:	483d      	ldr	r0, [pc, #244]	@ (80031b8 <MX_TIM1_Init+0x180>)
 80030c2:	f005 fde7 	bl	8008c94 <HAL_TIM_ConfigClockSource>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <MX_TIM1_Init+0x98>
    Error_Handler();
 80030cc:	f000 fbb2 	bl	8003834 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80030d0:	4839      	ldr	r0, [pc, #228]	@ (80031b8 <MX_TIM1_Init+0x180>)
 80030d2:	f005 fa53 	bl	800857c <HAL_TIM_PWM_Init>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <MX_TIM1_Init+0xa8>
    Error_Handler();
 80030dc:	f000 fbaa 	bl	8003834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030e0:	2300      	movs	r3, #0
 80030e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80030e4:	2300      	movs	r3, #0
 80030e6:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030e8:	2300      	movs	r3, #0
 80030ea:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 80030ec:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80030f0:	4619      	mov	r1, r3
 80030f2:	4831      	ldr	r0, [pc, #196]	@ (80031b8 <MX_TIM1_Init+0x180>)
 80030f4:	f006 fb28 	bl	8009748 <HAL_TIMEx_MasterConfigSynchronization>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <MX_TIM1_Init+0xca>
    Error_Handler();
 80030fe:	f000 fb99 	bl	8003834 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003102:	2360      	movs	r3, #96	@ 0x60
 8003104:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8003106:	2300      	movs	r3, #0
 8003108:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800310a:	2300      	movs	r3, #0
 800310c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800310e:	2300      	movs	r3, #0
 8003110:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003112:	2300      	movs	r3, #0
 8003114:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003116:	2300      	movs	r3, #0
 8003118:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800311a:	2300      	movs	r3, #0
 800311c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800311e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003122:	2200      	movs	r2, #0
 8003124:	4619      	mov	r1, r3
 8003126:	4824      	ldr	r0, [pc, #144]	@ (80031b8 <MX_TIM1_Init+0x180>)
 8003128:	f005 fca0 	bl	8008a6c <HAL_TIM_PWM_ConfigChannel>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <MX_TIM1_Init+0xfe>
    Error_Handler();
 8003132:	f000 fb7f 	bl	8003834 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8003136:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800313a:	2204      	movs	r2, #4
 800313c:	4619      	mov	r1, r3
 800313e:	481e      	ldr	r0, [pc, #120]	@ (80031b8 <MX_TIM1_Init+0x180>)
 8003140:	f005 fc94 	bl	8008a6c <HAL_TIM_PWM_ConfigChannel>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <MX_TIM1_Init+0x116>
    Error_Handler();
 800314a:	f000 fb73 	bl	8003834 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 800314e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003152:	2208      	movs	r2, #8
 8003154:	4619      	mov	r1, r3
 8003156:	4818      	ldr	r0, [pc, #96]	@ (80031b8 <MX_TIM1_Init+0x180>)
 8003158:	f005 fc88 	bl	8008a6c <HAL_TIM_PWM_ConfigChannel>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <MX_TIM1_Init+0x12e>
    Error_Handler();
 8003162:	f000 fb67 	bl	8003834 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003166:	2300      	movs	r3, #0
 8003168:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800316a:	2300      	movs	r3, #0
 800316c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800317a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800317e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003184:	2300      	movs	r3, #0
 8003186:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003188:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800318c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003192:	2300      	movs	r3, #0
 8003194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8003196:	1d3b      	adds	r3, r7, #4
 8003198:	4619      	mov	r1, r3
 800319a:	4807      	ldr	r0, [pc, #28]	@ (80031b8 <MX_TIM1_Init+0x180>)
 800319c:	f006 fb62 	bl	8009864 <HAL_TIMEx_ConfigBreakDeadTime>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <MX_TIM1_Init+0x172>
    Error_Handler();
 80031a6:	f000 fb45 	bl	8003834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80031aa:	4803      	ldr	r0, [pc, #12]	@ (80031b8 <MX_TIM1_Init+0x180>)
 80031ac:	f000 fcde 	bl	8003b6c <HAL_TIM_MspPostInit>
}
 80031b0:	bf00      	nop
 80031b2:	3768      	adds	r7, #104	@ 0x68
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	240000f8 	.word	0x240000f8
 80031bc:	40010000 	.word	0x40010000

080031c0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031c4:	4b22      	ldr	r3, [pc, #136]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 80031c6:	4a23      	ldr	r2, [pc, #140]	@ (8003254 <MX_USART1_UART_Init+0x94>)
 80031c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80031ca:	4b21      	ldr	r3, [pc, #132]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 80031cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80031d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 80031da:	2200      	movs	r2, #0
 80031dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031de:	4b1c      	ldr	r3, [pc, #112]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 80031e6:	220c      	movs	r2, #12
 80031e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ea:	4b19      	ldr	r3, [pc, #100]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031f0:	4b17      	ldr	r3, [pc, #92]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031f6:	4b16      	ldr	r3, [pc, #88]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031fc:	4b14      	ldr	r3, [pc, #80]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 80031fe:	2200      	movs	r2, #0
 8003200:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003202:	4b13      	ldr	r3, [pc, #76]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 8003204:	2200      	movs	r2, #0
 8003206:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 8003208:	4811      	ldr	r0, [pc, #68]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 800320a:	f006 fbc7 	bl	800999c <HAL_UART_Init>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <MX_USART1_UART_Init+0x58>
    Error_Handler();
 8003214:	f000 fb0e 	bl	8003834 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) !=
 8003218:	2100      	movs	r1, #0
 800321a:	480d      	ldr	r0, [pc, #52]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 800321c:	f007 fbcf 	bl	800a9be <HAL_UARTEx_SetTxFifoThreshold>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <MX_USART1_UART_Init+0x6a>
      HAL_OK) {
    Error_Handler();
 8003226:	f000 fb05 	bl	8003834 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) !=
 800322a:	2100      	movs	r1, #0
 800322c:	4808      	ldr	r0, [pc, #32]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 800322e:	f007 fc04 	bl	800aa3a <HAL_UARTEx_SetRxFifoThreshold>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <MX_USART1_UART_Init+0x7c>
      HAL_OK) {
    Error_Handler();
 8003238:	f000 fafc 	bl	8003834 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 800323c:	4804      	ldr	r0, [pc, #16]	@ (8003250 <MX_USART1_UART_Init+0x90>)
 800323e:	f007 fb85 	bl	800a94c <HAL_UARTEx_DisableFifoMode>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <MX_USART1_UART_Init+0x8c>
    Error_Handler();
 8003248:	f000 faf4 	bl	8003834 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 800324c:	bf00      	nop
 800324e:	bd80      	pop	{r7, pc}
 8003250:	24000144 	.word	0x24000144
 8003254:	40011000 	.word	0x40011000

08003258 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003258:	b580      	push	{r7, lr}
 800325a:	b08c      	sub	sp, #48	@ 0x30
 800325c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325e:	f107 031c 	add.w	r3, r7, #28
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	605a      	str	r2, [r3, #4]
 8003268:	609a      	str	r2, [r3, #8]
 800326a:	60da      	str	r2, [r3, #12]
 800326c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800326e:	4b58      	ldr	r3, [pc, #352]	@ (80033d0 <MX_GPIO_Init+0x178>)
 8003270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003274:	4a56      	ldr	r2, [pc, #344]	@ (80033d0 <MX_GPIO_Init+0x178>)
 8003276:	f043 0320 	orr.w	r3, r3, #32
 800327a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800327e:	4b54      	ldr	r3, [pc, #336]	@ (80033d0 <MX_GPIO_Init+0x178>)
 8003280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	61bb      	str	r3, [r7, #24]
 800328a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800328c:	4b50      	ldr	r3, [pc, #320]	@ (80033d0 <MX_GPIO_Init+0x178>)
 800328e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003292:	4a4f      	ldr	r2, [pc, #316]	@ (80033d0 <MX_GPIO_Init+0x178>)
 8003294:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003298:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800329c:	4b4c      	ldr	r3, [pc, #304]	@ (80033d0 <MX_GPIO_Init+0x178>)
 800329e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032aa:	4b49      	ldr	r3, [pc, #292]	@ (80033d0 <MX_GPIO_Init+0x178>)
 80032ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032b0:	4a47      	ldr	r2, [pc, #284]	@ (80033d0 <MX_GPIO_Init+0x178>)
 80032b2:	f043 0302 	orr.w	r3, r3, #2
 80032b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032ba:	4b45      	ldr	r3, [pc, #276]	@ (80033d0 <MX_GPIO_Init+0x178>)
 80032bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032c8:	4b41      	ldr	r3, [pc, #260]	@ (80033d0 <MX_GPIO_Init+0x178>)
 80032ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032ce:	4a40      	ldr	r2, [pc, #256]	@ (80033d0 <MX_GPIO_Init+0x178>)
 80032d0:	f043 0308 	orr.w	r3, r3, #8
 80032d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032d8:	4b3d      	ldr	r3, [pc, #244]	@ (80033d0 <MX_GPIO_Init+0x178>)
 80032da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e6:	4b3a      	ldr	r3, [pc, #232]	@ (80033d0 <MX_GPIO_Init+0x178>)
 80032e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032ec:	4a38      	ldr	r2, [pc, #224]	@ (80033d0 <MX_GPIO_Init+0x178>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032f6:	4b36      	ldr	r3, [pc, #216]	@ (80033d0 <MX_GPIO_Init+0x178>)
 80032f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003304:	4b32      	ldr	r3, [pc, #200]	@ (80033d0 <MX_GPIO_Init+0x178>)
 8003306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800330a:	4a31      	ldr	r2, [pc, #196]	@ (80033d0 <MX_GPIO_Init+0x178>)
 800330c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003310:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003314:	4b2e      	ldr	r3, [pc, #184]	@ (80033d0 <MX_GPIO_Init+0x178>)
 8003316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800331a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800331e:	607b      	str	r3, [r7, #4]
 8003320:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7 | GPIO_PIN_9, GPIO_PIN_RESET);
 8003322:	2200      	movs	r2, #0
 8003324:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8003328:	482a      	ldr	r0, [pc, #168]	@ (80033d4 <MX_GPIO_Init+0x17c>)
 800332a:	f001 fa73 	bl	8004814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13 | GPIO_PIN_2, GPIO_PIN_RESET);
 800332e:	2200      	movs	r2, #0
 8003330:	f242 0104 	movw	r1, #8196	@ 0x2004
 8003334:	4828      	ldr	r0, [pc, #160]	@ (80033d8 <MX_GPIO_Init+0x180>)
 8003336:	f001 fa6d 	bl	8004814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 800333a:	2200      	movs	r2, #0
 800333c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003340:	4826      	ldr	r0, [pc, #152]	@ (80033dc <MX_GPIO_Init+0x184>)
 8003342:	f001 fa67 	bl	8004814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8003346:	2200      	movs	r2, #0
 8003348:	2140      	movs	r1, #64	@ 0x40
 800334a:	4825      	ldr	r0, [pc, #148]	@ (80033e0 <MX_GPIO_Init+0x188>)
 800334c:	f001 fa62 	bl	8004814 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF7 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_9;
 8003350:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8003354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003356:	2301      	movs	r3, #1
 8003358:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335a:	2300      	movs	r3, #0
 800335c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335e:	2300      	movs	r3, #0
 8003360:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003362:	f107 031c 	add.w	r3, r7, #28
 8003366:	4619      	mov	r1, r3
 8003368:	481a      	ldr	r0, [pc, #104]	@ (80033d4 <MX_GPIO_Init+0x17c>)
 800336a:	f001 f8a3 	bl	80044b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_2;
 800336e:	f242 0304 	movw	r3, #8196	@ 0x2004
 8003372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003374:	2301      	movs	r3, #1
 8003376:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003378:	2300      	movs	r3, #0
 800337a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337c:	2300      	movs	r3, #0
 800337e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003380:	f107 031c 	add.w	r3, r7, #28
 8003384:	4619      	mov	r1, r3
 8003386:	4814      	ldr	r0, [pc, #80]	@ (80033d8 <MX_GPIO_Init+0x180>)
 8003388:	f001 f894 	bl	80044b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800338c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003392:	2301      	movs	r3, #1
 8003394:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003396:	2300      	movs	r3, #0
 8003398:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339a:	2300      	movs	r3, #0
 800339c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800339e:	f107 031c 	add.w	r3, r7, #28
 80033a2:	4619      	mov	r1, r3
 80033a4:	480d      	ldr	r0, [pc, #52]	@ (80033dc <MX_GPIO_Init+0x184>)
 80033a6:	f001 f885 	bl	80044b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80033aa:	2340      	movs	r3, #64	@ 0x40
 80033ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033ae:	2301      	movs	r3, #1
 80033b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b6:	2300      	movs	r3, #0
 80033b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ba:	f107 031c 	add.w	r3, r7, #28
 80033be:	4619      	mov	r1, r3
 80033c0:	4807      	ldr	r0, [pc, #28]	@ (80033e0 <MX_GPIO_Init+0x188>)
 80033c2:	f001 f877 	bl	80044b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80033c6:	bf00      	nop
 80033c8:	3730      	adds	r7, #48	@ 0x30
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	58024400 	.word	0x58024400
 80033d4:	58021400 	.word	0x58021400
 80033d8:	58020c00 	.word	0x58020c00
 80033dc:	58021800 	.word	0x58021800
 80033e0:	58020400 	.word	0x58020400
 80033e4:	00000000 	.word	0x00000000

080033e8 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b0f6      	sub	sp, #472	@ 0x1d8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80033f2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80033f6:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80033f8:	2100      	movs	r1, #0
 80033fa:	48bf      	ldr	r0, [pc, #764]	@ (80036f8 <StartDefaultTask+0x310>)
 80033fc:	f005 f920 	bl	8008640 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003400:	2104      	movs	r1, #4
 8003402:	48bd      	ldr	r0, [pc, #756]	@ (80036f8 <StartDefaultTask+0x310>)
 8003404:	f005 f91c 	bl	8008640 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003408:	2108      	movs	r1, #8
 800340a:	48bb      	ldr	r0, [pc, #748]	@ (80036f8 <StartDefaultTask+0x310>)
 800340c:	f005 f918 	bl	8008640 <HAL_TIM_PWM_Start>
  uint32_t arr = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8003410:	4bb9      	ldr	r3, [pc, #740]	@ (80036f8 <StartDefaultTask+0x310>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003416:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  struct bno055_accel_t accel = {0};
 800341a:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	809a      	strh	r2, [r3, #4]
  struct bno055_gyro_t gyro = {0};
 8003424:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	809a      	strh	r2, [r3, #4]
  struct bno055_mag_t mag = {0};
 800342e:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	809a      	strh	r2, [r3, #4]
  float a[3] = {0};
 8003438:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	609a      	str	r2, [r3, #8]
  float g[3] = {0};
 8003444:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	605a      	str	r2, [r3, #4]
 800344e:	609a      	str	r2, [r3, #8]
  float m[3] = {0};
 8003450:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	609a      	str	r2, [r3, #8]
  float P_est[6][6] = {0};
 800345c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8003460:	2290      	movs	r2, #144	@ 0x90
 8003462:	2100      	movs	r1, #0
 8003464:	4618      	mov	r0, r3
 8003466:	f00a fb46 	bl	800daf6 <memset>
  Kalman k = {0};
 800346a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800346e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003472:	4618      	mov	r0, r3
 8003474:	23c0      	movs	r3, #192	@ 0xc0
 8003476:	461a      	mov	r2, r3
 8003478:	2100      	movs	r1, #0
 800347a:	f00a fb3c 	bl	800daf6 <memset>
  init_kalman(&k);
 800347e:	f107 0320 	add.w	r3, r7, #32
 8003482:	4618      	mov	r0, r3
 8003484:	f7fd fc88 	bl	8000d98 <init_kalman>
  const float DUTY_MAX = 0.25f;
 8003488:	f04f 537a 	mov.w	r3, #1048576000	@ 0x3e800000
 800348c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  struct bno055_t bno;
  bno.dev_addr = BNO_ADDR;
 8003490:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003494:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003498:	2250      	movs	r2, #80	@ 0x50
 800349a:	725a      	strb	r2, [r3, #9]
  bno.bus_read = bno055_i2c_read;
 800349c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80034a0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80034a4:	4a95      	ldr	r2, [pc, #596]	@ (80036fc <StartDefaultTask+0x314>)
 80034a6:	611a      	str	r2, [r3, #16]
  bno.bus_write = bno055_i2c_write;
 80034a8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80034ac:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80034b0:	4a93      	ldr	r2, [pc, #588]	@ (8003700 <StartDefaultTask+0x318>)
 80034b2:	60da      	str	r2, [r3, #12]
  bno.delay_msec = osDelay;
 80034b4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80034b8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80034bc:	4a91      	ldr	r2, [pc, #580]	@ (8003704 <StartDefaultTask+0x31c>)
 80034be:	615a      	str	r2, [r3, #20]

  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 80034c0:	2200      	movs	r2, #0
 80034c2:	2180      	movs	r1, #128	@ 0x80
 80034c4:	4890      	ldr	r0, [pc, #576]	@ (8003708 <StartDefaultTask+0x320>)
 80034c6:	f001 f9a5 	bl	8004814 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET);
 80034ca:	2201      	movs	r2, #1
 80034cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80034d0:	488d      	ldr	r0, [pc, #564]	@ (8003708 <StartDefaultTask+0x320>)
 80034d2:	f001 f99f 	bl	8004814 <HAL_GPIO_WritePin>

  // Change TCA9548A(I2C Mux) to channel 0 for MPU config
  tca_ch(MPU6050_CH);
 80034d6:	2001      	movs	r0, #1
 80034d8:	f7ff fbdc 	bl	8002c94 <tca_ch>
  mpuBegin(&hi2c1);
 80034dc:	488b      	ldr	r0, [pc, #556]	@ (800370c <StartDefaultTask+0x324>)
 80034de:	f000 fa51 	bl	8003984 <mpuBegin>

  // Change Mux to channel 1 for BNO config
  tca_ch(BNO055_CH);
 80034e2:	2002      	movs	r0, #2
 80034e4:	f7ff fbd6 	bl	8002c94 <tca_ch>
  bno055_init(&bno);
 80034e8:	f107 0308 	add.w	r3, r7, #8
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fd f8dd 	bl	80006ac <bno055_init>
  bno055_set_operation_mode(BNO055_OPERATION_MODE_AMG);
 80034f2:	2007      	movs	r0, #7
 80034f4:	f7fd fb88 	bl	8000c08 <bno055_set_operation_mode>

  for (;;) {
    static TickType_t last_wake = 0;
    TickType_t now = xTaskGetTickCount();
 80034f8:	f008 fe20 	bl	800c13c <xTaskGetTickCount>
 80034fc:	f8c7 01c8 	str.w	r0, [r7, #456]	@ 0x1c8

    if (last_wake == 0) {
 8003500:	4b83      	ldr	r3, [pc, #524]	@ (8003710 <StartDefaultTask+0x328>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d103      	bne.n	8003510 <StartDefaultTask+0x128>
      last_wake = now;
 8003508:	4a81      	ldr	r2, [pc, #516]	@ (8003710 <StartDefaultTask+0x328>)
 800350a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800350e:	6013      	str	r3, [r2, #0]
    }
    TickType_t diff_ticks = now - last_wake;
 8003510:	4b7f      	ldr	r3, [pc, #508]	@ (8003710 <StartDefaultTask+0x328>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
    last_wake = now;
 800351e:	4a7c      	ldr	r2, [pc, #496]	@ (8003710 <StartDefaultTask+0x328>)
 8003520:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003524:	6013      	str	r3, [r2, #0]

    float dt = diff_ticks * (1.0f / configTICK_RATE_HZ);
 8003526:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800352a:	ee07 3a90 	vmov	s15, r3
 800352e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003532:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8003714 <StartDefaultTask+0x32c>
 8003536:	ee67 7a87 	vmul.f32	s15, s15, s14
 800353a:	edc7 7a70 	vstr	s15, [r7, #448]	@ 0x1c0
    k.dt = dt;
 800353e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003542:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003546:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 800354a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

    bno055_read_accel_xyz(&accel);
 800354e:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8003552:	4618      	mov	r0, r3
 8003554:	f7fd f9d8 	bl	8000908 <bno055_read_accel_xyz>
    bno055_read_gyro_xyz(&gyro);
 8003558:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 800355c:	4618      	mov	r0, r3
 800355e:	f7fd faa7 	bl	8000ab0 <bno055_read_gyro_xyz>
    bno055_read_mag_xyz(&mag);
 8003562:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8003566:	4618      	mov	r0, r3
 8003568:	f7fd fa38 	bl	80009dc <bno055_read_mag_xyz>
    a[0] = (float)accel.x / 100.0f, a[1] = (float)accel.y / 100.0f,
 800356c:	f9b7 31a4 	ldrsh.w	r3, [r7, #420]	@ 0x1a4
 8003570:	ee07 3a90 	vmov	s15, r3
 8003574:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003578:	eddf 6a67 	vldr	s13, [pc, #412]	@ 8003718 <StartDefaultTask+0x330>
 800357c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003580:	edc7 7a62 	vstr	s15, [r7, #392]	@ 0x188
 8003584:	f9b7 31a6 	ldrsh.w	r3, [r7, #422]	@ 0x1a6
 8003588:	ee07 3a90 	vmov	s15, r3
 800358c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003590:	eddf 6a61 	vldr	s13, [pc, #388]	@ 8003718 <StartDefaultTask+0x330>
 8003594:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003598:	edc7 7a63 	vstr	s15, [r7, #396]	@ 0x18c
    a[2] = (float)accel.z / 100.0f;
 800359c:	f9b7 31a8 	ldrsh.w	r3, [r7, #424]	@ 0x1a8
 80035a0:	ee07 3a90 	vmov	s15, r3
 80035a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035a8:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8003718 <StartDefaultTask+0x330>
 80035ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035b0:	edc7 7a64 	vstr	s15, [r7, #400]	@ 0x190
    g[0] = gyro.x,
 80035b4:	f9b7 319c 	ldrsh.w	r3, [r7, #412]	@ 0x19c
 80035b8:	ee07 3a90 	vmov	s15, r3
 80035bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035c0:	edc7 7a5f 	vstr	s15, [r7, #380]	@ 0x17c
    g[1] = gyro.y,
 80035c4:	f9b7 319e 	ldrsh.w	r3, [r7, #414]	@ 0x19e
 80035c8:	ee07 3a90 	vmov	s15, r3
 80035cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035d0:	edc7 7a60 	vstr	s15, [r7, #384]	@ 0x180
    g[2] = gyro.z;
 80035d4:	f9b7 31a0 	ldrsh.w	r3, [r7, #416]	@ 0x1a0
 80035d8:	ee07 3a90 	vmov	s15, r3
 80035dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035e0:	edc7 7a61 	vstr	s15, [r7, #388]	@ 0x184
    m[0] = mag.x / 16.0f, m[1] = mag.y / 16.0f, m[2] = mag.z / 16.0f;
 80035e4:	f9b7 3194 	ldrsh.w	r3, [r7, #404]	@ 0x194
 80035e8:	ee07 3a90 	vmov	s15, r3
 80035ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035f0:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80035f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035f8:	edc7 7a5c 	vstr	s15, [r7, #368]	@ 0x170
 80035fc:	f9b7 3196 	ldrsh.w	r3, [r7, #406]	@ 0x196
 8003600:	ee07 3a90 	vmov	s15, r3
 8003604:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003608:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800360c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003610:	edc7 7a5d 	vstr	s15, [r7, #372]	@ 0x174
 8003614:	f9b7 3198 	ldrsh.w	r3, [r7, #408]	@ 0x198
 8003618:	ee07 3a90 	vmov	s15, r3
 800361c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003620:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8003624:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003628:	edc7 7a5e 	vstr	s15, [r7, #376]	@ 0x178
    kalman_predict(&k, g, P_est);
 800362c:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8003630:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 8003634:	f107 0320 	add.w	r3, r7, #32
 8003638:	4618      	mov	r0, r3
 800363a:	f7fd ff34 	bl	80014a6 <kalman_predict>
    kalman_correction(&k, a, m, P_est);
 800363e:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8003642:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8003646:	f507 71c4 	add.w	r1, r7, #392	@ 0x188
 800364a:	f107 0020 	add.w	r0, r7, #32
 800364e:	f7fe fb0f 	bl	8001c70 <kalman_correction>

    float psi = quat_to_yaw(k.q);
 8003652:	f107 0320 	add.w	r3, r7, #32
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff fb80 	bl	8002d5c <quat_to_yaw>
 800365c:	ed87 0a6f 	vstr	s0, [r7, #444]	@ 0x1bc
    float epsi = wrap_pi(psi - 1);
 8003660:	edd7 7a6f 	vldr	s15, [r7, #444]	@ 0x1bc
 8003664:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003668:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800366c:	eeb0 0a67 	vmov.f32	s0, s15
 8003670:	f7ff fbbe 	bl	8002df0 <wrap_pi>
 8003674:	ed87 0a6e 	vstr	s0, [r7, #440]	@ 0x1b8
    float wz = g[2] - k.b[2];
 8003678:	ed97 7a61 	vldr	s14, [r7, #388]	@ 0x184
 800367c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003680:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003684:	edd3 7a06 	vldr	s15, [r3, #24]
 8003688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800368c:	edc7 7a6d 	vstr	s15, [r7, #436]	@ 0x1b4

    float tau = -.004 * epsi - .004 * wz;
 8003690:	edd7 7a6e 	vldr	s15, [r7, #440]	@ 0x1b8
 8003694:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003698:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 80036e8 <StartDefaultTask+0x300>
 800369c:	ee27 6b06 	vmul.f64	d6, d7, d6
 80036a0:	edd7 7a6d 	vldr	s15, [r7, #436]	@ 0x1b4
 80036a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80036a8:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 80036f0 <StartDefaultTask+0x308>
 80036ac:	ee27 7b05 	vmul.f64	d7, d7, d5
 80036b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80036b4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80036b8:	edc7 7a6c 	vstr	s15, [r7, #432]	@ 0x1b0
    if (tau > 0) {
 80036bc:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 80036c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c8:	dd28      	ble.n	800371c <StartDefaultTask+0x334>
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 80036ca:	2200      	movs	r2, #0
 80036cc:	2180      	movs	r1, #128	@ 0x80
 80036ce:	480e      	ldr	r0, [pc, #56]	@ (8003708 <StartDefaultTask+0x320>)
 80036d0:	f001 f8a0 	bl	8004814 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET);
 80036d4:	2201      	movs	r2, #1
 80036d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80036da:	480b      	ldr	r0, [pc, #44]	@ (8003708 <StartDefaultTask+0x320>)
 80036dc:	f001 f89a 	bl	8004814 <HAL_GPIO_WritePin>
 80036e0:	e02e      	b.n	8003740 <StartDefaultTask+0x358>
 80036e2:	bf00      	nop
 80036e4:	f3af 8000 	nop.w
 80036e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80036ec:	bf70624d 	.word	0xbf70624d
 80036f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80036f4:	3f70624d 	.word	0x3f70624d
 80036f8:	240000f8 	.word	0x240000f8
 80036fc:	08002cbd 	.word	0x08002cbd
 8003700:	08002d0d 	.word	0x08002d0d
 8003704:	0800af21 	.word	0x0800af21
 8003708:	58021400 	.word	0x58021400
 800370c:	240000a4 	.word	0x240000a4
 8003710:	240001dc 	.word	0x240001dc
 8003714:	3a83126f 	.word	0x3a83126f
 8003718:	42c80000 	.word	0x42c80000
    } else if (tau < 0) {
 800371c:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8003720:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003728:	d50a      	bpl.n	8003740 <StartDefaultTask+0x358>
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_SET);
 800372a:	2201      	movs	r2, #1
 800372c:	2180      	movs	r1, #128	@ 0x80
 800372e:	4820      	ldr	r0, [pc, #128]	@ (80037b0 <StartDefaultTask+0x3c8>)
 8003730:	f001 f870 	bl	8004814 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_RESET);
 8003734:	2200      	movs	r2, #0
 8003736:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800373a:	481d      	ldr	r0, [pc, #116]	@ (80037b0 <StartDefaultTask+0x3c8>)
 800373c:	f001 f86a 	bl	8004814 <HAL_GPIO_WritePin>
    }

    float duty = fabsf(tau);
 8003740:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8003744:	eef0 7ae7 	vabs.f32	s15, s15
 8003748:	edc7 7a75 	vstr	s15, [r7, #468]	@ 0x1d4

    if (duty < 0.0f)
 800374c:	edd7 7a75 	vldr	s15, [r7, #468]	@ 0x1d4
 8003750:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003758:	d503      	bpl.n	8003762 <StartDefaultTask+0x37a>
      duty = 0.0f;
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
    if (duty > DUTY_MAX)
 8003762:	ed97 7a75 	vldr	s14, [r7, #468]	@ 0x1d4
 8003766:	edd7 7a73 	vldr	s15, [r7, #460]	@ 0x1cc
 800376a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800376e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003772:	dd03      	ble.n	800377c <StartDefaultTask+0x394>
      duty = DUTY_MAX;
 8003774:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003778:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4

    uint32_t pulse = (uint32_t)((arr + 1) * duty);
 800377c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003780:	3301      	adds	r3, #1
 8003782:	ee07 3a90 	vmov	s15, r3
 8003786:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800378a:	edd7 7a75 	vldr	s15, [r7, #468]	@ 0x1d4
 800378e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003796:	ee17 3a90 	vmov	r3, s15
 800379a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse);
 800379e:	4b05      	ldr	r3, [pc, #20]	@ (80037b4 <StartDefaultTask+0x3cc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 80037a6:	63da      	str	r2, [r3, #60]	@ 0x3c
    osDelay(1);
 80037a8:	2001      	movs	r0, #1
 80037aa:	f007 fbb9 	bl	800af20 <osDelay>
  for (;;) {
 80037ae:	e6a3      	b.n	80034f8 <StartDefaultTask+0x110>
 80037b0:	58021400 	.word	0x58021400
 80037b4:	240000f8 	.word	0x240000f8

080037b8 <MPU_Config>:
  /* USER CODE END 5 */
}

/* MPU Configuration */

void MPU_Config(void) {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80037be:	463b      	mov	r3, r7
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	609a      	str	r2, [r3, #8]
 80037c8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80037ca:	f000 fdfb 	bl	80043c4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
   */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80037ce:	2301      	movs	r3, #1
 80037d0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80037d2:	2300      	movs	r3, #0
 80037d4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80037da:	231f      	movs	r3, #31
 80037dc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80037de:	2387      	movs	r3, #135	@ 0x87
 80037e0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80037e2:	2300      	movs	r3, #0
 80037e4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80037e6:	2300      	movs	r3, #0
 80037e8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80037ea:	2301      	movs	r3, #1
 80037ec:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80037ee:	2301      	movs	r3, #1
 80037f0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80037f2:	2300      	movs	r3, #0
 80037f4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80037f6:	2300      	movs	r3, #0
 80037f8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80037fa:	463b      	mov	r3, r7
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fe19 	bl	8004434 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003802:	2004      	movs	r0, #4
 8003804:	f000 fdf6 	bl	80043f4 <HAL_MPU_Enable>
}
 8003808:	bf00      	nop
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a04      	ldr	r2, [pc, #16]	@ (8003830 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d101      	bne.n	8003826 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003822:	f000 fc9f 	bl	8004164 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40001400 	.word	0x40001400

08003834 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003838:	b672      	cpsid	i
}
 800383a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
    return;
 800383c:	bf00      	nop
  }
  /* USER CODE END Error_Handler_Debug */
}
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
	...

08003848 <setMPUFilterBandwidth>:

static const uint8_t MPU6050_ADDR = 0x68 << 1; // Use 8-bit address
I2C_HandleTypeDef *mpuPort;

void setMPUFilterBandwidth(mpu6050_bandwidth_t bw)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af04      	add	r7, sp, #16
 800384e:	4603      	mov	r3, r0
 8003850:	71fb      	strb	r3, [r7, #7]
	uint8_t a = bw;
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(mpuPort, MPU6050_ADDR, MPU6050_RA_CONF, 1, &a, 1,
 8003856:	4b0a      	ldr	r3, [pc, #40]	@ (8003880 <setMPUFilterBandwidth+0x38>)
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	23d0      	movs	r3, #208	@ 0xd0
 800385c:	4619      	mov	r1, r3
 800385e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003862:	9302      	str	r3, [sp, #8]
 8003864:	2301      	movs	r3, #1
 8003866:	9301      	str	r3, [sp, #4]
 8003868:	f107 030f 	add.w	r3, r7, #15
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	2301      	movs	r3, #1
 8003870:	221a      	movs	r2, #26
 8003872:	f001 f99d 	bl	8004bb0 <HAL_I2C_Mem_Write>
					  HAL_MAX_DELAY);
}
 8003876:	bf00      	nop
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	240001e8 	.word	0x240001e8

08003884 <setMPUAccelRange>:

void setMPUAccelRange(mpu6050_accel_range_t accel_range)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b088      	sub	sp, #32
 8003888:	af04      	add	r7, sp, #16
 800388a:	4603      	mov	r3, r0
 800388c:	71fb      	strb	r3, [r7, #7]
	uint8_t a = accel_range << 3;
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	b2db      	uxtb	r3, r3
 8003894:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(mpuPort, MPU6050_ADDR, MPU6050_RA_ACCEL_CONF, 1, &a, 1,
 8003896:	4b18      	ldr	r3, [pc, #96]	@ (80038f8 <setMPUAccelRange+0x74>)
 8003898:	6818      	ldr	r0, [r3, #0]
 800389a:	23d0      	movs	r3, #208	@ 0xd0
 800389c:	4619      	mov	r1, r3
 800389e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038a2:	9302      	str	r3, [sp, #8]
 80038a4:	2301      	movs	r3, #1
 80038a6:	9301      	str	r3, [sp, #4]
 80038a8:	f107 030f 	add.w	r3, r7, #15
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	2301      	movs	r3, #1
 80038b0:	221c      	movs	r2, #28
 80038b2:	f001 f97d 	bl	8004bb0 <HAL_I2C_Mem_Write>
					  HAL_MAX_DELAY);
	if (accel_range == MPU6050_RANGE_16_G)
 80038b6:	79fb      	ldrb	r3, [r7, #7]
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	d103      	bne.n	80038c4 <setMPUAccelRange+0x40>
		mpu_accel_scale = 2048;
 80038bc:	4b0f      	ldr	r3, [pc, #60]	@ (80038fc <setMPUAccelRange+0x78>)
 80038be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038c2:	801a      	strh	r2, [r3, #0]
	if (accel_range == MPU6050_RANGE_8_G)
 80038c4:	79fb      	ldrb	r3, [r7, #7]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d103      	bne.n	80038d2 <setMPUAccelRange+0x4e>
		mpu_accel_scale = 4096;
 80038ca:	4b0c      	ldr	r3, [pc, #48]	@ (80038fc <setMPUAccelRange+0x78>)
 80038cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80038d0:	801a      	strh	r2, [r3, #0]
	if (accel_range == MPU6050_RANGE_4_G)
 80038d2:	79fb      	ldrb	r3, [r7, #7]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d103      	bne.n	80038e0 <setMPUAccelRange+0x5c>
		mpu_accel_scale = 8192;
 80038d8:	4b08      	ldr	r3, [pc, #32]	@ (80038fc <setMPUAccelRange+0x78>)
 80038da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80038de:	801a      	strh	r2, [r3, #0]
	if (accel_range == MPU6050_RANGE_2_G)
 80038e0:	79fb      	ldrb	r3, [r7, #7]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d103      	bne.n	80038ee <setMPUAccelRange+0x6a>
		mpu_accel_scale = 16384;
 80038e6:	4b05      	ldr	r3, [pc, #20]	@ (80038fc <setMPUAccelRange+0x78>)
 80038e8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80038ec:	801a      	strh	r2, [r3, #0]
}
 80038ee:	bf00      	nop
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	240001e8 	.word	0x240001e8
 80038fc:	240001e0 	.word	0x240001e0

08003900 <setMPUGyroRange>:

void setMPUGyroRange(mpu6050_gyro_range_t gyro_range)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af04      	add	r7, sp, #16
 8003906:	4603      	mov	r3, r0
 8003908:	71fb      	strb	r3, [r7, #7]
	uint8_t a = gyro_range << 3;
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	b2db      	uxtb	r3, r3
 8003910:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(mpuPort, MPU6050_ADDR, MPU6050_RA_GYRO_CONF, 1, &a, 1,
 8003912:	4b16      	ldr	r3, [pc, #88]	@ (800396c <setMPUGyroRange+0x6c>)
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	23d0      	movs	r3, #208	@ 0xd0
 8003918:	4619      	mov	r1, r3
 800391a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800391e:	9302      	str	r3, [sp, #8]
 8003920:	2301      	movs	r3, #1
 8003922:	9301      	str	r3, [sp, #4]
 8003924:	f107 030f 	add.w	r3, r7, #15
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	2301      	movs	r3, #1
 800392c:	221b      	movs	r2, #27
 800392e:	f001 f93f 	bl	8004bb0 <HAL_I2C_Mem_Write>
					  HAL_MAX_DELAY);
	if (gyro_range == MPU6050_RANGE_250_DEG)
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d102      	bne.n	800393e <setMPUGyroRange+0x3e>
		mpu_gyro_scale = 131;
 8003938:	4b0d      	ldr	r3, [pc, #52]	@ (8003970 <setMPUGyroRange+0x70>)
 800393a:	4a0e      	ldr	r2, [pc, #56]	@ (8003974 <setMPUGyroRange+0x74>)
 800393c:	601a      	str	r2, [r3, #0]
	if (gyro_range == MPU6050_RANGE_500_DEG)
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d102      	bne.n	800394a <setMPUGyroRange+0x4a>
		mpu_gyro_scale = 65.5;
 8003944:	4b0a      	ldr	r3, [pc, #40]	@ (8003970 <setMPUGyroRange+0x70>)
 8003946:	4a0c      	ldr	r2, [pc, #48]	@ (8003978 <setMPUGyroRange+0x78>)
 8003948:	601a      	str	r2, [r3, #0]
	if (gyro_range == MPU6050_RANGE_1000_DEG)
 800394a:	79fb      	ldrb	r3, [r7, #7]
 800394c:	2b02      	cmp	r3, #2
 800394e:	d102      	bne.n	8003956 <setMPUGyroRange+0x56>
		mpu_gyro_scale = 32.8;
 8003950:	4b07      	ldr	r3, [pc, #28]	@ (8003970 <setMPUGyroRange+0x70>)
 8003952:	4a0a      	ldr	r2, [pc, #40]	@ (800397c <setMPUGyroRange+0x7c>)
 8003954:	601a      	str	r2, [r3, #0]
	if (gyro_range == MPU6050_RANGE_2000_DEG)
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	2b03      	cmp	r3, #3
 800395a:	d102      	bne.n	8003962 <setMPUGyroRange+0x62>
		mpu_gyro_scale = 16.4;
 800395c:	4b04      	ldr	r3, [pc, #16]	@ (8003970 <setMPUGyroRange+0x70>)
 800395e:	4a08      	ldr	r2, [pc, #32]	@ (8003980 <setMPUGyroRange+0x80>)
 8003960:	601a      	str	r2, [r3, #0]
}
 8003962:	bf00      	nop
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	240001e8 	.word	0x240001e8
 8003970:	240001e4 	.word	0x240001e4
 8003974:	43030000 	.word	0x43030000
 8003978:	42830000 	.word	0x42830000
 800397c:	42033333 	.word	0x42033333
 8003980:	41833333 	.word	0x41833333

08003984 <mpuBegin>:

uint8_t mpuBegin(I2C_HandleTypeDef *i2cdev)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af04      	add	r7, sp, #16
 800398a:	6078      	str	r0, [r7, #4]
	mpuPort = i2cdev;
 800398c:	4a21      	ldr	r2, [pc, #132]	@ (8003a14 <mpuBegin+0x90>)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6013      	str	r3, [r2, #0]
	uint8_t a = 0;
 8003992:	2300      	movs	r3, #0
 8003994:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 8003996:	2064      	movs	r0, #100	@ 0x64
 8003998:	f000 fc04 	bl	80041a4 <HAL_Delay>
	HAL_I2C_Mem_Write(mpuPort, MPU6050_ADDR, MPU6050_RA_PWR_MGMT_1, 1, &a, 1,
 800399c:	4b1d      	ldr	r3, [pc, #116]	@ (8003a14 <mpuBegin+0x90>)
 800399e:	6818      	ldr	r0, [r3, #0]
 80039a0:	23d0      	movs	r3, #208	@ 0xd0
 80039a2:	4619      	mov	r1, r3
 80039a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80039a8:	9302      	str	r3, [sp, #8]
 80039aa:	2301      	movs	r3, #1
 80039ac:	9301      	str	r3, [sp, #4]
 80039ae:	f107 030f 	add.w	r3, r7, #15
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	2301      	movs	r3, #1
 80039b6:	226b      	movs	r2, #107	@ 0x6b
 80039b8:	f001 f8fa 	bl	8004bb0 <HAL_I2C_Mem_Write>
					  HAL_MAX_DELAY);
	HAL_Delay(50);
 80039bc:	2032      	movs	r0, #50	@ 0x32
 80039be:	f000 fbf1 	bl	80041a4 <HAL_Delay>
	HAL_I2C_Mem_Read(mpuPort, MPU6050_ADDR, MPU6050_RA_WHO_AM_I, 1, &a, 1,
 80039c2:	4b14      	ldr	r3, [pc, #80]	@ (8003a14 <mpuBegin+0x90>)
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	23d0      	movs	r3, #208	@ 0xd0
 80039c8:	4619      	mov	r1, r3
 80039ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80039ce:	9302      	str	r3, [sp, #8]
 80039d0:	2301      	movs	r3, #1
 80039d2:	9301      	str	r3, [sp, #4]
 80039d4:	f107 030f 	add.w	r3, r7, #15
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	2301      	movs	r3, #1
 80039dc:	2275      	movs	r2, #117	@ 0x75
 80039de:	f001 f9fb 	bl	8004dd8 <HAL_I2C_Mem_Read>
					 HAL_MAX_DELAY);
	HAL_Delay(100);
 80039e2:	2064      	movs	r0, #100	@ 0x64
 80039e4:	f000 fbde 	bl	80041a4 <HAL_Delay>

	if (a == MPU6050_DEVICE_ID || a == MPU6500_DEVICE_ID)
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	2b68      	cmp	r3, #104	@ 0x68
 80039ec:	d002      	beq.n	80039f4 <mpuBegin+0x70>
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	2b70      	cmp	r3, #112	@ 0x70
 80039f2:	d10a      	bne.n	8003a0a <mpuBegin+0x86>
	{
		setMPUFilterBandwidth(MPU6050_BAND_260_HZ);
 80039f4:	2000      	movs	r0, #0
 80039f6:	f7ff ff27 	bl	8003848 <setMPUFilterBandwidth>
		setMPUAccelRange(MPU6050_RANGE_2_G);
 80039fa:	2000      	movs	r0, #0
 80039fc:	f7ff ff42 	bl	8003884 <setMPUAccelRange>
		setMPUGyroRange(MPU6050_RANGE_500_DEG);
 8003a00:	2001      	movs	r0, #1
 8003a02:	f7ff ff7d 	bl	8003900 <setMPUGyroRange>
		return 1;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <mpuBegin+0x88>
	}
	else
		return 0;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	240001e8 	.word	0x240001e8

08003a18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a50 <HAL_MspInit+0x38>)
 8003a20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a24:	4a0a      	ldr	r2, [pc, #40]	@ (8003a50 <HAL_MspInit+0x38>)
 8003a26:	f043 0302 	orr.w	r3, r3, #2
 8003a2a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003a2e:	4b08      	ldr	r3, [pc, #32]	@ (8003a50 <HAL_MspInit+0x38>)
 8003a30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	607b      	str	r3, [r7, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	210f      	movs	r1, #15
 8003a40:	f06f 0001 	mvn.w	r0, #1
 8003a44:	f000 fc96 	bl	8004374 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	58024400 	.word	0x58024400

08003a54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b0ba      	sub	sp, #232	@ 0xe8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a5c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	605a      	str	r2, [r3, #4]
 8003a66:	609a      	str	r2, [r3, #8]
 8003a68:	60da      	str	r2, [r3, #12]
 8003a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a6c:	f107 0310 	add.w	r3, r7, #16
 8003a70:	22c0      	movs	r2, #192	@ 0xc0
 8003a72:	2100      	movs	r1, #0
 8003a74:	4618      	mov	r0, r3
 8003a76:	f00a f83e 	bl	800daf6 <memset>
  if(hi2c->Instance==I2C1)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a27      	ldr	r2, [pc, #156]	@ (8003b1c <HAL_I2C_MspInit+0xc8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d146      	bne.n	8003b12 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003a84:	f04f 0208 	mov.w	r2, #8
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003a90:	2300      	movs	r3, #0
 8003a92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a96:	f107 0310 	add.w	r3, r7, #16
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f002 fe72 	bl	8006784 <HAL_RCCEx_PeriphCLKConfig>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003aa6:	f7ff fec5 	bl	8003834 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8003b20 <HAL_I2C_MspInit+0xcc>)
 8003aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8003b20 <HAL_I2C_MspInit+0xcc>)
 8003ab2:	f043 0302 	orr.w	r3, r3, #2
 8003ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003aba:	4b19      	ldr	r3, [pc, #100]	@ (8003b20 <HAL_I2C_MspInit+0xcc>)
 8003abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003ac8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003acc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ad0:	2312      	movs	r3, #18
 8003ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003adc:	2300      	movs	r3, #0
 8003ade:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ae2:	2304      	movs	r3, #4
 8003ae4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ae8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003aec:	4619      	mov	r1, r3
 8003aee:	480d      	ldr	r0, [pc, #52]	@ (8003b24 <HAL_I2C_MspInit+0xd0>)
 8003af0:	f000 fce0 	bl	80044b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003af4:	4b0a      	ldr	r3, [pc, #40]	@ (8003b20 <HAL_I2C_MspInit+0xcc>)
 8003af6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003afa:	4a09      	ldr	r2, [pc, #36]	@ (8003b20 <HAL_I2C_MspInit+0xcc>)
 8003afc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003b00:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003b04:	4b06      	ldr	r3, [pc, #24]	@ (8003b20 <HAL_I2C_MspInit+0xcc>)
 8003b06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b0e:	60bb      	str	r3, [r7, #8]
 8003b10:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003b12:	bf00      	nop
 8003b14:	37e8      	adds	r7, #232	@ 0xe8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40005400 	.word	0x40005400
 8003b20:	58024400 	.word	0x58024400
 8003b24:	58020400 	.word	0x58020400

08003b28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a0b      	ldr	r2, [pc, #44]	@ (8003b64 <HAL_TIM_Base_MspInit+0x3c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d10e      	bne.n	8003b58 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b68 <HAL_TIM_Base_MspInit+0x40>)
 8003b3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b40:	4a09      	ldr	r2, [pc, #36]	@ (8003b68 <HAL_TIM_Base_MspInit+0x40>)
 8003b42:	f043 0301 	orr.w	r3, r3, #1
 8003b46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b4a:	4b07      	ldr	r3, [pc, #28]	@ (8003b68 <HAL_TIM_Base_MspInit+0x40>)
 8003b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003b58:	bf00      	nop
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	40010000 	.word	0x40010000
 8003b68:	58024400 	.word	0x58024400

08003b6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b088      	sub	sp, #32
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b74:	f107 030c 	add.w	r3, r7, #12
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	60da      	str	r2, [r3, #12]
 8003b82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a13      	ldr	r2, [pc, #76]	@ (8003bd8 <HAL_TIM_MspPostInit+0x6c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d11f      	bne.n	8003bce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b8e:	4b13      	ldr	r3, [pc, #76]	@ (8003bdc <HAL_TIM_MspPostInit+0x70>)
 8003b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b94:	4a11      	ldr	r2, [pc, #68]	@ (8003bdc <HAL_TIM_MspPostInit+0x70>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8003bdc <HAL_TIM_MspPostInit+0x70>)
 8003ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003bac:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8003bb0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bc2:	f107 030c 	add.w	r3, r7, #12
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4805      	ldr	r0, [pc, #20]	@ (8003be0 <HAL_TIM_MspPostInit+0x74>)
 8003bca:	f000 fc73 	bl	80044b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003bce:	bf00      	nop
 8003bd0:	3720      	adds	r7, #32
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40010000 	.word	0x40010000
 8003bdc:	58024400 	.word	0x58024400
 8003be0:	58020000 	.word	0x58020000

08003be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b0ba      	sub	sp, #232	@ 0xe8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	605a      	str	r2, [r3, #4]
 8003bf6:	609a      	str	r2, [r3, #8]
 8003bf8:	60da      	str	r2, [r3, #12]
 8003bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bfc:	f107 0310 	add.w	r3, r7, #16
 8003c00:	22c0      	movs	r2, #192	@ 0xc0
 8003c02:	2100      	movs	r1, #0
 8003c04:	4618      	mov	r0, r3
 8003c06:	f009 ff76 	bl	800daf6 <memset>
  if(huart->Instance==USART1)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a27      	ldr	r2, [pc, #156]	@ (8003cac <HAL_UART_MspInit+0xc8>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d146      	bne.n	8003ca2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003c14:	f04f 0201 	mov.w	r2, #1
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003c20:	2300      	movs	r3, #0
 8003c22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c26:	f107 0310 	add.w	r3, r7, #16
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f002 fdaa 	bl	8006784 <HAL_RCCEx_PeriphCLKConfig>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003c36:	f7ff fdfd 	bl	8003834 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8003cb0 <HAL_UART_MspInit+0xcc>)
 8003c3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c40:	4a1b      	ldr	r2, [pc, #108]	@ (8003cb0 <HAL_UART_MspInit+0xcc>)
 8003c42:	f043 0310 	orr.w	r3, r3, #16
 8003c46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003c4a:	4b19      	ldr	r3, [pc, #100]	@ (8003cb0 <HAL_UART_MspInit+0xcc>)
 8003c4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c50:	f003 0310 	and.w	r3, r3, #16
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c58:	4b15      	ldr	r3, [pc, #84]	@ (8003cb0 <HAL_UART_MspInit+0xcc>)
 8003c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c5e:	4a14      	ldr	r2, [pc, #80]	@ (8003cb0 <HAL_UART_MspInit+0xcc>)
 8003c60:	f043 0302 	orr.w	r3, r3, #2
 8003c64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c68:	4b11      	ldr	r3, [pc, #68]	@ (8003cb0 <HAL_UART_MspInit+0xcc>)
 8003c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	60bb      	str	r3, [r7, #8]
 8003c74:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003c76:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003c7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7e:	2302      	movs	r3, #2
 8003c80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c84:	2300      	movs	r3, #0
 8003c86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003c90:	2304      	movs	r3, #4
 8003c92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c96:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	4805      	ldr	r0, [pc, #20]	@ (8003cb4 <HAL_UART_MspInit+0xd0>)
 8003c9e:	f000 fc09 	bl	80044b4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8003ca2:	bf00      	nop
 8003ca4:	37e8      	adds	r7, #232	@ 0xe8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40011000 	.word	0x40011000
 8003cb0:	58024400 	.word	0x58024400
 8003cb4:	58020400 	.word	0x58020400

08003cb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b090      	sub	sp, #64	@ 0x40
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b0f      	cmp	r3, #15
 8003cc4:	d827      	bhi.n	8003d16 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	2037      	movs	r0, #55	@ 0x37
 8003ccc:	f000 fb52 	bl	8004374 <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003cd0:	2037      	movs	r0, #55	@ 0x37
 8003cd2:	f000 fb69 	bl	80043a8 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8003cd6:	4a29      	ldr	r2, [pc, #164]	@ (8003d7c <HAL_InitTick+0xc4>)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003cdc:	4b28      	ldr	r3, [pc, #160]	@ (8003d80 <HAL_InitTick+0xc8>)
 8003cde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ce2:	4a27      	ldr	r2, [pc, #156]	@ (8003d80 <HAL_InitTick+0xc8>)
 8003ce4:	f043 0320 	orr.w	r3, r3, #32
 8003ce8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003cec:	4b24      	ldr	r3, [pc, #144]	@ (8003d80 <HAL_InitTick+0xc8>)
 8003cee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003cfa:	f107 0210 	add.w	r2, r7, #16
 8003cfe:	f107 0314 	add.w	r3, r7, #20
 8003d02:	4611      	mov	r1, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f002 fcfb 	bl	8006700 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d106      	bne.n	8003d22 <HAL_InitTick+0x6a>
 8003d14:	e001      	b.n	8003d1a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e02b      	b.n	8003d72 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003d1a:	f002 fcc5 	bl	80066a8 <HAL_RCC_GetPCLK1Freq>
 8003d1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8003d20:	e004      	b.n	8003d2c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003d22:	f002 fcc1 	bl	80066a8 <HAL_RCC_GetPCLK1Freq>
 8003d26:	4603      	mov	r3, r0
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003d2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d2e:	4a15      	ldr	r2, [pc, #84]	@ (8003d84 <HAL_InitTick+0xcc>)
 8003d30:	fba2 2303 	umull	r2, r3, r2, r3
 8003d34:	0c9b      	lsrs	r3, r3, #18
 8003d36:	3b01      	subs	r3, #1
 8003d38:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8003d3a:	4b13      	ldr	r3, [pc, #76]	@ (8003d88 <HAL_InitTick+0xd0>)
 8003d3c:	4a13      	ldr	r2, [pc, #76]	@ (8003d8c <HAL_InitTick+0xd4>)
 8003d3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8003d40:	4b11      	ldr	r3, [pc, #68]	@ (8003d88 <HAL_InitTick+0xd0>)
 8003d42:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003d46:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8003d48:	4a0f      	ldr	r2, [pc, #60]	@ (8003d88 <HAL_InitTick+0xd0>)
 8003d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d4c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8003d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d88 <HAL_InitTick+0xd0>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d54:	4b0c      	ldr	r3, [pc, #48]	@ (8003d88 <HAL_InitTick+0xd0>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8003d5a:	480b      	ldr	r0, [pc, #44]	@ (8003d88 <HAL_InitTick+0xd0>)
 8003d5c:	f004 fb3e 	bl	80083dc <HAL_TIM_Base_Init>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d104      	bne.n	8003d70 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8003d66:	4808      	ldr	r0, [pc, #32]	@ (8003d88 <HAL_InitTick+0xd0>)
 8003d68:	f004 fb90 	bl	800848c <HAL_TIM_Base_Start_IT>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	e000      	b.n	8003d72 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3740      	adds	r7, #64	@ 0x40
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	24000008 	.word	0x24000008
 8003d80:	58024400 	.word	0x58024400
 8003d84:	431bde83 	.word	0x431bde83
 8003d88:	240001ec 	.word	0x240001ec
 8003d8c:	40001400 	.word	0x40001400

08003d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003d94:	bf00      	nop
 8003d96:	e7fd      	b.n	8003d94 <NMI_Handler+0x4>

08003d98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d9c:	bf00      	nop
 8003d9e:	e7fd      	b.n	8003d9c <HardFault_Handler+0x4>

08003da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003da4:	bf00      	nop
 8003da6:	e7fd      	b.n	8003da4 <MemManage_Handler+0x4>

08003da8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dac:	bf00      	nop
 8003dae:	e7fd      	b.n	8003dac <BusFault_Handler+0x4>

08003db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003db4:	bf00      	nop
 8003db6:	e7fd      	b.n	8003db4 <UsageFault_Handler+0x4>

08003db8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dbc:	bf00      	nop
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
	...

08003dc8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003dcc:	4802      	ldr	r0, [pc, #8]	@ (8003dd8 <TIM7_IRQHandler+0x10>)
 8003dce:	f004 fd45 	bl	800885c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	240001ec 	.word	0x240001ec

08003ddc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	e00a      	b.n	8003e04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003dee:	f3af 8000 	nop.w
 8003df2:	4601      	mov	r1, r0
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	60ba      	str	r2, [r7, #8]
 8003dfa:	b2ca      	uxtb	r2, r1
 8003dfc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	3301      	adds	r3, #1
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	dbf0      	blt.n	8003dee <_read+0x12>
  }

  return len;
 8003e0c:	687b      	ldr	r3, [r7, #4]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b086      	sub	sp, #24
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	60f8      	str	r0, [r7, #12]
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	e009      	b.n	8003e3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	60ba      	str	r2, [r7, #8]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	dbf1      	blt.n	8003e28 <_write+0x12>
  }
  return len;
 8003e44:	687b      	ldr	r3, [r7, #4]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <_close>:

int _close(int file)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e76:	605a      	str	r2, [r3, #4]
  return 0;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <_isatty>:

int _isatty(int file)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e8e:	2301      	movs	r3, #1
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
	...

08003eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ec0:	4a14      	ldr	r2, [pc, #80]	@ (8003f14 <_sbrk+0x5c>)
 8003ec2:	4b15      	ldr	r3, [pc, #84]	@ (8003f18 <_sbrk+0x60>)
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ecc:	4b13      	ldr	r3, [pc, #76]	@ (8003f1c <_sbrk+0x64>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d102      	bne.n	8003eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ed4:	4b11      	ldr	r3, [pc, #68]	@ (8003f1c <_sbrk+0x64>)
 8003ed6:	4a12      	ldr	r2, [pc, #72]	@ (8003f20 <_sbrk+0x68>)
 8003ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003eda:	4b10      	ldr	r3, [pc, #64]	@ (8003f1c <_sbrk+0x64>)
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d207      	bcs.n	8003ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ee8:	f009 feb2 	bl	800dc50 <__errno>
 8003eec:	4603      	mov	r3, r0
 8003eee:	220c      	movs	r2, #12
 8003ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ef2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ef6:	e009      	b.n	8003f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ef8:	4b08      	ldr	r3, [pc, #32]	@ (8003f1c <_sbrk+0x64>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003efe:	4b07      	ldr	r3, [pc, #28]	@ (8003f1c <_sbrk+0x64>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4413      	add	r3, r2
 8003f06:	4a05      	ldr	r2, [pc, #20]	@ (8003f1c <_sbrk+0x64>)
 8003f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	24080000 	.word	0x24080000
 8003f18:	00000400 	.word	0x00000400
 8003f1c:	24000238 	.word	0x24000238
 8003f20:	24004d88 	.word	0x24004d88

08003f24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f28:	4b43      	ldr	r3, [pc, #268]	@ (8004038 <SystemInit+0x114>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2e:	4a42      	ldr	r2, [pc, #264]	@ (8004038 <SystemInit+0x114>)
 8003f30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f38:	4b40      	ldr	r3, [pc, #256]	@ (800403c <SystemInit+0x118>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 030f 	and.w	r3, r3, #15
 8003f40:	2b06      	cmp	r3, #6
 8003f42:	d807      	bhi.n	8003f54 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f44:	4b3d      	ldr	r3, [pc, #244]	@ (800403c <SystemInit+0x118>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f023 030f 	bic.w	r3, r3, #15
 8003f4c:	4a3b      	ldr	r2, [pc, #236]	@ (800403c <SystemInit+0x118>)
 8003f4e:	f043 0307 	orr.w	r3, r3, #7
 8003f52:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003f54:	4b3a      	ldr	r3, [pc, #232]	@ (8004040 <SystemInit+0x11c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a39      	ldr	r2, [pc, #228]	@ (8004040 <SystemInit+0x11c>)
 8003f5a:	f043 0301 	orr.w	r3, r3, #1
 8003f5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003f60:	4b37      	ldr	r3, [pc, #220]	@ (8004040 <SystemInit+0x11c>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003f66:	4b36      	ldr	r3, [pc, #216]	@ (8004040 <SystemInit+0x11c>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	4935      	ldr	r1, [pc, #212]	@ (8004040 <SystemInit+0x11c>)
 8003f6c:	4b35      	ldr	r3, [pc, #212]	@ (8004044 <SystemInit+0x120>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f72:	4b32      	ldr	r3, [pc, #200]	@ (800403c <SystemInit+0x118>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d007      	beq.n	8003f8e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f7e:	4b2f      	ldr	r3, [pc, #188]	@ (800403c <SystemInit+0x118>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f023 030f 	bic.w	r3, r3, #15
 8003f86:	4a2d      	ldr	r2, [pc, #180]	@ (800403c <SystemInit+0x118>)
 8003f88:	f043 0307 	orr.w	r3, r3, #7
 8003f8c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003f8e:	4b2c      	ldr	r3, [pc, #176]	@ (8004040 <SystemInit+0x11c>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003f94:	4b2a      	ldr	r3, [pc, #168]	@ (8004040 <SystemInit+0x11c>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003f9a:	4b29      	ldr	r3, [pc, #164]	@ (8004040 <SystemInit+0x11c>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003fa0:	4b27      	ldr	r3, [pc, #156]	@ (8004040 <SystemInit+0x11c>)
 8003fa2:	4a29      	ldr	r2, [pc, #164]	@ (8004048 <SystemInit+0x124>)
 8003fa4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003fa6:	4b26      	ldr	r3, [pc, #152]	@ (8004040 <SystemInit+0x11c>)
 8003fa8:	4a28      	ldr	r2, [pc, #160]	@ (800404c <SystemInit+0x128>)
 8003faa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003fac:	4b24      	ldr	r3, [pc, #144]	@ (8004040 <SystemInit+0x11c>)
 8003fae:	4a28      	ldr	r2, [pc, #160]	@ (8004050 <SystemInit+0x12c>)
 8003fb0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003fb2:	4b23      	ldr	r3, [pc, #140]	@ (8004040 <SystemInit+0x11c>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003fb8:	4b21      	ldr	r3, [pc, #132]	@ (8004040 <SystemInit+0x11c>)
 8003fba:	4a25      	ldr	r2, [pc, #148]	@ (8004050 <SystemInit+0x12c>)
 8003fbc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003fbe:	4b20      	ldr	r3, [pc, #128]	@ (8004040 <SystemInit+0x11c>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003fc4:	4b1e      	ldr	r3, [pc, #120]	@ (8004040 <SystemInit+0x11c>)
 8003fc6:	4a22      	ldr	r2, [pc, #136]	@ (8004050 <SystemInit+0x12c>)
 8003fc8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003fca:	4b1d      	ldr	r3, [pc, #116]	@ (8004040 <SystemInit+0x11c>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8004040 <SystemInit+0x11c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a1a      	ldr	r2, [pc, #104]	@ (8004040 <SystemInit+0x11c>)
 8003fd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003fdc:	4b18      	ldr	r3, [pc, #96]	@ (8004040 <SystemInit+0x11c>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8004054 <SystemInit+0x130>)
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8004058 <SystemInit+0x134>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fee:	d202      	bcs.n	8003ff6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800405c <SystemInit+0x138>)
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8003ff6:	4b12      	ldr	r3, [pc, #72]	@ (8004040 <SystemInit+0x11c>)
 8003ff8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003ffc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d113      	bne.n	800402c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8004004:	4b0e      	ldr	r3, [pc, #56]	@ (8004040 <SystemInit+0x11c>)
 8004006:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800400a:	4a0d      	ldr	r2, [pc, #52]	@ (8004040 <SystemInit+0x11c>)
 800400c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004010:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004014:	4b12      	ldr	r3, [pc, #72]	@ (8004060 <SystemInit+0x13c>)
 8004016:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800401a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800401c:	4b08      	ldr	r3, [pc, #32]	@ (8004040 <SystemInit+0x11c>)
 800401e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004022:	4a07      	ldr	r2, [pc, #28]	@ (8004040 <SystemInit+0x11c>)
 8004024:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004028:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800402c:	bf00      	nop
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	e000ed00 	.word	0xe000ed00
 800403c:	52002000 	.word	0x52002000
 8004040:	58024400 	.word	0x58024400
 8004044:	eaf6ed7f 	.word	0xeaf6ed7f
 8004048:	02020200 	.word	0x02020200
 800404c:	01ff0000 	.word	0x01ff0000
 8004050:	01010280 	.word	0x01010280
 8004054:	5c001000 	.word	0x5c001000
 8004058:	ffff0000 	.word	0xffff0000
 800405c:	51008108 	.word	0x51008108
 8004060:	52004000 	.word	0x52004000

08004064 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8004068:	4b09      	ldr	r3, [pc, #36]	@ (8004090 <ExitRun0Mode+0x2c>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	4a08      	ldr	r2, [pc, #32]	@ (8004090 <ExitRun0Mode+0x2c>)
 800406e:	f043 0302 	orr.w	r3, r3, #2
 8004072:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8004074:	bf00      	nop
 8004076:	4b06      	ldr	r3, [pc, #24]	@ (8004090 <ExitRun0Mode+0x2c>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0f9      	beq.n	8004076 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8004082:	bf00      	nop
 8004084:	bf00      	nop
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	58024800 	.word	0x58024800

08004094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004094:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80040d0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8004098:	f7ff ffe4 	bl	8004064 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800409c:	f7ff ff42 	bl	8003f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040a0:	480c      	ldr	r0, [pc, #48]	@ (80040d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80040a2:	490d      	ldr	r1, [pc, #52]	@ (80040d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80040a4:	4a0d      	ldr	r2, [pc, #52]	@ (80040dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80040a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040a8:	e002      	b.n	80040b0 <LoopCopyDataInit>

080040aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040ae:	3304      	adds	r3, #4

080040b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040b4:	d3f9      	bcc.n	80040aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040b6:	4a0a      	ldr	r2, [pc, #40]	@ (80040e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80040b8:	4c0a      	ldr	r4, [pc, #40]	@ (80040e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80040ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040bc:	e001      	b.n	80040c2 <LoopFillZerobss>

080040be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040c0:	3204      	adds	r2, #4

080040c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040c4:	d3fb      	bcc.n	80040be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040c6:	f009 fdc9 	bl	800dc5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040ca:	f7fe fedd 	bl	8002e88 <main>
  bx  lr
 80040ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80040d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80040d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80040d8:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 80040dc:	0800faa8 	.word	0x0800faa8
  ldr r2, =_sbss
 80040e0:	24000084 	.word	0x24000084
  ldr r4, =_ebss
 80040e4:	24004d88 	.word	0x24004d88

080040e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040e8:	e7fe      	b.n	80040e8 <ADC3_IRQHandler>
	...

080040ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040f2:	2003      	movs	r0, #3
 80040f4:	f000 f933 	bl	800435e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040f8:	f002 f92c 	bl	8006354 <HAL_RCC_GetSysClockFreq>
 80040fc:	4602      	mov	r2, r0
 80040fe:	4b15      	ldr	r3, [pc, #84]	@ (8004154 <HAL_Init+0x68>)
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	0a1b      	lsrs	r3, r3, #8
 8004104:	f003 030f 	and.w	r3, r3, #15
 8004108:	4913      	ldr	r1, [pc, #76]	@ (8004158 <HAL_Init+0x6c>)
 800410a:	5ccb      	ldrb	r3, [r1, r3]
 800410c:	f003 031f 	and.w	r3, r3, #31
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
 8004114:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004116:	4b0f      	ldr	r3, [pc, #60]	@ (8004154 <HAL_Init+0x68>)
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	4a0e      	ldr	r2, [pc, #56]	@ (8004158 <HAL_Init+0x6c>)
 8004120:	5cd3      	ldrb	r3, [r2, r3]
 8004122:	f003 031f 	and.w	r3, r3, #31
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	fa22 f303 	lsr.w	r3, r2, r3
 800412c:	4a0b      	ldr	r2, [pc, #44]	@ (800415c <HAL_Init+0x70>)
 800412e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004130:	4a0b      	ldr	r2, [pc, #44]	@ (8004160 <HAL_Init+0x74>)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004136:	200f      	movs	r0, #15
 8004138:	f7ff fdbe 	bl	8003cb8 <HAL_InitTick>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e002      	b.n	800414c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004146:	f7ff fc67 	bl	8003a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	58024400 	.word	0x58024400
 8004158:	0800f81c 	.word	0x0800f81c
 800415c:	24000004 	.word	0x24000004
 8004160:	24000000 	.word	0x24000000

08004164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004168:	4b06      	ldr	r3, [pc, #24]	@ (8004184 <HAL_IncTick+0x20>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	4b06      	ldr	r3, [pc, #24]	@ (8004188 <HAL_IncTick+0x24>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4413      	add	r3, r2
 8004174:	4a04      	ldr	r2, [pc, #16]	@ (8004188 <HAL_IncTick+0x24>)
 8004176:	6013      	str	r3, [r2, #0]
}
 8004178:	bf00      	nop
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	2400000c 	.word	0x2400000c
 8004188:	2400023c 	.word	0x2400023c

0800418c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  return uwTick;
 8004190:	4b03      	ldr	r3, [pc, #12]	@ (80041a0 <HAL_GetTick+0x14>)
 8004192:	681b      	ldr	r3, [r3, #0]
}
 8004194:	4618      	mov	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	2400023c 	.word	0x2400023c

080041a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041ac:	f7ff ffee 	bl	800418c <HAL_GetTick>
 80041b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041bc:	d005      	beq.n	80041ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041be:	4b0a      	ldr	r3, [pc, #40]	@ (80041e8 <HAL_Delay+0x44>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4413      	add	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041ca:	bf00      	nop
 80041cc:	f7ff ffde 	bl	800418c <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d8f7      	bhi.n	80041cc <HAL_Delay+0x28>
  {
  }
}
 80041dc:	bf00      	nop
 80041de:	bf00      	nop
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	2400000c 	.word	0x2400000c

080041ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80041f0:	4b03      	ldr	r3, [pc, #12]	@ (8004200 <HAL_GetREVID+0x14>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	0c1b      	lsrs	r3, r3, #16
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	5c001000 	.word	0x5c001000

08004204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004214:	4b0b      	ldr	r3, [pc, #44]	@ (8004244 <__NVIC_SetPriorityGrouping+0x40>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004220:	4013      	ands	r3, r2
 8004222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800422c:	4b06      	ldr	r3, [pc, #24]	@ (8004248 <__NVIC_SetPriorityGrouping+0x44>)
 800422e:	4313      	orrs	r3, r2
 8004230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004232:	4a04      	ldr	r2, [pc, #16]	@ (8004244 <__NVIC_SetPriorityGrouping+0x40>)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	60d3      	str	r3, [r2, #12]
}
 8004238:	bf00      	nop
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	e000ed00 	.word	0xe000ed00
 8004248:	05fa0000 	.word	0x05fa0000

0800424c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004250:	4b04      	ldr	r3, [pc, #16]	@ (8004264 <__NVIC_GetPriorityGrouping+0x18>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	0a1b      	lsrs	r3, r3, #8
 8004256:	f003 0307 	and.w	r3, r3, #7
}
 800425a:	4618      	mov	r0, r3
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	e000ed00 	.word	0xe000ed00

08004268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	4603      	mov	r3, r0
 8004270:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004276:	2b00      	cmp	r3, #0
 8004278:	db0b      	blt.n	8004292 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800427a:	88fb      	ldrh	r3, [r7, #6]
 800427c:	f003 021f 	and.w	r2, r3, #31
 8004280:	4907      	ldr	r1, [pc, #28]	@ (80042a0 <__NVIC_EnableIRQ+0x38>)
 8004282:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	2001      	movs	r0, #1
 800428a:	fa00 f202 	lsl.w	r2, r0, r2
 800428e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	e000e100 	.word	0xe000e100

080042a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	4603      	mov	r3, r0
 80042ac:	6039      	str	r1, [r7, #0]
 80042ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80042b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	db0a      	blt.n	80042ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	490c      	ldr	r1, [pc, #48]	@ (80042f0 <__NVIC_SetPriority+0x4c>)
 80042be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042c2:	0112      	lsls	r2, r2, #4
 80042c4:	b2d2      	uxtb	r2, r2
 80042c6:	440b      	add	r3, r1
 80042c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042cc:	e00a      	b.n	80042e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	4908      	ldr	r1, [pc, #32]	@ (80042f4 <__NVIC_SetPriority+0x50>)
 80042d4:	88fb      	ldrh	r3, [r7, #6]
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	3b04      	subs	r3, #4
 80042dc:	0112      	lsls	r2, r2, #4
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	440b      	add	r3, r1
 80042e2:	761a      	strb	r2, [r3, #24]
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	e000e100 	.word	0xe000e100
 80042f4:	e000ed00 	.word	0xe000ed00

080042f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b089      	sub	sp, #36	@ 0x24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f1c3 0307 	rsb	r3, r3, #7
 8004312:	2b04      	cmp	r3, #4
 8004314:	bf28      	it	cs
 8004316:	2304      	movcs	r3, #4
 8004318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	3304      	adds	r3, #4
 800431e:	2b06      	cmp	r3, #6
 8004320:	d902      	bls.n	8004328 <NVIC_EncodePriority+0x30>
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	3b03      	subs	r3, #3
 8004326:	e000      	b.n	800432a <NVIC_EncodePriority+0x32>
 8004328:	2300      	movs	r3, #0
 800432a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800432c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	43da      	mvns	r2, r3
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	401a      	ands	r2, r3
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004340:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	fa01 f303 	lsl.w	r3, r1, r3
 800434a:	43d9      	mvns	r1, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004350:	4313      	orrs	r3, r2
         );
}
 8004352:	4618      	mov	r0, r3
 8004354:	3724      	adds	r7, #36	@ 0x24
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b082      	sub	sp, #8
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7ff ff4c 	bl	8004204 <__NVIC_SetPriorityGrouping>
}
 800436c:	bf00      	nop
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	4603      	mov	r3, r0
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004382:	f7ff ff63 	bl	800424c <__NVIC_GetPriorityGrouping>
 8004386:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	68b9      	ldr	r1, [r7, #8]
 800438c:	6978      	ldr	r0, [r7, #20]
 800438e:	f7ff ffb3 	bl	80042f8 <NVIC_EncodePriority>
 8004392:	4602      	mov	r2, r0
 8004394:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004398:	4611      	mov	r1, r2
 800439a:	4618      	mov	r0, r3
 800439c:	f7ff ff82 	bl	80042a4 <__NVIC_SetPriority>
}
 80043a0:	bf00      	nop
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	4603      	mov	r3, r0
 80043b0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff ff56 	bl	8004268 <__NVIC_EnableIRQ>
}
 80043bc:	bf00      	nop
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80043c8:	f3bf 8f5f 	dmb	sy
}
 80043cc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80043ce:	4b07      	ldr	r3, [pc, #28]	@ (80043ec <HAL_MPU_Disable+0x28>)
 80043d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d2:	4a06      	ldr	r2, [pc, #24]	@ (80043ec <HAL_MPU_Disable+0x28>)
 80043d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043d8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80043da:	4b05      	ldr	r3, [pc, #20]	@ (80043f0 <HAL_MPU_Disable+0x2c>)
 80043dc:	2200      	movs	r2, #0
 80043de:	605a      	str	r2, [r3, #4]
}
 80043e0:	bf00      	nop
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	e000ed00 	.word	0xe000ed00
 80043f0:	e000ed90 	.word	0xe000ed90

080043f4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80043fc:	4a0b      	ldr	r2, [pc, #44]	@ (800442c <HAL_MPU_Enable+0x38>)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f043 0301 	orr.w	r3, r3, #1
 8004404:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004406:	4b0a      	ldr	r3, [pc, #40]	@ (8004430 <HAL_MPU_Enable+0x3c>)
 8004408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440a:	4a09      	ldr	r2, [pc, #36]	@ (8004430 <HAL_MPU_Enable+0x3c>)
 800440c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004410:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004412:	f3bf 8f4f 	dsb	sy
}
 8004416:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004418:	f3bf 8f6f 	isb	sy
}
 800441c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	e000ed90 	.word	0xe000ed90
 8004430:	e000ed00 	.word	0xe000ed00

08004434 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	785a      	ldrb	r2, [r3, #1]
 8004440:	4b1b      	ldr	r3, [pc, #108]	@ (80044b0 <HAL_MPU_ConfigRegion+0x7c>)
 8004442:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004444:	4b1a      	ldr	r3, [pc, #104]	@ (80044b0 <HAL_MPU_ConfigRegion+0x7c>)
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	4a19      	ldr	r2, [pc, #100]	@ (80044b0 <HAL_MPU_ConfigRegion+0x7c>)
 800444a:	f023 0301 	bic.w	r3, r3, #1
 800444e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004450:	4a17      	ldr	r2, [pc, #92]	@ (80044b0 <HAL_MPU_ConfigRegion+0x7c>)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	7b1b      	ldrb	r3, [r3, #12]
 800445c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	7adb      	ldrb	r3, [r3, #11]
 8004462:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004464:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	7a9b      	ldrb	r3, [r3, #10]
 800446a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800446c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	7b5b      	ldrb	r3, [r3, #13]
 8004472:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004474:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	7b9b      	ldrb	r3, [r3, #14]
 800447a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800447c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	7bdb      	ldrb	r3, [r3, #15]
 8004482:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004484:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	7a5b      	ldrb	r3, [r3, #9]
 800448a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800448c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	7a1b      	ldrb	r3, [r3, #8]
 8004492:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004494:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	7812      	ldrb	r2, [r2, #0]
 800449a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800449c:	4a04      	ldr	r2, [pc, #16]	@ (80044b0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800449e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80044a0:	6113      	str	r3, [r2, #16]
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	e000ed90 	.word	0xe000ed90

080044b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b089      	sub	sp, #36	@ 0x24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044be:	2300      	movs	r3, #0
 80044c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80044c2:	4b89      	ldr	r3, [pc, #548]	@ (80046e8 <HAL_GPIO_Init+0x234>)
 80044c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044c6:	e194      	b.n	80047f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	2101      	movs	r1, #1
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	fa01 f303 	lsl.w	r3, r1, r3
 80044d4:	4013      	ands	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 8186 	beq.w	80047ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f003 0303 	and.w	r3, r3, #3
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d005      	beq.n	80044f8 <HAL_GPIO_Init+0x44>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f003 0303 	and.w	r3, r3, #3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d130      	bne.n	800455a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	2203      	movs	r2, #3
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	43db      	mvns	r3, r3
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	4013      	ands	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68da      	ldr	r2, [r3, #12]
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	4313      	orrs	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800452e:	2201      	movs	r2, #1
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	43db      	mvns	r3, r3
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	4013      	ands	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	091b      	lsrs	r3, r3, #4
 8004544:	f003 0201 	and.w	r2, r3, #1
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	fa02 f303 	lsl.w	r3, r2, r3
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	4313      	orrs	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	2b03      	cmp	r3, #3
 8004564:	d017      	beq.n	8004596 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	2203      	movs	r2, #3
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	43db      	mvns	r3, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4013      	ands	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	4313      	orrs	r3, r2
 800458e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d123      	bne.n	80045ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	08da      	lsrs	r2, r3, #3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	3208      	adds	r2, #8
 80045aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	220f      	movs	r2, #15
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43db      	mvns	r3, r3
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	4013      	ands	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	4313      	orrs	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	08da      	lsrs	r2, r3, #3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3208      	adds	r2, #8
 80045e4:	69b9      	ldr	r1, [r7, #24]
 80045e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	2203      	movs	r2, #3
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	43db      	mvns	r3, r3
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	4013      	ands	r3, r2
 8004600:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f003 0203 	and.w	r2, r3, #3
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	fa02 f303 	lsl.w	r3, r2, r3
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	4313      	orrs	r3, r2
 8004616:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 80e0 	beq.w	80047ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800462c:	4b2f      	ldr	r3, [pc, #188]	@ (80046ec <HAL_GPIO_Init+0x238>)
 800462e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004632:	4a2e      	ldr	r2, [pc, #184]	@ (80046ec <HAL_GPIO_Init+0x238>)
 8004634:	f043 0302 	orr.w	r3, r3, #2
 8004638:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800463c:	4b2b      	ldr	r3, [pc, #172]	@ (80046ec <HAL_GPIO_Init+0x238>)
 800463e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800464a:	4a29      	ldr	r2, [pc, #164]	@ (80046f0 <HAL_GPIO_Init+0x23c>)
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	089b      	lsrs	r3, r3, #2
 8004650:	3302      	adds	r3, #2
 8004652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004656:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	220f      	movs	r2, #15
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43db      	mvns	r3, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4013      	ands	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a20      	ldr	r2, [pc, #128]	@ (80046f4 <HAL_GPIO_Init+0x240>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d052      	beq.n	800471c <HAL_GPIO_Init+0x268>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a1f      	ldr	r2, [pc, #124]	@ (80046f8 <HAL_GPIO_Init+0x244>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d031      	beq.n	80046e2 <HAL_GPIO_Init+0x22e>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a1e      	ldr	r2, [pc, #120]	@ (80046fc <HAL_GPIO_Init+0x248>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d02b      	beq.n	80046de <HAL_GPIO_Init+0x22a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a1d      	ldr	r2, [pc, #116]	@ (8004700 <HAL_GPIO_Init+0x24c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d025      	beq.n	80046da <HAL_GPIO_Init+0x226>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a1c      	ldr	r2, [pc, #112]	@ (8004704 <HAL_GPIO_Init+0x250>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d01f      	beq.n	80046d6 <HAL_GPIO_Init+0x222>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a1b      	ldr	r2, [pc, #108]	@ (8004708 <HAL_GPIO_Init+0x254>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d019      	beq.n	80046d2 <HAL_GPIO_Init+0x21e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a1a      	ldr	r2, [pc, #104]	@ (800470c <HAL_GPIO_Init+0x258>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d013      	beq.n	80046ce <HAL_GPIO_Init+0x21a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a19      	ldr	r2, [pc, #100]	@ (8004710 <HAL_GPIO_Init+0x25c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00d      	beq.n	80046ca <HAL_GPIO_Init+0x216>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a18      	ldr	r2, [pc, #96]	@ (8004714 <HAL_GPIO_Init+0x260>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d007      	beq.n	80046c6 <HAL_GPIO_Init+0x212>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a17      	ldr	r2, [pc, #92]	@ (8004718 <HAL_GPIO_Init+0x264>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d101      	bne.n	80046c2 <HAL_GPIO_Init+0x20e>
 80046be:	2309      	movs	r3, #9
 80046c0:	e02d      	b.n	800471e <HAL_GPIO_Init+0x26a>
 80046c2:	230a      	movs	r3, #10
 80046c4:	e02b      	b.n	800471e <HAL_GPIO_Init+0x26a>
 80046c6:	2308      	movs	r3, #8
 80046c8:	e029      	b.n	800471e <HAL_GPIO_Init+0x26a>
 80046ca:	2307      	movs	r3, #7
 80046cc:	e027      	b.n	800471e <HAL_GPIO_Init+0x26a>
 80046ce:	2306      	movs	r3, #6
 80046d0:	e025      	b.n	800471e <HAL_GPIO_Init+0x26a>
 80046d2:	2305      	movs	r3, #5
 80046d4:	e023      	b.n	800471e <HAL_GPIO_Init+0x26a>
 80046d6:	2304      	movs	r3, #4
 80046d8:	e021      	b.n	800471e <HAL_GPIO_Init+0x26a>
 80046da:	2303      	movs	r3, #3
 80046dc:	e01f      	b.n	800471e <HAL_GPIO_Init+0x26a>
 80046de:	2302      	movs	r3, #2
 80046e0:	e01d      	b.n	800471e <HAL_GPIO_Init+0x26a>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e01b      	b.n	800471e <HAL_GPIO_Init+0x26a>
 80046e6:	bf00      	nop
 80046e8:	58000080 	.word	0x58000080
 80046ec:	58024400 	.word	0x58024400
 80046f0:	58000400 	.word	0x58000400
 80046f4:	58020000 	.word	0x58020000
 80046f8:	58020400 	.word	0x58020400
 80046fc:	58020800 	.word	0x58020800
 8004700:	58020c00 	.word	0x58020c00
 8004704:	58021000 	.word	0x58021000
 8004708:	58021400 	.word	0x58021400
 800470c:	58021800 	.word	0x58021800
 8004710:	58021c00 	.word	0x58021c00
 8004714:	58022000 	.word	0x58022000
 8004718:	58022400 	.word	0x58022400
 800471c:	2300      	movs	r3, #0
 800471e:	69fa      	ldr	r2, [r7, #28]
 8004720:	f002 0203 	and.w	r2, r2, #3
 8004724:	0092      	lsls	r2, r2, #2
 8004726:	4093      	lsls	r3, r2
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	4313      	orrs	r3, r2
 800472c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800472e:	4938      	ldr	r1, [pc, #224]	@ (8004810 <HAL_GPIO_Init+0x35c>)
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	089b      	lsrs	r3, r3, #2
 8004734:	3302      	adds	r3, #2
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800473c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	43db      	mvns	r3, r3
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	4013      	ands	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004762:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800476a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	43db      	mvns	r3, r3
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	4013      	ands	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	4313      	orrs	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004790:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	43db      	mvns	r3, r3
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	4013      	ands	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	43db      	mvns	r3, r3
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	4013      	ands	r3, r2
 80047d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	3301      	adds	r3, #1
 80047f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	fa22 f303 	lsr.w	r3, r2, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f47f ae63 	bne.w	80044c8 <HAL_GPIO_Init+0x14>
  }
}
 8004802:	bf00      	nop
 8004804:	bf00      	nop
 8004806:	3724      	adds	r7, #36	@ 0x24
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	58000400 	.word	0x58000400

08004814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	460b      	mov	r3, r1
 800481e:	807b      	strh	r3, [r7, #2]
 8004820:	4613      	mov	r3, r2
 8004822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004824:	787b      	ldrb	r3, [r7, #1]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800482a:	887a      	ldrh	r2, [r7, #2]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004830:	e003      	b.n	800483a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004832:	887b      	ldrh	r3, [r7, #2]
 8004834:	041a      	lsls	r2, r3, #16
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	619a      	str	r2, [r3, #24]
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
	...

08004848 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e08b      	b.n	8004972 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d106      	bne.n	8004874 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7ff f8f0 	bl	8003a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2224      	movs	r2, #36	@ 0x24
 8004878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0201 	bic.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004898:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d107      	bne.n	80048c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048be:	609a      	str	r2, [r3, #8]
 80048c0:	e006      	b.n	80048d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80048ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d108      	bne.n	80048ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048e6:	605a      	str	r2, [r3, #4]
 80048e8:	e007      	b.n	80048fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6859      	ldr	r1, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	4b1d      	ldr	r3, [pc, #116]	@ (800497c <HAL_I2C_Init+0x134>)
 8004906:	430b      	orrs	r3, r1
 8004908:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004918:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691a      	ldr	r2, [r3, #16]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69d9      	ldr	r1, [r3, #28]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a1a      	ldr	r2, [r3, #32]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0201 	orr.w	r2, r2, #1
 8004952:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	02008000 	.word	0x02008000

08004980 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b088      	sub	sp, #32
 8004984:	af02      	add	r7, sp, #8
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	607a      	str	r2, [r7, #4]
 800498a:	461a      	mov	r2, r3
 800498c:	460b      	mov	r3, r1
 800498e:	817b      	strh	r3, [r7, #10]
 8004990:	4613      	mov	r3, r2
 8004992:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b20      	cmp	r3, #32
 800499e:	f040 80fd 	bne.w	8004b9c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d101      	bne.n	80049b0 <HAL_I2C_Master_Transmit+0x30>
 80049ac:	2302      	movs	r3, #2
 80049ae:	e0f6      	b.n	8004b9e <HAL_I2C_Master_Transmit+0x21e>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049b8:	f7ff fbe8 	bl	800418c <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	2319      	movs	r3, #25
 80049c4:	2201      	movs	r2, #1
 80049c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 fbea 	bl	80051a4 <I2C_WaitOnFlagUntilTimeout>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e0e1      	b.n	8004b9e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2221      	movs	r2, #33	@ 0x21
 80049de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2210      	movs	r2, #16
 80049e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	893a      	ldrh	r2, [r7, #8]
 80049fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	2bff      	cmp	r3, #255	@ 0xff
 8004a0a:	d906      	bls.n	8004a1a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	22ff      	movs	r2, #255	@ 0xff
 8004a10:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004a12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	e007      	b.n	8004a2a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004a24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a28:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d024      	beq.n	8004a7c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a36:	781a      	ldrb	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	3301      	adds	r3, #1
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	8979      	ldrh	r1, [r7, #10]
 8004a6e:	4b4e      	ldr	r3, [pc, #312]	@ (8004ba8 <HAL_I2C_Master_Transmit+0x228>)
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 fd59 	bl	800552c <I2C_TransferConfig>
 8004a7a:	e066      	b.n	8004b4a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	8979      	ldrh	r1, [r7, #10]
 8004a84:	4b48      	ldr	r3, [pc, #288]	@ (8004ba8 <HAL_I2C_Master_Transmit+0x228>)
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 fd4e 	bl	800552c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004a90:	e05b      	b.n	8004b4a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	6a39      	ldr	r1, [r7, #32]
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f000 fbdd 	bl	8005256 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e07b      	b.n	8004b9e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aaa:	781a      	ldrb	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d034      	beq.n	8004b4a <HAL_I2C_Master_Transmit+0x1ca>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d130      	bne.n	8004b4a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	2200      	movs	r2, #0
 8004af0:	2180      	movs	r1, #128	@ 0x80
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 fb56 	bl	80051a4 <I2C_WaitOnFlagUntilTimeout>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e04d      	b.n	8004b9e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	2bff      	cmp	r3, #255	@ 0xff
 8004b0a:	d90e      	bls.n	8004b2a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	22ff      	movs	r2, #255	@ 0xff
 8004b10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	8979      	ldrh	r1, [r7, #10]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 fd02 	bl	800552c <I2C_TransferConfig>
 8004b28:	e00f      	b.n	8004b4a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	8979      	ldrh	r1, [r7, #10]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 fcf1 	bl	800552c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d19e      	bne.n	8004a92 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	6a39      	ldr	r1, [r7, #32]
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 fbc3 	bl	80052e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e01a      	b.n	8004b9e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6859      	ldr	r1, [r3, #4]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004bac <HAL_I2C_Master_Transmit+0x22c>)
 8004b7c:	400b      	ands	r3, r1
 8004b7e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2220      	movs	r2, #32
 8004b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	e000      	b.n	8004b9e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004b9c:	2302      	movs	r3, #2
  }
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	80002000 	.word	0x80002000
 8004bac:	fe00e800 	.word	0xfe00e800

08004bb0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	4608      	mov	r0, r1
 8004bba:	4611      	mov	r1, r2
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	817b      	strh	r3, [r7, #10]
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	813b      	strh	r3, [r7, #8]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b20      	cmp	r3, #32
 8004bd4:	f040 80f9 	bne.w	8004dca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d002      	beq.n	8004be4 <HAL_I2C_Mem_Write+0x34>
 8004bde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d105      	bne.n	8004bf0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bea:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e0ed      	b.n	8004dcc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <HAL_I2C_Mem_Write+0x4e>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	e0e6      	b.n	8004dcc <HAL_I2C_Mem_Write+0x21c>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c06:	f7ff fac1 	bl	800418c <HAL_GetTick>
 8004c0a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	2319      	movs	r3, #25
 8004c12:	2201      	movs	r2, #1
 8004c14:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 fac3 	bl	80051a4 <I2C_WaitOnFlagUntilTimeout>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e0d1      	b.n	8004dcc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2221      	movs	r2, #33	@ 0x21
 8004c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2240      	movs	r2, #64	@ 0x40
 8004c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a3a      	ldr	r2, [r7, #32]
 8004c42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004c48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c50:	88f8      	ldrh	r0, [r7, #6]
 8004c52:	893a      	ldrh	r2, [r7, #8]
 8004c54:	8979      	ldrh	r1, [r7, #10]
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	9301      	str	r3, [sp, #4]
 8004c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	4603      	mov	r3, r0
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f9d3 	bl	800500c <I2C_RequestMemoryWrite>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e0a9      	b.n	8004dcc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2bff      	cmp	r3, #255	@ 0xff
 8004c80:	d90e      	bls.n	8004ca0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	22ff      	movs	r2, #255	@ 0xff
 8004c86:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	8979      	ldrh	r1, [r7, #10]
 8004c90:	2300      	movs	r3, #0
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 fc47 	bl	800552c <I2C_TransferConfig>
 8004c9e:	e00f      	b.n	8004cc0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	8979      	ldrh	r1, [r7, #10]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 fc36 	bl	800552c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 fac6 	bl	8005256 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e07b      	b.n	8004dcc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd8:	781a      	ldrb	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d034      	beq.n	8004d78 <HAL_I2C_Mem_Write+0x1c8>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d130      	bne.n	8004d78 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	2180      	movs	r1, #128	@ 0x80
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 fa3f 	bl	80051a4 <I2C_WaitOnFlagUntilTimeout>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e04d      	b.n	8004dcc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2bff      	cmp	r3, #255	@ 0xff
 8004d38:	d90e      	bls.n	8004d58 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	22ff      	movs	r2, #255	@ 0xff
 8004d3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	8979      	ldrh	r1, [r7, #10]
 8004d48:	2300      	movs	r3, #0
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 fbeb 	bl	800552c <I2C_TransferConfig>
 8004d56:	e00f      	b.n	8004d78 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	8979      	ldrh	r1, [r7, #10]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 fbda 	bl	800552c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d19e      	bne.n	8004cc0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 faac 	bl	80052e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e01a      	b.n	8004dcc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6859      	ldr	r1, [r3, #4]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd4 <HAL_I2C_Mem_Write+0x224>)
 8004daa:	400b      	ands	r3, r1
 8004dac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	e000      	b.n	8004dcc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004dca:	2302      	movs	r3, #2
  }
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	fe00e800 	.word	0xfe00e800

08004dd8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	4608      	mov	r0, r1
 8004de2:	4611      	mov	r1, r2
 8004de4:	461a      	mov	r2, r3
 8004de6:	4603      	mov	r3, r0
 8004de8:	817b      	strh	r3, [r7, #10]
 8004dea:	460b      	mov	r3, r1
 8004dec:	813b      	strh	r3, [r7, #8]
 8004dee:	4613      	mov	r3, r2
 8004df0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b20      	cmp	r3, #32
 8004dfc:	f040 80fd 	bne.w	8004ffa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e00:	6a3b      	ldr	r3, [r7, #32]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_I2C_Mem_Read+0x34>
 8004e06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d105      	bne.n	8004e18 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e12:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e0f1      	b.n	8004ffc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d101      	bne.n	8004e26 <HAL_I2C_Mem_Read+0x4e>
 8004e22:	2302      	movs	r3, #2
 8004e24:	e0ea      	b.n	8004ffc <HAL_I2C_Mem_Read+0x224>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e2e:	f7ff f9ad 	bl	800418c <HAL_GetTick>
 8004e32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	2319      	movs	r3, #25
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 f9af 	bl	80051a4 <I2C_WaitOnFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e0d5      	b.n	8004ffc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2222      	movs	r2, #34	@ 0x22
 8004e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2240      	movs	r2, #64	@ 0x40
 8004e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a3a      	ldr	r2, [r7, #32]
 8004e6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004e70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e78:	88f8      	ldrh	r0, [r7, #6]
 8004e7a:	893a      	ldrh	r2, [r7, #8]
 8004e7c:	8979      	ldrh	r1, [r7, #10]
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	9301      	str	r3, [sp, #4]
 8004e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	4603      	mov	r3, r0
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 f913 	bl	80050b4 <I2C_RequestMemoryRead>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d005      	beq.n	8004ea0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e0ad      	b.n	8004ffc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	2bff      	cmp	r3, #255	@ 0xff
 8004ea8:	d90e      	bls.n	8004ec8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	22ff      	movs	r2, #255	@ 0xff
 8004eae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	8979      	ldrh	r1, [r7, #10]
 8004eb8:	4b52      	ldr	r3, [pc, #328]	@ (8005004 <HAL_I2C_Mem_Read+0x22c>)
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 fb33 	bl	800552c <I2C_TransferConfig>
 8004ec6:	e00f      	b.n	8004ee8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	8979      	ldrh	r1, [r7, #10]
 8004eda:	4b4a      	ldr	r3, [pc, #296]	@ (8005004 <HAL_I2C_Mem_Read+0x22c>)
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 fb22 	bl	800552c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eee:	2200      	movs	r2, #0
 8004ef0:	2104      	movs	r1, #4
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 f956 	bl	80051a4 <I2C_WaitOnFlagUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e07c      	b.n	8004ffc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0c:	b2d2      	uxtb	r2, r2
 8004f0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d034      	beq.n	8004fa8 <HAL_I2C_Mem_Read+0x1d0>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d130      	bne.n	8004fa8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	2180      	movs	r1, #128	@ 0x80
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 f927 	bl	80051a4 <I2C_WaitOnFlagUntilTimeout>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e04d      	b.n	8004ffc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2bff      	cmp	r3, #255	@ 0xff
 8004f68:	d90e      	bls.n	8004f88 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	22ff      	movs	r2, #255	@ 0xff
 8004f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	8979      	ldrh	r1, [r7, #10]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 fad3 	bl	800552c <I2C_TransferConfig>
 8004f86:	e00f      	b.n	8004fa8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	8979      	ldrh	r1, [r7, #10]
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 fac2 	bl	800552c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d19a      	bne.n	8004ee8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 f994 	bl	80052e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e01a      	b.n	8004ffc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6859      	ldr	r1, [r3, #4]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8005008 <HAL_I2C_Mem_Read+0x230>)
 8004fda:	400b      	ands	r3, r1
 8004fdc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	e000      	b.n	8004ffc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004ffa:	2302      	movs	r3, #2
  }
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	80002400 	.word	0x80002400
 8005008:	fe00e800 	.word	0xfe00e800

0800500c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af02      	add	r7, sp, #8
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	4608      	mov	r0, r1
 8005016:	4611      	mov	r1, r2
 8005018:	461a      	mov	r2, r3
 800501a:	4603      	mov	r3, r0
 800501c:	817b      	strh	r3, [r7, #10]
 800501e:	460b      	mov	r3, r1
 8005020:	813b      	strh	r3, [r7, #8]
 8005022:	4613      	mov	r3, r2
 8005024:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005026:	88fb      	ldrh	r3, [r7, #6]
 8005028:	b2da      	uxtb	r2, r3
 800502a:	8979      	ldrh	r1, [r7, #10]
 800502c:	4b20      	ldr	r3, [pc, #128]	@ (80050b0 <I2C_RequestMemoryWrite+0xa4>)
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 fa79 	bl	800552c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800503a:	69fa      	ldr	r2, [r7, #28]
 800503c:	69b9      	ldr	r1, [r7, #24]
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 f909 	bl	8005256 <I2C_WaitOnTXISFlagUntilTimeout>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e02c      	b.n	80050a8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d105      	bne.n	8005060 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005054:	893b      	ldrh	r3, [r7, #8]
 8005056:	b2da      	uxtb	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	629a      	str	r2, [r3, #40]	@ 0x28
 800505e:	e015      	b.n	800508c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005060:	893b      	ldrh	r3, [r7, #8]
 8005062:	0a1b      	lsrs	r3, r3, #8
 8005064:	b29b      	uxth	r3, r3
 8005066:	b2da      	uxtb	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800506e:	69fa      	ldr	r2, [r7, #28]
 8005070:	69b9      	ldr	r1, [r7, #24]
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 f8ef 	bl	8005256 <I2C_WaitOnTXISFlagUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e012      	b.n	80050a8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005082:	893b      	ldrh	r3, [r7, #8]
 8005084:	b2da      	uxtb	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	2200      	movs	r2, #0
 8005094:	2180      	movs	r1, #128	@ 0x80
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 f884 	bl	80051a4 <I2C_WaitOnFlagUntilTimeout>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	80002000 	.word	0x80002000

080050b4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af02      	add	r7, sp, #8
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	4608      	mov	r0, r1
 80050be:	4611      	mov	r1, r2
 80050c0:	461a      	mov	r2, r3
 80050c2:	4603      	mov	r3, r0
 80050c4:	817b      	strh	r3, [r7, #10]
 80050c6:	460b      	mov	r3, r1
 80050c8:	813b      	strh	r3, [r7, #8]
 80050ca:	4613      	mov	r3, r2
 80050cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80050ce:	88fb      	ldrh	r3, [r7, #6]
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	8979      	ldrh	r1, [r7, #10]
 80050d4:	4b20      	ldr	r3, [pc, #128]	@ (8005158 <I2C_RequestMemoryRead+0xa4>)
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	2300      	movs	r3, #0
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 fa26 	bl	800552c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050e0:	69fa      	ldr	r2, [r7, #28]
 80050e2:	69b9      	ldr	r1, [r7, #24]
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 f8b6 	bl	8005256 <I2C_WaitOnTXISFlagUntilTimeout>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e02c      	b.n	800514e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050f4:	88fb      	ldrh	r3, [r7, #6]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d105      	bne.n	8005106 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050fa:	893b      	ldrh	r3, [r7, #8]
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	629a      	str	r2, [r3, #40]	@ 0x28
 8005104:	e015      	b.n	8005132 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005106:	893b      	ldrh	r3, [r7, #8]
 8005108:	0a1b      	lsrs	r3, r3, #8
 800510a:	b29b      	uxth	r3, r3
 800510c:	b2da      	uxtb	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005114:	69fa      	ldr	r2, [r7, #28]
 8005116:	69b9      	ldr	r1, [r7, #24]
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 f89c 	bl	8005256 <I2C_WaitOnTXISFlagUntilTimeout>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e012      	b.n	800514e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005128:	893b      	ldrh	r3, [r7, #8]
 800512a:	b2da      	uxtb	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	2200      	movs	r2, #0
 800513a:	2140      	movs	r1, #64	@ 0x40
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 f831 	bl	80051a4 <I2C_WaitOnFlagUntilTimeout>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e000      	b.n	800514e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	80002000 	.word	0x80002000

0800515c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b02      	cmp	r3, #2
 8005170:	d103      	bne.n	800517a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2200      	movs	r2, #0
 8005178:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b01      	cmp	r3, #1
 8005186:	d007      	beq.n	8005198 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699a      	ldr	r2, [r3, #24]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0201 	orr.w	r2, r2, #1
 8005196:	619a      	str	r2, [r3, #24]
  }
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	603b      	str	r3, [r7, #0]
 80051b0:	4613      	mov	r3, r2
 80051b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051b4:	e03b      	b.n	800522e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	6839      	ldr	r1, [r7, #0]
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 f8d6 	bl	800536c <I2C_IsErrorOccurred>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e041      	b.n	800524e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051d0:	d02d      	beq.n	800522e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d2:	f7fe ffdb 	bl	800418c <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d302      	bcc.n	80051e8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d122      	bne.n	800522e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699a      	ldr	r2, [r3, #24]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	4013      	ands	r3, r2
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	bf0c      	ite	eq
 80051f8:	2301      	moveq	r3, #1
 80051fa:	2300      	movne	r3, #0
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	461a      	mov	r2, r3
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	429a      	cmp	r2, r3
 8005204:	d113      	bne.n	800522e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800520a:	f043 0220 	orr.w	r2, r3, #32
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2220      	movs	r2, #32
 8005216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e00f      	b.n	800524e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	699a      	ldr	r2, [r3, #24]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	4013      	ands	r3, r2
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	429a      	cmp	r2, r3
 800523c:	bf0c      	ite	eq
 800523e:	2301      	moveq	r3, #1
 8005240:	2300      	movne	r3, #0
 8005242:	b2db      	uxtb	r3, r3
 8005244:	461a      	mov	r2, r3
 8005246:	79fb      	ldrb	r3, [r7, #7]
 8005248:	429a      	cmp	r2, r3
 800524a:	d0b4      	beq.n	80051b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b084      	sub	sp, #16
 800525a:	af00      	add	r7, sp, #0
 800525c:	60f8      	str	r0, [r7, #12]
 800525e:	60b9      	str	r1, [r7, #8]
 8005260:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005262:	e033      	b.n	80052cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	68b9      	ldr	r1, [r7, #8]
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 f87f 	bl	800536c <I2C_IsErrorOccurred>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e031      	b.n	80052dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800527e:	d025      	beq.n	80052cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005280:	f7fe ff84 	bl	800418c <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	429a      	cmp	r2, r3
 800528e:	d302      	bcc.n	8005296 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d11a      	bne.n	80052cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d013      	beq.n	80052cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a8:	f043 0220 	orr.w	r2, r3, #32
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2220      	movs	r2, #32
 80052b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e007      	b.n	80052dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d1c4      	bne.n	8005264 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052f0:	e02f      	b.n	8005352 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	68b9      	ldr	r1, [r7, #8]
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 f838 	bl	800536c <I2C_IsErrorOccurred>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e02d      	b.n	8005362 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005306:	f7fe ff41 	bl	800418c <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	429a      	cmp	r2, r3
 8005314:	d302      	bcc.n	800531c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d11a      	bne.n	8005352 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	2b20      	cmp	r3, #32
 8005328:	d013      	beq.n	8005352 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800532e:	f043 0220 	orr.w	r2, r3, #32
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2220      	movs	r2, #32
 800533a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e007      	b.n	8005362 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	f003 0320 	and.w	r3, r3, #32
 800535c:	2b20      	cmp	r3, #32
 800535e:	d1c8      	bne.n	80052f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
	...

0800536c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08a      	sub	sp, #40	@ 0x28
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005378:	2300      	movs	r3, #0
 800537a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005386:	2300      	movs	r3, #0
 8005388:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	f003 0310 	and.w	r3, r3, #16
 8005394:	2b00      	cmp	r3, #0
 8005396:	d068      	beq.n	800546a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2210      	movs	r2, #16
 800539e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053a0:	e049      	b.n	8005436 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053a8:	d045      	beq.n	8005436 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053aa:	f7fe feef 	bl	800418c <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d302      	bcc.n	80053c0 <I2C_IsErrorOccurred+0x54>
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d13a      	bne.n	8005436 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053e2:	d121      	bne.n	8005428 <I2C_IsErrorOccurred+0xbc>
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053ea:	d01d      	beq.n	8005428 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80053ec:	7cfb      	ldrb	r3, [r7, #19]
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	d01a      	beq.n	8005428 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005400:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005402:	f7fe fec3 	bl	800418c <HAL_GetTick>
 8005406:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005408:	e00e      	b.n	8005428 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800540a:	f7fe febf 	bl	800418c <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b19      	cmp	r3, #25
 8005416:	d907      	bls.n	8005428 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	f043 0320 	orr.w	r3, r3, #32
 800541e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005426:	e006      	b.n	8005436 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b20      	cmp	r3, #32
 8005434:	d1e9      	bne.n	800540a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	f003 0320 	and.w	r3, r3, #32
 8005440:	2b20      	cmp	r3, #32
 8005442:	d003      	beq.n	800544c <I2C_IsErrorOccurred+0xe0>
 8005444:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0aa      	beq.n	80053a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800544c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005450:	2b00      	cmp	r3, #0
 8005452:	d103      	bne.n	800545c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2220      	movs	r2, #32
 800545a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	f043 0304 	orr.w	r3, r3, #4
 8005462:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00b      	beq.n	8005494 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	f043 0301 	orr.w	r3, r3, #1
 8005482:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800548c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00b      	beq.n	80054b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	f043 0308 	orr.w	r3, r3, #8
 80054a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80054ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00b      	beq.n	80054d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	f043 0302 	orr.w	r3, r3, #2
 80054c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80054d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d01c      	beq.n	800551a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f7ff fe3b 	bl	800515c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6859      	ldr	r1, [r3, #4]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005528 <I2C_IsErrorOccurred+0x1bc>)
 80054f2:	400b      	ands	r3, r1
 80054f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	431a      	orrs	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2220      	movs	r2, #32
 8005506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800551a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800551e:	4618      	mov	r0, r3
 8005520:	3728      	adds	r7, #40	@ 0x28
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	fe00e800 	.word	0xfe00e800

0800552c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	607b      	str	r3, [r7, #4]
 8005536:	460b      	mov	r3, r1
 8005538:	817b      	strh	r3, [r7, #10]
 800553a:	4613      	mov	r3, r2
 800553c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800553e:	897b      	ldrh	r3, [r7, #10]
 8005540:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005544:	7a7b      	ldrb	r3, [r7, #9]
 8005546:	041b      	lsls	r3, r3, #16
 8005548:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800554c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	4313      	orrs	r3, r2
 8005556:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800555a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	0d5b      	lsrs	r3, r3, #21
 8005566:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800556a:	4b08      	ldr	r3, [pc, #32]	@ (800558c <I2C_TransferConfig+0x60>)
 800556c:	430b      	orrs	r3, r1
 800556e:	43db      	mvns	r3, r3
 8005570:	ea02 0103 	and.w	r1, r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800557e:	bf00      	nop
 8005580:	371c      	adds	r7, #28
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	03ff63ff 	.word	0x03ff63ff

08005590 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b20      	cmp	r3, #32
 80055a4:	d138      	bne.n	8005618 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055b0:	2302      	movs	r3, #2
 80055b2:	e032      	b.n	800561a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2224      	movs	r2, #36	@ 0x24
 80055c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0201 	bic.w	r2, r2, #1
 80055d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80055e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6819      	ldr	r1, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	430a      	orrs	r2, r1
 80055f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0201 	orr.w	r2, r2, #1
 8005602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2220      	movs	r2, #32
 8005608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005614:	2300      	movs	r3, #0
 8005616:	e000      	b.n	800561a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005618:	2302      	movs	r3, #2
  }
}
 800561a:	4618      	mov	r0, r3
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005626:	b480      	push	{r7}
 8005628:	b085      	sub	sp, #20
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b20      	cmp	r3, #32
 800563a:	d139      	bne.n	80056b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005642:	2b01      	cmp	r3, #1
 8005644:	d101      	bne.n	800564a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005646:	2302      	movs	r3, #2
 8005648:	e033      	b.n	80056b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2224      	movs	r2, #36	@ 0x24
 8005656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0201 	bic.w	r2, r2, #1
 8005668:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005678:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	021b      	lsls	r3, r3, #8
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	4313      	orrs	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0201 	orr.w	r2, r2, #1
 800569a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	e000      	b.n	80056b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056b0:	2302      	movs	r3, #2
  }
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
	...

080056c0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80056c8:	4b19      	ldr	r3, [pc, #100]	@ (8005730 <HAL_PWREx_ConfigSupply+0x70>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d00a      	beq.n	80056ea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80056d4:	4b16      	ldr	r3, [pc, #88]	@ (8005730 <HAL_PWREx_ConfigSupply+0x70>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d001      	beq.n	80056e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e01f      	b.n	8005726 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80056e6:	2300      	movs	r3, #0
 80056e8:	e01d      	b.n	8005726 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80056ea:	4b11      	ldr	r3, [pc, #68]	@ (8005730 <HAL_PWREx_ConfigSupply+0x70>)
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f023 0207 	bic.w	r2, r3, #7
 80056f2:	490f      	ldr	r1, [pc, #60]	@ (8005730 <HAL_PWREx_ConfigSupply+0x70>)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80056fa:	f7fe fd47 	bl	800418c <HAL_GetTick>
 80056fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005700:	e009      	b.n	8005716 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005702:	f7fe fd43 	bl	800418c <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005710:	d901      	bls.n	8005716 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e007      	b.n	8005726 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005716:	4b06      	ldr	r3, [pc, #24]	@ (8005730 <HAL_PWREx_ConfigSupply+0x70>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800571e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005722:	d1ee      	bne.n	8005702 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	58024800 	.word	0x58024800

08005734 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08c      	sub	sp, #48	@ 0x30
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d102      	bne.n	8005748 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	f000 bc48 	b.w	8005fd8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 8088 	beq.w	8005866 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005756:	4b99      	ldr	r3, [pc, #612]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800575e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005760:	4b96      	ldr	r3, [pc, #600]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 8005762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005764:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005768:	2b10      	cmp	r3, #16
 800576a:	d007      	beq.n	800577c <HAL_RCC_OscConfig+0x48>
 800576c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800576e:	2b18      	cmp	r3, #24
 8005770:	d111      	bne.n	8005796 <HAL_RCC_OscConfig+0x62>
 8005772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005774:	f003 0303 	and.w	r3, r3, #3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d10c      	bne.n	8005796 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800577c:	4b8f      	ldr	r3, [pc, #572]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d06d      	beq.n	8005864 <HAL_RCC_OscConfig+0x130>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d169      	bne.n	8005864 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	f000 bc21 	b.w	8005fd8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800579e:	d106      	bne.n	80057ae <HAL_RCC_OscConfig+0x7a>
 80057a0:	4b86      	ldr	r3, [pc, #536]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a85      	ldr	r2, [pc, #532]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 80057a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057aa:	6013      	str	r3, [r2, #0]
 80057ac:	e02e      	b.n	800580c <HAL_RCC_OscConfig+0xd8>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10c      	bne.n	80057d0 <HAL_RCC_OscConfig+0x9c>
 80057b6:	4b81      	ldr	r3, [pc, #516]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a80      	ldr	r2, [pc, #512]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 80057bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	4b7e      	ldr	r3, [pc, #504]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a7d      	ldr	r2, [pc, #500]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 80057c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	e01d      	b.n	800580c <HAL_RCC_OscConfig+0xd8>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057d8:	d10c      	bne.n	80057f4 <HAL_RCC_OscConfig+0xc0>
 80057da:	4b78      	ldr	r3, [pc, #480]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a77      	ldr	r2, [pc, #476]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 80057e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	4b75      	ldr	r3, [pc, #468]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a74      	ldr	r2, [pc, #464]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 80057ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	e00b      	b.n	800580c <HAL_RCC_OscConfig+0xd8>
 80057f4:	4b71      	ldr	r3, [pc, #452]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a70      	ldr	r2, [pc, #448]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 80057fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	4b6e      	ldr	r3, [pc, #440]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a6d      	ldr	r2, [pc, #436]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 8005806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800580a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d013      	beq.n	800583c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005814:	f7fe fcba 	bl	800418c <HAL_GetTick>
 8005818:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800581c:	f7fe fcb6 	bl	800418c <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b64      	cmp	r3, #100	@ 0x64
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e3d4      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800582e:	4b63      	ldr	r3, [pc, #396]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0f0      	beq.n	800581c <HAL_RCC_OscConfig+0xe8>
 800583a:	e014      	b.n	8005866 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583c:	f7fe fca6 	bl	800418c <HAL_GetTick>
 8005840:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005844:	f7fe fca2 	bl	800418c <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b64      	cmp	r3, #100	@ 0x64
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e3c0      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005856:	4b59      	ldr	r3, [pc, #356]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1f0      	bne.n	8005844 <HAL_RCC_OscConfig+0x110>
 8005862:	e000      	b.n	8005866 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 80ca 	beq.w	8005a08 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005874:	4b51      	ldr	r3, [pc, #324]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800587c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800587e:	4b4f      	ldr	r3, [pc, #316]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 8005880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005882:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d007      	beq.n	800589a <HAL_RCC_OscConfig+0x166>
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	2b18      	cmp	r3, #24
 800588e:	d156      	bne.n	800593e <HAL_RCC_OscConfig+0x20a>
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d151      	bne.n	800593e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800589a:	4b48      	ldr	r3, [pc, #288]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d005      	beq.n	80058b2 <HAL_RCC_OscConfig+0x17e>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e392      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80058b2:	4b42      	ldr	r3, [pc, #264]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f023 0219 	bic.w	r2, r3, #25
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	493f      	ldr	r1, [pc, #252]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c4:	f7fe fc62 	bl	800418c <HAL_GetTick>
 80058c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058cc:	f7fe fc5e 	bl	800418c <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e37c      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058de:	4b37      	ldr	r3, [pc, #220]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0304 	and.w	r3, r3, #4
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0f0      	beq.n	80058cc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ea:	f7fe fc7f 	bl	80041ec <HAL_GetREVID>
 80058ee:	4603      	mov	r3, r0
 80058f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d817      	bhi.n	8005928 <HAL_RCC_OscConfig+0x1f4>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	2b40      	cmp	r3, #64	@ 0x40
 80058fe:	d108      	bne.n	8005912 <HAL_RCC_OscConfig+0x1de>
 8005900:	4b2e      	ldr	r3, [pc, #184]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005908:	4a2c      	ldr	r2, [pc, #176]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 800590a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800590e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005910:	e07a      	b.n	8005a08 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005912:	4b2a      	ldr	r3, [pc, #168]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	031b      	lsls	r3, r3, #12
 8005920:	4926      	ldr	r1, [pc, #152]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 8005922:	4313      	orrs	r3, r2
 8005924:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005926:	e06f      	b.n	8005a08 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005928:	4b24      	ldr	r3, [pc, #144]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	061b      	lsls	r3, r3, #24
 8005936:	4921      	ldr	r1, [pc, #132]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 8005938:	4313      	orrs	r3, r2
 800593a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800593c:	e064      	b.n	8005a08 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d047      	beq.n	80059d6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005946:	4b1d      	ldr	r3, [pc, #116]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f023 0219 	bic.w	r2, r3, #25
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	491a      	ldr	r1, [pc, #104]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 8005954:	4313      	orrs	r3, r2
 8005956:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005958:	f7fe fc18 	bl	800418c <HAL_GetTick>
 800595c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800595e:	e008      	b.n	8005972 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005960:	f7fe fc14 	bl	800418c <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b02      	cmp	r3, #2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e332      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005972:	4b12      	ldr	r3, [pc, #72]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0304 	and.w	r3, r3, #4
 800597a:	2b00      	cmp	r3, #0
 800597c:	d0f0      	beq.n	8005960 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800597e:	f7fe fc35 	bl	80041ec <HAL_GetREVID>
 8005982:	4603      	mov	r3, r0
 8005984:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005988:	4293      	cmp	r3, r2
 800598a:	d819      	bhi.n	80059c0 <HAL_RCC_OscConfig+0x28c>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	2b40      	cmp	r3, #64	@ 0x40
 8005992:	d108      	bne.n	80059a6 <HAL_RCC_OscConfig+0x272>
 8005994:	4b09      	ldr	r3, [pc, #36]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800599c:	4a07      	ldr	r2, [pc, #28]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 800599e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059a2:	6053      	str	r3, [r2, #4]
 80059a4:	e030      	b.n	8005a08 <HAL_RCC_OscConfig+0x2d4>
 80059a6:	4b05      	ldr	r3, [pc, #20]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	031b      	lsls	r3, r3, #12
 80059b4:	4901      	ldr	r1, [pc, #4]	@ (80059bc <HAL_RCC_OscConfig+0x288>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	604b      	str	r3, [r1, #4]
 80059ba:	e025      	b.n	8005a08 <HAL_RCC_OscConfig+0x2d4>
 80059bc:	58024400 	.word	0x58024400
 80059c0:	4b9a      	ldr	r3, [pc, #616]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	061b      	lsls	r3, r3, #24
 80059ce:	4997      	ldr	r1, [pc, #604]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	604b      	str	r3, [r1, #4]
 80059d4:	e018      	b.n	8005a08 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059d6:	4b95      	ldr	r3, [pc, #596]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a94      	ldr	r2, [pc, #592]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 80059dc:	f023 0301 	bic.w	r3, r3, #1
 80059e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e2:	f7fe fbd3 	bl	800418c <HAL_GetTick>
 80059e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80059e8:	e008      	b.n	80059fc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059ea:	f7fe fbcf 	bl	800418c <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d901      	bls.n	80059fc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e2ed      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80059fc:	4b8b      	ldr	r3, [pc, #556]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1f0      	bne.n	80059ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0310 	and.w	r3, r3, #16
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 80a9 	beq.w	8005b68 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a16:	4b85      	ldr	r3, [pc, #532]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a1e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a20:	4b82      	ldr	r3, [pc, #520]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a24:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d007      	beq.n	8005a3c <HAL_RCC_OscConfig+0x308>
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	2b18      	cmp	r3, #24
 8005a30:	d13a      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x374>
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f003 0303 	and.w	r3, r3, #3
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d135      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a3c:	4b7b      	ldr	r3, [pc, #492]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d005      	beq.n	8005a54 <HAL_RCC_OscConfig+0x320>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	2b80      	cmp	r3, #128	@ 0x80
 8005a4e:	d001      	beq.n	8005a54 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e2c1      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a54:	f7fe fbca 	bl	80041ec <HAL_GetREVID>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d817      	bhi.n	8005a92 <HAL_RCC_OscConfig+0x35e>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	2b20      	cmp	r3, #32
 8005a68:	d108      	bne.n	8005a7c <HAL_RCC_OscConfig+0x348>
 8005a6a:	4b70      	ldr	r3, [pc, #448]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005a72:	4a6e      	ldr	r2, [pc, #440]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005a74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a78:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a7a:	e075      	b.n	8005b68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a7c:	4b6b      	ldr	r3, [pc, #428]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	069b      	lsls	r3, r3, #26
 8005a8a:	4968      	ldr	r1, [pc, #416]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a90:	e06a      	b.n	8005b68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a92:	4b66      	ldr	r3, [pc, #408]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	061b      	lsls	r3, r3, #24
 8005aa0:	4962      	ldr	r1, [pc, #392]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005aa6:	e05f      	b.n	8005b68 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d042      	beq.n	8005b36 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005ab0:	4b5e      	ldr	r3, [pc, #376]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a5d      	ldr	r2, [pc, #372]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005abc:	f7fe fb66 	bl	800418c <HAL_GetTick>
 8005ac0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005ac4:	f7fe fb62 	bl	800418c <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e280      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ad6:	4b55      	ldr	r3, [pc, #340]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0f0      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ae2:	f7fe fb83 	bl	80041ec <HAL_GetREVID>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d817      	bhi.n	8005b20 <HAL_RCC_OscConfig+0x3ec>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d108      	bne.n	8005b0a <HAL_RCC_OscConfig+0x3d6>
 8005af8:	4b4c      	ldr	r3, [pc, #304]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005b00:	4a4a      	ldr	r2, [pc, #296]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005b02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b06:	6053      	str	r3, [r2, #4]
 8005b08:	e02e      	b.n	8005b68 <HAL_RCC_OscConfig+0x434>
 8005b0a:	4b48      	ldr	r3, [pc, #288]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	069b      	lsls	r3, r3, #26
 8005b18:	4944      	ldr	r1, [pc, #272]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	604b      	str	r3, [r1, #4]
 8005b1e:	e023      	b.n	8005b68 <HAL_RCC_OscConfig+0x434>
 8005b20:	4b42      	ldr	r3, [pc, #264]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	061b      	lsls	r3, r3, #24
 8005b2e:	493f      	ldr	r1, [pc, #252]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60cb      	str	r3, [r1, #12]
 8005b34:	e018      	b.n	8005b68 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005b36:	4b3d      	ldr	r3, [pc, #244]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a3c      	ldr	r2, [pc, #240]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005b3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b42:	f7fe fb23 	bl	800418c <HAL_GetTick>
 8005b46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b48:	e008      	b.n	8005b5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005b4a:	f7fe fb1f 	bl	800418c <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e23d      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b5c:	4b33      	ldr	r3, [pc, #204]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1f0      	bne.n	8005b4a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0308 	and.w	r3, r3, #8
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d036      	beq.n	8005be2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d019      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005b7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b80:	4a2a      	ldr	r2, [pc, #168]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005b82:	f043 0301 	orr.w	r3, r3, #1
 8005b86:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b88:	f7fe fb00 	bl	800418c <HAL_GetTick>
 8005b8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b90:	f7fe fafc 	bl	800418c <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e21a      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ba2:	4b22      	ldr	r3, [pc, #136]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005ba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d0f0      	beq.n	8005b90 <HAL_RCC_OscConfig+0x45c>
 8005bae:	e018      	b.n	8005be2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005bb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005bb6:	f023 0301 	bic.w	r3, r3, #1
 8005bba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bbc:	f7fe fae6 	bl	800418c <HAL_GetTick>
 8005bc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bc2:	e008      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bc4:	f7fe fae2 	bl	800418c <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e200      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bd6:	4b15      	ldr	r3, [pc, #84]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1f0      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0320 	and.w	r3, r3, #32
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d039      	beq.n	8005c62 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d01c      	beq.n	8005c30 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a0c      	ldr	r2, [pc, #48]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005bfc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005c00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c02:	f7fe fac3 	bl	800418c <HAL_GetTick>
 8005c06:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c08:	e008      	b.n	8005c1c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c0a:	f7fe fabf 	bl	800418c <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d901      	bls.n	8005c1c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e1dd      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c1c:	4b03      	ldr	r3, [pc, #12]	@ (8005c2c <HAL_RCC_OscConfig+0x4f8>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0f0      	beq.n	8005c0a <HAL_RCC_OscConfig+0x4d6>
 8005c28:	e01b      	b.n	8005c62 <HAL_RCC_OscConfig+0x52e>
 8005c2a:	bf00      	nop
 8005c2c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c30:	4b9b      	ldr	r3, [pc, #620]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a9a      	ldr	r2, [pc, #616]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005c36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c3a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c3c:	f7fe faa6 	bl	800418c <HAL_GetTick>
 8005c40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c42:	e008      	b.n	8005c56 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c44:	f7fe faa2 	bl	800418c <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e1c0      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c56:	4b92      	ldr	r3, [pc, #584]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1f0      	bne.n	8005c44 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0304 	and.w	r3, r3, #4
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 8081 	beq.w	8005d72 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c70:	4b8c      	ldr	r3, [pc, #560]	@ (8005ea4 <HAL_RCC_OscConfig+0x770>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a8b      	ldr	r2, [pc, #556]	@ (8005ea4 <HAL_RCC_OscConfig+0x770>)
 8005c76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c7c:	f7fe fa86 	bl	800418c <HAL_GetTick>
 8005c80:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c82:	e008      	b.n	8005c96 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c84:	f7fe fa82 	bl	800418c <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b64      	cmp	r3, #100	@ 0x64
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e1a0      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c96:	4b83      	ldr	r3, [pc, #524]	@ (8005ea4 <HAL_RCC_OscConfig+0x770>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d0f0      	beq.n	8005c84 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d106      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x584>
 8005caa:	4b7d      	ldr	r3, [pc, #500]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cae:	4a7c      	ldr	r2, [pc, #496]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005cb0:	f043 0301 	orr.w	r3, r3, #1
 8005cb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cb6:	e02d      	b.n	8005d14 <HAL_RCC_OscConfig+0x5e0>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10c      	bne.n	8005cda <HAL_RCC_OscConfig+0x5a6>
 8005cc0:	4b77      	ldr	r3, [pc, #476]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cc4:	4a76      	ldr	r2, [pc, #472]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005cc6:	f023 0301 	bic.w	r3, r3, #1
 8005cca:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ccc:	4b74      	ldr	r3, [pc, #464]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cd0:	4a73      	ldr	r2, [pc, #460]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005cd2:	f023 0304 	bic.w	r3, r3, #4
 8005cd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cd8:	e01c      	b.n	8005d14 <HAL_RCC_OscConfig+0x5e0>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	2b05      	cmp	r3, #5
 8005ce0:	d10c      	bne.n	8005cfc <HAL_RCC_OscConfig+0x5c8>
 8005ce2:	4b6f      	ldr	r3, [pc, #444]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce6:	4a6e      	ldr	r2, [pc, #440]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005ce8:	f043 0304 	orr.w	r3, r3, #4
 8005cec:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cee:	4b6c      	ldr	r3, [pc, #432]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cf2:	4a6b      	ldr	r2, [pc, #428]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005cf4:	f043 0301 	orr.w	r3, r3, #1
 8005cf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cfa:	e00b      	b.n	8005d14 <HAL_RCC_OscConfig+0x5e0>
 8005cfc:	4b68      	ldr	r3, [pc, #416]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d00:	4a67      	ldr	r2, [pc, #412]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005d02:	f023 0301 	bic.w	r3, r3, #1
 8005d06:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d08:	4b65      	ldr	r3, [pc, #404]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d0c:	4a64      	ldr	r2, [pc, #400]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005d0e:	f023 0304 	bic.w	r3, r3, #4
 8005d12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d015      	beq.n	8005d48 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1c:	f7fe fa36 	bl	800418c <HAL_GetTick>
 8005d20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d22:	e00a      	b.n	8005d3a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d24:	f7fe fa32 	bl	800418c <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e14e      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d3a:	4b59      	ldr	r3, [pc, #356]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d0ee      	beq.n	8005d24 <HAL_RCC_OscConfig+0x5f0>
 8005d46:	e014      	b.n	8005d72 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d48:	f7fe fa20 	bl	800418c <HAL_GetTick>
 8005d4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d4e:	e00a      	b.n	8005d66 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d50:	f7fe fa1c 	bl	800418c <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e138      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d66:	4b4e      	ldr	r3, [pc, #312]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1ee      	bne.n	8005d50 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 812d 	beq.w	8005fd6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005d7c:	4b48      	ldr	r3, [pc, #288]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d84:	2b18      	cmp	r3, #24
 8005d86:	f000 80bd 	beq.w	8005f04 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	f040 809e 	bne.w	8005ed0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d94:	4b42      	ldr	r3, [pc, #264]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a41      	ldr	r2, [pc, #260]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005d9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da0:	f7fe f9f4 	bl	800418c <HAL_GetTick>
 8005da4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005da6:	e008      	b.n	8005dba <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da8:	f7fe f9f0 	bl	800418c <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d901      	bls.n	8005dba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e10e      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dba:	4b39      	ldr	r3, [pc, #228]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1f0      	bne.n	8005da8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dc6:	4b36      	ldr	r3, [pc, #216]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005dc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005dca:	4b37      	ldr	r3, [pc, #220]	@ (8005ea8 <HAL_RCC_OscConfig+0x774>)
 8005dcc:	4013      	ands	r3, r2
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005dd6:	0112      	lsls	r2, r2, #4
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	4931      	ldr	r1, [pc, #196]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	628b      	str	r3, [r1, #40]	@ 0x28
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de4:	3b01      	subs	r3, #1
 8005de6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dee:	3b01      	subs	r3, #1
 8005df0:	025b      	lsls	r3, r3, #9
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	431a      	orrs	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	041b      	lsls	r3, r3, #16
 8005dfe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	061b      	lsls	r3, r3, #24
 8005e0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005e10:	4923      	ldr	r1, [pc, #140]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005e16:	4b22      	ldr	r3, [pc, #136]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1a:	4a21      	ldr	r2, [pc, #132]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e1c:	f023 0301 	bic.w	r3, r3, #1
 8005e20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e22:	4b1f      	ldr	r3, [pc, #124]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e26:	4b21      	ldr	r3, [pc, #132]	@ (8005eac <HAL_RCC_OscConfig+0x778>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005e2e:	00d2      	lsls	r2, r2, #3
 8005e30:	491b      	ldr	r1, [pc, #108]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005e36:	4b1a      	ldr	r3, [pc, #104]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e3a:	f023 020c 	bic.w	r2, r3, #12
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e42:	4917      	ldr	r1, [pc, #92]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005e48:	4b15      	ldr	r3, [pc, #84]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e4c:	f023 0202 	bic.w	r2, r3, #2
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e54:	4912      	ldr	r1, [pc, #72]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e5a:	4b11      	ldr	r3, [pc, #68]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e5e:	4a10      	ldr	r2, [pc, #64]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e66:	4b0e      	ldr	r3, [pc, #56]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e6a:	4a0d      	ldr	r2, [pc, #52]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005e72:	4b0b      	ldr	r3, [pc, #44]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e76:	4a0a      	ldr	r2, [pc, #40]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005e7e:	4b08      	ldr	r3, [pc, #32]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e82:	4a07      	ldr	r2, [pc, #28]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e84:	f043 0301 	orr.w	r3, r3, #1
 8005e88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e8a:	4b05      	ldr	r3, [pc, #20]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a04      	ldr	r2, [pc, #16]	@ (8005ea0 <HAL_RCC_OscConfig+0x76c>)
 8005e90:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e96:	f7fe f979 	bl	800418c <HAL_GetTick>
 8005e9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e9c:	e011      	b.n	8005ec2 <HAL_RCC_OscConfig+0x78e>
 8005e9e:	bf00      	nop
 8005ea0:	58024400 	.word	0x58024400
 8005ea4:	58024800 	.word	0x58024800
 8005ea8:	fffffc0c 	.word	0xfffffc0c
 8005eac:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eb0:	f7fe f96c 	bl	800418c <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e08a      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ec2:	4b47      	ldr	r3, [pc, #284]	@ (8005fe0 <HAL_RCC_OscConfig+0x8ac>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0f0      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x77c>
 8005ece:	e082      	b.n	8005fd6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ed0:	4b43      	ldr	r3, [pc, #268]	@ (8005fe0 <HAL_RCC_OscConfig+0x8ac>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a42      	ldr	r2, [pc, #264]	@ (8005fe0 <HAL_RCC_OscConfig+0x8ac>)
 8005ed6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005edc:	f7fe f956 	bl	800418c <HAL_GetTick>
 8005ee0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ee2:	e008      	b.n	8005ef6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee4:	f7fe f952 	bl	800418c <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e070      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ef6:	4b3a      	ldr	r3, [pc, #232]	@ (8005fe0 <HAL_RCC_OscConfig+0x8ac>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1f0      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x7b0>
 8005f02:	e068      	b.n	8005fd6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005f04:	4b36      	ldr	r3, [pc, #216]	@ (8005fe0 <HAL_RCC_OscConfig+0x8ac>)
 8005f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f08:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005f0a:	4b35      	ldr	r3, [pc, #212]	@ (8005fe0 <HAL_RCC_OscConfig+0x8ac>)
 8005f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f0e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d031      	beq.n	8005f7c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f003 0203 	and.w	r2, r3, #3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d12a      	bne.n	8005f7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	091b      	lsrs	r3, r3, #4
 8005f2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d122      	bne.n	8005f7c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f40:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d11a      	bne.n	8005f7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	0a5b      	lsrs	r3, r3, #9
 8005f4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f52:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d111      	bne.n	8005f7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	0c1b      	lsrs	r3, r3, #16
 8005f5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f64:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d108      	bne.n	8005f7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	0e1b      	lsrs	r3, r3, #24
 8005f6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f76:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d001      	beq.n	8005f80 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e02b      	b.n	8005fd8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005f80:	4b17      	ldr	r3, [pc, #92]	@ (8005fe0 <HAL_RCC_OscConfig+0x8ac>)
 8005f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f84:	08db      	lsrs	r3, r3, #3
 8005f86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f8a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d01f      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005f96:	4b12      	ldr	r3, [pc, #72]	@ (8005fe0 <HAL_RCC_OscConfig+0x8ac>)
 8005f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f9a:	4a11      	ldr	r2, [pc, #68]	@ (8005fe0 <HAL_RCC_OscConfig+0x8ac>)
 8005f9c:	f023 0301 	bic.w	r3, r3, #1
 8005fa0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005fa2:	f7fe f8f3 	bl	800418c <HAL_GetTick>
 8005fa6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005fa8:	bf00      	nop
 8005faa:	f7fe f8ef 	bl	800418c <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d0f9      	beq.n	8005faa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe0 <HAL_RCC_OscConfig+0x8ac>)
 8005fb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fba:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe4 <HAL_RCC_OscConfig+0x8b0>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005fc2:	00d2      	lsls	r2, r2, #3
 8005fc4:	4906      	ldr	r1, [pc, #24]	@ (8005fe0 <HAL_RCC_OscConfig+0x8ac>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005fca:	4b05      	ldr	r3, [pc, #20]	@ (8005fe0 <HAL_RCC_OscConfig+0x8ac>)
 8005fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fce:	4a04      	ldr	r2, [pc, #16]	@ (8005fe0 <HAL_RCC_OscConfig+0x8ac>)
 8005fd0:	f043 0301 	orr.w	r3, r3, #1
 8005fd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3730      	adds	r7, #48	@ 0x30
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	58024400 	.word	0x58024400
 8005fe4:	ffff0007 	.word	0xffff0007

08005fe8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e19c      	b.n	8006336 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ffc:	4b8a      	ldr	r3, [pc, #552]	@ (8006228 <HAL_RCC_ClockConfig+0x240>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 030f 	and.w	r3, r3, #15
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d910      	bls.n	800602c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800600a:	4b87      	ldr	r3, [pc, #540]	@ (8006228 <HAL_RCC_ClockConfig+0x240>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f023 020f 	bic.w	r2, r3, #15
 8006012:	4985      	ldr	r1, [pc, #532]	@ (8006228 <HAL_RCC_ClockConfig+0x240>)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	4313      	orrs	r3, r2
 8006018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800601a:	4b83      	ldr	r3, [pc, #524]	@ (8006228 <HAL_RCC_ClockConfig+0x240>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 030f 	and.w	r3, r3, #15
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	429a      	cmp	r2, r3
 8006026:	d001      	beq.n	800602c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e184      	b.n	8006336 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0304 	and.w	r3, r3, #4
 8006034:	2b00      	cmp	r3, #0
 8006036:	d010      	beq.n	800605a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691a      	ldr	r2, [r3, #16]
 800603c:	4b7b      	ldr	r3, [pc, #492]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006044:	429a      	cmp	r2, r3
 8006046:	d908      	bls.n	800605a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006048:	4b78      	ldr	r3, [pc, #480]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	4975      	ldr	r1, [pc, #468]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 8006056:	4313      	orrs	r3, r2
 8006058:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0308 	and.w	r3, r3, #8
 8006062:	2b00      	cmp	r3, #0
 8006064:	d010      	beq.n	8006088 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	695a      	ldr	r2, [r3, #20]
 800606a:	4b70      	ldr	r3, [pc, #448]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006072:	429a      	cmp	r2, r3
 8006074:	d908      	bls.n	8006088 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006076:	4b6d      	ldr	r3, [pc, #436]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	496a      	ldr	r1, [pc, #424]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 8006084:	4313      	orrs	r3, r2
 8006086:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0310 	and.w	r3, r3, #16
 8006090:	2b00      	cmp	r3, #0
 8006092:	d010      	beq.n	80060b6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	699a      	ldr	r2, [r3, #24]
 8006098:	4b64      	ldr	r3, [pc, #400]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 800609a:	69db      	ldr	r3, [r3, #28]
 800609c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d908      	bls.n	80060b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80060a4:	4b61      	ldr	r3, [pc, #388]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 80060a6:	69db      	ldr	r3, [r3, #28]
 80060a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	495e      	ldr	r1, [pc, #376]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0320 	and.w	r3, r3, #32
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d010      	beq.n	80060e4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	69da      	ldr	r2, [r3, #28]
 80060c6:	4b59      	ldr	r3, [pc, #356]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d908      	bls.n	80060e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80060d2:	4b56      	ldr	r3, [pc, #344]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	4953      	ldr	r1, [pc, #332]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d010      	beq.n	8006112 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	4b4d      	ldr	r3, [pc, #308]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	f003 030f 	and.w	r3, r3, #15
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d908      	bls.n	8006112 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006100:	4b4a      	ldr	r3, [pc, #296]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	f023 020f 	bic.w	r2, r3, #15
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	4947      	ldr	r1, [pc, #284]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 800610e:	4313      	orrs	r3, r2
 8006110:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	d055      	beq.n	80061ca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800611e:	4b43      	ldr	r3, [pc, #268]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	4940      	ldr	r1, [pc, #256]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 800612c:	4313      	orrs	r3, r2
 800612e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	2b02      	cmp	r3, #2
 8006136:	d107      	bne.n	8006148 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006138:	4b3c      	ldr	r3, [pc, #240]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d121      	bne.n	8006188 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e0f6      	b.n	8006336 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	2b03      	cmp	r3, #3
 800614e:	d107      	bne.n	8006160 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006150:	4b36      	ldr	r3, [pc, #216]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d115      	bne.n	8006188 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e0ea      	b.n	8006336 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d107      	bne.n	8006178 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006168:	4b30      	ldr	r3, [pc, #192]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006170:	2b00      	cmp	r3, #0
 8006172:	d109      	bne.n	8006188 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e0de      	b.n	8006336 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006178:	4b2c      	ldr	r3, [pc, #176]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e0d6      	b.n	8006336 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006188:	4b28      	ldr	r3, [pc, #160]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	f023 0207 	bic.w	r2, r3, #7
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	4925      	ldr	r1, [pc, #148]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 8006196:	4313      	orrs	r3, r2
 8006198:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800619a:	f7fd fff7 	bl	800418c <HAL_GetTick>
 800619e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061a0:	e00a      	b.n	80061b8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061a2:	f7fd fff3 	bl	800418c <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e0be      	b.n	8006336 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061b8:	4b1c      	ldr	r3, [pc, #112]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	00db      	lsls	r3, r3, #3
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d1eb      	bne.n	80061a2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d010      	beq.n	80061f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	4b14      	ldr	r3, [pc, #80]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	f003 030f 	and.w	r3, r3, #15
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d208      	bcs.n	80061f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061e6:	4b11      	ldr	r3, [pc, #68]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	f023 020f 	bic.w	r2, r3, #15
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	490e      	ldr	r1, [pc, #56]	@ (800622c <HAL_RCC_ClockConfig+0x244>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006228 <HAL_RCC_ClockConfig+0x240>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 030f 	and.w	r3, r3, #15
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	429a      	cmp	r2, r3
 8006204:	d214      	bcs.n	8006230 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006206:	4b08      	ldr	r3, [pc, #32]	@ (8006228 <HAL_RCC_ClockConfig+0x240>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f023 020f 	bic.w	r2, r3, #15
 800620e:	4906      	ldr	r1, [pc, #24]	@ (8006228 <HAL_RCC_ClockConfig+0x240>)
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	4313      	orrs	r3, r2
 8006214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006216:	4b04      	ldr	r3, [pc, #16]	@ (8006228 <HAL_RCC_ClockConfig+0x240>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 030f 	and.w	r3, r3, #15
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	429a      	cmp	r2, r3
 8006222:	d005      	beq.n	8006230 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e086      	b.n	8006336 <HAL_RCC_ClockConfig+0x34e>
 8006228:	52002000 	.word	0x52002000
 800622c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b00      	cmp	r3, #0
 800623a:	d010      	beq.n	800625e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691a      	ldr	r2, [r3, #16]
 8006240:	4b3f      	ldr	r3, [pc, #252]	@ (8006340 <HAL_RCC_ClockConfig+0x358>)
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006248:	429a      	cmp	r2, r3
 800624a:	d208      	bcs.n	800625e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800624c:	4b3c      	ldr	r3, [pc, #240]	@ (8006340 <HAL_RCC_ClockConfig+0x358>)
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	4939      	ldr	r1, [pc, #228]	@ (8006340 <HAL_RCC_ClockConfig+0x358>)
 800625a:	4313      	orrs	r3, r2
 800625c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0308 	and.w	r3, r3, #8
 8006266:	2b00      	cmp	r3, #0
 8006268:	d010      	beq.n	800628c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	695a      	ldr	r2, [r3, #20]
 800626e:	4b34      	ldr	r3, [pc, #208]	@ (8006340 <HAL_RCC_ClockConfig+0x358>)
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006276:	429a      	cmp	r2, r3
 8006278:	d208      	bcs.n	800628c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800627a:	4b31      	ldr	r3, [pc, #196]	@ (8006340 <HAL_RCC_ClockConfig+0x358>)
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	492e      	ldr	r1, [pc, #184]	@ (8006340 <HAL_RCC_ClockConfig+0x358>)
 8006288:	4313      	orrs	r3, r2
 800628a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0310 	and.w	r3, r3, #16
 8006294:	2b00      	cmp	r3, #0
 8006296:	d010      	beq.n	80062ba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	699a      	ldr	r2, [r3, #24]
 800629c:	4b28      	ldr	r3, [pc, #160]	@ (8006340 <HAL_RCC_ClockConfig+0x358>)
 800629e:	69db      	ldr	r3, [r3, #28]
 80062a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d208      	bcs.n	80062ba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062a8:	4b25      	ldr	r3, [pc, #148]	@ (8006340 <HAL_RCC_ClockConfig+0x358>)
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	4922      	ldr	r1, [pc, #136]	@ (8006340 <HAL_RCC_ClockConfig+0x358>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0320 	and.w	r3, r3, #32
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d010      	beq.n	80062e8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	69da      	ldr	r2, [r3, #28]
 80062ca:	4b1d      	ldr	r3, [pc, #116]	@ (8006340 <HAL_RCC_ClockConfig+0x358>)
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d208      	bcs.n	80062e8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80062d6:	4b1a      	ldr	r3, [pc, #104]	@ (8006340 <HAL_RCC_ClockConfig+0x358>)
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	4917      	ldr	r1, [pc, #92]	@ (8006340 <HAL_RCC_ClockConfig+0x358>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80062e8:	f000 f834 	bl	8006354 <HAL_RCC_GetSysClockFreq>
 80062ec:	4602      	mov	r2, r0
 80062ee:	4b14      	ldr	r3, [pc, #80]	@ (8006340 <HAL_RCC_ClockConfig+0x358>)
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	0a1b      	lsrs	r3, r3, #8
 80062f4:	f003 030f 	and.w	r3, r3, #15
 80062f8:	4912      	ldr	r1, [pc, #72]	@ (8006344 <HAL_RCC_ClockConfig+0x35c>)
 80062fa:	5ccb      	ldrb	r3, [r1, r3]
 80062fc:	f003 031f 	and.w	r3, r3, #31
 8006300:	fa22 f303 	lsr.w	r3, r2, r3
 8006304:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006306:	4b0e      	ldr	r3, [pc, #56]	@ (8006340 <HAL_RCC_ClockConfig+0x358>)
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	f003 030f 	and.w	r3, r3, #15
 800630e:	4a0d      	ldr	r2, [pc, #52]	@ (8006344 <HAL_RCC_ClockConfig+0x35c>)
 8006310:	5cd3      	ldrb	r3, [r2, r3]
 8006312:	f003 031f 	and.w	r3, r3, #31
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	fa22 f303 	lsr.w	r3, r2, r3
 800631c:	4a0a      	ldr	r2, [pc, #40]	@ (8006348 <HAL_RCC_ClockConfig+0x360>)
 800631e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006320:	4a0a      	ldr	r2, [pc, #40]	@ (800634c <HAL_RCC_ClockConfig+0x364>)
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006326:	4b0a      	ldr	r3, [pc, #40]	@ (8006350 <HAL_RCC_ClockConfig+0x368>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4618      	mov	r0, r3
 800632c:	f7fd fcc4 	bl	8003cb8 <HAL_InitTick>
 8006330:	4603      	mov	r3, r0
 8006332:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006334:	7bfb      	ldrb	r3, [r7, #15]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3718      	adds	r7, #24
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	58024400 	.word	0x58024400
 8006344:	0800f81c 	.word	0x0800f81c
 8006348:	24000004 	.word	0x24000004
 800634c:	24000000 	.word	0x24000000
 8006350:	24000008 	.word	0x24000008

08006354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006354:	b480      	push	{r7}
 8006356:	b089      	sub	sp, #36	@ 0x24
 8006358:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800635a:	4bb3      	ldr	r3, [pc, #716]	@ (8006628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006362:	2b18      	cmp	r3, #24
 8006364:	f200 8155 	bhi.w	8006612 <HAL_RCC_GetSysClockFreq+0x2be>
 8006368:	a201      	add	r2, pc, #4	@ (adr r2, 8006370 <HAL_RCC_GetSysClockFreq+0x1c>)
 800636a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636e:	bf00      	nop
 8006370:	080063d5 	.word	0x080063d5
 8006374:	08006613 	.word	0x08006613
 8006378:	08006613 	.word	0x08006613
 800637c:	08006613 	.word	0x08006613
 8006380:	08006613 	.word	0x08006613
 8006384:	08006613 	.word	0x08006613
 8006388:	08006613 	.word	0x08006613
 800638c:	08006613 	.word	0x08006613
 8006390:	080063fb 	.word	0x080063fb
 8006394:	08006613 	.word	0x08006613
 8006398:	08006613 	.word	0x08006613
 800639c:	08006613 	.word	0x08006613
 80063a0:	08006613 	.word	0x08006613
 80063a4:	08006613 	.word	0x08006613
 80063a8:	08006613 	.word	0x08006613
 80063ac:	08006613 	.word	0x08006613
 80063b0:	08006401 	.word	0x08006401
 80063b4:	08006613 	.word	0x08006613
 80063b8:	08006613 	.word	0x08006613
 80063bc:	08006613 	.word	0x08006613
 80063c0:	08006613 	.word	0x08006613
 80063c4:	08006613 	.word	0x08006613
 80063c8:	08006613 	.word	0x08006613
 80063cc:	08006613 	.word	0x08006613
 80063d0:	08006407 	.word	0x08006407
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063d4:	4b94      	ldr	r3, [pc, #592]	@ (8006628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0320 	and.w	r3, r3, #32
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d009      	beq.n	80063f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063e0:	4b91      	ldr	r3, [pc, #580]	@ (8006628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	08db      	lsrs	r3, r3, #3
 80063e6:	f003 0303 	and.w	r3, r3, #3
 80063ea:	4a90      	ldr	r2, [pc, #576]	@ (800662c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80063ec:	fa22 f303 	lsr.w	r3, r2, r3
 80063f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80063f2:	e111      	b.n	8006618 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80063f4:	4b8d      	ldr	r3, [pc, #564]	@ (800662c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80063f6:	61bb      	str	r3, [r7, #24]
      break;
 80063f8:	e10e      	b.n	8006618 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80063fa:	4b8d      	ldr	r3, [pc, #564]	@ (8006630 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80063fc:	61bb      	str	r3, [r7, #24]
      break;
 80063fe:	e10b      	b.n	8006618 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006400:	4b8c      	ldr	r3, [pc, #560]	@ (8006634 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006402:	61bb      	str	r3, [r7, #24]
      break;
 8006404:	e108      	b.n	8006618 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006406:	4b88      	ldr	r3, [pc, #544]	@ (8006628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640a:	f003 0303 	and.w	r3, r3, #3
 800640e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006410:	4b85      	ldr	r3, [pc, #532]	@ (8006628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006414:	091b      	lsrs	r3, r3, #4
 8006416:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800641a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800641c:	4b82      	ldr	r3, [pc, #520]	@ (8006628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800641e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006420:	f003 0301 	and.w	r3, r3, #1
 8006424:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006426:	4b80      	ldr	r3, [pc, #512]	@ (8006628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800642a:	08db      	lsrs	r3, r3, #3
 800642c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	fb02 f303 	mul.w	r3, r2, r3
 8006436:	ee07 3a90 	vmov	s15, r3
 800643a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800643e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 80e1 	beq.w	800660c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2b02      	cmp	r3, #2
 800644e:	f000 8083 	beq.w	8006558 <HAL_RCC_GetSysClockFreq+0x204>
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2b02      	cmp	r3, #2
 8006456:	f200 80a1 	bhi.w	800659c <HAL_RCC_GetSysClockFreq+0x248>
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d003      	beq.n	8006468 <HAL_RCC_GetSysClockFreq+0x114>
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d056      	beq.n	8006514 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006466:	e099      	b.n	800659c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006468:	4b6f      	ldr	r3, [pc, #444]	@ (8006628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0320 	and.w	r3, r3, #32
 8006470:	2b00      	cmp	r3, #0
 8006472:	d02d      	beq.n	80064d0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006474:	4b6c      	ldr	r3, [pc, #432]	@ (8006628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	08db      	lsrs	r3, r3, #3
 800647a:	f003 0303 	and.w	r3, r3, #3
 800647e:	4a6b      	ldr	r2, [pc, #428]	@ (800662c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006480:	fa22 f303 	lsr.w	r3, r2, r3
 8006484:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	ee07 3a90 	vmov	s15, r3
 800648c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	ee07 3a90 	vmov	s15, r3
 8006496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800649a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800649e:	4b62      	ldr	r3, [pc, #392]	@ (8006628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064a6:	ee07 3a90 	vmov	s15, r3
 80064aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80064b2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006638 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80064ce:	e087      	b.n	80065e0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	ee07 3a90 	vmov	s15, r3
 80064d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064da:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800663c <HAL_RCC_GetSysClockFreq+0x2e8>
 80064de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064e2:	4b51      	ldr	r3, [pc, #324]	@ (8006628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ea:	ee07 3a90 	vmov	s15, r3
 80064ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80064f6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006638 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006502:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800650a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800650e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006512:	e065      	b.n	80065e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	ee07 3a90 	vmov	s15, r3
 800651a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800651e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006640 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006526:	4b40      	ldr	r3, [pc, #256]	@ (8006628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800652a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800652e:	ee07 3a90 	vmov	s15, r3
 8006532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006536:	ed97 6a02 	vldr	s12, [r7, #8]
 800653a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006638 <HAL_RCC_GetSysClockFreq+0x2e4>
 800653e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006546:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800654a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800654e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006552:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006556:	e043      	b.n	80065e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	ee07 3a90 	vmov	s15, r3
 800655e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006562:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006644 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800656a:	4b2f      	ldr	r3, [pc, #188]	@ (8006628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800656c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800656e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006572:	ee07 3a90 	vmov	s15, r3
 8006576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800657a:	ed97 6a02 	vldr	s12, [r7, #8]
 800657e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006638 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800658a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800658e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006596:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800659a:	e021      	b.n	80065e0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	ee07 3a90 	vmov	s15, r3
 80065a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065a6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006640 <HAL_RCC_GetSysClockFreq+0x2ec>
 80065aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b6:	ee07 3a90 	vmov	s15, r3
 80065ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065be:	ed97 6a02 	vldr	s12, [r7, #8]
 80065c2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006638 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80065de:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80065e0:	4b11      	ldr	r3, [pc, #68]	@ (8006628 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e4:	0a5b      	lsrs	r3, r3, #9
 80065e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065ea:	3301      	adds	r3, #1
 80065ec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	ee07 3a90 	vmov	s15, r3
 80065f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80065f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80065fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006600:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006604:	ee17 3a90 	vmov	r3, s15
 8006608:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800660a:	e005      	b.n	8006618 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	61bb      	str	r3, [r7, #24]
      break;
 8006610:	e002      	b.n	8006618 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006612:	4b07      	ldr	r3, [pc, #28]	@ (8006630 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006614:	61bb      	str	r3, [r7, #24]
      break;
 8006616:	bf00      	nop
  }

  return sysclockfreq;
 8006618:	69bb      	ldr	r3, [r7, #24]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3724      	adds	r7, #36	@ 0x24
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	58024400 	.word	0x58024400
 800662c:	03d09000 	.word	0x03d09000
 8006630:	003d0900 	.word	0x003d0900
 8006634:	017d7840 	.word	0x017d7840
 8006638:	46000000 	.word	0x46000000
 800663c:	4c742400 	.word	0x4c742400
 8006640:	4a742400 	.word	0x4a742400
 8006644:	4bbebc20 	.word	0x4bbebc20

08006648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800664e:	f7ff fe81 	bl	8006354 <HAL_RCC_GetSysClockFreq>
 8006652:	4602      	mov	r2, r0
 8006654:	4b10      	ldr	r3, [pc, #64]	@ (8006698 <HAL_RCC_GetHCLKFreq+0x50>)
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	0a1b      	lsrs	r3, r3, #8
 800665a:	f003 030f 	and.w	r3, r3, #15
 800665e:	490f      	ldr	r1, [pc, #60]	@ (800669c <HAL_RCC_GetHCLKFreq+0x54>)
 8006660:	5ccb      	ldrb	r3, [r1, r3]
 8006662:	f003 031f 	and.w	r3, r3, #31
 8006666:	fa22 f303 	lsr.w	r3, r2, r3
 800666a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800666c:	4b0a      	ldr	r3, [pc, #40]	@ (8006698 <HAL_RCC_GetHCLKFreq+0x50>)
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	f003 030f 	and.w	r3, r3, #15
 8006674:	4a09      	ldr	r2, [pc, #36]	@ (800669c <HAL_RCC_GetHCLKFreq+0x54>)
 8006676:	5cd3      	ldrb	r3, [r2, r3]
 8006678:	f003 031f 	and.w	r3, r3, #31
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	fa22 f303 	lsr.w	r3, r2, r3
 8006682:	4a07      	ldr	r2, [pc, #28]	@ (80066a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006684:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006686:	4a07      	ldr	r2, [pc, #28]	@ (80066a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800668c:	4b04      	ldr	r3, [pc, #16]	@ (80066a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800668e:	681b      	ldr	r3, [r3, #0]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	58024400 	.word	0x58024400
 800669c:	0800f81c 	.word	0x0800f81c
 80066a0:	24000004 	.word	0x24000004
 80066a4:	24000000 	.word	0x24000000

080066a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80066ac:	f7ff ffcc 	bl	8006648 <HAL_RCC_GetHCLKFreq>
 80066b0:	4602      	mov	r2, r0
 80066b2:	4b06      	ldr	r3, [pc, #24]	@ (80066cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	091b      	lsrs	r3, r3, #4
 80066b8:	f003 0307 	and.w	r3, r3, #7
 80066bc:	4904      	ldr	r1, [pc, #16]	@ (80066d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80066be:	5ccb      	ldrb	r3, [r1, r3]
 80066c0:	f003 031f 	and.w	r3, r3, #31
 80066c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	58024400 	.word	0x58024400
 80066d0:	0800f81c 	.word	0x0800f81c

080066d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80066d8:	f7ff ffb6 	bl	8006648 <HAL_RCC_GetHCLKFreq>
 80066dc:	4602      	mov	r2, r0
 80066de:	4b06      	ldr	r3, [pc, #24]	@ (80066f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	0a1b      	lsrs	r3, r3, #8
 80066e4:	f003 0307 	and.w	r3, r3, #7
 80066e8:	4904      	ldr	r1, [pc, #16]	@ (80066fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80066ea:	5ccb      	ldrb	r3, [r1, r3]
 80066ec:	f003 031f 	and.w	r3, r3, #31
 80066f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	58024400 	.word	0x58024400
 80066fc:	0800f81c 	.word	0x0800f81c

08006700 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	223f      	movs	r2, #63	@ 0x3f
 800670e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006710:	4b1a      	ldr	r3, [pc, #104]	@ (800677c <HAL_RCC_GetClockConfig+0x7c>)
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	f003 0207 	and.w	r2, r3, #7
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800671c:	4b17      	ldr	r3, [pc, #92]	@ (800677c <HAL_RCC_GetClockConfig+0x7c>)
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006728:	4b14      	ldr	r3, [pc, #80]	@ (800677c <HAL_RCC_GetClockConfig+0x7c>)
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	f003 020f 	and.w	r2, r3, #15
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006734:	4b11      	ldr	r3, [pc, #68]	@ (800677c <HAL_RCC_GetClockConfig+0x7c>)
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006740:	4b0e      	ldr	r3, [pc, #56]	@ (800677c <HAL_RCC_GetClockConfig+0x7c>)
 8006742:	69db      	ldr	r3, [r3, #28]
 8006744:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800674c:	4b0b      	ldr	r3, [pc, #44]	@ (800677c <HAL_RCC_GetClockConfig+0x7c>)
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006758:	4b08      	ldr	r3, [pc, #32]	@ (800677c <HAL_RCC_GetClockConfig+0x7c>)
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006764:	4b06      	ldr	r3, [pc, #24]	@ (8006780 <HAL_RCC_GetClockConfig+0x80>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 020f 	and.w	r2, r3, #15
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	601a      	str	r2, [r3, #0]
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	58024400 	.word	0x58024400
 8006780:	52002000 	.word	0x52002000

08006784 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006788:	b0ca      	sub	sp, #296	@ 0x128
 800678a:	af00      	add	r7, sp, #0
 800678c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006790:	2300      	movs	r3, #0
 8006792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006796:	2300      	movs	r3, #0
 8006798:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800679c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80067a8:	2500      	movs	r5, #0
 80067aa:	ea54 0305 	orrs.w	r3, r4, r5
 80067ae:	d049      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80067b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80067ba:	d02f      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80067bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80067c0:	d828      	bhi.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80067c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067c6:	d01a      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80067c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067cc:	d822      	bhi.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80067d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067d6:	d007      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80067d8:	e01c      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067da:	4bb8      	ldr	r3, [pc, #736]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067de:	4ab7      	ldr	r2, [pc, #732]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80067e6:	e01a      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ec:	3308      	adds	r3, #8
 80067ee:	2102      	movs	r1, #2
 80067f0:	4618      	mov	r0, r3
 80067f2:	f001 fc8f 	bl	8008114 <RCCEx_PLL2_Config>
 80067f6:	4603      	mov	r3, r0
 80067f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80067fc:	e00f      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006802:	3328      	adds	r3, #40	@ 0x28
 8006804:	2102      	movs	r1, #2
 8006806:	4618      	mov	r0, r3
 8006808:	f001 fd36 	bl	8008278 <RCCEx_PLL3_Config>
 800680c:	4603      	mov	r3, r0
 800680e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006812:	e004      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800681a:	e000      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800681c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800681e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10a      	bne.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006826:	4ba5      	ldr	r3, [pc, #660]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800682a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800682e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006832:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006834:	4aa1      	ldr	r2, [pc, #644]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006836:	430b      	orrs	r3, r1
 8006838:	6513      	str	r3, [r2, #80]	@ 0x50
 800683a:	e003      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800683c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006840:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006850:	f04f 0900 	mov.w	r9, #0
 8006854:	ea58 0309 	orrs.w	r3, r8, r9
 8006858:	d047      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800685a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800685e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006860:	2b04      	cmp	r3, #4
 8006862:	d82a      	bhi.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006864:	a201      	add	r2, pc, #4	@ (adr r2, 800686c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686a:	bf00      	nop
 800686c:	08006881 	.word	0x08006881
 8006870:	0800688f 	.word	0x0800688f
 8006874:	080068a5 	.word	0x080068a5
 8006878:	080068c3 	.word	0x080068c3
 800687c:	080068c3 	.word	0x080068c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006880:	4b8e      	ldr	r3, [pc, #568]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006884:	4a8d      	ldr	r2, [pc, #564]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006886:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800688a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800688c:	e01a      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800688e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006892:	3308      	adds	r3, #8
 8006894:	2100      	movs	r1, #0
 8006896:	4618      	mov	r0, r3
 8006898:	f001 fc3c 	bl	8008114 <RCCEx_PLL2_Config>
 800689c:	4603      	mov	r3, r0
 800689e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068a2:	e00f      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a8:	3328      	adds	r3, #40	@ 0x28
 80068aa:	2100      	movs	r1, #0
 80068ac:	4618      	mov	r0, r3
 80068ae:	f001 fce3 	bl	8008278 <RCCEx_PLL3_Config>
 80068b2:	4603      	mov	r3, r0
 80068b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068b8:	e004      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068c0:	e000      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80068c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10a      	bne.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068cc:	4b7b      	ldr	r3, [pc, #492]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068d0:	f023 0107 	bic.w	r1, r3, #7
 80068d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068da:	4a78      	ldr	r2, [pc, #480]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068dc:	430b      	orrs	r3, r1
 80068de:	6513      	str	r3, [r2, #80]	@ 0x50
 80068e0:	e003      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80068ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80068f6:	f04f 0b00 	mov.w	fp, #0
 80068fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80068fe:	d04c      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006906:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800690a:	d030      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800690c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006910:	d829      	bhi.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006912:	2bc0      	cmp	r3, #192	@ 0xc0
 8006914:	d02d      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006916:	2bc0      	cmp	r3, #192	@ 0xc0
 8006918:	d825      	bhi.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800691a:	2b80      	cmp	r3, #128	@ 0x80
 800691c:	d018      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800691e:	2b80      	cmp	r3, #128	@ 0x80
 8006920:	d821      	bhi.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006922:	2b00      	cmp	r3, #0
 8006924:	d002      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006926:	2b40      	cmp	r3, #64	@ 0x40
 8006928:	d007      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800692a:	e01c      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800692c:	4b63      	ldr	r3, [pc, #396]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800692e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006930:	4a62      	ldr	r2, [pc, #392]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006932:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006936:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006938:	e01c      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800693a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800693e:	3308      	adds	r3, #8
 8006940:	2100      	movs	r1, #0
 8006942:	4618      	mov	r0, r3
 8006944:	f001 fbe6 	bl	8008114 <RCCEx_PLL2_Config>
 8006948:	4603      	mov	r3, r0
 800694a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800694e:	e011      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006954:	3328      	adds	r3, #40	@ 0x28
 8006956:	2100      	movs	r1, #0
 8006958:	4618      	mov	r0, r3
 800695a:	f001 fc8d 	bl	8008278 <RCCEx_PLL3_Config>
 800695e:	4603      	mov	r3, r0
 8006960:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006964:	e006      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800696c:	e002      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800696e:	bf00      	nop
 8006970:	e000      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006972:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006974:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10a      	bne.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800697c:	4b4f      	ldr	r3, [pc, #316]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800697e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006980:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800698a:	4a4c      	ldr	r2, [pc, #304]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800698c:	430b      	orrs	r3, r1
 800698e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006990:	e003      	b.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006996:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800699a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800699e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80069a6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80069aa:	2300      	movs	r3, #0
 80069ac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80069b0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80069b4:	460b      	mov	r3, r1
 80069b6:	4313      	orrs	r3, r2
 80069b8:	d053      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80069ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80069c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80069c6:	d035      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80069c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80069cc:	d82e      	bhi.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80069ce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80069d2:	d031      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80069d4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80069d8:	d828      	bhi.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80069da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069de:	d01a      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80069e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069e4:	d822      	bhi.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80069ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069ee:	d007      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80069f0:	e01c      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069f2:	4b32      	ldr	r3, [pc, #200]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f6:	4a31      	ldr	r2, [pc, #196]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069fe:	e01c      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a04:	3308      	adds	r3, #8
 8006a06:	2100      	movs	r1, #0
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f001 fb83 	bl	8008114 <RCCEx_PLL2_Config>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006a14:	e011      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a1a:	3328      	adds	r3, #40	@ 0x28
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f001 fc2a 	bl	8008278 <RCCEx_PLL3_Config>
 8006a24:	4603      	mov	r3, r0
 8006a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a2a:	e006      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a32:	e002      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006a34:	bf00      	nop
 8006a36:	e000      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10b      	bne.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006a42:	4b1e      	ldr	r3, [pc, #120]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a46:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006a52:	4a1a      	ldr	r2, [pc, #104]	@ (8006abc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a54:	430b      	orrs	r3, r1
 8006a56:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a58:	e003      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006a6e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006a72:	2300      	movs	r3, #0
 8006a74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006a78:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	d056      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006a8a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a8e:	d038      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006a90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a94:	d831      	bhi.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a96:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a9a:	d034      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006a9c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006aa0:	d82b      	bhi.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006aa2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006aa6:	d01d      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006aa8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006aac:	d825      	bhi.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d006      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006ab2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ab6:	d00a      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006ab8:	e01f      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006aba:	bf00      	nop
 8006abc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ac0:	4ba2      	ldr	r3, [pc, #648]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac4:	4aa1      	ldr	r2, [pc, #644]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ac6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006aca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006acc:	e01c      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad2:	3308      	adds	r3, #8
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f001 fb1c 	bl	8008114 <RCCEx_PLL2_Config>
 8006adc:	4603      	mov	r3, r0
 8006ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006ae2:	e011      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae8:	3328      	adds	r3, #40	@ 0x28
 8006aea:	2100      	movs	r1, #0
 8006aec:	4618      	mov	r0, r3
 8006aee:	f001 fbc3 	bl	8008278 <RCCEx_PLL3_Config>
 8006af2:	4603      	mov	r3, r0
 8006af4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006af8:	e006      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b00:	e002      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006b02:	bf00      	nop
 8006b04:	e000      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10b      	bne.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006b10:	4b8e      	ldr	r3, [pc, #568]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b14:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006b20:	4a8a      	ldr	r2, [pc, #552]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b22:	430b      	orrs	r3, r1
 8006b24:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b26:	e003      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b38:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006b3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006b40:	2300      	movs	r3, #0
 8006b42:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006b46:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	d03a      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b56:	2b30      	cmp	r3, #48	@ 0x30
 8006b58:	d01f      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006b5a:	2b30      	cmp	r3, #48	@ 0x30
 8006b5c:	d819      	bhi.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006b5e:	2b20      	cmp	r3, #32
 8006b60:	d00c      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006b62:	2b20      	cmp	r3, #32
 8006b64:	d815      	bhi.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d019      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006b6a:	2b10      	cmp	r3, #16
 8006b6c:	d111      	bne.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b6e:	4b77      	ldr	r3, [pc, #476]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b72:	4a76      	ldr	r2, [pc, #472]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006b7a:	e011      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b80:	3308      	adds	r3, #8
 8006b82:	2102      	movs	r1, #2
 8006b84:	4618      	mov	r0, r3
 8006b86:	f001 fac5 	bl	8008114 <RCCEx_PLL2_Config>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006b90:	e006      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b98:	e002      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006b9a:	bf00      	nop
 8006b9c:	e000      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006b9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ba0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10a      	bne.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006ba8:	4b68      	ldr	r3, [pc, #416]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006baa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bac:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bb6:	4a65      	ldr	r2, [pc, #404]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bb8:	430b      	orrs	r3, r1
 8006bba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006bbc:	e003      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bce:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006bd2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006bdc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006be0:	460b      	mov	r3, r1
 8006be2:	4313      	orrs	r3, r2
 8006be4:	d051      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bf0:	d035      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006bf2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bf6:	d82e      	bhi.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006bf8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006bfc:	d031      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006bfe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c02:	d828      	bhi.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006c04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c08:	d01a      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006c0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c0e:	d822      	bhi.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d003      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006c14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c18:	d007      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006c1a:	e01c      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c1c:	4b4b      	ldr	r3, [pc, #300]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c20:	4a4a      	ldr	r2, [pc, #296]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c28:	e01c      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c2e:	3308      	adds	r3, #8
 8006c30:	2100      	movs	r1, #0
 8006c32:	4618      	mov	r0, r3
 8006c34:	f001 fa6e 	bl	8008114 <RCCEx_PLL2_Config>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c3e:	e011      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c44:	3328      	adds	r3, #40	@ 0x28
 8006c46:	2100      	movs	r1, #0
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f001 fb15 	bl	8008278 <RCCEx_PLL3_Config>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c54:	e006      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c5c:	e002      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006c5e:	bf00      	nop
 8006c60:	e000      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10a      	bne.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006c6c:	4b37      	ldr	r3, [pc, #220]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c70:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c7a:	4a34      	ldr	r2, [pc, #208]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c7c:	430b      	orrs	r3, r1
 8006c7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c80:	e003      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c92:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006c96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006ca0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	d056      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cb4:	d033      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006cb6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cba:	d82c      	bhi.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006cbc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006cc0:	d02f      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006cc2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006cc6:	d826      	bhi.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006cc8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ccc:	d02b      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006cce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006cd2:	d820      	bhi.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006cd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cd8:	d012      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006cda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cde:	d81a      	bhi.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d022      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ce8:	d115      	bne.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cee:	3308      	adds	r3, #8
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f001 fa0e 	bl	8008114 <RCCEx_PLL2_Config>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006cfe:	e015      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d04:	3328      	adds	r3, #40	@ 0x28
 8006d06:	2101      	movs	r1, #1
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f001 fab5 	bl	8008278 <RCCEx_PLL3_Config>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006d14:	e00a      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d1c:	e006      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d1e:	bf00      	nop
 8006d20:	e004      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d22:	bf00      	nop
 8006d24:	e002      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d26:	bf00      	nop
 8006d28:	e000      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10d      	bne.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006d34:	4b05      	ldr	r3, [pc, #20]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d38:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d42:	4a02      	ldr	r2, [pc, #8]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d44:	430b      	orrs	r3, r1
 8006d46:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d48:	e006      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006d4a:	bf00      	nop
 8006d4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d60:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006d64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d68:	2300      	movs	r3, #0
 8006d6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d6e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006d72:	460b      	mov	r3, r1
 8006d74:	4313      	orrs	r3, r2
 8006d76:	d055      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006d80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d84:	d033      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006d86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d8a:	d82c      	bhi.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d90:	d02f      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006d92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d96:	d826      	bhi.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d98:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d9c:	d02b      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006d9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006da2:	d820      	bhi.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006da4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006da8:	d012      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006daa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dae:	d81a      	bhi.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d022      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006db4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006db8:	d115      	bne.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dbe:	3308      	adds	r3, #8
 8006dc0:	2101      	movs	r1, #1
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f001 f9a6 	bl	8008114 <RCCEx_PLL2_Config>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006dce:	e015      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd4:	3328      	adds	r3, #40	@ 0x28
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f001 fa4d 	bl	8008278 <RCCEx_PLL3_Config>
 8006dde:	4603      	mov	r3, r0
 8006de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006de4:	e00a      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006dec:	e006      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006dee:	bf00      	nop
 8006df0:	e004      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006df2:	bf00      	nop
 8006df4:	e002      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006df6:	bf00      	nop
 8006df8:	e000      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006dfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10b      	bne.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006e04:	4ba3      	ldr	r3, [pc, #652]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e08:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006e14:	4a9f      	ldr	r2, [pc, #636]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e16:	430b      	orrs	r3, r1
 8006e18:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e1a:	e003      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006e30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e34:	2300      	movs	r3, #0
 8006e36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006e3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4313      	orrs	r3, r2
 8006e42:	d037      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e4e:	d00e      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006e50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e54:	d816      	bhi.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d018      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006e5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e5e:	d111      	bne.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e60:	4b8c      	ldr	r3, [pc, #560]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e64:	4a8b      	ldr	r2, [pc, #556]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006e6c:	e00f      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e72:	3308      	adds	r3, #8
 8006e74:	2101      	movs	r1, #1
 8006e76:	4618      	mov	r0, r3
 8006e78:	f001 f94c 	bl	8008114 <RCCEx_PLL2_Config>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006e82:	e004      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e8a:	e000      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006e8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10a      	bne.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e96:	4b7f      	ldr	r3, [pc, #508]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e9a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ea4:	4a7b      	ldr	r2, [pc, #492]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ea6:	430b      	orrs	r3, r1
 8006ea8:	6513      	str	r3, [r2, #80]	@ 0x50
 8006eaa:	e003      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006eca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	d039      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d81c      	bhi.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006ede:	a201      	add	r2, pc, #4	@ (adr r2, 8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee4:	08006f21 	.word	0x08006f21
 8006ee8:	08006ef5 	.word	0x08006ef5
 8006eec:	08006f03 	.word	0x08006f03
 8006ef0:	08006f21 	.word	0x08006f21
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ef4:	4b67      	ldr	r3, [pc, #412]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef8:	4a66      	ldr	r2, [pc, #408]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006efa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006efe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006f00:	e00f      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f06:	3308      	adds	r3, #8
 8006f08:	2102      	movs	r1, #2
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f001 f902 	bl	8008114 <RCCEx_PLL2_Config>
 8006f10:	4603      	mov	r3, r0
 8006f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006f16:	e004      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f1e:	e000      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10a      	bne.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006f2a:	4b5a      	ldr	r3, [pc, #360]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f2e:	f023 0103 	bic.w	r1, r3, #3
 8006f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f38:	4a56      	ldr	r2, [pc, #344]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f3a:	430b      	orrs	r3, r1
 8006f3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006f3e:	e003      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f50:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006f54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f58:	2300      	movs	r3, #0
 8006f5a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f5e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006f62:	460b      	mov	r3, r1
 8006f64:	4313      	orrs	r3, r2
 8006f66:	f000 809f 	beq.w	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f6a:	4b4b      	ldr	r3, [pc, #300]	@ (8007098 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a4a      	ldr	r2, [pc, #296]	@ (8007098 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f76:	f7fd f909 	bl	800418c <HAL_GetTick>
 8006f7a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f7e:	e00b      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f80:	f7fd f904 	bl	800418c <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	2b64      	cmp	r3, #100	@ 0x64
 8006f8e:	d903      	bls.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f96:	e005      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f98:	4b3f      	ldr	r3, [pc, #252]	@ (8007098 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d0ed      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d179      	bne.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006fac:	4b39      	ldr	r3, [pc, #228]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006fb8:	4053      	eors	r3, r2
 8006fba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d015      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fc2:	4b34      	ldr	r3, [pc, #208]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fce:	4b31      	ldr	r3, [pc, #196]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fd2:	4a30      	ldr	r2, [pc, #192]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fd8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006fda:	4b2e      	ldr	r3, [pc, #184]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fde:	4a2d      	ldr	r2, [pc, #180]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fe0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fe4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006fe6:	4a2b      	ldr	r2, [pc, #172]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fe8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006fec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006ff6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ffa:	d118      	bne.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ffc:	f7fd f8c6 	bl	800418c <HAL_GetTick>
 8007000:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007004:	e00d      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007006:	f7fd f8c1 	bl	800418c <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007010:	1ad2      	subs	r2, r2, r3
 8007012:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007016:	429a      	cmp	r2, r3
 8007018:	d903      	bls.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007020:	e005      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007022:	4b1c      	ldr	r3, [pc, #112]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007026:	f003 0302 	and.w	r3, r3, #2
 800702a:	2b00      	cmp	r3, #0
 800702c:	d0eb      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800702e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007032:	2b00      	cmp	r3, #0
 8007034:	d129      	bne.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800703a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800703e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007042:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007046:	d10e      	bne.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007048:	4b12      	ldr	r3, [pc, #72]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007054:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007058:	091a      	lsrs	r2, r3, #4
 800705a:	4b10      	ldr	r3, [pc, #64]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800705c:	4013      	ands	r3, r2
 800705e:	4a0d      	ldr	r2, [pc, #52]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007060:	430b      	orrs	r3, r1
 8007062:	6113      	str	r3, [r2, #16]
 8007064:	e005      	b.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007066:	4b0b      	ldr	r3, [pc, #44]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	4a0a      	ldr	r2, [pc, #40]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800706c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007070:	6113      	str	r3, [r2, #16]
 8007072:	4b08      	ldr	r3, [pc, #32]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007074:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800707e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007082:	4a04      	ldr	r2, [pc, #16]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007084:	430b      	orrs	r3, r1
 8007086:	6713      	str	r3, [r2, #112]	@ 0x70
 8007088:	e00e      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800708a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800708e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007092:	e009      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007094:	58024400 	.word	0x58024400
 8007098:	58024800 	.word	0x58024800
 800709c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80070a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b0:	f002 0301 	and.w	r3, r2, #1
 80070b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070b8:	2300      	movs	r3, #0
 80070ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80070be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80070c2:	460b      	mov	r3, r1
 80070c4:	4313      	orrs	r3, r2
 80070c6:	f000 8089 	beq.w	80071dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80070ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070d0:	2b28      	cmp	r3, #40	@ 0x28
 80070d2:	d86b      	bhi.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80070d4:	a201      	add	r2, pc, #4	@ (adr r2, 80070dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80070d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070da:	bf00      	nop
 80070dc:	080071b5 	.word	0x080071b5
 80070e0:	080071ad 	.word	0x080071ad
 80070e4:	080071ad 	.word	0x080071ad
 80070e8:	080071ad 	.word	0x080071ad
 80070ec:	080071ad 	.word	0x080071ad
 80070f0:	080071ad 	.word	0x080071ad
 80070f4:	080071ad 	.word	0x080071ad
 80070f8:	080071ad 	.word	0x080071ad
 80070fc:	08007181 	.word	0x08007181
 8007100:	080071ad 	.word	0x080071ad
 8007104:	080071ad 	.word	0x080071ad
 8007108:	080071ad 	.word	0x080071ad
 800710c:	080071ad 	.word	0x080071ad
 8007110:	080071ad 	.word	0x080071ad
 8007114:	080071ad 	.word	0x080071ad
 8007118:	080071ad 	.word	0x080071ad
 800711c:	08007197 	.word	0x08007197
 8007120:	080071ad 	.word	0x080071ad
 8007124:	080071ad 	.word	0x080071ad
 8007128:	080071ad 	.word	0x080071ad
 800712c:	080071ad 	.word	0x080071ad
 8007130:	080071ad 	.word	0x080071ad
 8007134:	080071ad 	.word	0x080071ad
 8007138:	080071ad 	.word	0x080071ad
 800713c:	080071b5 	.word	0x080071b5
 8007140:	080071ad 	.word	0x080071ad
 8007144:	080071ad 	.word	0x080071ad
 8007148:	080071ad 	.word	0x080071ad
 800714c:	080071ad 	.word	0x080071ad
 8007150:	080071ad 	.word	0x080071ad
 8007154:	080071ad 	.word	0x080071ad
 8007158:	080071ad 	.word	0x080071ad
 800715c:	080071b5 	.word	0x080071b5
 8007160:	080071ad 	.word	0x080071ad
 8007164:	080071ad 	.word	0x080071ad
 8007168:	080071ad 	.word	0x080071ad
 800716c:	080071ad 	.word	0x080071ad
 8007170:	080071ad 	.word	0x080071ad
 8007174:	080071ad 	.word	0x080071ad
 8007178:	080071ad 	.word	0x080071ad
 800717c:	080071b5 	.word	0x080071b5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007184:	3308      	adds	r3, #8
 8007186:	2101      	movs	r1, #1
 8007188:	4618      	mov	r0, r3
 800718a:	f000 ffc3 	bl	8008114 <RCCEx_PLL2_Config>
 800718e:	4603      	mov	r3, r0
 8007190:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007194:	e00f      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800719a:	3328      	adds	r3, #40	@ 0x28
 800719c:	2101      	movs	r1, #1
 800719e:	4618      	mov	r0, r3
 80071a0:	f001 f86a 	bl	8008278 <RCCEx_PLL3_Config>
 80071a4:	4603      	mov	r3, r0
 80071a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80071aa:	e004      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071b2:	e000      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80071b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10a      	bne.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80071be:	4bbf      	ldr	r3, [pc, #764]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071c2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80071c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071cc:	4abb      	ldr	r2, [pc, #748]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071ce:	430b      	orrs	r3, r1
 80071d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80071d2:	e003      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80071dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e4:	f002 0302 	and.w	r3, r2, #2
 80071e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80071ec:	2300      	movs	r3, #0
 80071ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80071f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80071f6:	460b      	mov	r3, r1
 80071f8:	4313      	orrs	r3, r2
 80071fa:	d041      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80071fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007200:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007202:	2b05      	cmp	r3, #5
 8007204:	d824      	bhi.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007206:	a201      	add	r2, pc, #4	@ (adr r2, 800720c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720c:	08007259 	.word	0x08007259
 8007210:	08007225 	.word	0x08007225
 8007214:	0800723b 	.word	0x0800723b
 8007218:	08007259 	.word	0x08007259
 800721c:	08007259 	.word	0x08007259
 8007220:	08007259 	.word	0x08007259
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007228:	3308      	adds	r3, #8
 800722a:	2101      	movs	r1, #1
 800722c:	4618      	mov	r0, r3
 800722e:	f000 ff71 	bl	8008114 <RCCEx_PLL2_Config>
 8007232:	4603      	mov	r3, r0
 8007234:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007238:	e00f      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800723a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800723e:	3328      	adds	r3, #40	@ 0x28
 8007240:	2101      	movs	r1, #1
 8007242:	4618      	mov	r0, r3
 8007244:	f001 f818 	bl	8008278 <RCCEx_PLL3_Config>
 8007248:	4603      	mov	r3, r0
 800724a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800724e:	e004      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007256:	e000      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800725a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10a      	bne.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007262:	4b96      	ldr	r3, [pc, #600]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007266:	f023 0107 	bic.w	r1, r3, #7
 800726a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800726e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007270:	4a92      	ldr	r2, [pc, #584]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007272:	430b      	orrs	r3, r1
 8007274:	6553      	str	r3, [r2, #84]	@ 0x54
 8007276:	e003      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007278:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800727c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	f002 0304 	and.w	r3, r2, #4
 800728c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007290:	2300      	movs	r3, #0
 8007292:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007296:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800729a:	460b      	mov	r3, r1
 800729c:	4313      	orrs	r3, r2
 800729e:	d044      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80072a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072a8:	2b05      	cmp	r3, #5
 80072aa:	d825      	bhi.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80072ac:	a201      	add	r2, pc, #4	@ (adr r2, 80072b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80072ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b2:	bf00      	nop
 80072b4:	08007301 	.word	0x08007301
 80072b8:	080072cd 	.word	0x080072cd
 80072bc:	080072e3 	.word	0x080072e3
 80072c0:	08007301 	.word	0x08007301
 80072c4:	08007301 	.word	0x08007301
 80072c8:	08007301 	.word	0x08007301
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d0:	3308      	adds	r3, #8
 80072d2:	2101      	movs	r1, #1
 80072d4:	4618      	mov	r0, r3
 80072d6:	f000 ff1d 	bl	8008114 <RCCEx_PLL2_Config>
 80072da:	4603      	mov	r3, r0
 80072dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80072e0:	e00f      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072e6:	3328      	adds	r3, #40	@ 0x28
 80072e8:	2101      	movs	r1, #1
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 ffc4 	bl	8008278 <RCCEx_PLL3_Config>
 80072f0:	4603      	mov	r3, r0
 80072f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80072f6:	e004      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072fe:	e000      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10b      	bne.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800730a:	4b6c      	ldr	r3, [pc, #432]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800730c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800730e:	f023 0107 	bic.w	r1, r3, #7
 8007312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007316:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800731a:	4a68      	ldr	r2, [pc, #416]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800731c:	430b      	orrs	r3, r1
 800731e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007320:	e003      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007326:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800732a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800732e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007332:	f002 0320 	and.w	r3, r2, #32
 8007336:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800733a:	2300      	movs	r3, #0
 800733c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007340:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007344:	460b      	mov	r3, r1
 8007346:	4313      	orrs	r3, r2
 8007348:	d055      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800734a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800734e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007352:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007356:	d033      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007358:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800735c:	d82c      	bhi.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800735e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007362:	d02f      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007368:	d826      	bhi.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800736a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800736e:	d02b      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007370:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007374:	d820      	bhi.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007376:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800737a:	d012      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800737c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007380:	d81a      	bhi.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007382:	2b00      	cmp	r3, #0
 8007384:	d022      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007386:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800738a:	d115      	bne.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800738c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007390:	3308      	adds	r3, #8
 8007392:	2100      	movs	r1, #0
 8007394:	4618      	mov	r0, r3
 8007396:	f000 febd 	bl	8008114 <RCCEx_PLL2_Config>
 800739a:	4603      	mov	r3, r0
 800739c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80073a0:	e015      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a6:	3328      	adds	r3, #40	@ 0x28
 80073a8:	2102      	movs	r1, #2
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 ff64 	bl	8008278 <RCCEx_PLL3_Config>
 80073b0:	4603      	mov	r3, r0
 80073b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80073b6:	e00a      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073be:	e006      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80073c0:	bf00      	nop
 80073c2:	e004      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80073c4:	bf00      	nop
 80073c6:	e002      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80073c8:	bf00      	nop
 80073ca:	e000      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80073cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10b      	bne.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073d6:	4b39      	ldr	r3, [pc, #228]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073da:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80073de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073e6:	4a35      	ldr	r2, [pc, #212]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073e8:	430b      	orrs	r3, r1
 80073ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80073ec:	e003      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80073f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007402:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007406:	2300      	movs	r3, #0
 8007408:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800740c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007410:	460b      	mov	r3, r1
 8007412:	4313      	orrs	r3, r2
 8007414:	d058      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800741a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800741e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007422:	d033      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007424:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007428:	d82c      	bhi.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800742a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800742e:	d02f      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007430:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007434:	d826      	bhi.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007436:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800743a:	d02b      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800743c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007440:	d820      	bhi.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007442:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007446:	d012      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007448:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800744c:	d81a      	bhi.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800744e:	2b00      	cmp	r3, #0
 8007450:	d022      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007452:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007456:	d115      	bne.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800745c:	3308      	adds	r3, #8
 800745e:	2100      	movs	r1, #0
 8007460:	4618      	mov	r0, r3
 8007462:	f000 fe57 	bl	8008114 <RCCEx_PLL2_Config>
 8007466:	4603      	mov	r3, r0
 8007468:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800746c:	e015      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800746e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007472:	3328      	adds	r3, #40	@ 0x28
 8007474:	2102      	movs	r1, #2
 8007476:	4618      	mov	r0, r3
 8007478:	f000 fefe 	bl	8008278 <RCCEx_PLL3_Config>
 800747c:	4603      	mov	r3, r0
 800747e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007482:	e00a      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800748a:	e006      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800748c:	bf00      	nop
 800748e:	e004      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007490:	bf00      	nop
 8007492:	e002      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007494:	bf00      	nop
 8007496:	e000      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800749a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10e      	bne.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80074a2:	4b06      	ldr	r3, [pc, #24]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074a6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80074aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80074b2:	4a02      	ldr	r2, [pc, #8]	@ (80074bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074b4:	430b      	orrs	r3, r1
 80074b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80074b8:	e006      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80074ba:	bf00      	nop
 80074bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80074c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80074d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80074d8:	2300      	movs	r3, #0
 80074da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80074de:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80074e2:	460b      	mov	r3, r1
 80074e4:	4313      	orrs	r3, r2
 80074e6:	d055      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80074e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80074f0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80074f4:	d033      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80074f6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80074fa:	d82c      	bhi.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80074fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007500:	d02f      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007502:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007506:	d826      	bhi.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007508:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800750c:	d02b      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800750e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007512:	d820      	bhi.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007514:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007518:	d012      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800751a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800751e:	d81a      	bhi.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007520:	2b00      	cmp	r3, #0
 8007522:	d022      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007524:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007528:	d115      	bne.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800752a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800752e:	3308      	adds	r3, #8
 8007530:	2100      	movs	r1, #0
 8007532:	4618      	mov	r0, r3
 8007534:	f000 fdee 	bl	8008114 <RCCEx_PLL2_Config>
 8007538:	4603      	mov	r3, r0
 800753a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800753e:	e015      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007544:	3328      	adds	r3, #40	@ 0x28
 8007546:	2102      	movs	r1, #2
 8007548:	4618      	mov	r0, r3
 800754a:	f000 fe95 	bl	8008278 <RCCEx_PLL3_Config>
 800754e:	4603      	mov	r3, r0
 8007550:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007554:	e00a      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800755c:	e006      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800755e:	bf00      	nop
 8007560:	e004      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007562:	bf00      	nop
 8007564:	e002      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007566:	bf00      	nop
 8007568:	e000      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800756a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800756c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007570:	2b00      	cmp	r3, #0
 8007572:	d10b      	bne.n	800758c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007574:	4ba1      	ldr	r3, [pc, #644]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007578:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800757c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007580:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007584:	4a9d      	ldr	r2, [pc, #628]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007586:	430b      	orrs	r3, r1
 8007588:	6593      	str	r3, [r2, #88]	@ 0x58
 800758a:	e003      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800758c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007590:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759c:	f002 0308 	and.w	r3, r2, #8
 80075a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075a4:	2300      	movs	r3, #0
 80075a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80075aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80075ae:	460b      	mov	r3, r1
 80075b0:	4313      	orrs	r3, r2
 80075b2:	d01e      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80075b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075c0:	d10c      	bne.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80075c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c6:	3328      	adds	r3, #40	@ 0x28
 80075c8:	2102      	movs	r1, #2
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 fe54 	bl	8008278 <RCCEx_PLL3_Config>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d002      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80075dc:	4b87      	ldr	r3, [pc, #540]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075e0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80075e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075ec:	4a83      	ldr	r2, [pc, #524]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075ee:	430b      	orrs	r3, r1
 80075f0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fa:	f002 0310 	and.w	r3, r2, #16
 80075fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007602:	2300      	movs	r3, #0
 8007604:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007608:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800760c:	460b      	mov	r3, r1
 800760e:	4313      	orrs	r3, r2
 8007610:	d01e      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007616:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800761a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800761e:	d10c      	bne.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007624:	3328      	adds	r3, #40	@ 0x28
 8007626:	2102      	movs	r1, #2
 8007628:	4618      	mov	r0, r3
 800762a:	f000 fe25 	bl	8008278 <RCCEx_PLL3_Config>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800763a:	4b70      	ldr	r3, [pc, #448]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800763c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800763e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007646:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800764a:	4a6c      	ldr	r2, [pc, #432]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800764c:	430b      	orrs	r3, r1
 800764e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007658:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800765c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007660:	2300      	movs	r3, #0
 8007662:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007666:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800766a:	460b      	mov	r3, r1
 800766c:	4313      	orrs	r3, r2
 800766e:	d03e      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007674:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007678:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800767c:	d022      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800767e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007682:	d81b      	bhi.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007684:	2b00      	cmp	r3, #0
 8007686:	d003      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800768c:	d00b      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800768e:	e015      	b.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007694:	3308      	adds	r3, #8
 8007696:	2100      	movs	r1, #0
 8007698:	4618      	mov	r0, r3
 800769a:	f000 fd3b 	bl	8008114 <RCCEx_PLL2_Config>
 800769e:	4603      	mov	r3, r0
 80076a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80076a4:	e00f      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80076a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076aa:	3328      	adds	r3, #40	@ 0x28
 80076ac:	2102      	movs	r1, #2
 80076ae:	4618      	mov	r0, r3
 80076b0:	f000 fde2 	bl	8008278 <RCCEx_PLL3_Config>
 80076b4:	4603      	mov	r3, r0
 80076b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80076ba:	e004      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076c2:	e000      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80076c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10b      	bne.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80076ce:	4b4b      	ldr	r3, [pc, #300]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076d2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80076d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80076de:	4a47      	ldr	r2, [pc, #284]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076e0:	430b      	orrs	r3, r1
 80076e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80076e4:	e003      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80076ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80076fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80076fc:	2300      	movs	r3, #0
 80076fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007700:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007704:	460b      	mov	r3, r1
 8007706:	4313      	orrs	r3, r2
 8007708:	d03b      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800770a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800770e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007712:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007716:	d01f      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007718:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800771c:	d818      	bhi.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800771e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007722:	d003      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007724:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007728:	d007      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800772a:	e011      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800772c:	4b33      	ldr	r3, [pc, #204]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800772e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007730:	4a32      	ldr	r2, [pc, #200]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007732:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007736:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007738:	e00f      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800773a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800773e:	3328      	adds	r3, #40	@ 0x28
 8007740:	2101      	movs	r1, #1
 8007742:	4618      	mov	r0, r3
 8007744:	f000 fd98 	bl	8008278 <RCCEx_PLL3_Config>
 8007748:	4603      	mov	r3, r0
 800774a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800774e:	e004      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007756:	e000      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800775a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10b      	bne.n	800777a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007762:	4b26      	ldr	r3, [pc, #152]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007766:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800776a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800776e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007772:	4a22      	ldr	r2, [pc, #136]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007774:	430b      	orrs	r3, r1
 8007776:	6553      	str	r3, [r2, #84]	@ 0x54
 8007778:	e003      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800777a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800777e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800778e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007790:	2300      	movs	r3, #0
 8007792:	677b      	str	r3, [r7, #116]	@ 0x74
 8007794:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007798:	460b      	mov	r3, r1
 800779a:	4313      	orrs	r3, r2
 800779c:	d034      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800779e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d003      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80077a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077ac:	d007      	beq.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80077ae:	e011      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077b0:	4b12      	ldr	r3, [pc, #72]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b4:	4a11      	ldr	r2, [pc, #68]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80077bc:	e00e      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80077be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c2:	3308      	adds	r3, #8
 80077c4:	2102      	movs	r1, #2
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 fca4 	bl	8008114 <RCCEx_PLL2_Config>
 80077cc:	4603      	mov	r3, r0
 80077ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80077d2:	e003      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10d      	bne.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80077e4:	4b05      	ldr	r3, [pc, #20]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077e8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80077ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077f2:	4a02      	ldr	r2, [pc, #8]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077f4:	430b      	orrs	r3, r1
 80077f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80077f8:	e006      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80077fa:	bf00      	nop
 80077fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007800:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007804:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800780c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007810:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007814:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007816:	2300      	movs	r3, #0
 8007818:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800781a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800781e:	460b      	mov	r3, r1
 8007820:	4313      	orrs	r3, r2
 8007822:	d00c      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007828:	3328      	adds	r3, #40	@ 0x28
 800782a:	2102      	movs	r1, #2
 800782c:	4618      	mov	r0, r3
 800782e:	f000 fd23 	bl	8008278 <RCCEx_PLL3_Config>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800783e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007846:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800784a:	663b      	str	r3, [r7, #96]	@ 0x60
 800784c:	2300      	movs	r3, #0
 800784e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007850:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007854:	460b      	mov	r3, r1
 8007856:	4313      	orrs	r3, r2
 8007858:	d038      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800785a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800785e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007862:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007866:	d018      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007868:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800786c:	d811      	bhi.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800786e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007872:	d014      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007874:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007878:	d80b      	bhi.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800787a:	2b00      	cmp	r3, #0
 800787c:	d011      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800787e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007882:	d106      	bne.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007884:	4bc3      	ldr	r3, [pc, #780]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007888:	4ac2      	ldr	r2, [pc, #776]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800788a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800788e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007890:	e008      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007898:	e004      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800789a:	bf00      	nop
 800789c:	e002      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800789e:	bf00      	nop
 80078a0:	e000      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80078a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10b      	bne.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80078ac:	4bb9      	ldr	r3, [pc, #740]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078b0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80078b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078bc:	4ab5      	ldr	r2, [pc, #724]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078be:	430b      	orrs	r3, r1
 80078c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80078c2:	e003      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80078cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80078d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078da:	2300      	movs	r3, #0
 80078dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80078e2:	460b      	mov	r3, r1
 80078e4:	4313      	orrs	r3, r2
 80078e6:	d009      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80078e8:	4baa      	ldr	r3, [pc, #680]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078ec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80078f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078f6:	4aa7      	ldr	r2, [pc, #668]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078f8:	430b      	orrs	r3, r1
 80078fa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80078fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007904:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007908:	653b      	str	r3, [r7, #80]	@ 0x50
 800790a:	2300      	movs	r3, #0
 800790c:	657b      	str	r3, [r7, #84]	@ 0x54
 800790e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007912:	460b      	mov	r3, r1
 8007914:	4313      	orrs	r3, r2
 8007916:	d00a      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007918:	4b9e      	ldr	r3, [pc, #632]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007924:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007928:	4a9a      	ldr	r2, [pc, #616]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800792a:	430b      	orrs	r3, r1
 800792c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800792e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007936:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800793a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800793c:	2300      	movs	r3, #0
 800793e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007940:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007944:	460b      	mov	r3, r1
 8007946:	4313      	orrs	r3, r2
 8007948:	d009      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800794a:	4b92      	ldr	r3, [pc, #584]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800794c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800794e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007958:	4a8e      	ldr	r2, [pc, #568]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800795a:	430b      	orrs	r3, r1
 800795c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800795e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007966:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800796a:	643b      	str	r3, [r7, #64]	@ 0x40
 800796c:	2300      	movs	r3, #0
 800796e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007970:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007974:	460b      	mov	r3, r1
 8007976:	4313      	orrs	r3, r2
 8007978:	d00e      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800797a:	4b86      	ldr	r3, [pc, #536]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	4a85      	ldr	r2, [pc, #532]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007980:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007984:	6113      	str	r3, [r2, #16]
 8007986:	4b83      	ldr	r3, [pc, #524]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007988:	6919      	ldr	r1, [r3, #16]
 800798a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800798e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007992:	4a80      	ldr	r2, [pc, #512]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007994:	430b      	orrs	r3, r1
 8007996:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800799c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80079a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80079a6:	2300      	movs	r3, #0
 80079a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079aa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80079ae:	460b      	mov	r3, r1
 80079b0:	4313      	orrs	r3, r2
 80079b2:	d009      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80079b4:	4b77      	ldr	r3, [pc, #476]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079b8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80079bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079c2:	4a74      	ldr	r2, [pc, #464]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079c4:	430b      	orrs	r3, r1
 80079c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80079c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80079d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80079d6:	2300      	movs	r3, #0
 80079d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80079da:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80079de:	460b      	mov	r3, r1
 80079e0:	4313      	orrs	r3, r2
 80079e2:	d00a      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80079e4:	4b6b      	ldr	r3, [pc, #428]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079e8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80079ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079f4:	4a67      	ldr	r2, [pc, #412]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079f6:	430b      	orrs	r3, r1
 80079f8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80079fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a02:	2100      	movs	r1, #0
 8007a04:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a0c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007a10:	460b      	mov	r3, r1
 8007a12:	4313      	orrs	r3, r2
 8007a14:	d011      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1a:	3308      	adds	r3, #8
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f000 fb78 	bl	8008114 <RCCEx_PLL2_Config>
 8007a24:	4603      	mov	r3, r0
 8007a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a42:	2100      	movs	r1, #0
 8007a44:	6239      	str	r1, [r7, #32]
 8007a46:	f003 0302 	and.w	r3, r3, #2
 8007a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a4c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007a50:	460b      	mov	r3, r1
 8007a52:	4313      	orrs	r3, r2
 8007a54:	d011      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a5a:	3308      	adds	r3, #8
 8007a5c:	2101      	movs	r1, #1
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f000 fb58 	bl	8008114 <RCCEx_PLL2_Config>
 8007a64:	4603      	mov	r3, r0
 8007a66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a82:	2100      	movs	r1, #0
 8007a84:	61b9      	str	r1, [r7, #24]
 8007a86:	f003 0304 	and.w	r3, r3, #4
 8007a8a:	61fb      	str	r3, [r7, #28]
 8007a8c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007a90:	460b      	mov	r3, r1
 8007a92:	4313      	orrs	r3, r2
 8007a94:	d011      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a9a:	3308      	adds	r3, #8
 8007a9c:	2102      	movs	r1, #2
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 fb38 	bl	8008114 <RCCEx_PLL2_Config>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ab6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	6139      	str	r1, [r7, #16]
 8007ac6:	f003 0308 	and.w	r3, r3, #8
 8007aca:	617b      	str	r3, [r7, #20]
 8007acc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	d011      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ada:	3328      	adds	r3, #40	@ 0x28
 8007adc:	2100      	movs	r1, #0
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 fbca 	bl	8008278 <RCCEx_PLL3_Config>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007aea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d003      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007af6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b02:	2100      	movs	r1, #0
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	f003 0310 	and.w	r3, r3, #16
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007b10:	460b      	mov	r3, r1
 8007b12:	4313      	orrs	r3, r2
 8007b14:	d011      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b1a:	3328      	adds	r3, #40	@ 0x28
 8007b1c:	2101      	movs	r1, #1
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 fbaa 	bl	8008278 <RCCEx_PLL3_Config>
 8007b24:	4603      	mov	r3, r0
 8007b26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d003      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b42:	2100      	movs	r1, #0
 8007b44:	6039      	str	r1, [r7, #0]
 8007b46:	f003 0320 	and.w	r3, r3, #32
 8007b4a:	607b      	str	r3, [r7, #4]
 8007b4c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007b50:	460b      	mov	r3, r1
 8007b52:	4313      	orrs	r3, r2
 8007b54:	d011      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b5a:	3328      	adds	r3, #40	@ 0x28
 8007b5c:	2102      	movs	r1, #2
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 fb8a 	bl	8008278 <RCCEx_PLL3_Config>
 8007b64:	4603      	mov	r3, r0
 8007b66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007b7a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d101      	bne.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	e000      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b94:	58024400 	.word	0x58024400

08007b98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007b9c:	f7fe fd54 	bl	8006648 <HAL_RCC_GetHCLKFreq>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	4b06      	ldr	r3, [pc, #24]	@ (8007bbc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	091b      	lsrs	r3, r3, #4
 8007ba8:	f003 0307 	and.w	r3, r3, #7
 8007bac:	4904      	ldr	r1, [pc, #16]	@ (8007bc0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007bae:	5ccb      	ldrb	r3, [r1, r3]
 8007bb0:	f003 031f 	and.w	r3, r3, #31
 8007bb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	58024400 	.word	0x58024400
 8007bc0:	0800f81c 	.word	0x0800f81c

08007bc4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b089      	sub	sp, #36	@ 0x24
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007bcc:	4ba1      	ldr	r3, [pc, #644]	@ (8007e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bd0:	f003 0303 	and.w	r3, r3, #3
 8007bd4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007bd6:	4b9f      	ldr	r3, [pc, #636]	@ (8007e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bda:	0b1b      	lsrs	r3, r3, #12
 8007bdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007be0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007be2:	4b9c      	ldr	r3, [pc, #624]	@ (8007e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007be6:	091b      	lsrs	r3, r3, #4
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007bee:	4b99      	ldr	r3, [pc, #612]	@ (8007e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bf2:	08db      	lsrs	r3, r3, #3
 8007bf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	fb02 f303 	mul.w	r3, r2, r3
 8007bfe:	ee07 3a90 	vmov	s15, r3
 8007c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f000 8111 	beq.w	8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	f000 8083 	beq.w	8007d20 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	f200 80a1 	bhi.w	8007d64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d003      	beq.n	8007c30 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d056      	beq.n	8007cdc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007c2e:	e099      	b.n	8007d64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c30:	4b88      	ldr	r3, [pc, #544]	@ (8007e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0320 	and.w	r3, r3, #32
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d02d      	beq.n	8007c98 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c3c:	4b85      	ldr	r3, [pc, #532]	@ (8007e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	08db      	lsrs	r3, r3, #3
 8007c42:	f003 0303 	and.w	r3, r3, #3
 8007c46:	4a84      	ldr	r2, [pc, #528]	@ (8007e58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007c48:	fa22 f303 	lsr.w	r3, r2, r3
 8007c4c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	ee07 3a90 	vmov	s15, r3
 8007c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	ee07 3a90 	vmov	s15, r3
 8007c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c66:	4b7b      	ldr	r3, [pc, #492]	@ (8007e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c6e:	ee07 3a90 	vmov	s15, r3
 8007c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c7a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007e5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007c96:	e087      	b.n	8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	ee07 3a90 	vmov	s15, r3
 8007c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007e60 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007caa:	4b6a      	ldr	r3, [pc, #424]	@ (8007e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cb2:	ee07 3a90 	vmov	s15, r3
 8007cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cbe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007e5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cda:	e065      	b.n	8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	ee07 3a90 	vmov	s15, r3
 8007ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ce6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007e64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cee:	4b59      	ldr	r3, [pc, #356]	@ (8007e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cf6:	ee07 3a90 	vmov	s15, r3
 8007cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d02:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007e5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d1e:	e043      	b.n	8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	ee07 3a90 	vmov	s15, r3
 8007d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d2a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d32:	4b48      	ldr	r3, [pc, #288]	@ (8007e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d3a:	ee07 3a90 	vmov	s15, r3
 8007d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d46:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007e5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d62:	e021      	b.n	8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	ee07 3a90 	vmov	s15, r3
 8007d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d6e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007e64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d76:	4b37      	ldr	r3, [pc, #220]	@ (8007e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d7e:	ee07 3a90 	vmov	s15, r3
 8007d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d8a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007e5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007da6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007da8:	4b2a      	ldr	r3, [pc, #168]	@ (8007e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dac:	0a5b      	lsrs	r3, r3, #9
 8007dae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007db2:	ee07 3a90 	vmov	s15, r3
 8007db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007dbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dce:	ee17 2a90 	vmov	r2, s15
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8007e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dda:	0c1b      	lsrs	r3, r3, #16
 8007ddc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007de0:	ee07 3a90 	vmov	s15, r3
 8007de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007de8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007dec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007df0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007df4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007df8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dfc:	ee17 2a90 	vmov	r2, s15
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007e04:	4b13      	ldr	r3, [pc, #76]	@ (8007e54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e08:	0e1b      	lsrs	r3, r3, #24
 8007e0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e0e:	ee07 3a90 	vmov	s15, r3
 8007e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007e1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e2a:	ee17 2a90 	vmov	r2, s15
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007e32:	e008      	b.n	8007e46 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	609a      	str	r2, [r3, #8]
}
 8007e46:	bf00      	nop
 8007e48:	3724      	adds	r7, #36	@ 0x24
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	58024400 	.word	0x58024400
 8007e58:	03d09000 	.word	0x03d09000
 8007e5c:	46000000 	.word	0x46000000
 8007e60:	4c742400 	.word	0x4c742400
 8007e64:	4a742400 	.word	0x4a742400
 8007e68:	4bbebc20 	.word	0x4bbebc20

08007e6c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b089      	sub	sp, #36	@ 0x24
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e74:	4ba1      	ldr	r3, [pc, #644]	@ (80080fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e78:	f003 0303 	and.w	r3, r3, #3
 8007e7c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007e7e:	4b9f      	ldr	r3, [pc, #636]	@ (80080fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e82:	0d1b      	lsrs	r3, r3, #20
 8007e84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e88:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007e8a:	4b9c      	ldr	r3, [pc, #624]	@ (80080fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e8e:	0a1b      	lsrs	r3, r3, #8
 8007e90:	f003 0301 	and.w	r3, r3, #1
 8007e94:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007e96:	4b99      	ldr	r3, [pc, #612]	@ (80080fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e9a:	08db      	lsrs	r3, r3, #3
 8007e9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	fb02 f303 	mul.w	r3, r2, r3
 8007ea6:	ee07 3a90 	vmov	s15, r3
 8007eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 8111 	beq.w	80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	f000 8083 	beq.w	8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	f200 80a1 	bhi.w	800800c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d003      	beq.n	8007ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d056      	beq.n	8007f84 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007ed6:	e099      	b.n	800800c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ed8:	4b88      	ldr	r3, [pc, #544]	@ (80080fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 0320 	and.w	r3, r3, #32
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d02d      	beq.n	8007f40 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ee4:	4b85      	ldr	r3, [pc, #532]	@ (80080fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	08db      	lsrs	r3, r3, #3
 8007eea:	f003 0303 	and.w	r3, r3, #3
 8007eee:	4a84      	ldr	r2, [pc, #528]	@ (8008100 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	ee07 3a90 	vmov	s15, r3
 8007efc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	ee07 3a90 	vmov	s15, r3
 8007f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f0e:	4b7b      	ldr	r3, [pc, #492]	@ (80080fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f16:	ee07 3a90 	vmov	s15, r3
 8007f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f22:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008104 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007f3e:	e087      	b.n	8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	ee07 3a90 	vmov	s15, r3
 8007f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f4a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008108 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f52:	4b6a      	ldr	r3, [pc, #424]	@ (80080fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f5a:	ee07 3a90 	vmov	s15, r3
 8007f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f66:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008104 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f82:	e065      	b.n	8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	ee07 3a90 	vmov	s15, r3
 8007f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f8e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800810c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f96:	4b59      	ldr	r3, [pc, #356]	@ (80080fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f9e:	ee07 3a90 	vmov	s15, r3
 8007fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007faa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008104 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fc6:	e043      	b.n	8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	ee07 3a90 	vmov	s15, r3
 8007fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008110 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fda:	4b48      	ldr	r3, [pc, #288]	@ (80080fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe2:	ee07 3a90 	vmov	s15, r3
 8007fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008104 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ffa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008006:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800800a:	e021      	b.n	8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	ee07 3a90 	vmov	s15, r3
 8008012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008016:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800810c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800801a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800801e:	4b37      	ldr	r3, [pc, #220]	@ (80080fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008026:	ee07 3a90 	vmov	s15, r3
 800802a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800802e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008032:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008104 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800803a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800803e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800804a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800804e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008050:	4b2a      	ldr	r3, [pc, #168]	@ (80080fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008054:	0a5b      	lsrs	r3, r3, #9
 8008056:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800805a:	ee07 3a90 	vmov	s15, r3
 800805e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008062:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008066:	ee37 7a87 	vadd.f32	s14, s15, s14
 800806a:	edd7 6a07 	vldr	s13, [r7, #28]
 800806e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008076:	ee17 2a90 	vmov	r2, s15
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800807e:	4b1f      	ldr	r3, [pc, #124]	@ (80080fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008082:	0c1b      	lsrs	r3, r3, #16
 8008084:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008088:	ee07 3a90 	vmov	s15, r3
 800808c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008090:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008094:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008098:	edd7 6a07 	vldr	s13, [r7, #28]
 800809c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080a4:	ee17 2a90 	vmov	r2, s15
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80080ac:	4b13      	ldr	r3, [pc, #76]	@ (80080fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080b0:	0e1b      	lsrs	r3, r3, #24
 80080b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080b6:	ee07 3a90 	vmov	s15, r3
 80080ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80080ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080d2:	ee17 2a90 	vmov	r2, s15
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80080da:	e008      	b.n	80080ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	609a      	str	r2, [r3, #8]
}
 80080ee:	bf00      	nop
 80080f0:	3724      	adds	r7, #36	@ 0x24
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	58024400 	.word	0x58024400
 8008100:	03d09000 	.word	0x03d09000
 8008104:	46000000 	.word	0x46000000
 8008108:	4c742400 	.word	0x4c742400
 800810c:	4a742400 	.word	0x4a742400
 8008110:	4bbebc20 	.word	0x4bbebc20

08008114 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800811e:	2300      	movs	r3, #0
 8008120:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008122:	4b53      	ldr	r3, [pc, #332]	@ (8008270 <RCCEx_PLL2_Config+0x15c>)
 8008124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008126:	f003 0303 	and.w	r3, r3, #3
 800812a:	2b03      	cmp	r3, #3
 800812c:	d101      	bne.n	8008132 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e099      	b.n	8008266 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008132:	4b4f      	ldr	r3, [pc, #316]	@ (8008270 <RCCEx_PLL2_Config+0x15c>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a4e      	ldr	r2, [pc, #312]	@ (8008270 <RCCEx_PLL2_Config+0x15c>)
 8008138:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800813c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800813e:	f7fc f825 	bl	800418c <HAL_GetTick>
 8008142:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008144:	e008      	b.n	8008158 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008146:	f7fc f821 	bl	800418c <HAL_GetTick>
 800814a:	4602      	mov	r2, r0
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	2b02      	cmp	r3, #2
 8008152:	d901      	bls.n	8008158 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	e086      	b.n	8008266 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008158:	4b45      	ldr	r3, [pc, #276]	@ (8008270 <RCCEx_PLL2_Config+0x15c>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1f0      	bne.n	8008146 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008164:	4b42      	ldr	r3, [pc, #264]	@ (8008270 <RCCEx_PLL2_Config+0x15c>)
 8008166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008168:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	031b      	lsls	r3, r3, #12
 8008172:	493f      	ldr	r1, [pc, #252]	@ (8008270 <RCCEx_PLL2_Config+0x15c>)
 8008174:	4313      	orrs	r3, r2
 8008176:	628b      	str	r3, [r1, #40]	@ 0x28
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	3b01      	subs	r3, #1
 800817e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	3b01      	subs	r3, #1
 8008188:	025b      	lsls	r3, r3, #9
 800818a:	b29b      	uxth	r3, r3
 800818c:	431a      	orrs	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	3b01      	subs	r3, #1
 8008194:	041b      	lsls	r3, r3, #16
 8008196:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800819a:	431a      	orrs	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	3b01      	subs	r3, #1
 80081a2:	061b      	lsls	r3, r3, #24
 80081a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80081a8:	4931      	ldr	r1, [pc, #196]	@ (8008270 <RCCEx_PLL2_Config+0x15c>)
 80081aa:	4313      	orrs	r3, r2
 80081ac:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80081ae:	4b30      	ldr	r3, [pc, #192]	@ (8008270 <RCCEx_PLL2_Config+0x15c>)
 80081b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	492d      	ldr	r1, [pc, #180]	@ (8008270 <RCCEx_PLL2_Config+0x15c>)
 80081bc:	4313      	orrs	r3, r2
 80081be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80081c0:	4b2b      	ldr	r3, [pc, #172]	@ (8008270 <RCCEx_PLL2_Config+0x15c>)
 80081c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c4:	f023 0220 	bic.w	r2, r3, #32
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	4928      	ldr	r1, [pc, #160]	@ (8008270 <RCCEx_PLL2_Config+0x15c>)
 80081ce:	4313      	orrs	r3, r2
 80081d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80081d2:	4b27      	ldr	r3, [pc, #156]	@ (8008270 <RCCEx_PLL2_Config+0x15c>)
 80081d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d6:	4a26      	ldr	r2, [pc, #152]	@ (8008270 <RCCEx_PLL2_Config+0x15c>)
 80081d8:	f023 0310 	bic.w	r3, r3, #16
 80081dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80081de:	4b24      	ldr	r3, [pc, #144]	@ (8008270 <RCCEx_PLL2_Config+0x15c>)
 80081e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081e2:	4b24      	ldr	r3, [pc, #144]	@ (8008274 <RCCEx_PLL2_Config+0x160>)
 80081e4:	4013      	ands	r3, r2
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	69d2      	ldr	r2, [r2, #28]
 80081ea:	00d2      	lsls	r2, r2, #3
 80081ec:	4920      	ldr	r1, [pc, #128]	@ (8008270 <RCCEx_PLL2_Config+0x15c>)
 80081ee:	4313      	orrs	r3, r2
 80081f0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80081f2:	4b1f      	ldr	r3, [pc, #124]	@ (8008270 <RCCEx_PLL2_Config+0x15c>)
 80081f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f6:	4a1e      	ldr	r2, [pc, #120]	@ (8008270 <RCCEx_PLL2_Config+0x15c>)
 80081f8:	f043 0310 	orr.w	r3, r3, #16
 80081fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d106      	bne.n	8008212 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008204:	4b1a      	ldr	r3, [pc, #104]	@ (8008270 <RCCEx_PLL2_Config+0x15c>)
 8008206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008208:	4a19      	ldr	r2, [pc, #100]	@ (8008270 <RCCEx_PLL2_Config+0x15c>)
 800820a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800820e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008210:	e00f      	b.n	8008232 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d106      	bne.n	8008226 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008218:	4b15      	ldr	r3, [pc, #84]	@ (8008270 <RCCEx_PLL2_Config+0x15c>)
 800821a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800821c:	4a14      	ldr	r2, [pc, #80]	@ (8008270 <RCCEx_PLL2_Config+0x15c>)
 800821e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008222:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008224:	e005      	b.n	8008232 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008226:	4b12      	ldr	r3, [pc, #72]	@ (8008270 <RCCEx_PLL2_Config+0x15c>)
 8008228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800822a:	4a11      	ldr	r2, [pc, #68]	@ (8008270 <RCCEx_PLL2_Config+0x15c>)
 800822c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008230:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008232:	4b0f      	ldr	r3, [pc, #60]	@ (8008270 <RCCEx_PLL2_Config+0x15c>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a0e      	ldr	r2, [pc, #56]	@ (8008270 <RCCEx_PLL2_Config+0x15c>)
 8008238:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800823c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800823e:	f7fb ffa5 	bl	800418c <HAL_GetTick>
 8008242:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008244:	e008      	b.n	8008258 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008246:	f7fb ffa1 	bl	800418c <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	2b02      	cmp	r3, #2
 8008252:	d901      	bls.n	8008258 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008254:	2303      	movs	r3, #3
 8008256:	e006      	b.n	8008266 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008258:	4b05      	ldr	r3, [pc, #20]	@ (8008270 <RCCEx_PLL2_Config+0x15c>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d0f0      	beq.n	8008246 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008264:	7bfb      	ldrb	r3, [r7, #15]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	58024400 	.word	0x58024400
 8008274:	ffff0007 	.word	0xffff0007

08008278 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008286:	4b53      	ldr	r3, [pc, #332]	@ (80083d4 <RCCEx_PLL3_Config+0x15c>)
 8008288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800828a:	f003 0303 	and.w	r3, r3, #3
 800828e:	2b03      	cmp	r3, #3
 8008290:	d101      	bne.n	8008296 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e099      	b.n	80083ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008296:	4b4f      	ldr	r3, [pc, #316]	@ (80083d4 <RCCEx_PLL3_Config+0x15c>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a4e      	ldr	r2, [pc, #312]	@ (80083d4 <RCCEx_PLL3_Config+0x15c>)
 800829c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082a2:	f7fb ff73 	bl	800418c <HAL_GetTick>
 80082a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082a8:	e008      	b.n	80082bc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80082aa:	f7fb ff6f 	bl	800418c <HAL_GetTick>
 80082ae:	4602      	mov	r2, r0
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	1ad3      	subs	r3, r2, r3
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d901      	bls.n	80082bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80082b8:	2303      	movs	r3, #3
 80082ba:	e086      	b.n	80083ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082bc:	4b45      	ldr	r3, [pc, #276]	@ (80083d4 <RCCEx_PLL3_Config+0x15c>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1f0      	bne.n	80082aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80082c8:	4b42      	ldr	r3, [pc, #264]	@ (80083d4 <RCCEx_PLL3_Config+0x15c>)
 80082ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082cc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	051b      	lsls	r3, r3, #20
 80082d6:	493f      	ldr	r1, [pc, #252]	@ (80083d4 <RCCEx_PLL3_Config+0x15c>)
 80082d8:	4313      	orrs	r3, r2
 80082da:	628b      	str	r3, [r1, #40]	@ 0x28
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	3b01      	subs	r3, #1
 80082e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	3b01      	subs	r3, #1
 80082ec:	025b      	lsls	r3, r3, #9
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	431a      	orrs	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	3b01      	subs	r3, #1
 80082f8:	041b      	lsls	r3, r3, #16
 80082fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80082fe:	431a      	orrs	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	3b01      	subs	r3, #1
 8008306:	061b      	lsls	r3, r3, #24
 8008308:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800830c:	4931      	ldr	r1, [pc, #196]	@ (80083d4 <RCCEx_PLL3_Config+0x15c>)
 800830e:	4313      	orrs	r3, r2
 8008310:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008312:	4b30      	ldr	r3, [pc, #192]	@ (80083d4 <RCCEx_PLL3_Config+0x15c>)
 8008314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008316:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	695b      	ldr	r3, [r3, #20]
 800831e:	492d      	ldr	r1, [pc, #180]	@ (80083d4 <RCCEx_PLL3_Config+0x15c>)
 8008320:	4313      	orrs	r3, r2
 8008322:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008324:	4b2b      	ldr	r3, [pc, #172]	@ (80083d4 <RCCEx_PLL3_Config+0x15c>)
 8008326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008328:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	699b      	ldr	r3, [r3, #24]
 8008330:	4928      	ldr	r1, [pc, #160]	@ (80083d4 <RCCEx_PLL3_Config+0x15c>)
 8008332:	4313      	orrs	r3, r2
 8008334:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008336:	4b27      	ldr	r3, [pc, #156]	@ (80083d4 <RCCEx_PLL3_Config+0x15c>)
 8008338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800833a:	4a26      	ldr	r2, [pc, #152]	@ (80083d4 <RCCEx_PLL3_Config+0x15c>)
 800833c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008340:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008342:	4b24      	ldr	r3, [pc, #144]	@ (80083d4 <RCCEx_PLL3_Config+0x15c>)
 8008344:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008346:	4b24      	ldr	r3, [pc, #144]	@ (80083d8 <RCCEx_PLL3_Config+0x160>)
 8008348:	4013      	ands	r3, r2
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	69d2      	ldr	r2, [r2, #28]
 800834e:	00d2      	lsls	r2, r2, #3
 8008350:	4920      	ldr	r1, [pc, #128]	@ (80083d4 <RCCEx_PLL3_Config+0x15c>)
 8008352:	4313      	orrs	r3, r2
 8008354:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008356:	4b1f      	ldr	r3, [pc, #124]	@ (80083d4 <RCCEx_PLL3_Config+0x15c>)
 8008358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800835a:	4a1e      	ldr	r2, [pc, #120]	@ (80083d4 <RCCEx_PLL3_Config+0x15c>)
 800835c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008360:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d106      	bne.n	8008376 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008368:	4b1a      	ldr	r3, [pc, #104]	@ (80083d4 <RCCEx_PLL3_Config+0x15c>)
 800836a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800836c:	4a19      	ldr	r2, [pc, #100]	@ (80083d4 <RCCEx_PLL3_Config+0x15c>)
 800836e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008372:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008374:	e00f      	b.n	8008396 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d106      	bne.n	800838a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800837c:	4b15      	ldr	r3, [pc, #84]	@ (80083d4 <RCCEx_PLL3_Config+0x15c>)
 800837e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008380:	4a14      	ldr	r2, [pc, #80]	@ (80083d4 <RCCEx_PLL3_Config+0x15c>)
 8008382:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008386:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008388:	e005      	b.n	8008396 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800838a:	4b12      	ldr	r3, [pc, #72]	@ (80083d4 <RCCEx_PLL3_Config+0x15c>)
 800838c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800838e:	4a11      	ldr	r2, [pc, #68]	@ (80083d4 <RCCEx_PLL3_Config+0x15c>)
 8008390:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008394:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008396:	4b0f      	ldr	r3, [pc, #60]	@ (80083d4 <RCCEx_PLL3_Config+0x15c>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a0e      	ldr	r2, [pc, #56]	@ (80083d4 <RCCEx_PLL3_Config+0x15c>)
 800839c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083a2:	f7fb fef3 	bl	800418c <HAL_GetTick>
 80083a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083a8:	e008      	b.n	80083bc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80083aa:	f7fb feef 	bl	800418c <HAL_GetTick>
 80083ae:	4602      	mov	r2, r0
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d901      	bls.n	80083bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e006      	b.n	80083ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083bc:	4b05      	ldr	r3, [pc, #20]	@ (80083d4 <RCCEx_PLL3_Config+0x15c>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d0f0      	beq.n	80083aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80083c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	58024400 	.word	0x58024400
 80083d8:	ffff0007 	.word	0xffff0007

080083dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e049      	b.n	8008482 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d106      	bne.n	8008408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7fb fb90 	bl	8003b28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2202      	movs	r2, #2
 800840c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	3304      	adds	r3, #4
 8008418:	4619      	mov	r1, r3
 800841a:	4610      	mov	r0, r2
 800841c:	f000 fd5a 	bl	8008ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800849a:	b2db      	uxtb	r3, r3
 800849c:	2b01      	cmp	r3, #1
 800849e:	d001      	beq.n	80084a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e054      	b.n	800854e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2202      	movs	r2, #2
 80084a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68da      	ldr	r2, [r3, #12]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f042 0201 	orr.w	r2, r2, #1
 80084ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a26      	ldr	r2, [pc, #152]	@ (800855c <HAL_TIM_Base_Start_IT+0xd0>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d022      	beq.n	800850c <HAL_TIM_Base_Start_IT+0x80>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084ce:	d01d      	beq.n	800850c <HAL_TIM_Base_Start_IT+0x80>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a22      	ldr	r2, [pc, #136]	@ (8008560 <HAL_TIM_Base_Start_IT+0xd4>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d018      	beq.n	800850c <HAL_TIM_Base_Start_IT+0x80>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a21      	ldr	r2, [pc, #132]	@ (8008564 <HAL_TIM_Base_Start_IT+0xd8>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d013      	beq.n	800850c <HAL_TIM_Base_Start_IT+0x80>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a1f      	ldr	r2, [pc, #124]	@ (8008568 <HAL_TIM_Base_Start_IT+0xdc>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d00e      	beq.n	800850c <HAL_TIM_Base_Start_IT+0x80>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a1e      	ldr	r2, [pc, #120]	@ (800856c <HAL_TIM_Base_Start_IT+0xe0>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d009      	beq.n	800850c <HAL_TIM_Base_Start_IT+0x80>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a1c      	ldr	r2, [pc, #112]	@ (8008570 <HAL_TIM_Base_Start_IT+0xe4>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d004      	beq.n	800850c <HAL_TIM_Base_Start_IT+0x80>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a1b      	ldr	r2, [pc, #108]	@ (8008574 <HAL_TIM_Base_Start_IT+0xe8>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d115      	bne.n	8008538 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	689a      	ldr	r2, [r3, #8]
 8008512:	4b19      	ldr	r3, [pc, #100]	@ (8008578 <HAL_TIM_Base_Start_IT+0xec>)
 8008514:	4013      	ands	r3, r2
 8008516:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2b06      	cmp	r3, #6
 800851c:	d015      	beq.n	800854a <HAL_TIM_Base_Start_IT+0xbe>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008524:	d011      	beq.n	800854a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f042 0201 	orr.w	r2, r2, #1
 8008534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008536:	e008      	b.n	800854a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f042 0201 	orr.w	r2, r2, #1
 8008546:	601a      	str	r2, [r3, #0]
 8008548:	e000      	b.n	800854c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800854a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	40010000 	.word	0x40010000
 8008560:	40000400 	.word	0x40000400
 8008564:	40000800 	.word	0x40000800
 8008568:	40000c00 	.word	0x40000c00
 800856c:	40010400 	.word	0x40010400
 8008570:	40001800 	.word	0x40001800
 8008574:	40014000 	.word	0x40014000
 8008578:	00010007 	.word	0x00010007

0800857c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e049      	b.n	8008622 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d106      	bne.n	80085a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f841 	bl	800862a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2202      	movs	r2, #2
 80085ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	3304      	adds	r3, #4
 80085b8:	4619      	mov	r1, r3
 80085ba:	4610      	mov	r0, r2
 80085bc:	f000 fc8a 	bl	8008ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800862a:	b480      	push	{r7}
 800862c:	b083      	sub	sp, #12
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008632:	bf00      	nop
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
	...

08008640 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d109      	bne.n	8008664 <HAL_TIM_PWM_Start+0x24>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008656:	b2db      	uxtb	r3, r3
 8008658:	2b01      	cmp	r3, #1
 800865a:	bf14      	ite	ne
 800865c:	2301      	movne	r3, #1
 800865e:	2300      	moveq	r3, #0
 8008660:	b2db      	uxtb	r3, r3
 8008662:	e03c      	b.n	80086de <HAL_TIM_PWM_Start+0x9e>
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	2b04      	cmp	r3, #4
 8008668:	d109      	bne.n	800867e <HAL_TIM_PWM_Start+0x3e>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b01      	cmp	r3, #1
 8008674:	bf14      	ite	ne
 8008676:	2301      	movne	r3, #1
 8008678:	2300      	moveq	r3, #0
 800867a:	b2db      	uxtb	r3, r3
 800867c:	e02f      	b.n	80086de <HAL_TIM_PWM_Start+0x9e>
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	2b08      	cmp	r3, #8
 8008682:	d109      	bne.n	8008698 <HAL_TIM_PWM_Start+0x58>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800868a:	b2db      	uxtb	r3, r3
 800868c:	2b01      	cmp	r3, #1
 800868e:	bf14      	ite	ne
 8008690:	2301      	movne	r3, #1
 8008692:	2300      	moveq	r3, #0
 8008694:	b2db      	uxtb	r3, r3
 8008696:	e022      	b.n	80086de <HAL_TIM_PWM_Start+0x9e>
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	2b0c      	cmp	r3, #12
 800869c:	d109      	bne.n	80086b2 <HAL_TIM_PWM_Start+0x72>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	bf14      	ite	ne
 80086aa:	2301      	movne	r3, #1
 80086ac:	2300      	moveq	r3, #0
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	e015      	b.n	80086de <HAL_TIM_PWM_Start+0x9e>
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	2b10      	cmp	r3, #16
 80086b6:	d109      	bne.n	80086cc <HAL_TIM_PWM_Start+0x8c>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	bf14      	ite	ne
 80086c4:	2301      	movne	r3, #1
 80086c6:	2300      	moveq	r3, #0
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	e008      	b.n	80086de <HAL_TIM_PWM_Start+0x9e>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	bf14      	ite	ne
 80086d8:	2301      	movne	r3, #1
 80086da:	2300      	moveq	r3, #0
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d001      	beq.n	80086e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e0a1      	b.n	800882a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d104      	bne.n	80086f6 <HAL_TIM_PWM_Start+0xb6>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2202      	movs	r2, #2
 80086f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086f4:	e023      	b.n	800873e <HAL_TIM_PWM_Start+0xfe>
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	2b04      	cmp	r3, #4
 80086fa:	d104      	bne.n	8008706 <HAL_TIM_PWM_Start+0xc6>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2202      	movs	r2, #2
 8008700:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008704:	e01b      	b.n	800873e <HAL_TIM_PWM_Start+0xfe>
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	2b08      	cmp	r3, #8
 800870a:	d104      	bne.n	8008716 <HAL_TIM_PWM_Start+0xd6>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2202      	movs	r2, #2
 8008710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008714:	e013      	b.n	800873e <HAL_TIM_PWM_Start+0xfe>
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	2b0c      	cmp	r3, #12
 800871a:	d104      	bne.n	8008726 <HAL_TIM_PWM_Start+0xe6>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2202      	movs	r2, #2
 8008720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008724:	e00b      	b.n	800873e <HAL_TIM_PWM_Start+0xfe>
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	2b10      	cmp	r3, #16
 800872a:	d104      	bne.n	8008736 <HAL_TIM_PWM_Start+0xf6>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2202      	movs	r2, #2
 8008730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008734:	e003      	b.n	800873e <HAL_TIM_PWM_Start+0xfe>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2202      	movs	r2, #2
 800873a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2201      	movs	r2, #1
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	4618      	mov	r0, r3
 8008748:	f000 ffd8 	bl	80096fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a38      	ldr	r2, [pc, #224]	@ (8008834 <HAL_TIM_PWM_Start+0x1f4>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d013      	beq.n	800877e <HAL_TIM_PWM_Start+0x13e>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a37      	ldr	r2, [pc, #220]	@ (8008838 <HAL_TIM_PWM_Start+0x1f8>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d00e      	beq.n	800877e <HAL_TIM_PWM_Start+0x13e>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a35      	ldr	r2, [pc, #212]	@ (800883c <HAL_TIM_PWM_Start+0x1fc>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d009      	beq.n	800877e <HAL_TIM_PWM_Start+0x13e>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a34      	ldr	r2, [pc, #208]	@ (8008840 <HAL_TIM_PWM_Start+0x200>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d004      	beq.n	800877e <HAL_TIM_PWM_Start+0x13e>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a32      	ldr	r2, [pc, #200]	@ (8008844 <HAL_TIM_PWM_Start+0x204>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d101      	bne.n	8008782 <HAL_TIM_PWM_Start+0x142>
 800877e:	2301      	movs	r3, #1
 8008780:	e000      	b.n	8008784 <HAL_TIM_PWM_Start+0x144>
 8008782:	2300      	movs	r3, #0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d007      	beq.n	8008798 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008796:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a25      	ldr	r2, [pc, #148]	@ (8008834 <HAL_TIM_PWM_Start+0x1f4>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d022      	beq.n	80087e8 <HAL_TIM_PWM_Start+0x1a8>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087aa:	d01d      	beq.n	80087e8 <HAL_TIM_PWM_Start+0x1a8>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a25      	ldr	r2, [pc, #148]	@ (8008848 <HAL_TIM_PWM_Start+0x208>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d018      	beq.n	80087e8 <HAL_TIM_PWM_Start+0x1a8>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a24      	ldr	r2, [pc, #144]	@ (800884c <HAL_TIM_PWM_Start+0x20c>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d013      	beq.n	80087e8 <HAL_TIM_PWM_Start+0x1a8>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a22      	ldr	r2, [pc, #136]	@ (8008850 <HAL_TIM_PWM_Start+0x210>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d00e      	beq.n	80087e8 <HAL_TIM_PWM_Start+0x1a8>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a1a      	ldr	r2, [pc, #104]	@ (8008838 <HAL_TIM_PWM_Start+0x1f8>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d009      	beq.n	80087e8 <HAL_TIM_PWM_Start+0x1a8>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a1e      	ldr	r2, [pc, #120]	@ (8008854 <HAL_TIM_PWM_Start+0x214>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d004      	beq.n	80087e8 <HAL_TIM_PWM_Start+0x1a8>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a16      	ldr	r2, [pc, #88]	@ (800883c <HAL_TIM_PWM_Start+0x1fc>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d115      	bne.n	8008814 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	689a      	ldr	r2, [r3, #8]
 80087ee:	4b1a      	ldr	r3, [pc, #104]	@ (8008858 <HAL_TIM_PWM_Start+0x218>)
 80087f0:	4013      	ands	r3, r2
 80087f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2b06      	cmp	r3, #6
 80087f8:	d015      	beq.n	8008826 <HAL_TIM_PWM_Start+0x1e6>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008800:	d011      	beq.n	8008826 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f042 0201 	orr.w	r2, r2, #1
 8008810:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008812:	e008      	b.n	8008826 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f042 0201 	orr.w	r2, r2, #1
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	e000      	b.n	8008828 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008826:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	40010000 	.word	0x40010000
 8008838:	40010400 	.word	0x40010400
 800883c:	40014000 	.word	0x40014000
 8008840:	40014400 	.word	0x40014400
 8008844:	40014800 	.word	0x40014800
 8008848:	40000400 	.word	0x40000400
 800884c:	40000800 	.word	0x40000800
 8008850:	40000c00 	.word	0x40000c00
 8008854:	40001800 	.word	0x40001800
 8008858:	00010007 	.word	0x00010007

0800885c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	f003 0302 	and.w	r3, r3, #2
 800887a:	2b00      	cmp	r3, #0
 800887c:	d020      	beq.n	80088c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f003 0302 	and.w	r3, r3, #2
 8008884:	2b00      	cmp	r3, #0
 8008886:	d01b      	beq.n	80088c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f06f 0202 	mvn.w	r2, #2
 8008890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2201      	movs	r2, #1
 8008896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	f003 0303 	and.w	r3, r3, #3
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d003      	beq.n	80088ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 faf6 	bl	8008e98 <HAL_TIM_IC_CaptureCallback>
 80088ac:	e005      	b.n	80088ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 fae8 	bl	8008e84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 faf9 	bl	8008eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	f003 0304 	and.w	r3, r3, #4
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d020      	beq.n	800890c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f003 0304 	and.w	r3, r3, #4
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d01b      	beq.n	800890c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f06f 0204 	mvn.w	r2, #4
 80088dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2202      	movs	r2, #2
 80088e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	699b      	ldr	r3, [r3, #24]
 80088ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d003      	beq.n	80088fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fad0 	bl	8008e98 <HAL_TIM_IC_CaptureCallback>
 80088f8:	e005      	b.n	8008906 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 fac2 	bl	8008e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fad3 	bl	8008eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	f003 0308 	and.w	r3, r3, #8
 8008912:	2b00      	cmp	r3, #0
 8008914:	d020      	beq.n	8008958 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f003 0308 	and.w	r3, r3, #8
 800891c:	2b00      	cmp	r3, #0
 800891e:	d01b      	beq.n	8008958 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f06f 0208 	mvn.w	r2, #8
 8008928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2204      	movs	r2, #4
 800892e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	69db      	ldr	r3, [r3, #28]
 8008936:	f003 0303 	and.w	r3, r3, #3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d003      	beq.n	8008946 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 faaa 	bl	8008e98 <HAL_TIM_IC_CaptureCallback>
 8008944:	e005      	b.n	8008952 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fa9c 	bl	8008e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 faad 	bl	8008eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	f003 0310 	and.w	r3, r3, #16
 800895e:	2b00      	cmp	r3, #0
 8008960:	d020      	beq.n	80089a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f003 0310 	and.w	r3, r3, #16
 8008968:	2b00      	cmp	r3, #0
 800896a:	d01b      	beq.n	80089a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f06f 0210 	mvn.w	r2, #16
 8008974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2208      	movs	r2, #8
 800897a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	69db      	ldr	r3, [r3, #28]
 8008982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008986:	2b00      	cmp	r3, #0
 8008988:	d003      	beq.n	8008992 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fa84 	bl	8008e98 <HAL_TIM_IC_CaptureCallback>
 8008990:	e005      	b.n	800899e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fa76 	bl	8008e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fa87 	bl	8008eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00c      	beq.n	80089c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f003 0301 	and.w	r3, r3, #1
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d007      	beq.n	80089c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f06f 0201 	mvn.w	r2, #1
 80089c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7fa ff24 	bl	8003810 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d104      	bne.n	80089dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00c      	beq.n	80089f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d007      	beq.n	80089f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80089ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 ffbf 	bl	8009974 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00c      	beq.n	8008a1a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d007      	beq.n	8008a1a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 ffb7 	bl	8009988 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d00c      	beq.n	8008a3e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d007      	beq.n	8008a3e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fa41 	bl	8008ec0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	f003 0320 	and.w	r3, r3, #32
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00c      	beq.n	8008a62 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f003 0320 	and.w	r3, r3, #32
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d007      	beq.n	8008a62 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f06f 0220 	mvn.w	r2, #32
 8008a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 ff7f 	bl	8009960 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a62:	bf00      	nop
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
	...

08008a6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d101      	bne.n	8008a8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008a86:	2302      	movs	r3, #2
 8008a88:	e0ff      	b.n	8008c8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2b14      	cmp	r3, #20
 8008a96:	f200 80f0 	bhi.w	8008c7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8008aa0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa0:	08008af5 	.word	0x08008af5
 8008aa4:	08008c7b 	.word	0x08008c7b
 8008aa8:	08008c7b 	.word	0x08008c7b
 8008aac:	08008c7b 	.word	0x08008c7b
 8008ab0:	08008b35 	.word	0x08008b35
 8008ab4:	08008c7b 	.word	0x08008c7b
 8008ab8:	08008c7b 	.word	0x08008c7b
 8008abc:	08008c7b 	.word	0x08008c7b
 8008ac0:	08008b77 	.word	0x08008b77
 8008ac4:	08008c7b 	.word	0x08008c7b
 8008ac8:	08008c7b 	.word	0x08008c7b
 8008acc:	08008c7b 	.word	0x08008c7b
 8008ad0:	08008bb7 	.word	0x08008bb7
 8008ad4:	08008c7b 	.word	0x08008c7b
 8008ad8:	08008c7b 	.word	0x08008c7b
 8008adc:	08008c7b 	.word	0x08008c7b
 8008ae0:	08008bf9 	.word	0x08008bf9
 8008ae4:	08008c7b 	.word	0x08008c7b
 8008ae8:	08008c7b 	.word	0x08008c7b
 8008aec:	08008c7b 	.word	0x08008c7b
 8008af0:	08008c39 	.word	0x08008c39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68b9      	ldr	r1, [r7, #8]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 fa8a 	bl	8009014 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	699a      	ldr	r2, [r3, #24]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f042 0208 	orr.w	r2, r2, #8
 8008b0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	699a      	ldr	r2, [r3, #24]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f022 0204 	bic.w	r2, r2, #4
 8008b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6999      	ldr	r1, [r3, #24]
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	691a      	ldr	r2, [r3, #16]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	430a      	orrs	r2, r1
 8008b30:	619a      	str	r2, [r3, #24]
      break;
 8008b32:	e0a5      	b.n	8008c80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68b9      	ldr	r1, [r7, #8]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 fafa 	bl	8009134 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	699a      	ldr	r2, [r3, #24]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	699a      	ldr	r2, [r3, #24]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6999      	ldr	r1, [r3, #24]
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	021a      	lsls	r2, r3, #8
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	430a      	orrs	r2, r1
 8008b72:	619a      	str	r2, [r3, #24]
      break;
 8008b74:	e084      	b.n	8008c80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68b9      	ldr	r1, [r7, #8]
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f000 fb63 	bl	8009248 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	69da      	ldr	r2, [r3, #28]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f042 0208 	orr.w	r2, r2, #8
 8008b90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	69da      	ldr	r2, [r3, #28]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f022 0204 	bic.w	r2, r2, #4
 8008ba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	69d9      	ldr	r1, [r3, #28]
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	691a      	ldr	r2, [r3, #16]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	430a      	orrs	r2, r1
 8008bb2:	61da      	str	r2, [r3, #28]
      break;
 8008bb4:	e064      	b.n	8008c80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68b9      	ldr	r1, [r7, #8]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f000 fbcb 	bl	8009358 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	69da      	ldr	r2, [r3, #28]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	69da      	ldr	r2, [r3, #28]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	69d9      	ldr	r1, [r3, #28]
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	021a      	lsls	r2, r3, #8
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	61da      	str	r2, [r3, #28]
      break;
 8008bf6:	e043      	b.n	8008c80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68b9      	ldr	r1, [r7, #8]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 fc14 	bl	800942c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f042 0208 	orr.w	r2, r2, #8
 8008c12:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f022 0204 	bic.w	r2, r2, #4
 8008c22:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	691a      	ldr	r2, [r3, #16]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	430a      	orrs	r2, r1
 8008c34:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008c36:	e023      	b.n	8008c80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	68b9      	ldr	r1, [r7, #8]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f000 fc58 	bl	80094f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c52:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c62:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	021a      	lsls	r2, r3, #8
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	430a      	orrs	r2, r1
 8008c76:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008c78:	e002      	b.n	8008c80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3718      	adds	r7, #24
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop

08008c94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d101      	bne.n	8008cb0 <HAL_TIM_ConfigClockSource+0x1c>
 8008cac:	2302      	movs	r3, #2
 8008cae:	e0dc      	b.n	8008e6a <HAL_TIM_ConfigClockSource+0x1d6>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2202      	movs	r2, #2
 8008cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	4b6a      	ldr	r3, [pc, #424]	@ (8008e74 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008ccc:	4013      	ands	r3, r2
 8008cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008cd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	68ba      	ldr	r2, [r7, #8]
 8008cde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a64      	ldr	r2, [pc, #400]	@ (8008e78 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	f000 80a9 	beq.w	8008e3e <HAL_TIM_ConfigClockSource+0x1aa>
 8008cec:	4a62      	ldr	r2, [pc, #392]	@ (8008e78 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	f200 80ae 	bhi.w	8008e50 <HAL_TIM_ConfigClockSource+0x1bc>
 8008cf4:	4a61      	ldr	r2, [pc, #388]	@ (8008e7c <HAL_TIM_ConfigClockSource+0x1e8>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	f000 80a1 	beq.w	8008e3e <HAL_TIM_ConfigClockSource+0x1aa>
 8008cfc:	4a5f      	ldr	r2, [pc, #380]	@ (8008e7c <HAL_TIM_ConfigClockSource+0x1e8>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	f200 80a6 	bhi.w	8008e50 <HAL_TIM_ConfigClockSource+0x1bc>
 8008d04:	4a5e      	ldr	r2, [pc, #376]	@ (8008e80 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	f000 8099 	beq.w	8008e3e <HAL_TIM_ConfigClockSource+0x1aa>
 8008d0c:	4a5c      	ldr	r2, [pc, #368]	@ (8008e80 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	f200 809e 	bhi.w	8008e50 <HAL_TIM_ConfigClockSource+0x1bc>
 8008d14:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008d18:	f000 8091 	beq.w	8008e3e <HAL_TIM_ConfigClockSource+0x1aa>
 8008d1c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008d20:	f200 8096 	bhi.w	8008e50 <HAL_TIM_ConfigClockSource+0x1bc>
 8008d24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d28:	f000 8089 	beq.w	8008e3e <HAL_TIM_ConfigClockSource+0x1aa>
 8008d2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d30:	f200 808e 	bhi.w	8008e50 <HAL_TIM_ConfigClockSource+0x1bc>
 8008d34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d38:	d03e      	beq.n	8008db8 <HAL_TIM_ConfigClockSource+0x124>
 8008d3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d3e:	f200 8087 	bhi.w	8008e50 <HAL_TIM_ConfigClockSource+0x1bc>
 8008d42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d46:	f000 8086 	beq.w	8008e56 <HAL_TIM_ConfigClockSource+0x1c2>
 8008d4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d4e:	d87f      	bhi.n	8008e50 <HAL_TIM_ConfigClockSource+0x1bc>
 8008d50:	2b70      	cmp	r3, #112	@ 0x70
 8008d52:	d01a      	beq.n	8008d8a <HAL_TIM_ConfigClockSource+0xf6>
 8008d54:	2b70      	cmp	r3, #112	@ 0x70
 8008d56:	d87b      	bhi.n	8008e50 <HAL_TIM_ConfigClockSource+0x1bc>
 8008d58:	2b60      	cmp	r3, #96	@ 0x60
 8008d5a:	d050      	beq.n	8008dfe <HAL_TIM_ConfigClockSource+0x16a>
 8008d5c:	2b60      	cmp	r3, #96	@ 0x60
 8008d5e:	d877      	bhi.n	8008e50 <HAL_TIM_ConfigClockSource+0x1bc>
 8008d60:	2b50      	cmp	r3, #80	@ 0x50
 8008d62:	d03c      	beq.n	8008dde <HAL_TIM_ConfigClockSource+0x14a>
 8008d64:	2b50      	cmp	r3, #80	@ 0x50
 8008d66:	d873      	bhi.n	8008e50 <HAL_TIM_ConfigClockSource+0x1bc>
 8008d68:	2b40      	cmp	r3, #64	@ 0x40
 8008d6a:	d058      	beq.n	8008e1e <HAL_TIM_ConfigClockSource+0x18a>
 8008d6c:	2b40      	cmp	r3, #64	@ 0x40
 8008d6e:	d86f      	bhi.n	8008e50 <HAL_TIM_ConfigClockSource+0x1bc>
 8008d70:	2b30      	cmp	r3, #48	@ 0x30
 8008d72:	d064      	beq.n	8008e3e <HAL_TIM_ConfigClockSource+0x1aa>
 8008d74:	2b30      	cmp	r3, #48	@ 0x30
 8008d76:	d86b      	bhi.n	8008e50 <HAL_TIM_ConfigClockSource+0x1bc>
 8008d78:	2b20      	cmp	r3, #32
 8008d7a:	d060      	beq.n	8008e3e <HAL_TIM_ConfigClockSource+0x1aa>
 8008d7c:	2b20      	cmp	r3, #32
 8008d7e:	d867      	bhi.n	8008e50 <HAL_TIM_ConfigClockSource+0x1bc>
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d05c      	beq.n	8008e3e <HAL_TIM_ConfigClockSource+0x1aa>
 8008d84:	2b10      	cmp	r3, #16
 8008d86:	d05a      	beq.n	8008e3e <HAL_TIM_ConfigClockSource+0x1aa>
 8008d88:	e062      	b.n	8008e50 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d9a:	f000 fc8f 	bl	80096bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008dac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	609a      	str	r2, [r3, #8]
      break;
 8008db6:	e04f      	b.n	8008e58 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008dc8:	f000 fc78 	bl	80096bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	689a      	ldr	r2, [r3, #8]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008dda:	609a      	str	r2, [r3, #8]
      break;
 8008ddc:	e03c      	b.n	8008e58 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dea:	461a      	mov	r2, r3
 8008dec:	f000 fbe8 	bl	80095c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2150      	movs	r1, #80	@ 0x50
 8008df6:	4618      	mov	r0, r3
 8008df8:	f000 fc42 	bl	8009680 <TIM_ITRx_SetConfig>
      break;
 8008dfc:	e02c      	b.n	8008e58 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	f000 fc07 	bl	800961e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2160      	movs	r1, #96	@ 0x60
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 fc32 	bl	8009680 <TIM_ITRx_SetConfig>
      break;
 8008e1c:	e01c      	b.n	8008e58 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	f000 fbc8 	bl	80095c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2140      	movs	r1, #64	@ 0x40
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 fc22 	bl	8009680 <TIM_ITRx_SetConfig>
      break;
 8008e3c:	e00c      	b.n	8008e58 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4619      	mov	r1, r3
 8008e48:	4610      	mov	r0, r2
 8008e4a:	f000 fc19 	bl	8009680 <TIM_ITRx_SetConfig>
      break;
 8008e4e:	e003      	b.n	8008e58 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	73fb      	strb	r3, [r7, #15]
      break;
 8008e54:	e000      	b.n	8008e58 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008e56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	ffceff88 	.word	0xffceff88
 8008e78:	00100040 	.word	0x00100040
 8008e7c:	00100030 	.word	0x00100030
 8008e80:	00100020 	.word	0x00100020

08008e84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008eb4:	bf00      	nop
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a43      	ldr	r2, [pc, #268]	@ (8008ff4 <TIM_Base_SetConfig+0x120>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d013      	beq.n	8008f14 <TIM_Base_SetConfig+0x40>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ef2:	d00f      	beq.n	8008f14 <TIM_Base_SetConfig+0x40>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a40      	ldr	r2, [pc, #256]	@ (8008ff8 <TIM_Base_SetConfig+0x124>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d00b      	beq.n	8008f14 <TIM_Base_SetConfig+0x40>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a3f      	ldr	r2, [pc, #252]	@ (8008ffc <TIM_Base_SetConfig+0x128>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d007      	beq.n	8008f14 <TIM_Base_SetConfig+0x40>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a3e      	ldr	r2, [pc, #248]	@ (8009000 <TIM_Base_SetConfig+0x12c>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d003      	beq.n	8008f14 <TIM_Base_SetConfig+0x40>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a3d      	ldr	r2, [pc, #244]	@ (8009004 <TIM_Base_SetConfig+0x130>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d108      	bne.n	8008f26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4a32      	ldr	r2, [pc, #200]	@ (8008ff4 <TIM_Base_SetConfig+0x120>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d01f      	beq.n	8008f6e <TIM_Base_SetConfig+0x9a>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f34:	d01b      	beq.n	8008f6e <TIM_Base_SetConfig+0x9a>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4a2f      	ldr	r2, [pc, #188]	@ (8008ff8 <TIM_Base_SetConfig+0x124>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d017      	beq.n	8008f6e <TIM_Base_SetConfig+0x9a>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4a2e      	ldr	r2, [pc, #184]	@ (8008ffc <TIM_Base_SetConfig+0x128>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d013      	beq.n	8008f6e <TIM_Base_SetConfig+0x9a>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a2d      	ldr	r2, [pc, #180]	@ (8009000 <TIM_Base_SetConfig+0x12c>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d00f      	beq.n	8008f6e <TIM_Base_SetConfig+0x9a>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a2c      	ldr	r2, [pc, #176]	@ (8009004 <TIM_Base_SetConfig+0x130>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d00b      	beq.n	8008f6e <TIM_Base_SetConfig+0x9a>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a2b      	ldr	r2, [pc, #172]	@ (8009008 <TIM_Base_SetConfig+0x134>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d007      	beq.n	8008f6e <TIM_Base_SetConfig+0x9a>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a2a      	ldr	r2, [pc, #168]	@ (800900c <TIM_Base_SetConfig+0x138>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d003      	beq.n	8008f6e <TIM_Base_SetConfig+0x9a>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a29      	ldr	r2, [pc, #164]	@ (8009010 <TIM_Base_SetConfig+0x13c>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d108      	bne.n	8008f80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	689a      	ldr	r2, [r3, #8]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4a14      	ldr	r2, [pc, #80]	@ (8008ff4 <TIM_Base_SetConfig+0x120>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d00f      	beq.n	8008fc6 <TIM_Base_SetConfig+0xf2>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a16      	ldr	r2, [pc, #88]	@ (8009004 <TIM_Base_SetConfig+0x130>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d00b      	beq.n	8008fc6 <TIM_Base_SetConfig+0xf2>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a15      	ldr	r2, [pc, #84]	@ (8009008 <TIM_Base_SetConfig+0x134>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d007      	beq.n	8008fc6 <TIM_Base_SetConfig+0xf2>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a14      	ldr	r2, [pc, #80]	@ (800900c <TIM_Base_SetConfig+0x138>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d003      	beq.n	8008fc6 <TIM_Base_SetConfig+0xf2>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a13      	ldr	r2, [pc, #76]	@ (8009010 <TIM_Base_SetConfig+0x13c>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d103      	bne.n	8008fce <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	691a      	ldr	r2, [r3, #16]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f043 0204 	orr.w	r2, r3, #4
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	601a      	str	r2, [r3, #0]
}
 8008fe6:	bf00      	nop
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	40010000 	.word	0x40010000
 8008ff8:	40000400 	.word	0x40000400
 8008ffc:	40000800 	.word	0x40000800
 8009000:	40000c00 	.word	0x40000c00
 8009004:	40010400 	.word	0x40010400
 8009008:	40014000 	.word	0x40014000
 800900c:	40014400 	.word	0x40014400
 8009010:	40014800 	.word	0x40014800

08009014 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009014:	b480      	push	{r7}
 8009016:	b087      	sub	sp, #28
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a1b      	ldr	r3, [r3, #32]
 8009022:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a1b      	ldr	r3, [r3, #32]
 8009028:	f023 0201 	bic.w	r2, r3, #1
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	699b      	ldr	r3, [r3, #24]
 800903a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	4b37      	ldr	r3, [pc, #220]	@ (800911c <TIM_OC1_SetConfig+0x108>)
 8009040:	4013      	ands	r3, r2
 8009042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f023 0303 	bic.w	r3, r3, #3
 800904a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	4313      	orrs	r3, r2
 8009054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	f023 0302 	bic.w	r3, r3, #2
 800905c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	697a      	ldr	r2, [r7, #20]
 8009064:	4313      	orrs	r3, r2
 8009066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a2d      	ldr	r2, [pc, #180]	@ (8009120 <TIM_OC1_SetConfig+0x10c>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d00f      	beq.n	8009090 <TIM_OC1_SetConfig+0x7c>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4a2c      	ldr	r2, [pc, #176]	@ (8009124 <TIM_OC1_SetConfig+0x110>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d00b      	beq.n	8009090 <TIM_OC1_SetConfig+0x7c>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4a2b      	ldr	r2, [pc, #172]	@ (8009128 <TIM_OC1_SetConfig+0x114>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d007      	beq.n	8009090 <TIM_OC1_SetConfig+0x7c>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a2a      	ldr	r2, [pc, #168]	@ (800912c <TIM_OC1_SetConfig+0x118>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d003      	beq.n	8009090 <TIM_OC1_SetConfig+0x7c>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a29      	ldr	r2, [pc, #164]	@ (8009130 <TIM_OC1_SetConfig+0x11c>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d10c      	bne.n	80090aa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	f023 0308 	bic.w	r3, r3, #8
 8009096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	4313      	orrs	r3, r2
 80090a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f023 0304 	bic.w	r3, r3, #4
 80090a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a1c      	ldr	r2, [pc, #112]	@ (8009120 <TIM_OC1_SetConfig+0x10c>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d00f      	beq.n	80090d2 <TIM_OC1_SetConfig+0xbe>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a1b      	ldr	r2, [pc, #108]	@ (8009124 <TIM_OC1_SetConfig+0x110>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d00b      	beq.n	80090d2 <TIM_OC1_SetConfig+0xbe>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a1a      	ldr	r2, [pc, #104]	@ (8009128 <TIM_OC1_SetConfig+0x114>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d007      	beq.n	80090d2 <TIM_OC1_SetConfig+0xbe>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a19      	ldr	r2, [pc, #100]	@ (800912c <TIM_OC1_SetConfig+0x118>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d003      	beq.n	80090d2 <TIM_OC1_SetConfig+0xbe>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a18      	ldr	r2, [pc, #96]	@ (8009130 <TIM_OC1_SetConfig+0x11c>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d111      	bne.n	80090f6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80090e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	695b      	ldr	r3, [r3, #20]
 80090e6:	693a      	ldr	r2, [r7, #16]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	693a      	ldr	r2, [r7, #16]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	693a      	ldr	r2, [r7, #16]
 80090fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	685a      	ldr	r2, [r3, #4]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	697a      	ldr	r2, [r7, #20]
 800910e:	621a      	str	r2, [r3, #32]
}
 8009110:	bf00      	nop
 8009112:	371c      	adds	r7, #28
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	fffeff8f 	.word	0xfffeff8f
 8009120:	40010000 	.word	0x40010000
 8009124:	40010400 	.word	0x40010400
 8009128:	40014000 	.word	0x40014000
 800912c:	40014400 	.word	0x40014400
 8009130:	40014800 	.word	0x40014800

08009134 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009134:	b480      	push	{r7}
 8009136:	b087      	sub	sp, #28
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6a1b      	ldr	r3, [r3, #32]
 8009142:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6a1b      	ldr	r3, [r3, #32]
 8009148:	f023 0210 	bic.w	r2, r3, #16
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	699b      	ldr	r3, [r3, #24]
 800915a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	4b34      	ldr	r3, [pc, #208]	@ (8009230 <TIM_OC2_SetConfig+0xfc>)
 8009160:	4013      	ands	r3, r2
 8009162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800916a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	021b      	lsls	r3, r3, #8
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	4313      	orrs	r3, r2
 8009176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	f023 0320 	bic.w	r3, r3, #32
 800917e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	011b      	lsls	r3, r3, #4
 8009186:	697a      	ldr	r2, [r7, #20]
 8009188:	4313      	orrs	r3, r2
 800918a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	4a29      	ldr	r2, [pc, #164]	@ (8009234 <TIM_OC2_SetConfig+0x100>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d003      	beq.n	800919c <TIM_OC2_SetConfig+0x68>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	4a28      	ldr	r2, [pc, #160]	@ (8009238 <TIM_OC2_SetConfig+0x104>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d10d      	bne.n	80091b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	011b      	lsls	r3, r3, #4
 80091aa:	697a      	ldr	r2, [r7, #20]
 80091ac:	4313      	orrs	r3, r2
 80091ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4a1e      	ldr	r2, [pc, #120]	@ (8009234 <TIM_OC2_SetConfig+0x100>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d00f      	beq.n	80091e0 <TIM_OC2_SetConfig+0xac>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4a1d      	ldr	r2, [pc, #116]	@ (8009238 <TIM_OC2_SetConfig+0x104>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d00b      	beq.n	80091e0 <TIM_OC2_SetConfig+0xac>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4a1c      	ldr	r2, [pc, #112]	@ (800923c <TIM_OC2_SetConfig+0x108>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d007      	beq.n	80091e0 <TIM_OC2_SetConfig+0xac>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4a1b      	ldr	r2, [pc, #108]	@ (8009240 <TIM_OC2_SetConfig+0x10c>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d003      	beq.n	80091e0 <TIM_OC2_SetConfig+0xac>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	4a1a      	ldr	r2, [pc, #104]	@ (8009244 <TIM_OC2_SetConfig+0x110>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d113      	bne.n	8009208 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80091e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80091ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	695b      	ldr	r3, [r3, #20]
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	693a      	ldr	r2, [r7, #16]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	693a      	ldr	r2, [r7, #16]
 8009204:	4313      	orrs	r3, r2
 8009206:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	693a      	ldr	r2, [r7, #16]
 800920c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	685a      	ldr	r2, [r3, #4]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	697a      	ldr	r2, [r7, #20]
 8009220:	621a      	str	r2, [r3, #32]
}
 8009222:	bf00      	nop
 8009224:	371c      	adds	r7, #28
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	feff8fff 	.word	0xfeff8fff
 8009234:	40010000 	.word	0x40010000
 8009238:	40010400 	.word	0x40010400
 800923c:	40014000 	.word	0x40014000
 8009240:	40014400 	.word	0x40014400
 8009244:	40014800 	.word	0x40014800

08009248 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009248:	b480      	push	{r7}
 800924a:	b087      	sub	sp, #28
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a1b      	ldr	r3, [r3, #32]
 8009256:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6a1b      	ldr	r3, [r3, #32]
 800925c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	69db      	ldr	r3, [r3, #28]
 800926e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	4b33      	ldr	r3, [pc, #204]	@ (8009340 <TIM_OC3_SetConfig+0xf8>)
 8009274:	4013      	ands	r3, r2
 8009276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f023 0303 	bic.w	r3, r3, #3
 800927e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	4313      	orrs	r3, r2
 8009288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	021b      	lsls	r3, r3, #8
 8009298:	697a      	ldr	r2, [r7, #20]
 800929a:	4313      	orrs	r3, r2
 800929c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a28      	ldr	r2, [pc, #160]	@ (8009344 <TIM_OC3_SetConfig+0xfc>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d003      	beq.n	80092ae <TIM_OC3_SetConfig+0x66>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4a27      	ldr	r2, [pc, #156]	@ (8009348 <TIM_OC3_SetConfig+0x100>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d10d      	bne.n	80092ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80092b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	021b      	lsls	r3, r3, #8
 80092bc:	697a      	ldr	r2, [r7, #20]
 80092be:	4313      	orrs	r3, r2
 80092c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80092c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4a1d      	ldr	r2, [pc, #116]	@ (8009344 <TIM_OC3_SetConfig+0xfc>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d00f      	beq.n	80092f2 <TIM_OC3_SetConfig+0xaa>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4a1c      	ldr	r2, [pc, #112]	@ (8009348 <TIM_OC3_SetConfig+0x100>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d00b      	beq.n	80092f2 <TIM_OC3_SetConfig+0xaa>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4a1b      	ldr	r2, [pc, #108]	@ (800934c <TIM_OC3_SetConfig+0x104>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d007      	beq.n	80092f2 <TIM_OC3_SetConfig+0xaa>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4a1a      	ldr	r2, [pc, #104]	@ (8009350 <TIM_OC3_SetConfig+0x108>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d003      	beq.n	80092f2 <TIM_OC3_SetConfig+0xaa>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4a19      	ldr	r2, [pc, #100]	@ (8009354 <TIM_OC3_SetConfig+0x10c>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d113      	bne.n	800931a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80092f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	695b      	ldr	r3, [r3, #20]
 8009306:	011b      	lsls	r3, r3, #4
 8009308:	693a      	ldr	r2, [r7, #16]
 800930a:	4313      	orrs	r3, r2
 800930c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	699b      	ldr	r3, [r3, #24]
 8009312:	011b      	lsls	r3, r3, #4
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	4313      	orrs	r3, r2
 8009318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	693a      	ldr	r2, [r7, #16]
 800931e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	685a      	ldr	r2, [r3, #4]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	621a      	str	r2, [r3, #32]
}
 8009334:	bf00      	nop
 8009336:	371c      	adds	r7, #28
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr
 8009340:	fffeff8f 	.word	0xfffeff8f
 8009344:	40010000 	.word	0x40010000
 8009348:	40010400 	.word	0x40010400
 800934c:	40014000 	.word	0x40014000
 8009350:	40014400 	.word	0x40014400
 8009354:	40014800 	.word	0x40014800

08009358 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009358:	b480      	push	{r7}
 800935a:	b087      	sub	sp, #28
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a1b      	ldr	r3, [r3, #32]
 8009366:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6a1b      	ldr	r3, [r3, #32]
 800936c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	69db      	ldr	r3, [r3, #28]
 800937e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	4b24      	ldr	r3, [pc, #144]	@ (8009414 <TIM_OC4_SetConfig+0xbc>)
 8009384:	4013      	ands	r3, r2
 8009386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800938e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	021b      	lsls	r3, r3, #8
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	4313      	orrs	r3, r2
 800939a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80093a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	031b      	lsls	r3, r3, #12
 80093aa:	693a      	ldr	r2, [r7, #16]
 80093ac:	4313      	orrs	r3, r2
 80093ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4a19      	ldr	r2, [pc, #100]	@ (8009418 <TIM_OC4_SetConfig+0xc0>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d00f      	beq.n	80093d8 <TIM_OC4_SetConfig+0x80>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a18      	ldr	r2, [pc, #96]	@ (800941c <TIM_OC4_SetConfig+0xc4>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d00b      	beq.n	80093d8 <TIM_OC4_SetConfig+0x80>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	4a17      	ldr	r2, [pc, #92]	@ (8009420 <TIM_OC4_SetConfig+0xc8>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d007      	beq.n	80093d8 <TIM_OC4_SetConfig+0x80>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a16      	ldr	r2, [pc, #88]	@ (8009424 <TIM_OC4_SetConfig+0xcc>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d003      	beq.n	80093d8 <TIM_OC4_SetConfig+0x80>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a15      	ldr	r2, [pc, #84]	@ (8009428 <TIM_OC4_SetConfig+0xd0>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d109      	bne.n	80093ec <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80093de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	695b      	ldr	r3, [r3, #20]
 80093e4:	019b      	lsls	r3, r3, #6
 80093e6:	697a      	ldr	r2, [r7, #20]
 80093e8:	4313      	orrs	r3, r2
 80093ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	697a      	ldr	r2, [r7, #20]
 80093f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	685a      	ldr	r2, [r3, #4]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	693a      	ldr	r2, [r7, #16]
 8009404:	621a      	str	r2, [r3, #32]
}
 8009406:	bf00      	nop
 8009408:	371c      	adds	r7, #28
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	feff8fff 	.word	0xfeff8fff
 8009418:	40010000 	.word	0x40010000
 800941c:	40010400 	.word	0x40010400
 8009420:	40014000 	.word	0x40014000
 8009424:	40014400 	.word	0x40014400
 8009428:	40014800 	.word	0x40014800

0800942c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800942c:	b480      	push	{r7}
 800942e:	b087      	sub	sp, #28
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6a1b      	ldr	r3, [r3, #32]
 800943a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a1b      	ldr	r3, [r3, #32]
 8009440:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	4b21      	ldr	r3, [pc, #132]	@ (80094dc <TIM_OC5_SetConfig+0xb0>)
 8009458:	4013      	ands	r3, r2
 800945a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	4313      	orrs	r3, r2
 8009464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800946c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	041b      	lsls	r3, r3, #16
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	4313      	orrs	r3, r2
 8009478:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a18      	ldr	r2, [pc, #96]	@ (80094e0 <TIM_OC5_SetConfig+0xb4>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d00f      	beq.n	80094a2 <TIM_OC5_SetConfig+0x76>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a17      	ldr	r2, [pc, #92]	@ (80094e4 <TIM_OC5_SetConfig+0xb8>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d00b      	beq.n	80094a2 <TIM_OC5_SetConfig+0x76>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a16      	ldr	r2, [pc, #88]	@ (80094e8 <TIM_OC5_SetConfig+0xbc>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d007      	beq.n	80094a2 <TIM_OC5_SetConfig+0x76>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a15      	ldr	r2, [pc, #84]	@ (80094ec <TIM_OC5_SetConfig+0xc0>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d003      	beq.n	80094a2 <TIM_OC5_SetConfig+0x76>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a14      	ldr	r2, [pc, #80]	@ (80094f0 <TIM_OC5_SetConfig+0xc4>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d109      	bne.n	80094b6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	695b      	ldr	r3, [r3, #20]
 80094ae:	021b      	lsls	r3, r3, #8
 80094b0:	697a      	ldr	r2, [r7, #20]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	697a      	ldr	r2, [r7, #20]
 80094ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	68fa      	ldr	r2, [r7, #12]
 80094c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	685a      	ldr	r2, [r3, #4]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	693a      	ldr	r2, [r7, #16]
 80094ce:	621a      	str	r2, [r3, #32]
}
 80094d0:	bf00      	nop
 80094d2:	371c      	adds	r7, #28
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	fffeff8f 	.word	0xfffeff8f
 80094e0:	40010000 	.word	0x40010000
 80094e4:	40010400 	.word	0x40010400
 80094e8:	40014000 	.word	0x40014000
 80094ec:	40014400 	.word	0x40014400
 80094f0:	40014800 	.word	0x40014800

080094f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b087      	sub	sp, #28
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a1b      	ldr	r3, [r3, #32]
 8009502:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a1b      	ldr	r3, [r3, #32]
 8009508:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800951a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	4b22      	ldr	r3, [pc, #136]	@ (80095a8 <TIM_OC6_SetConfig+0xb4>)
 8009520:	4013      	ands	r3, r2
 8009522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	021b      	lsls	r3, r3, #8
 800952a:	68fa      	ldr	r2, [r7, #12]
 800952c:	4313      	orrs	r3, r2
 800952e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009536:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	051b      	lsls	r3, r3, #20
 800953e:	693a      	ldr	r2, [r7, #16]
 8009540:	4313      	orrs	r3, r2
 8009542:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a19      	ldr	r2, [pc, #100]	@ (80095ac <TIM_OC6_SetConfig+0xb8>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d00f      	beq.n	800956c <TIM_OC6_SetConfig+0x78>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a18      	ldr	r2, [pc, #96]	@ (80095b0 <TIM_OC6_SetConfig+0xbc>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d00b      	beq.n	800956c <TIM_OC6_SetConfig+0x78>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4a17      	ldr	r2, [pc, #92]	@ (80095b4 <TIM_OC6_SetConfig+0xc0>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d007      	beq.n	800956c <TIM_OC6_SetConfig+0x78>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4a16      	ldr	r2, [pc, #88]	@ (80095b8 <TIM_OC6_SetConfig+0xc4>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d003      	beq.n	800956c <TIM_OC6_SetConfig+0x78>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4a15      	ldr	r2, [pc, #84]	@ (80095bc <TIM_OC6_SetConfig+0xc8>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d109      	bne.n	8009580 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009572:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	695b      	ldr	r3, [r3, #20]
 8009578:	029b      	lsls	r3, r3, #10
 800957a:	697a      	ldr	r2, [r7, #20]
 800957c:	4313      	orrs	r3, r2
 800957e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	697a      	ldr	r2, [r7, #20]
 8009584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	685a      	ldr	r2, [r3, #4]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	693a      	ldr	r2, [r7, #16]
 8009598:	621a      	str	r2, [r3, #32]
}
 800959a:	bf00      	nop
 800959c:	371c      	adds	r7, #28
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop
 80095a8:	feff8fff 	.word	0xfeff8fff
 80095ac:	40010000 	.word	0x40010000
 80095b0:	40010400 	.word	0x40010400
 80095b4:	40014000 	.word	0x40014000
 80095b8:	40014400 	.word	0x40014400
 80095bc:	40014800 	.word	0x40014800

080095c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b087      	sub	sp, #28
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6a1b      	ldr	r3, [r3, #32]
 80095d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6a1b      	ldr	r3, [r3, #32]
 80095d6:	f023 0201 	bic.w	r2, r3, #1
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	699b      	ldr	r3, [r3, #24]
 80095e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80095ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	011b      	lsls	r3, r3, #4
 80095f0:	693a      	ldr	r2, [r7, #16]
 80095f2:	4313      	orrs	r3, r2
 80095f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	f023 030a 	bic.w	r3, r3, #10
 80095fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80095fe:	697a      	ldr	r2, [r7, #20]
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	4313      	orrs	r3, r2
 8009604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	693a      	ldr	r2, [r7, #16]
 800960a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	697a      	ldr	r2, [r7, #20]
 8009610:	621a      	str	r2, [r3, #32]
}
 8009612:	bf00      	nop
 8009614:	371c      	adds	r7, #28
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800961e:	b480      	push	{r7}
 8009620:	b087      	sub	sp, #28
 8009622:	af00      	add	r7, sp, #0
 8009624:	60f8      	str	r0, [r7, #12]
 8009626:	60b9      	str	r1, [r7, #8]
 8009628:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6a1b      	ldr	r3, [r3, #32]
 800962e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6a1b      	ldr	r3, [r3, #32]
 8009634:	f023 0210 	bic.w	r2, r3, #16
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	699b      	ldr	r3, [r3, #24]
 8009640:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009648:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	031b      	lsls	r3, r3, #12
 800964e:	693a      	ldr	r2, [r7, #16]
 8009650:	4313      	orrs	r3, r2
 8009652:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800965a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	011b      	lsls	r3, r3, #4
 8009660:	697a      	ldr	r2, [r7, #20]
 8009662:	4313      	orrs	r3, r2
 8009664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	693a      	ldr	r2, [r7, #16]
 800966a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	697a      	ldr	r2, [r7, #20]
 8009670:	621a      	str	r2, [r3, #32]
}
 8009672:	bf00      	nop
 8009674:	371c      	adds	r7, #28
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr
	...

08009680 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	4b09      	ldr	r3, [pc, #36]	@ (80096b8 <TIM_ITRx_SetConfig+0x38>)
 8009694:	4013      	ands	r3, r2
 8009696:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009698:	683a      	ldr	r2, [r7, #0]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	4313      	orrs	r3, r2
 800969e:	f043 0307 	orr.w	r3, r3, #7
 80096a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	609a      	str	r2, [r3, #8]
}
 80096aa:	bf00      	nop
 80096ac:	3714      	adds	r7, #20
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	ffcfff8f 	.word	0xffcfff8f

080096bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80096bc:	b480      	push	{r7}
 80096be:	b087      	sub	sp, #28
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	607a      	str	r2, [r7, #4]
 80096c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80096d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	021a      	lsls	r2, r3, #8
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	431a      	orrs	r2, r3
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	4313      	orrs	r3, r2
 80096e4:	697a      	ldr	r2, [r7, #20]
 80096e6:	4313      	orrs	r3, r2
 80096e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	697a      	ldr	r2, [r7, #20]
 80096ee:	609a      	str	r2, [r3, #8]
}
 80096f0:	bf00      	nop
 80096f2:	371c      	adds	r7, #28
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b087      	sub	sp, #28
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	f003 031f 	and.w	r3, r3, #31
 800970e:	2201      	movs	r2, #1
 8009710:	fa02 f303 	lsl.w	r3, r2, r3
 8009714:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6a1a      	ldr	r2, [r3, #32]
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	43db      	mvns	r3, r3
 800971e:	401a      	ands	r2, r3
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6a1a      	ldr	r2, [r3, #32]
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	f003 031f 	and.w	r3, r3, #31
 800972e:	6879      	ldr	r1, [r7, #4]
 8009730:	fa01 f303 	lsl.w	r3, r1, r3
 8009734:	431a      	orrs	r2, r3
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	621a      	str	r2, [r3, #32]
}
 800973a:	bf00      	nop
 800973c:	371c      	adds	r7, #28
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
	...

08009748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009758:	2b01      	cmp	r3, #1
 800975a:	d101      	bne.n	8009760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800975c:	2302      	movs	r3, #2
 800975e:	e06d      	b.n	800983c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2202      	movs	r2, #2
 800976c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a30      	ldr	r2, [pc, #192]	@ (8009848 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d004      	beq.n	8009794 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a2f      	ldr	r2, [pc, #188]	@ (800984c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d108      	bne.n	80097a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800979a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a20      	ldr	r2, [pc, #128]	@ (8009848 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d022      	beq.n	8009810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097d2:	d01d      	beq.n	8009810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009850 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d018      	beq.n	8009810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a1c      	ldr	r2, [pc, #112]	@ (8009854 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d013      	beq.n	8009810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a1a      	ldr	r2, [pc, #104]	@ (8009858 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d00e      	beq.n	8009810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a15      	ldr	r2, [pc, #84]	@ (800984c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d009      	beq.n	8009810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a16      	ldr	r2, [pc, #88]	@ (800985c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d004      	beq.n	8009810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a15      	ldr	r2, [pc, #84]	@ (8009860 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d10c      	bne.n	800982a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009816:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	4313      	orrs	r3, r2
 8009820:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2201      	movs	r2, #1
 800982e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3714      	adds	r7, #20
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr
 8009848:	40010000 	.word	0x40010000
 800984c:	40010400 	.word	0x40010400
 8009850:	40000400 	.word	0x40000400
 8009854:	40000800 	.word	0x40000800
 8009858:	40000c00 	.word	0x40000c00
 800985c:	40001800 	.word	0x40001800
 8009860:	40014000 	.word	0x40014000

08009864 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800986e:	2300      	movs	r3, #0
 8009870:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009878:	2b01      	cmp	r3, #1
 800987a:	d101      	bne.n	8009880 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800987c:	2302      	movs	r3, #2
 800987e:	e065      	b.n	800994c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	4313      	orrs	r3, r2
 8009894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	4313      	orrs	r3, r2
 80098a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	4313      	orrs	r3, r2
 80098b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4313      	orrs	r3, r2
 80098be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	695b      	ldr	r3, [r3, #20]
 80098d8:	4313      	orrs	r3, r2
 80098da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098e6:	4313      	orrs	r3, r2
 80098e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	699b      	ldr	r3, [r3, #24]
 80098f4:	041b      	lsls	r3, r3, #16
 80098f6:	4313      	orrs	r3, r2
 80098f8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a16      	ldr	r2, [pc, #88]	@ (8009958 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d004      	beq.n	800990e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a14      	ldr	r2, [pc, #80]	@ (800995c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d115      	bne.n	800993a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009918:	051b      	lsls	r3, r3, #20
 800991a:	4313      	orrs	r3, r2
 800991c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	69db      	ldr	r3, [r3, #28]
 8009928:	4313      	orrs	r3, r2
 800992a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	6a1b      	ldr	r3, [r3, #32]
 8009936:	4313      	orrs	r3, r2
 8009938:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800994a:	2300      	movs	r3, #0
}
 800994c:	4618      	mov	r0, r3
 800994e:	3714      	adds	r7, #20
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr
 8009958:	40010000 	.word	0x40010000
 800995c:	40010400 	.word	0x40010400

08009960 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009968:	bf00      	nop
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800997c:	bf00      	nop
 800997e:	370c      	adds	r7, #12
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009990:	bf00      	nop
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d101      	bne.n	80099ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	e042      	b.n	8009a34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d106      	bne.n	80099c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f7fa f90f 	bl	8003be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2224      	movs	r2, #36	@ 0x24
 80099ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f022 0201 	bic.w	r2, r2, #1
 80099dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d002      	beq.n	80099ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 fd90 	bl	800a50c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 f825 	bl	8009a3c <UART_SetConfig>
 80099f2:	4603      	mov	r3, r0
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d101      	bne.n	80099fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	e01b      	b.n	8009a34 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	685a      	ldr	r2, [r3, #4]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009a0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	689a      	ldr	r2, [r3, #8]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009a1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f042 0201 	orr.w	r2, r2, #1
 8009a2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 fe0f 	bl	800a650 <UART_CheckIdleState>
 8009a32:	4603      	mov	r3, r0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3708      	adds	r7, #8
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a40:	b092      	sub	sp, #72	@ 0x48
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a46:	2300      	movs	r3, #0
 8009a48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	689a      	ldr	r2, [r3, #8]
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	431a      	orrs	r2, r3
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	695b      	ldr	r3, [r3, #20]
 8009a5a:	431a      	orrs	r2, r3
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	69db      	ldr	r3, [r3, #28]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	4bbe      	ldr	r3, [pc, #760]	@ (8009d64 <UART_SetConfig+0x328>)
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	697a      	ldr	r2, [r7, #20]
 8009a70:	6812      	ldr	r2, [r2, #0]
 8009a72:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009a74:	430b      	orrs	r3, r1
 8009a76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	68da      	ldr	r2, [r3, #12]
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	430a      	orrs	r2, r1
 8009a8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	699b      	ldr	r3, [r3, #24]
 8009a92:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4ab3      	ldr	r2, [pc, #716]	@ (8009d68 <UART_SetConfig+0x32c>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d004      	beq.n	8009aa8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	689a      	ldr	r2, [r3, #8]
 8009aae:	4baf      	ldr	r3, [pc, #700]	@ (8009d6c <UART_SetConfig+0x330>)
 8009ab0:	4013      	ands	r3, r2
 8009ab2:	697a      	ldr	r2, [r7, #20]
 8009ab4:	6812      	ldr	r2, [r2, #0]
 8009ab6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009ab8:	430b      	orrs	r3, r1
 8009aba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac2:	f023 010f 	bic.w	r1, r3, #15
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	430a      	orrs	r2, r1
 8009ad0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4aa6      	ldr	r2, [pc, #664]	@ (8009d70 <UART_SetConfig+0x334>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d177      	bne.n	8009bcc <UART_SetConfig+0x190>
 8009adc:	4ba5      	ldr	r3, [pc, #660]	@ (8009d74 <UART_SetConfig+0x338>)
 8009ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ae0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009ae4:	2b28      	cmp	r3, #40	@ 0x28
 8009ae6:	d86d      	bhi.n	8009bc4 <UART_SetConfig+0x188>
 8009ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8009af0 <UART_SetConfig+0xb4>)
 8009aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aee:	bf00      	nop
 8009af0:	08009b95 	.word	0x08009b95
 8009af4:	08009bc5 	.word	0x08009bc5
 8009af8:	08009bc5 	.word	0x08009bc5
 8009afc:	08009bc5 	.word	0x08009bc5
 8009b00:	08009bc5 	.word	0x08009bc5
 8009b04:	08009bc5 	.word	0x08009bc5
 8009b08:	08009bc5 	.word	0x08009bc5
 8009b0c:	08009bc5 	.word	0x08009bc5
 8009b10:	08009b9d 	.word	0x08009b9d
 8009b14:	08009bc5 	.word	0x08009bc5
 8009b18:	08009bc5 	.word	0x08009bc5
 8009b1c:	08009bc5 	.word	0x08009bc5
 8009b20:	08009bc5 	.word	0x08009bc5
 8009b24:	08009bc5 	.word	0x08009bc5
 8009b28:	08009bc5 	.word	0x08009bc5
 8009b2c:	08009bc5 	.word	0x08009bc5
 8009b30:	08009ba5 	.word	0x08009ba5
 8009b34:	08009bc5 	.word	0x08009bc5
 8009b38:	08009bc5 	.word	0x08009bc5
 8009b3c:	08009bc5 	.word	0x08009bc5
 8009b40:	08009bc5 	.word	0x08009bc5
 8009b44:	08009bc5 	.word	0x08009bc5
 8009b48:	08009bc5 	.word	0x08009bc5
 8009b4c:	08009bc5 	.word	0x08009bc5
 8009b50:	08009bad 	.word	0x08009bad
 8009b54:	08009bc5 	.word	0x08009bc5
 8009b58:	08009bc5 	.word	0x08009bc5
 8009b5c:	08009bc5 	.word	0x08009bc5
 8009b60:	08009bc5 	.word	0x08009bc5
 8009b64:	08009bc5 	.word	0x08009bc5
 8009b68:	08009bc5 	.word	0x08009bc5
 8009b6c:	08009bc5 	.word	0x08009bc5
 8009b70:	08009bb5 	.word	0x08009bb5
 8009b74:	08009bc5 	.word	0x08009bc5
 8009b78:	08009bc5 	.word	0x08009bc5
 8009b7c:	08009bc5 	.word	0x08009bc5
 8009b80:	08009bc5 	.word	0x08009bc5
 8009b84:	08009bc5 	.word	0x08009bc5
 8009b88:	08009bc5 	.word	0x08009bc5
 8009b8c:	08009bc5 	.word	0x08009bc5
 8009b90:	08009bbd 	.word	0x08009bbd
 8009b94:	2301      	movs	r3, #1
 8009b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b9a:	e222      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009b9c:	2304      	movs	r3, #4
 8009b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ba2:	e21e      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009ba4:	2308      	movs	r3, #8
 8009ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009baa:	e21a      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009bac:	2310      	movs	r3, #16
 8009bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bb2:	e216      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009bb4:	2320      	movs	r3, #32
 8009bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bba:	e212      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009bbc:	2340      	movs	r3, #64	@ 0x40
 8009bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bc2:	e20e      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009bc4:	2380      	movs	r3, #128	@ 0x80
 8009bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bca:	e20a      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a69      	ldr	r2, [pc, #420]	@ (8009d78 <UART_SetConfig+0x33c>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d130      	bne.n	8009c38 <UART_SetConfig+0x1fc>
 8009bd6:	4b67      	ldr	r3, [pc, #412]	@ (8009d74 <UART_SetConfig+0x338>)
 8009bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bda:	f003 0307 	and.w	r3, r3, #7
 8009bde:	2b05      	cmp	r3, #5
 8009be0:	d826      	bhi.n	8009c30 <UART_SetConfig+0x1f4>
 8009be2:	a201      	add	r2, pc, #4	@ (adr r2, 8009be8 <UART_SetConfig+0x1ac>)
 8009be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be8:	08009c01 	.word	0x08009c01
 8009bec:	08009c09 	.word	0x08009c09
 8009bf0:	08009c11 	.word	0x08009c11
 8009bf4:	08009c19 	.word	0x08009c19
 8009bf8:	08009c21 	.word	0x08009c21
 8009bfc:	08009c29 	.word	0x08009c29
 8009c00:	2300      	movs	r3, #0
 8009c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c06:	e1ec      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009c08:	2304      	movs	r3, #4
 8009c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c0e:	e1e8      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009c10:	2308      	movs	r3, #8
 8009c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c16:	e1e4      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009c18:	2310      	movs	r3, #16
 8009c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c1e:	e1e0      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009c20:	2320      	movs	r3, #32
 8009c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c26:	e1dc      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009c28:	2340      	movs	r3, #64	@ 0x40
 8009c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c2e:	e1d8      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009c30:	2380      	movs	r3, #128	@ 0x80
 8009c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c36:	e1d4      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a4f      	ldr	r2, [pc, #316]	@ (8009d7c <UART_SetConfig+0x340>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d130      	bne.n	8009ca4 <UART_SetConfig+0x268>
 8009c42:	4b4c      	ldr	r3, [pc, #304]	@ (8009d74 <UART_SetConfig+0x338>)
 8009c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c46:	f003 0307 	and.w	r3, r3, #7
 8009c4a:	2b05      	cmp	r3, #5
 8009c4c:	d826      	bhi.n	8009c9c <UART_SetConfig+0x260>
 8009c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c54 <UART_SetConfig+0x218>)
 8009c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c54:	08009c6d 	.word	0x08009c6d
 8009c58:	08009c75 	.word	0x08009c75
 8009c5c:	08009c7d 	.word	0x08009c7d
 8009c60:	08009c85 	.word	0x08009c85
 8009c64:	08009c8d 	.word	0x08009c8d
 8009c68:	08009c95 	.word	0x08009c95
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c72:	e1b6      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009c74:	2304      	movs	r3, #4
 8009c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c7a:	e1b2      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009c7c:	2308      	movs	r3, #8
 8009c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c82:	e1ae      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009c84:	2310      	movs	r3, #16
 8009c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c8a:	e1aa      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009c8c:	2320      	movs	r3, #32
 8009c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c92:	e1a6      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009c94:	2340      	movs	r3, #64	@ 0x40
 8009c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c9a:	e1a2      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009c9c:	2380      	movs	r3, #128	@ 0x80
 8009c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ca2:	e19e      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a35      	ldr	r2, [pc, #212]	@ (8009d80 <UART_SetConfig+0x344>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d130      	bne.n	8009d10 <UART_SetConfig+0x2d4>
 8009cae:	4b31      	ldr	r3, [pc, #196]	@ (8009d74 <UART_SetConfig+0x338>)
 8009cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cb2:	f003 0307 	and.w	r3, r3, #7
 8009cb6:	2b05      	cmp	r3, #5
 8009cb8:	d826      	bhi.n	8009d08 <UART_SetConfig+0x2cc>
 8009cba:	a201      	add	r2, pc, #4	@ (adr r2, 8009cc0 <UART_SetConfig+0x284>)
 8009cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc0:	08009cd9 	.word	0x08009cd9
 8009cc4:	08009ce1 	.word	0x08009ce1
 8009cc8:	08009ce9 	.word	0x08009ce9
 8009ccc:	08009cf1 	.word	0x08009cf1
 8009cd0:	08009cf9 	.word	0x08009cf9
 8009cd4:	08009d01 	.word	0x08009d01
 8009cd8:	2300      	movs	r3, #0
 8009cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cde:	e180      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009ce0:	2304      	movs	r3, #4
 8009ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ce6:	e17c      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009ce8:	2308      	movs	r3, #8
 8009cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cee:	e178      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009cf0:	2310      	movs	r3, #16
 8009cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cf6:	e174      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009cf8:	2320      	movs	r3, #32
 8009cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cfe:	e170      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009d00:	2340      	movs	r3, #64	@ 0x40
 8009d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d06:	e16c      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009d08:	2380      	movs	r3, #128	@ 0x80
 8009d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d0e:	e168      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a1b      	ldr	r2, [pc, #108]	@ (8009d84 <UART_SetConfig+0x348>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d142      	bne.n	8009da0 <UART_SetConfig+0x364>
 8009d1a:	4b16      	ldr	r3, [pc, #88]	@ (8009d74 <UART_SetConfig+0x338>)
 8009d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d1e:	f003 0307 	and.w	r3, r3, #7
 8009d22:	2b05      	cmp	r3, #5
 8009d24:	d838      	bhi.n	8009d98 <UART_SetConfig+0x35c>
 8009d26:	a201      	add	r2, pc, #4	@ (adr r2, 8009d2c <UART_SetConfig+0x2f0>)
 8009d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d2c:	08009d45 	.word	0x08009d45
 8009d30:	08009d4d 	.word	0x08009d4d
 8009d34:	08009d55 	.word	0x08009d55
 8009d38:	08009d5d 	.word	0x08009d5d
 8009d3c:	08009d89 	.word	0x08009d89
 8009d40:	08009d91 	.word	0x08009d91
 8009d44:	2300      	movs	r3, #0
 8009d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d4a:	e14a      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009d4c:	2304      	movs	r3, #4
 8009d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d52:	e146      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009d54:	2308      	movs	r3, #8
 8009d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d5a:	e142      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009d5c:	2310      	movs	r3, #16
 8009d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d62:	e13e      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009d64:	cfff69f3 	.word	0xcfff69f3
 8009d68:	58000c00 	.word	0x58000c00
 8009d6c:	11fff4ff 	.word	0x11fff4ff
 8009d70:	40011000 	.word	0x40011000
 8009d74:	58024400 	.word	0x58024400
 8009d78:	40004400 	.word	0x40004400
 8009d7c:	40004800 	.word	0x40004800
 8009d80:	40004c00 	.word	0x40004c00
 8009d84:	40005000 	.word	0x40005000
 8009d88:	2320      	movs	r3, #32
 8009d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d8e:	e128      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009d90:	2340      	movs	r3, #64	@ 0x40
 8009d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d96:	e124      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009d98:	2380      	movs	r3, #128	@ 0x80
 8009d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d9e:	e120      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4acb      	ldr	r2, [pc, #812]	@ (800a0d4 <UART_SetConfig+0x698>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d176      	bne.n	8009e98 <UART_SetConfig+0x45c>
 8009daa:	4bcb      	ldr	r3, [pc, #812]	@ (800a0d8 <UART_SetConfig+0x69c>)
 8009dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009db2:	2b28      	cmp	r3, #40	@ 0x28
 8009db4:	d86c      	bhi.n	8009e90 <UART_SetConfig+0x454>
 8009db6:	a201      	add	r2, pc, #4	@ (adr r2, 8009dbc <UART_SetConfig+0x380>)
 8009db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dbc:	08009e61 	.word	0x08009e61
 8009dc0:	08009e91 	.word	0x08009e91
 8009dc4:	08009e91 	.word	0x08009e91
 8009dc8:	08009e91 	.word	0x08009e91
 8009dcc:	08009e91 	.word	0x08009e91
 8009dd0:	08009e91 	.word	0x08009e91
 8009dd4:	08009e91 	.word	0x08009e91
 8009dd8:	08009e91 	.word	0x08009e91
 8009ddc:	08009e69 	.word	0x08009e69
 8009de0:	08009e91 	.word	0x08009e91
 8009de4:	08009e91 	.word	0x08009e91
 8009de8:	08009e91 	.word	0x08009e91
 8009dec:	08009e91 	.word	0x08009e91
 8009df0:	08009e91 	.word	0x08009e91
 8009df4:	08009e91 	.word	0x08009e91
 8009df8:	08009e91 	.word	0x08009e91
 8009dfc:	08009e71 	.word	0x08009e71
 8009e00:	08009e91 	.word	0x08009e91
 8009e04:	08009e91 	.word	0x08009e91
 8009e08:	08009e91 	.word	0x08009e91
 8009e0c:	08009e91 	.word	0x08009e91
 8009e10:	08009e91 	.word	0x08009e91
 8009e14:	08009e91 	.word	0x08009e91
 8009e18:	08009e91 	.word	0x08009e91
 8009e1c:	08009e79 	.word	0x08009e79
 8009e20:	08009e91 	.word	0x08009e91
 8009e24:	08009e91 	.word	0x08009e91
 8009e28:	08009e91 	.word	0x08009e91
 8009e2c:	08009e91 	.word	0x08009e91
 8009e30:	08009e91 	.word	0x08009e91
 8009e34:	08009e91 	.word	0x08009e91
 8009e38:	08009e91 	.word	0x08009e91
 8009e3c:	08009e81 	.word	0x08009e81
 8009e40:	08009e91 	.word	0x08009e91
 8009e44:	08009e91 	.word	0x08009e91
 8009e48:	08009e91 	.word	0x08009e91
 8009e4c:	08009e91 	.word	0x08009e91
 8009e50:	08009e91 	.word	0x08009e91
 8009e54:	08009e91 	.word	0x08009e91
 8009e58:	08009e91 	.word	0x08009e91
 8009e5c:	08009e89 	.word	0x08009e89
 8009e60:	2301      	movs	r3, #1
 8009e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e66:	e0bc      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009e68:	2304      	movs	r3, #4
 8009e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e6e:	e0b8      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009e70:	2308      	movs	r3, #8
 8009e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e76:	e0b4      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009e78:	2310      	movs	r3, #16
 8009e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e7e:	e0b0      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009e80:	2320      	movs	r3, #32
 8009e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e86:	e0ac      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009e88:	2340      	movs	r3, #64	@ 0x40
 8009e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e8e:	e0a8      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009e90:	2380      	movs	r3, #128	@ 0x80
 8009e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e96:	e0a4      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a8f      	ldr	r2, [pc, #572]	@ (800a0dc <UART_SetConfig+0x6a0>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d130      	bne.n	8009f04 <UART_SetConfig+0x4c8>
 8009ea2:	4b8d      	ldr	r3, [pc, #564]	@ (800a0d8 <UART_SetConfig+0x69c>)
 8009ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ea6:	f003 0307 	and.w	r3, r3, #7
 8009eaa:	2b05      	cmp	r3, #5
 8009eac:	d826      	bhi.n	8009efc <UART_SetConfig+0x4c0>
 8009eae:	a201      	add	r2, pc, #4	@ (adr r2, 8009eb4 <UART_SetConfig+0x478>)
 8009eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb4:	08009ecd 	.word	0x08009ecd
 8009eb8:	08009ed5 	.word	0x08009ed5
 8009ebc:	08009edd 	.word	0x08009edd
 8009ec0:	08009ee5 	.word	0x08009ee5
 8009ec4:	08009eed 	.word	0x08009eed
 8009ec8:	08009ef5 	.word	0x08009ef5
 8009ecc:	2300      	movs	r3, #0
 8009ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ed2:	e086      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009ed4:	2304      	movs	r3, #4
 8009ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eda:	e082      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009edc:	2308      	movs	r3, #8
 8009ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ee2:	e07e      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009ee4:	2310      	movs	r3, #16
 8009ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009eea:	e07a      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009eec:	2320      	movs	r3, #32
 8009eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ef2:	e076      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009ef4:	2340      	movs	r3, #64	@ 0x40
 8009ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009efa:	e072      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009efc:	2380      	movs	r3, #128	@ 0x80
 8009efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f02:	e06e      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a75      	ldr	r2, [pc, #468]	@ (800a0e0 <UART_SetConfig+0x6a4>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d130      	bne.n	8009f70 <UART_SetConfig+0x534>
 8009f0e:	4b72      	ldr	r3, [pc, #456]	@ (800a0d8 <UART_SetConfig+0x69c>)
 8009f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f12:	f003 0307 	and.w	r3, r3, #7
 8009f16:	2b05      	cmp	r3, #5
 8009f18:	d826      	bhi.n	8009f68 <UART_SetConfig+0x52c>
 8009f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f20 <UART_SetConfig+0x4e4>)
 8009f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f20:	08009f39 	.word	0x08009f39
 8009f24:	08009f41 	.word	0x08009f41
 8009f28:	08009f49 	.word	0x08009f49
 8009f2c:	08009f51 	.word	0x08009f51
 8009f30:	08009f59 	.word	0x08009f59
 8009f34:	08009f61 	.word	0x08009f61
 8009f38:	2300      	movs	r3, #0
 8009f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f3e:	e050      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009f40:	2304      	movs	r3, #4
 8009f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f46:	e04c      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009f48:	2308      	movs	r3, #8
 8009f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f4e:	e048      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009f50:	2310      	movs	r3, #16
 8009f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f56:	e044      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009f58:	2320      	movs	r3, #32
 8009f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f5e:	e040      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009f60:	2340      	movs	r3, #64	@ 0x40
 8009f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f66:	e03c      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009f68:	2380      	movs	r3, #128	@ 0x80
 8009f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f6e:	e038      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a5b      	ldr	r2, [pc, #364]	@ (800a0e4 <UART_SetConfig+0x6a8>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d130      	bne.n	8009fdc <UART_SetConfig+0x5a0>
 8009f7a:	4b57      	ldr	r3, [pc, #348]	@ (800a0d8 <UART_SetConfig+0x69c>)
 8009f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f7e:	f003 0307 	and.w	r3, r3, #7
 8009f82:	2b05      	cmp	r3, #5
 8009f84:	d826      	bhi.n	8009fd4 <UART_SetConfig+0x598>
 8009f86:	a201      	add	r2, pc, #4	@ (adr r2, 8009f8c <UART_SetConfig+0x550>)
 8009f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f8c:	08009fa5 	.word	0x08009fa5
 8009f90:	08009fad 	.word	0x08009fad
 8009f94:	08009fb5 	.word	0x08009fb5
 8009f98:	08009fbd 	.word	0x08009fbd
 8009f9c:	08009fc5 	.word	0x08009fc5
 8009fa0:	08009fcd 	.word	0x08009fcd
 8009fa4:	2302      	movs	r3, #2
 8009fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009faa:	e01a      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009fac:	2304      	movs	r3, #4
 8009fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fb2:	e016      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009fb4:	2308      	movs	r3, #8
 8009fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fba:	e012      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009fbc:	2310      	movs	r3, #16
 8009fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fc2:	e00e      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009fc4:	2320      	movs	r3, #32
 8009fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fca:	e00a      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009fcc:	2340      	movs	r3, #64	@ 0x40
 8009fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fd2:	e006      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009fd4:	2380      	movs	r3, #128	@ 0x80
 8009fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fda:	e002      	b.n	8009fe2 <UART_SetConfig+0x5a6>
 8009fdc:	2380      	movs	r3, #128	@ 0x80
 8009fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a3f      	ldr	r2, [pc, #252]	@ (800a0e4 <UART_SetConfig+0x6a8>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	f040 80f8 	bne.w	800a1de <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009fee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009ff2:	2b20      	cmp	r3, #32
 8009ff4:	dc46      	bgt.n	800a084 <UART_SetConfig+0x648>
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	f2c0 8082 	blt.w	800a100 <UART_SetConfig+0x6c4>
 8009ffc:	3b02      	subs	r3, #2
 8009ffe:	2b1e      	cmp	r3, #30
 800a000:	d87e      	bhi.n	800a100 <UART_SetConfig+0x6c4>
 800a002:	a201      	add	r2, pc, #4	@ (adr r2, 800a008 <UART_SetConfig+0x5cc>)
 800a004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a008:	0800a08b 	.word	0x0800a08b
 800a00c:	0800a101 	.word	0x0800a101
 800a010:	0800a093 	.word	0x0800a093
 800a014:	0800a101 	.word	0x0800a101
 800a018:	0800a101 	.word	0x0800a101
 800a01c:	0800a101 	.word	0x0800a101
 800a020:	0800a0a3 	.word	0x0800a0a3
 800a024:	0800a101 	.word	0x0800a101
 800a028:	0800a101 	.word	0x0800a101
 800a02c:	0800a101 	.word	0x0800a101
 800a030:	0800a101 	.word	0x0800a101
 800a034:	0800a101 	.word	0x0800a101
 800a038:	0800a101 	.word	0x0800a101
 800a03c:	0800a101 	.word	0x0800a101
 800a040:	0800a0b3 	.word	0x0800a0b3
 800a044:	0800a101 	.word	0x0800a101
 800a048:	0800a101 	.word	0x0800a101
 800a04c:	0800a101 	.word	0x0800a101
 800a050:	0800a101 	.word	0x0800a101
 800a054:	0800a101 	.word	0x0800a101
 800a058:	0800a101 	.word	0x0800a101
 800a05c:	0800a101 	.word	0x0800a101
 800a060:	0800a101 	.word	0x0800a101
 800a064:	0800a101 	.word	0x0800a101
 800a068:	0800a101 	.word	0x0800a101
 800a06c:	0800a101 	.word	0x0800a101
 800a070:	0800a101 	.word	0x0800a101
 800a074:	0800a101 	.word	0x0800a101
 800a078:	0800a101 	.word	0x0800a101
 800a07c:	0800a101 	.word	0x0800a101
 800a080:	0800a0f3 	.word	0x0800a0f3
 800a084:	2b40      	cmp	r3, #64	@ 0x40
 800a086:	d037      	beq.n	800a0f8 <UART_SetConfig+0x6bc>
 800a088:	e03a      	b.n	800a100 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a08a:	f7fd fd85 	bl	8007b98 <HAL_RCCEx_GetD3PCLK1Freq>
 800a08e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a090:	e03c      	b.n	800a10c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a092:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a096:	4618      	mov	r0, r3
 800a098:	f7fd fd94 	bl	8007bc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a09e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0a0:	e034      	b.n	800a10c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0a2:	f107 0318 	add.w	r3, r7, #24
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fd fee0 	bl	8007e6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0b0:	e02c      	b.n	800a10c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0b2:	4b09      	ldr	r3, [pc, #36]	@ (800a0d8 <UART_SetConfig+0x69c>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f003 0320 	and.w	r3, r3, #32
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d016      	beq.n	800a0ec <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0be:	4b06      	ldr	r3, [pc, #24]	@ (800a0d8 <UART_SetConfig+0x69c>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	08db      	lsrs	r3, r3, #3
 800a0c4:	f003 0303 	and.w	r3, r3, #3
 800a0c8:	4a07      	ldr	r2, [pc, #28]	@ (800a0e8 <UART_SetConfig+0x6ac>)
 800a0ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0d0:	e01c      	b.n	800a10c <UART_SetConfig+0x6d0>
 800a0d2:	bf00      	nop
 800a0d4:	40011400 	.word	0x40011400
 800a0d8:	58024400 	.word	0x58024400
 800a0dc:	40007800 	.word	0x40007800
 800a0e0:	40007c00 	.word	0x40007c00
 800a0e4:	58000c00 	.word	0x58000c00
 800a0e8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a0ec:	4b9d      	ldr	r3, [pc, #628]	@ (800a364 <UART_SetConfig+0x928>)
 800a0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0f0:	e00c      	b.n	800a10c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0f2:	4b9d      	ldr	r3, [pc, #628]	@ (800a368 <UART_SetConfig+0x92c>)
 800a0f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0f6:	e009      	b.n	800a10c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0fe:	e005      	b.n	800a10c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a100:	2300      	movs	r3, #0
 800a102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a10a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a10c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a10e:	2b00      	cmp	r3, #0
 800a110:	f000 81de 	beq.w	800a4d0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a118:	4a94      	ldr	r2, [pc, #592]	@ (800a36c <UART_SetConfig+0x930>)
 800a11a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a11e:	461a      	mov	r2, r3
 800a120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a122:	fbb3 f3f2 	udiv	r3, r3, r2
 800a126:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	685a      	ldr	r2, [r3, #4]
 800a12c:	4613      	mov	r3, r2
 800a12e:	005b      	lsls	r3, r3, #1
 800a130:	4413      	add	r3, r2
 800a132:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a134:	429a      	cmp	r2, r3
 800a136:	d305      	bcc.n	800a144 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a13e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a140:	429a      	cmp	r2, r3
 800a142:	d903      	bls.n	800a14c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a14a:	e1c1      	b.n	800a4d0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a14c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a14e:	2200      	movs	r2, #0
 800a150:	60bb      	str	r3, [r7, #8]
 800a152:	60fa      	str	r2, [r7, #12]
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a158:	4a84      	ldr	r2, [pc, #528]	@ (800a36c <UART_SetConfig+0x930>)
 800a15a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a15e:	b29b      	uxth	r3, r3
 800a160:	2200      	movs	r2, #0
 800a162:	603b      	str	r3, [r7, #0]
 800a164:	607a      	str	r2, [r7, #4]
 800a166:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a16a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a16e:	f7f6 f907 	bl	8000380 <__aeabi_uldivmod>
 800a172:	4602      	mov	r2, r0
 800a174:	460b      	mov	r3, r1
 800a176:	4610      	mov	r0, r2
 800a178:	4619      	mov	r1, r3
 800a17a:	f04f 0200 	mov.w	r2, #0
 800a17e:	f04f 0300 	mov.w	r3, #0
 800a182:	020b      	lsls	r3, r1, #8
 800a184:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a188:	0202      	lsls	r2, r0, #8
 800a18a:	6979      	ldr	r1, [r7, #20]
 800a18c:	6849      	ldr	r1, [r1, #4]
 800a18e:	0849      	lsrs	r1, r1, #1
 800a190:	2000      	movs	r0, #0
 800a192:	460c      	mov	r4, r1
 800a194:	4605      	mov	r5, r0
 800a196:	eb12 0804 	adds.w	r8, r2, r4
 800a19a:	eb43 0905 	adc.w	r9, r3, r5
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	469a      	mov	sl, r3
 800a1a6:	4693      	mov	fp, r2
 800a1a8:	4652      	mov	r2, sl
 800a1aa:	465b      	mov	r3, fp
 800a1ac:	4640      	mov	r0, r8
 800a1ae:	4649      	mov	r1, r9
 800a1b0:	f7f6 f8e6 	bl	8000380 <__aeabi_uldivmod>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a1c2:	d308      	bcc.n	800a1d6 <UART_SetConfig+0x79a>
 800a1c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1ca:	d204      	bcs.n	800a1d6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1d2:	60da      	str	r2, [r3, #12]
 800a1d4:	e17c      	b.n	800a4d0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a1dc:	e178      	b.n	800a4d0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	69db      	ldr	r3, [r3, #28]
 800a1e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1e6:	f040 80c5 	bne.w	800a374 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a1ea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a1ee:	2b20      	cmp	r3, #32
 800a1f0:	dc48      	bgt.n	800a284 <UART_SetConfig+0x848>
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	db7b      	blt.n	800a2ee <UART_SetConfig+0x8b2>
 800a1f6:	2b20      	cmp	r3, #32
 800a1f8:	d879      	bhi.n	800a2ee <UART_SetConfig+0x8b2>
 800a1fa:	a201      	add	r2, pc, #4	@ (adr r2, 800a200 <UART_SetConfig+0x7c4>)
 800a1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a200:	0800a28b 	.word	0x0800a28b
 800a204:	0800a293 	.word	0x0800a293
 800a208:	0800a2ef 	.word	0x0800a2ef
 800a20c:	0800a2ef 	.word	0x0800a2ef
 800a210:	0800a29b 	.word	0x0800a29b
 800a214:	0800a2ef 	.word	0x0800a2ef
 800a218:	0800a2ef 	.word	0x0800a2ef
 800a21c:	0800a2ef 	.word	0x0800a2ef
 800a220:	0800a2ab 	.word	0x0800a2ab
 800a224:	0800a2ef 	.word	0x0800a2ef
 800a228:	0800a2ef 	.word	0x0800a2ef
 800a22c:	0800a2ef 	.word	0x0800a2ef
 800a230:	0800a2ef 	.word	0x0800a2ef
 800a234:	0800a2ef 	.word	0x0800a2ef
 800a238:	0800a2ef 	.word	0x0800a2ef
 800a23c:	0800a2ef 	.word	0x0800a2ef
 800a240:	0800a2bb 	.word	0x0800a2bb
 800a244:	0800a2ef 	.word	0x0800a2ef
 800a248:	0800a2ef 	.word	0x0800a2ef
 800a24c:	0800a2ef 	.word	0x0800a2ef
 800a250:	0800a2ef 	.word	0x0800a2ef
 800a254:	0800a2ef 	.word	0x0800a2ef
 800a258:	0800a2ef 	.word	0x0800a2ef
 800a25c:	0800a2ef 	.word	0x0800a2ef
 800a260:	0800a2ef 	.word	0x0800a2ef
 800a264:	0800a2ef 	.word	0x0800a2ef
 800a268:	0800a2ef 	.word	0x0800a2ef
 800a26c:	0800a2ef 	.word	0x0800a2ef
 800a270:	0800a2ef 	.word	0x0800a2ef
 800a274:	0800a2ef 	.word	0x0800a2ef
 800a278:	0800a2ef 	.word	0x0800a2ef
 800a27c:	0800a2ef 	.word	0x0800a2ef
 800a280:	0800a2e1 	.word	0x0800a2e1
 800a284:	2b40      	cmp	r3, #64	@ 0x40
 800a286:	d02e      	beq.n	800a2e6 <UART_SetConfig+0x8aa>
 800a288:	e031      	b.n	800a2ee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a28a:	f7fc fa0d 	bl	80066a8 <HAL_RCC_GetPCLK1Freq>
 800a28e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a290:	e033      	b.n	800a2fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a292:	f7fc fa1f 	bl	80066d4 <HAL_RCC_GetPCLK2Freq>
 800a296:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a298:	e02f      	b.n	800a2fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a29a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7fd fc90 	bl	8007bc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2a8:	e027      	b.n	800a2fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2aa:	f107 0318 	add.w	r3, r7, #24
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7fd fddc 	bl	8007e6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2b8:	e01f      	b.n	800a2fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2ba:	4b2d      	ldr	r3, [pc, #180]	@ (800a370 <UART_SetConfig+0x934>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f003 0320 	and.w	r3, r3, #32
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d009      	beq.n	800a2da <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2c6:	4b2a      	ldr	r3, [pc, #168]	@ (800a370 <UART_SetConfig+0x934>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	08db      	lsrs	r3, r3, #3
 800a2cc:	f003 0303 	and.w	r3, r3, #3
 800a2d0:	4a24      	ldr	r2, [pc, #144]	@ (800a364 <UART_SetConfig+0x928>)
 800a2d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2d8:	e00f      	b.n	800a2fa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a2da:	4b22      	ldr	r3, [pc, #136]	@ (800a364 <UART_SetConfig+0x928>)
 800a2dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2de:	e00c      	b.n	800a2fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2e0:	4b21      	ldr	r3, [pc, #132]	@ (800a368 <UART_SetConfig+0x92c>)
 800a2e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2e4:	e009      	b.n	800a2fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2ec:	e005      	b.n	800a2fa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a2f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f000 80e7 	beq.w	800a4d0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a306:	4a19      	ldr	r2, [pc, #100]	@ (800a36c <UART_SetConfig+0x930>)
 800a308:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a30c:	461a      	mov	r2, r3
 800a30e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a310:	fbb3 f3f2 	udiv	r3, r3, r2
 800a314:	005a      	lsls	r2, r3, #1
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	085b      	lsrs	r3, r3, #1
 800a31c:	441a      	add	r2, r3
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	fbb2 f3f3 	udiv	r3, r2, r3
 800a326:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a32a:	2b0f      	cmp	r3, #15
 800a32c:	d916      	bls.n	800a35c <UART_SetConfig+0x920>
 800a32e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a334:	d212      	bcs.n	800a35c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a338:	b29b      	uxth	r3, r3
 800a33a:	f023 030f 	bic.w	r3, r3, #15
 800a33e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a342:	085b      	lsrs	r3, r3, #1
 800a344:	b29b      	uxth	r3, r3
 800a346:	f003 0307 	and.w	r3, r3, #7
 800a34a:	b29a      	uxth	r2, r3
 800a34c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a34e:	4313      	orrs	r3, r2
 800a350:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a358:	60da      	str	r2, [r3, #12]
 800a35a:	e0b9      	b.n	800a4d0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a35c:	2301      	movs	r3, #1
 800a35e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a362:	e0b5      	b.n	800a4d0 <UART_SetConfig+0xa94>
 800a364:	03d09000 	.word	0x03d09000
 800a368:	003d0900 	.word	0x003d0900
 800a36c:	0800f82c 	.word	0x0800f82c
 800a370:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a374:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a378:	2b20      	cmp	r3, #32
 800a37a:	dc49      	bgt.n	800a410 <UART_SetConfig+0x9d4>
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	db7c      	blt.n	800a47a <UART_SetConfig+0xa3e>
 800a380:	2b20      	cmp	r3, #32
 800a382:	d87a      	bhi.n	800a47a <UART_SetConfig+0xa3e>
 800a384:	a201      	add	r2, pc, #4	@ (adr r2, 800a38c <UART_SetConfig+0x950>)
 800a386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a38a:	bf00      	nop
 800a38c:	0800a417 	.word	0x0800a417
 800a390:	0800a41f 	.word	0x0800a41f
 800a394:	0800a47b 	.word	0x0800a47b
 800a398:	0800a47b 	.word	0x0800a47b
 800a39c:	0800a427 	.word	0x0800a427
 800a3a0:	0800a47b 	.word	0x0800a47b
 800a3a4:	0800a47b 	.word	0x0800a47b
 800a3a8:	0800a47b 	.word	0x0800a47b
 800a3ac:	0800a437 	.word	0x0800a437
 800a3b0:	0800a47b 	.word	0x0800a47b
 800a3b4:	0800a47b 	.word	0x0800a47b
 800a3b8:	0800a47b 	.word	0x0800a47b
 800a3bc:	0800a47b 	.word	0x0800a47b
 800a3c0:	0800a47b 	.word	0x0800a47b
 800a3c4:	0800a47b 	.word	0x0800a47b
 800a3c8:	0800a47b 	.word	0x0800a47b
 800a3cc:	0800a447 	.word	0x0800a447
 800a3d0:	0800a47b 	.word	0x0800a47b
 800a3d4:	0800a47b 	.word	0x0800a47b
 800a3d8:	0800a47b 	.word	0x0800a47b
 800a3dc:	0800a47b 	.word	0x0800a47b
 800a3e0:	0800a47b 	.word	0x0800a47b
 800a3e4:	0800a47b 	.word	0x0800a47b
 800a3e8:	0800a47b 	.word	0x0800a47b
 800a3ec:	0800a47b 	.word	0x0800a47b
 800a3f0:	0800a47b 	.word	0x0800a47b
 800a3f4:	0800a47b 	.word	0x0800a47b
 800a3f8:	0800a47b 	.word	0x0800a47b
 800a3fc:	0800a47b 	.word	0x0800a47b
 800a400:	0800a47b 	.word	0x0800a47b
 800a404:	0800a47b 	.word	0x0800a47b
 800a408:	0800a47b 	.word	0x0800a47b
 800a40c:	0800a46d 	.word	0x0800a46d
 800a410:	2b40      	cmp	r3, #64	@ 0x40
 800a412:	d02e      	beq.n	800a472 <UART_SetConfig+0xa36>
 800a414:	e031      	b.n	800a47a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a416:	f7fc f947 	bl	80066a8 <HAL_RCC_GetPCLK1Freq>
 800a41a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a41c:	e033      	b.n	800a486 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a41e:	f7fc f959 	bl	80066d4 <HAL_RCC_GetPCLK2Freq>
 800a422:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a424:	e02f      	b.n	800a486 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a426:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7fd fbca 	bl	8007bc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a434:	e027      	b.n	800a486 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a436:	f107 0318 	add.w	r3, r7, #24
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7fd fd16 	bl	8007e6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a444:	e01f      	b.n	800a486 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a446:	4b2d      	ldr	r3, [pc, #180]	@ (800a4fc <UART_SetConfig+0xac0>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f003 0320 	and.w	r3, r3, #32
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d009      	beq.n	800a466 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a452:	4b2a      	ldr	r3, [pc, #168]	@ (800a4fc <UART_SetConfig+0xac0>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	08db      	lsrs	r3, r3, #3
 800a458:	f003 0303 	and.w	r3, r3, #3
 800a45c:	4a28      	ldr	r2, [pc, #160]	@ (800a500 <UART_SetConfig+0xac4>)
 800a45e:	fa22 f303 	lsr.w	r3, r2, r3
 800a462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a464:	e00f      	b.n	800a486 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a466:	4b26      	ldr	r3, [pc, #152]	@ (800a500 <UART_SetConfig+0xac4>)
 800a468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a46a:	e00c      	b.n	800a486 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a46c:	4b25      	ldr	r3, [pc, #148]	@ (800a504 <UART_SetConfig+0xac8>)
 800a46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a470:	e009      	b.n	800a486 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a472:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a478:	e005      	b.n	800a486 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a47a:	2300      	movs	r3, #0
 800a47c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a484:	bf00      	nop
    }

    if (pclk != 0U)
 800a486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d021      	beq.n	800a4d0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a490:	4a1d      	ldr	r2, [pc, #116]	@ (800a508 <UART_SetConfig+0xacc>)
 800a492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a496:	461a      	mov	r2, r3
 800a498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a49a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	085b      	lsrs	r3, r3, #1
 800a4a4:	441a      	add	r2, r3
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b2:	2b0f      	cmp	r3, #15
 800a4b4:	d909      	bls.n	800a4ca <UART_SetConfig+0xa8e>
 800a4b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4bc:	d205      	bcs.n	800a4ca <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a4be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4c0:	b29a      	uxth	r2, r3
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	60da      	str	r2, [r3, #12]
 800a4c8:	e002      	b.n	800a4d0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a4ec:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3748      	adds	r7, #72	@ 0x48
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4fa:	bf00      	nop
 800a4fc:	58024400 	.word	0x58024400
 800a500:	03d09000 	.word	0x03d09000
 800a504:	003d0900 	.word	0x003d0900
 800a508:	0800f82c 	.word	0x0800f82c

0800a50c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a518:	f003 0308 	and.w	r3, r3, #8
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00a      	beq.n	800a536 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	430a      	orrs	r2, r1
 800a534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a53a:	f003 0301 	and.w	r3, r3, #1
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d00a      	beq.n	800a558 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	430a      	orrs	r2, r1
 800a556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a55c:	f003 0302 	and.w	r3, r3, #2
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00a      	beq.n	800a57a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	430a      	orrs	r2, r1
 800a578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a57e:	f003 0304 	and.w	r3, r3, #4
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00a      	beq.n	800a59c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	430a      	orrs	r2, r1
 800a59a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5a0:	f003 0310 	and.w	r3, r3, #16
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00a      	beq.n	800a5be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	430a      	orrs	r2, r1
 800a5bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5c2:	f003 0320 	and.w	r3, r3, #32
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00a      	beq.n	800a5e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	430a      	orrs	r2, r1
 800a5de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d01a      	beq.n	800a622 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	430a      	orrs	r2, r1
 800a600:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a606:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a60a:	d10a      	bne.n	800a622 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	430a      	orrs	r2, r1
 800a620:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d00a      	beq.n	800a644 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	430a      	orrs	r2, r1
 800a642:	605a      	str	r2, [r3, #4]
  }
}
 800a644:	bf00      	nop
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b098      	sub	sp, #96	@ 0x60
 800a654:	af02      	add	r7, sp, #8
 800a656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a660:	f7f9 fd94 	bl	800418c <HAL_GetTick>
 800a664:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f003 0308 	and.w	r3, r3, #8
 800a670:	2b08      	cmp	r3, #8
 800a672:	d12f      	bne.n	800a6d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a674:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a67c:	2200      	movs	r2, #0
 800a67e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 f88e 	bl	800a7a4 <UART_WaitOnFlagUntilTimeout>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d022      	beq.n	800a6d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a696:	e853 3f00 	ldrex	r3, [r3]
 800a69a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a69c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a69e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a6a2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a6b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6b4:	e841 2300 	strex	r3, r2, [r1]
 800a6b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a6ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d1e6      	bne.n	800a68e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2220      	movs	r2, #32
 800a6c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6d0:	2303      	movs	r3, #3
 800a6d2:	e063      	b.n	800a79c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f003 0304 	and.w	r3, r3, #4
 800a6de:	2b04      	cmp	r3, #4
 800a6e0:	d149      	bne.n	800a776 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a6e6:	9300      	str	r3, [sp, #0]
 800a6e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 f857 	bl	800a7a4 <UART_WaitOnFlagUntilTimeout>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d03c      	beq.n	800a776 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a704:	e853 3f00 	ldrex	r3, [r3]
 800a708:	623b      	str	r3, [r7, #32]
   return(result);
 800a70a:	6a3b      	ldr	r3, [r7, #32]
 800a70c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a710:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	461a      	mov	r2, r3
 800a718:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a71a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a71c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a720:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a722:	e841 2300 	strex	r3, r2, [r1]
 800a726:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d1e6      	bne.n	800a6fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	3308      	adds	r3, #8
 800a734:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	e853 3f00 	ldrex	r3, [r3]
 800a73c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f023 0301 	bic.w	r3, r3, #1
 800a744:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	3308      	adds	r3, #8
 800a74c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a74e:	61fa      	str	r2, [r7, #28]
 800a750:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a752:	69b9      	ldr	r1, [r7, #24]
 800a754:	69fa      	ldr	r2, [r7, #28]
 800a756:	e841 2300 	strex	r3, r2, [r1]
 800a75a:	617b      	str	r3, [r7, #20]
   return(result);
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1e5      	bne.n	800a72e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2220      	movs	r2, #32
 800a766:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2200      	movs	r2, #0
 800a76e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a772:	2303      	movs	r3, #3
 800a774:	e012      	b.n	800a79c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2220      	movs	r2, #32
 800a77a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2220      	movs	r2, #32
 800a782:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3758      	adds	r7, #88	@ 0x58
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	603b      	str	r3, [r7, #0]
 800a7b0:	4613      	mov	r3, r2
 800a7b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7b4:	e04f      	b.n	800a856 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a7bc:	d04b      	beq.n	800a856 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7be:	f7f9 fce5 	bl	800418c <HAL_GetTick>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	1ad3      	subs	r3, r2, r3
 800a7c8:	69ba      	ldr	r2, [r7, #24]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d302      	bcc.n	800a7d4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d101      	bne.n	800a7d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a7d4:	2303      	movs	r3, #3
 800a7d6:	e04e      	b.n	800a876 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f003 0304 	and.w	r3, r3, #4
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d037      	beq.n	800a856 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	2b80      	cmp	r3, #128	@ 0x80
 800a7ea:	d034      	beq.n	800a856 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	2b40      	cmp	r3, #64	@ 0x40
 800a7f0:	d031      	beq.n	800a856 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	69db      	ldr	r3, [r3, #28]
 800a7f8:	f003 0308 	and.w	r3, r3, #8
 800a7fc:	2b08      	cmp	r3, #8
 800a7fe:	d110      	bne.n	800a822 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	2208      	movs	r2, #8
 800a806:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	f000 f839 	bl	800a880 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2208      	movs	r2, #8
 800a812:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	e029      	b.n	800a876 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	69db      	ldr	r3, [r3, #28]
 800a828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a82c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a830:	d111      	bne.n	800a856 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a83a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a83c:	68f8      	ldr	r0, [r7, #12]
 800a83e:	f000 f81f 	bl	800a880 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2220      	movs	r2, #32
 800a846:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a852:	2303      	movs	r3, #3
 800a854:	e00f      	b.n	800a876 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	69da      	ldr	r2, [r3, #28]
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	4013      	ands	r3, r2
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	429a      	cmp	r2, r3
 800a864:	bf0c      	ite	eq
 800a866:	2301      	moveq	r3, #1
 800a868:	2300      	movne	r3, #0
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	461a      	mov	r2, r3
 800a86e:	79fb      	ldrb	r3, [r7, #7]
 800a870:	429a      	cmp	r2, r3
 800a872:	d0a0      	beq.n	800a7b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3710      	adds	r7, #16
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
	...

0800a880 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a880:	b480      	push	{r7}
 800a882:	b095      	sub	sp, #84	@ 0x54
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a890:	e853 3f00 	ldrex	r3, [r3]
 800a894:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a898:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a89c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a8ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a8ae:	e841 2300 	strex	r3, r2, [r1]
 800a8b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a8b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1e6      	bne.n	800a888 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	3308      	adds	r3, #8
 800a8c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c2:	6a3b      	ldr	r3, [r7, #32]
 800a8c4:	e853 3f00 	ldrex	r3, [r3]
 800a8c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8ca:	69fa      	ldr	r2, [r7, #28]
 800a8cc:	4b1e      	ldr	r3, [pc, #120]	@ (800a948 <UART_EndRxTransfer+0xc8>)
 800a8ce:	4013      	ands	r3, r2
 800a8d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	3308      	adds	r3, #8
 800a8d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a8dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8e2:	e841 2300 	strex	r3, r2, [r1]
 800a8e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d1e5      	bne.n	800a8ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d118      	bne.n	800a928 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	e853 3f00 	ldrex	r3, [r3]
 800a902:	60bb      	str	r3, [r7, #8]
   return(result);
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	f023 0310 	bic.w	r3, r3, #16
 800a90a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	461a      	mov	r2, r3
 800a912:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a914:	61bb      	str	r3, [r7, #24]
 800a916:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a918:	6979      	ldr	r1, [r7, #20]
 800a91a:	69ba      	ldr	r2, [r7, #24]
 800a91c:	e841 2300 	strex	r3, r2, [r1]
 800a920:	613b      	str	r3, [r7, #16]
   return(result);
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d1e6      	bne.n	800a8f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2220      	movs	r2, #32
 800a92c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a93c:	bf00      	nop
 800a93e:	3754      	adds	r7, #84	@ 0x54
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr
 800a948:	effffffe 	.word	0xeffffffe

0800a94c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d101      	bne.n	800a962 <HAL_UARTEx_DisableFifoMode+0x16>
 800a95e:	2302      	movs	r3, #2
 800a960:	e027      	b.n	800a9b2 <HAL_UARTEx_DisableFifoMode+0x66>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2201      	movs	r2, #1
 800a966:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2224      	movs	r2, #36	@ 0x24
 800a96e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f022 0201 	bic.w	r2, r2, #1
 800a988:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a990:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68fa      	ldr	r2, [r7, #12]
 800a99e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2220      	movs	r2, #32
 800a9a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3714      	adds	r7, #20
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr

0800a9be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b084      	sub	sp, #16
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d101      	bne.n	800a9d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a9d2:	2302      	movs	r3, #2
 800a9d4:	e02d      	b.n	800aa32 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2224      	movs	r2, #36	@ 0x24
 800a9e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f022 0201 	bic.w	r2, r2, #1
 800a9fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	683a      	ldr	r2, [r7, #0]
 800aa0e:	430a      	orrs	r2, r1
 800aa10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 f850 	bl	800aab8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2220      	movs	r2, #32
 800aa24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b084      	sub	sp, #16
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d101      	bne.n	800aa52 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aa4e:	2302      	movs	r3, #2
 800aa50:	e02d      	b.n	800aaae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2201      	movs	r2, #1
 800aa56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2224      	movs	r2, #36	@ 0x24
 800aa5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f022 0201 	bic.w	r2, r2, #1
 800aa78:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	683a      	ldr	r2, [r7, #0]
 800aa8a:	430a      	orrs	r2, r1
 800aa8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 f812 	bl	800aab8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	68fa      	ldr	r2, [r7, #12]
 800aa9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2220      	movs	r2, #32
 800aaa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aaac:	2300      	movs	r3, #0
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3710      	adds	r7, #16
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
	...

0800aab8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b085      	sub	sp, #20
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d108      	bne.n	800aada <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2201      	movs	r2, #1
 800aacc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aad8:	e031      	b.n	800ab3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aada:	2310      	movs	r3, #16
 800aadc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aade:	2310      	movs	r3, #16
 800aae0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	0e5b      	lsrs	r3, r3, #25
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	f003 0307 	and.w	r3, r3, #7
 800aaf0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	0f5b      	lsrs	r3, r3, #29
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	f003 0307 	and.w	r3, r3, #7
 800ab00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab02:	7bbb      	ldrb	r3, [r7, #14]
 800ab04:	7b3a      	ldrb	r2, [r7, #12]
 800ab06:	4911      	ldr	r1, [pc, #68]	@ (800ab4c <UARTEx_SetNbDataToProcess+0x94>)
 800ab08:	5c8a      	ldrb	r2, [r1, r2]
 800ab0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ab0e:	7b3a      	ldrb	r2, [r7, #12]
 800ab10:	490f      	ldr	r1, [pc, #60]	@ (800ab50 <UARTEx_SetNbDataToProcess+0x98>)
 800ab12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab14:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab18:	b29a      	uxth	r2, r3
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab20:	7bfb      	ldrb	r3, [r7, #15]
 800ab22:	7b7a      	ldrb	r2, [r7, #13]
 800ab24:	4909      	ldr	r1, [pc, #36]	@ (800ab4c <UARTEx_SetNbDataToProcess+0x94>)
 800ab26:	5c8a      	ldrb	r2, [r1, r2]
 800ab28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ab2c:	7b7a      	ldrb	r2, [r7, #13]
 800ab2e:	4908      	ldr	r1, [pc, #32]	@ (800ab50 <UARTEx_SetNbDataToProcess+0x98>)
 800ab30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab32:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab36:	b29a      	uxth	r2, r3
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ab3e:	bf00      	nop
 800ab40:	3714      	adds	r7, #20
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop
 800ab4c:	0800f844 	.word	0x0800f844
 800ab50:	0800f84c 	.word	0x0800f84c

0800ab54 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ab58:	4904      	ldr	r1, [pc, #16]	@ (800ab6c <MX_FATFS_Init+0x18>)
 800ab5a:	4805      	ldr	r0, [pc, #20]	@ (800ab70 <MX_FATFS_Init+0x1c>)
 800ab5c:	f000 f8b0 	bl	800acc0 <FATFS_LinkDriver>
 800ab60:	4603      	mov	r3, r0
 800ab62:	461a      	mov	r2, r3
 800ab64:	4b03      	ldr	r3, [pc, #12]	@ (800ab74 <MX_FATFS_Init+0x20>)
 800ab66:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ab68:	bf00      	nop
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	24000244 	.word	0x24000244
 800ab70:	24000010 	.word	0x24000010
 800ab74:	24000240 	.word	0x24000240

0800ab78 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	4603      	mov	r3, r0
 800ab80:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800ab82:	4b06      	ldr	r3, [pc, #24]	@ (800ab9c <USER_initialize+0x24>)
 800ab84:	2201      	movs	r2, #1
 800ab86:	701a      	strb	r2, [r3, #0]
    return Stat;
 800ab88:	4b04      	ldr	r3, [pc, #16]	@ (800ab9c <USER_initialize+0x24>)
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	370c      	adds	r7, #12
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr
 800ab9a:	bf00      	nop
 800ab9c:	2400000d 	.word	0x2400000d

0800aba0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	4603      	mov	r3, r0
 800aba8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800abaa:	4b06      	ldr	r3, [pc, #24]	@ (800abc4 <USER_status+0x24>)
 800abac:	2201      	movs	r2, #1
 800abae:	701a      	strb	r2, [r3, #0]
    return Stat;
 800abb0:	4b04      	ldr	r3, [pc, #16]	@ (800abc4 <USER_status+0x24>)
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	370c      	adds	r7, #12
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	2400000d 	.word	0x2400000d

0800abc8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60b9      	str	r1, [r7, #8]
 800abd0:	607a      	str	r2, [r7, #4]
 800abd2:	603b      	str	r3, [r7, #0]
 800abd4:	4603      	mov	r3, r0
 800abd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800abd8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3714      	adds	r7, #20
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr

0800abe6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800abe6:	b480      	push	{r7}
 800abe8:	b085      	sub	sp, #20
 800abea:	af00      	add	r7, sp, #0
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	607a      	str	r2, [r7, #4]
 800abf0:	603b      	str	r3, [r7, #0]
 800abf2:	4603      	mov	r3, r0
 800abf4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800abf6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3714      	adds	r7, #20
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b085      	sub	sp, #20
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	603a      	str	r2, [r7, #0]
 800ac0e:	71fb      	strb	r3, [r7, #7]
 800ac10:	460b      	mov	r3, r1
 800ac12:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800ac14:	2301      	movs	r3, #1
 800ac16:	73fb      	strb	r3, [r7, #15]
    return res;
 800ac18:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3714      	adds	r7, #20
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr
	...

0800ac28 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b087      	sub	sp, #28
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	60b9      	str	r1, [r7, #8]
 800ac32:	4613      	mov	r3, r2
 800ac34:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ac36:	2301      	movs	r3, #1
 800ac38:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ac3e:	4b1f      	ldr	r3, [pc, #124]	@ (800acbc <FATFS_LinkDriverEx+0x94>)
 800ac40:	7a5b      	ldrb	r3, [r3, #9]
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d131      	bne.n	800acac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ac48:	4b1c      	ldr	r3, [pc, #112]	@ (800acbc <FATFS_LinkDriverEx+0x94>)
 800ac4a:	7a5b      	ldrb	r3, [r3, #9]
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	461a      	mov	r2, r3
 800ac50:	4b1a      	ldr	r3, [pc, #104]	@ (800acbc <FATFS_LinkDriverEx+0x94>)
 800ac52:	2100      	movs	r1, #0
 800ac54:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ac56:	4b19      	ldr	r3, [pc, #100]	@ (800acbc <FATFS_LinkDriverEx+0x94>)
 800ac58:	7a5b      	ldrb	r3, [r3, #9]
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	4a17      	ldr	r2, [pc, #92]	@ (800acbc <FATFS_LinkDriverEx+0x94>)
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4413      	add	r3, r2
 800ac62:	68fa      	ldr	r2, [r7, #12]
 800ac64:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ac66:	4b15      	ldr	r3, [pc, #84]	@ (800acbc <FATFS_LinkDriverEx+0x94>)
 800ac68:	7a5b      	ldrb	r3, [r3, #9]
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	4b13      	ldr	r3, [pc, #76]	@ (800acbc <FATFS_LinkDriverEx+0x94>)
 800ac70:	4413      	add	r3, r2
 800ac72:	79fa      	ldrb	r2, [r7, #7]
 800ac74:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ac76:	4b11      	ldr	r3, [pc, #68]	@ (800acbc <FATFS_LinkDriverEx+0x94>)
 800ac78:	7a5b      	ldrb	r3, [r3, #9]
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	1c5a      	adds	r2, r3, #1
 800ac7e:	b2d1      	uxtb	r1, r2
 800ac80:	4a0e      	ldr	r2, [pc, #56]	@ (800acbc <FATFS_LinkDriverEx+0x94>)
 800ac82:	7251      	strb	r1, [r2, #9]
 800ac84:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ac86:	7dbb      	ldrb	r3, [r7, #22]
 800ac88:	3330      	adds	r3, #48	@ 0x30
 800ac8a:	b2da      	uxtb	r2, r3
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	3301      	adds	r3, #1
 800ac94:	223a      	movs	r2, #58	@ 0x3a
 800ac96:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	3302      	adds	r3, #2
 800ac9c:	222f      	movs	r2, #47	@ 0x2f
 800ac9e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	3303      	adds	r3, #3
 800aca4:	2200      	movs	r2, #0
 800aca6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800aca8:	2300      	movs	r3, #0
 800acaa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800acac:	7dfb      	ldrb	r3, [r7, #23]
}
 800acae:	4618      	mov	r0, r3
 800acb0:	371c      	adds	r7, #28
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr
 800acba:	bf00      	nop
 800acbc:	24000248 	.word	0x24000248

0800acc0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800acca:	2200      	movs	r2, #0
 800accc:	6839      	ldr	r1, [r7, #0]
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f7ff ffaa 	bl	800ac28 <FATFS_LinkDriverEx>
 800acd4:	4603      	mov	r3, r0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
	...

0800ace0 <__NVIC_SetPriority>:
{
 800ace0:	b480      	push	{r7}
 800ace2:	b083      	sub	sp, #12
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	4603      	mov	r3, r0
 800ace8:	6039      	str	r1, [r7, #0]
 800acea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800acec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	db0a      	blt.n	800ad0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	b2da      	uxtb	r2, r3
 800acf8:	490c      	ldr	r1, [pc, #48]	@ (800ad2c <__NVIC_SetPriority+0x4c>)
 800acfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800acfe:	0112      	lsls	r2, r2, #4
 800ad00:	b2d2      	uxtb	r2, r2
 800ad02:	440b      	add	r3, r1
 800ad04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ad08:	e00a      	b.n	800ad20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	b2da      	uxtb	r2, r3
 800ad0e:	4908      	ldr	r1, [pc, #32]	@ (800ad30 <__NVIC_SetPriority+0x50>)
 800ad10:	88fb      	ldrh	r3, [r7, #6]
 800ad12:	f003 030f 	and.w	r3, r3, #15
 800ad16:	3b04      	subs	r3, #4
 800ad18:	0112      	lsls	r2, r2, #4
 800ad1a:	b2d2      	uxtb	r2, r2
 800ad1c:	440b      	add	r3, r1
 800ad1e:	761a      	strb	r2, [r3, #24]
}
 800ad20:	bf00      	nop
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr
 800ad2c:	e000e100 	.word	0xe000e100
 800ad30:	e000ed00 	.word	0xe000ed00

0800ad34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ad34:	b580      	push	{r7, lr}
 800ad36:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ad38:	4b05      	ldr	r3, [pc, #20]	@ (800ad50 <SysTick_Handler+0x1c>)
 800ad3a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ad3c:	f001 fd46 	bl	800c7cc <xTaskGetSchedulerState>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d001      	beq.n	800ad4a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ad46:	f002 fb3f 	bl	800d3c8 <xPortSysTickHandler>
  }
}
 800ad4a:	bf00      	nop
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	e000e010 	.word	0xe000e010

0800ad54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ad54:	b580      	push	{r7, lr}
 800ad56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ad58:	2100      	movs	r1, #0
 800ad5a:	f06f 0004 	mvn.w	r0, #4
 800ad5e:	f7ff ffbf 	bl	800ace0 <__NVIC_SetPriority>
#endif
}
 800ad62:	bf00      	nop
 800ad64:	bd80      	pop	{r7, pc}
	...

0800ad68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad6e:	f3ef 8305 	mrs	r3, IPSR
 800ad72:	603b      	str	r3, [r7, #0]
  return(result);
 800ad74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d003      	beq.n	800ad82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ad7a:	f06f 0305 	mvn.w	r3, #5
 800ad7e:	607b      	str	r3, [r7, #4]
 800ad80:	e00c      	b.n	800ad9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ad82:	4b0a      	ldr	r3, [pc, #40]	@ (800adac <osKernelInitialize+0x44>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d105      	bne.n	800ad96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ad8a:	4b08      	ldr	r3, [pc, #32]	@ (800adac <osKernelInitialize+0x44>)
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ad90:	2300      	movs	r3, #0
 800ad92:	607b      	str	r3, [r7, #4]
 800ad94:	e002      	b.n	800ad9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ad96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ad9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ad9c:	687b      	ldr	r3, [r7, #4]
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	370c      	adds	r7, #12
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	24000254 	.word	0x24000254

0800adb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adb6:	f3ef 8305 	mrs	r3, IPSR
 800adba:	603b      	str	r3, [r7, #0]
  return(result);
 800adbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d003      	beq.n	800adca <osKernelStart+0x1a>
    stat = osErrorISR;
 800adc2:	f06f 0305 	mvn.w	r3, #5
 800adc6:	607b      	str	r3, [r7, #4]
 800adc8:	e010      	b.n	800adec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800adca:	4b0b      	ldr	r3, [pc, #44]	@ (800adf8 <osKernelStart+0x48>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2b01      	cmp	r3, #1
 800add0:	d109      	bne.n	800ade6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800add2:	f7ff ffbf 	bl	800ad54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800add6:	4b08      	ldr	r3, [pc, #32]	@ (800adf8 <osKernelStart+0x48>)
 800add8:	2202      	movs	r2, #2
 800adda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800addc:	f001 f892 	bl	800bf04 <vTaskStartScheduler>
      stat = osOK;
 800ade0:	2300      	movs	r3, #0
 800ade2:	607b      	str	r3, [r7, #4]
 800ade4:	e002      	b.n	800adec <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ade6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800adea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800adec:	687b      	ldr	r3, [r7, #4]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	24000254 	.word	0x24000254

0800adfc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b08e      	sub	sp, #56	@ 0x38
 800ae00:	af04      	add	r7, sp, #16
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae0c:	f3ef 8305 	mrs	r3, IPSR
 800ae10:	617b      	str	r3, [r7, #20]
  return(result);
 800ae12:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d17e      	bne.n	800af16 <osThreadNew+0x11a>
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d07b      	beq.n	800af16 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ae1e:	2380      	movs	r3, #128	@ 0x80
 800ae20:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ae22:	2318      	movs	r3, #24
 800ae24:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ae26:	2300      	movs	r3, #0
 800ae28:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ae2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d045      	beq.n	800aec2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d002      	beq.n	800ae44 <osThreadNew+0x48>
        name = attr->name;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	699b      	ldr	r3, [r3, #24]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d002      	beq.n	800ae52 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	699b      	ldr	r3, [r3, #24]
 800ae50:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d008      	beq.n	800ae6a <osThreadNew+0x6e>
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	2b38      	cmp	r3, #56	@ 0x38
 800ae5c:	d805      	bhi.n	800ae6a <osThreadNew+0x6e>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	f003 0301 	and.w	r3, r3, #1
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d001      	beq.n	800ae6e <osThreadNew+0x72>
        return (NULL);
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	e054      	b.n	800af18 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	695b      	ldr	r3, [r3, #20]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d003      	beq.n	800ae7e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	695b      	ldr	r3, [r3, #20]
 800ae7a:	089b      	lsrs	r3, r3, #2
 800ae7c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d00e      	beq.n	800aea4 <osThreadNew+0xa8>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	2ba7      	cmp	r3, #167	@ 0xa7
 800ae8c:	d90a      	bls.n	800aea4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d006      	beq.n	800aea4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	695b      	ldr	r3, [r3, #20]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d002      	beq.n	800aea4 <osThreadNew+0xa8>
        mem = 1;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	61bb      	str	r3, [r7, #24]
 800aea2:	e010      	b.n	800aec6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d10c      	bne.n	800aec6 <osThreadNew+0xca>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d108      	bne.n	800aec6 <osThreadNew+0xca>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	691b      	ldr	r3, [r3, #16]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d104      	bne.n	800aec6 <osThreadNew+0xca>
          mem = 0;
 800aebc:	2300      	movs	r3, #0
 800aebe:	61bb      	str	r3, [r7, #24]
 800aec0:	e001      	b.n	800aec6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800aec2:	2300      	movs	r3, #0
 800aec4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d110      	bne.n	800aeee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aed4:	9202      	str	r2, [sp, #8]
 800aed6:	9301      	str	r3, [sp, #4]
 800aed8:	69fb      	ldr	r3, [r7, #28]
 800aeda:	9300      	str	r3, [sp, #0]
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	6a3a      	ldr	r2, [r7, #32]
 800aee0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aee2:	68f8      	ldr	r0, [r7, #12]
 800aee4:	f000 fe1a 	bl	800bb1c <xTaskCreateStatic>
 800aee8:	4603      	mov	r3, r0
 800aeea:	613b      	str	r3, [r7, #16]
 800aeec:	e013      	b.n	800af16 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800aeee:	69bb      	ldr	r3, [r7, #24]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d110      	bne.n	800af16 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800aef4:	6a3b      	ldr	r3, [r7, #32]
 800aef6:	b29a      	uxth	r2, r3
 800aef8:	f107 0310 	add.w	r3, r7, #16
 800aefc:	9301      	str	r3, [sp, #4]
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	9300      	str	r3, [sp, #0]
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800af06:	68f8      	ldr	r0, [r7, #12]
 800af08:	f000 fe68 	bl	800bbdc <xTaskCreate>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d001      	beq.n	800af16 <osThreadNew+0x11a>
            hTask = NULL;
 800af12:	2300      	movs	r3, #0
 800af14:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800af16:	693b      	ldr	r3, [r7, #16]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3728      	adds	r7, #40	@ 0x28
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af28:	f3ef 8305 	mrs	r3, IPSR
 800af2c:	60bb      	str	r3, [r7, #8]
  return(result);
 800af2e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af30:	2b00      	cmp	r3, #0
 800af32:	d003      	beq.n	800af3c <osDelay+0x1c>
    stat = osErrorISR;
 800af34:	f06f 0305 	mvn.w	r3, #5
 800af38:	60fb      	str	r3, [r7, #12]
 800af3a:	e007      	b.n	800af4c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800af3c:	2300      	movs	r3, #0
 800af3e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d002      	beq.n	800af4c <osDelay+0x2c>
      vTaskDelay(ticks);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 ffa6 	bl	800be98 <vTaskDelay>
    }
  }

  return (stat);
 800af4c:	68fb      	ldr	r3, [r7, #12]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
	...

0800af58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	4a07      	ldr	r2, [pc, #28]	@ (800af84 <vApplicationGetIdleTaskMemory+0x2c>)
 800af68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	4a06      	ldr	r2, [pc, #24]	@ (800af88 <vApplicationGetIdleTaskMemory+0x30>)
 800af6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2280      	movs	r2, #128	@ 0x80
 800af74:	601a      	str	r2, [r3, #0]
}
 800af76:	bf00      	nop
 800af78:	3714      	adds	r7, #20
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop
 800af84:	24000258 	.word	0x24000258
 800af88:	24000300 	.word	0x24000300

0800af8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800af8c:	b480      	push	{r7}
 800af8e:	b085      	sub	sp, #20
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	4a07      	ldr	r2, [pc, #28]	@ (800afb8 <vApplicationGetTimerTaskMemory+0x2c>)
 800af9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	4a06      	ldr	r2, [pc, #24]	@ (800afbc <vApplicationGetTimerTaskMemory+0x30>)
 800afa2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800afaa:	601a      	str	r2, [r3, #0]
}
 800afac:	bf00      	nop
 800afae:	3714      	adds	r7, #20
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr
 800afb8:	24000500 	.word	0x24000500
 800afbc:	240005a8 	.word	0x240005a8

0800afc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f103 0208 	add.w	r2, r3, #8
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800afd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f103 0208 	add.w	r2, r3, #8
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f103 0208 	add.w	r2, r3, #8
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2200      	movs	r2, #0
 800aff2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aff4:	bf00      	nop
 800aff6:	370c      	adds	r7, #12
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr

0800b000 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2200      	movs	r2, #0
 800b00c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b00e:	bf00      	nop
 800b010:	370c      	adds	r7, #12
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr

0800b01a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b01a:	b480      	push	{r7}
 800b01c:	b085      	sub	sp, #20
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
 800b022:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	68fa      	ldr	r2, [r7, #12]
 800b02e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	689a      	ldr	r2, [r3, #8]
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	683a      	ldr	r2, [r7, #0]
 800b03e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	683a      	ldr	r2, [r7, #0]
 800b044:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	687a      	ldr	r2, [r7, #4]
 800b04a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	1c5a      	adds	r2, r3, #1
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	601a      	str	r2, [r3, #0]
}
 800b056:	bf00      	nop
 800b058:	3714      	adds	r7, #20
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr

0800b062 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b062:	b480      	push	{r7}
 800b064:	b085      	sub	sp, #20
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
 800b06a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b078:	d103      	bne.n	800b082 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	691b      	ldr	r3, [r3, #16]
 800b07e:	60fb      	str	r3, [r7, #12]
 800b080:	e00c      	b.n	800b09c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	3308      	adds	r3, #8
 800b086:	60fb      	str	r3, [r7, #12]
 800b088:	e002      	b.n	800b090 <vListInsert+0x2e>
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	60fb      	str	r3, [r7, #12]
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	68ba      	ldr	r2, [r7, #8]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d2f6      	bcs.n	800b08a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	685a      	ldr	r2, [r3, #4]
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	683a      	ldr	r2, [r7, #0]
 800b0aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	68fa      	ldr	r2, [r7, #12]
 800b0b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	683a      	ldr	r2, [r7, #0]
 800b0b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	1c5a      	adds	r2, r3, #1
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	601a      	str	r2, [r3, #0]
}
 800b0c8:	bf00      	nop
 800b0ca:	3714      	adds	r7, #20
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr

0800b0d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	691b      	ldr	r3, [r3, #16]
 800b0e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	6892      	ldr	r2, [r2, #8]
 800b0ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	6852      	ldr	r2, [r2, #4]
 800b0f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d103      	bne.n	800b108 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	689a      	ldr	r2, [r3, #8]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2200      	movs	r2, #0
 800b10c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	1e5a      	subs	r2, r3, #1
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3714      	adds	r7, #20
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr

0800b128 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d10b      	bne.n	800b154 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b13c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b140:	f383 8811 	msr	BASEPRI, r3
 800b144:	f3bf 8f6f 	isb	sy
 800b148:	f3bf 8f4f 	dsb	sy
 800b14c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b14e:	bf00      	nop
 800b150:	bf00      	nop
 800b152:	e7fd      	b.n	800b150 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b154:	f002 f8a8 	bl	800d2a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b160:	68f9      	ldr	r1, [r7, #12]
 800b162:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b164:	fb01 f303 	mul.w	r3, r1, r3
 800b168:	441a      	add	r2, r3
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2200      	movs	r2, #0
 800b172:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b184:	3b01      	subs	r3, #1
 800b186:	68f9      	ldr	r1, [r7, #12]
 800b188:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b18a:	fb01 f303 	mul.w	r3, r1, r3
 800b18e:	441a      	add	r2, r3
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	22ff      	movs	r2, #255	@ 0xff
 800b198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	22ff      	movs	r2, #255	@ 0xff
 800b1a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d114      	bne.n	800b1d4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	691b      	ldr	r3, [r3, #16]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d01a      	beq.n	800b1e8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	3310      	adds	r3, #16
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f001 f942 	bl	800c440 <xTaskRemoveFromEventList>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d012      	beq.n	800b1e8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b1c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b1f8 <xQueueGenericReset+0xd0>)
 800b1c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1c8:	601a      	str	r2, [r3, #0]
 800b1ca:	f3bf 8f4f 	dsb	sy
 800b1ce:	f3bf 8f6f 	isb	sy
 800b1d2:	e009      	b.n	800b1e8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	3310      	adds	r3, #16
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7ff fef1 	bl	800afc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	3324      	adds	r3, #36	@ 0x24
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7ff feec 	bl	800afc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b1e8:	f002 f890 	bl	800d30c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b1ec:	2301      	movs	r3, #1
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3710      	adds	r7, #16
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	e000ed04 	.word	0xe000ed04

0800b1fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b08e      	sub	sp, #56	@ 0x38
 800b200:	af02      	add	r7, sp, #8
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	60b9      	str	r1, [r7, #8]
 800b206:	607a      	str	r2, [r7, #4]
 800b208:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d10b      	bne.n	800b228 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b214:	f383 8811 	msr	BASEPRI, r3
 800b218:	f3bf 8f6f 	isb	sy
 800b21c:	f3bf 8f4f 	dsb	sy
 800b220:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b222:	bf00      	nop
 800b224:	bf00      	nop
 800b226:	e7fd      	b.n	800b224 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d10b      	bne.n	800b246 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b232:	f383 8811 	msr	BASEPRI, r3
 800b236:	f3bf 8f6f 	isb	sy
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b240:	bf00      	nop
 800b242:	bf00      	nop
 800b244:	e7fd      	b.n	800b242 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d002      	beq.n	800b252 <xQueueGenericCreateStatic+0x56>
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d001      	beq.n	800b256 <xQueueGenericCreateStatic+0x5a>
 800b252:	2301      	movs	r3, #1
 800b254:	e000      	b.n	800b258 <xQueueGenericCreateStatic+0x5c>
 800b256:	2300      	movs	r3, #0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d10b      	bne.n	800b274 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b25c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b260:	f383 8811 	msr	BASEPRI, r3
 800b264:	f3bf 8f6f 	isb	sy
 800b268:	f3bf 8f4f 	dsb	sy
 800b26c:	623b      	str	r3, [r7, #32]
}
 800b26e:	bf00      	nop
 800b270:	bf00      	nop
 800b272:	e7fd      	b.n	800b270 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d102      	bne.n	800b280 <xQueueGenericCreateStatic+0x84>
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d101      	bne.n	800b284 <xQueueGenericCreateStatic+0x88>
 800b280:	2301      	movs	r3, #1
 800b282:	e000      	b.n	800b286 <xQueueGenericCreateStatic+0x8a>
 800b284:	2300      	movs	r3, #0
 800b286:	2b00      	cmp	r3, #0
 800b288:	d10b      	bne.n	800b2a2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b28a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b28e:	f383 8811 	msr	BASEPRI, r3
 800b292:	f3bf 8f6f 	isb	sy
 800b296:	f3bf 8f4f 	dsb	sy
 800b29a:	61fb      	str	r3, [r7, #28]
}
 800b29c:	bf00      	nop
 800b29e:	bf00      	nop
 800b2a0:	e7fd      	b.n	800b29e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b2a2:	2350      	movs	r3, #80	@ 0x50
 800b2a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	2b50      	cmp	r3, #80	@ 0x50
 800b2aa:	d00b      	beq.n	800b2c4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b2ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b0:	f383 8811 	msr	BASEPRI, r3
 800b2b4:	f3bf 8f6f 	isb	sy
 800b2b8:	f3bf 8f4f 	dsb	sy
 800b2bc:	61bb      	str	r3, [r7, #24]
}
 800b2be:	bf00      	nop
 800b2c0:	bf00      	nop
 800b2c2:	e7fd      	b.n	800b2c0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b2c4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b2ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d00d      	beq.n	800b2ec <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b2d8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2de:	9300      	str	r3, [sp, #0]
 800b2e0:	4613      	mov	r3, r2
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	68b9      	ldr	r1, [r7, #8]
 800b2e6:	68f8      	ldr	r0, [r7, #12]
 800b2e8:	f000 f805 	bl	800b2f6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b2ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3730      	adds	r7, #48	@ 0x30
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b084      	sub	sp, #16
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	60f8      	str	r0, [r7, #12]
 800b2fe:	60b9      	str	r1, [r7, #8]
 800b300:	607a      	str	r2, [r7, #4]
 800b302:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d103      	bne.n	800b312 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b30a:	69bb      	ldr	r3, [r7, #24]
 800b30c:	69ba      	ldr	r2, [r7, #24]
 800b30e:	601a      	str	r2, [r3, #0]
 800b310:	e002      	b.n	800b318 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b312:	69bb      	ldr	r3, [r7, #24]
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	68fa      	ldr	r2, [r7, #12]
 800b31c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	68ba      	ldr	r2, [r7, #8]
 800b322:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b324:	2101      	movs	r1, #1
 800b326:	69b8      	ldr	r0, [r7, #24]
 800b328:	f7ff fefe 	bl	800b128 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b32c:	69bb      	ldr	r3, [r7, #24]
 800b32e:	78fa      	ldrb	r2, [r7, #3]
 800b330:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b334:	bf00      	nop
 800b336:	3710      	adds	r7, #16
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}

0800b33c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b08e      	sub	sp, #56	@ 0x38
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	607a      	str	r2, [r7, #4]
 800b348:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b34a:	2300      	movs	r3, #0
 800b34c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b354:	2b00      	cmp	r3, #0
 800b356:	d10b      	bne.n	800b370 <xQueueGenericSend+0x34>
	__asm volatile
 800b358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b35c:	f383 8811 	msr	BASEPRI, r3
 800b360:	f3bf 8f6f 	isb	sy
 800b364:	f3bf 8f4f 	dsb	sy
 800b368:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b36a:	bf00      	nop
 800b36c:	bf00      	nop
 800b36e:	e7fd      	b.n	800b36c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d103      	bne.n	800b37e <xQueueGenericSend+0x42>
 800b376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d101      	bne.n	800b382 <xQueueGenericSend+0x46>
 800b37e:	2301      	movs	r3, #1
 800b380:	e000      	b.n	800b384 <xQueueGenericSend+0x48>
 800b382:	2300      	movs	r3, #0
 800b384:	2b00      	cmp	r3, #0
 800b386:	d10b      	bne.n	800b3a0 <xQueueGenericSend+0x64>
	__asm volatile
 800b388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b38c:	f383 8811 	msr	BASEPRI, r3
 800b390:	f3bf 8f6f 	isb	sy
 800b394:	f3bf 8f4f 	dsb	sy
 800b398:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b39a:	bf00      	nop
 800b39c:	bf00      	nop
 800b39e:	e7fd      	b.n	800b39c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	2b02      	cmp	r3, #2
 800b3a4:	d103      	bne.n	800b3ae <xQueueGenericSend+0x72>
 800b3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d101      	bne.n	800b3b2 <xQueueGenericSend+0x76>
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	e000      	b.n	800b3b4 <xQueueGenericSend+0x78>
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d10b      	bne.n	800b3d0 <xQueueGenericSend+0x94>
	__asm volatile
 800b3b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3bc:	f383 8811 	msr	BASEPRI, r3
 800b3c0:	f3bf 8f6f 	isb	sy
 800b3c4:	f3bf 8f4f 	dsb	sy
 800b3c8:	623b      	str	r3, [r7, #32]
}
 800b3ca:	bf00      	nop
 800b3cc:	bf00      	nop
 800b3ce:	e7fd      	b.n	800b3cc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b3d0:	f001 f9fc 	bl	800c7cc <xTaskGetSchedulerState>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d102      	bne.n	800b3e0 <xQueueGenericSend+0xa4>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d101      	bne.n	800b3e4 <xQueueGenericSend+0xa8>
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	e000      	b.n	800b3e6 <xQueueGenericSend+0xaa>
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d10b      	bne.n	800b402 <xQueueGenericSend+0xc6>
	__asm volatile
 800b3ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ee:	f383 8811 	msr	BASEPRI, r3
 800b3f2:	f3bf 8f6f 	isb	sy
 800b3f6:	f3bf 8f4f 	dsb	sy
 800b3fa:	61fb      	str	r3, [r7, #28]
}
 800b3fc:	bf00      	nop
 800b3fe:	bf00      	nop
 800b400:	e7fd      	b.n	800b3fe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b402:	f001 ff51 	bl	800d2a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b408:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b40c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b40e:	429a      	cmp	r2, r3
 800b410:	d302      	bcc.n	800b418 <xQueueGenericSend+0xdc>
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	2b02      	cmp	r3, #2
 800b416:	d129      	bne.n	800b46c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b418:	683a      	ldr	r2, [r7, #0]
 800b41a:	68b9      	ldr	r1, [r7, #8]
 800b41c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b41e:	f000 fa0f 	bl	800b840 <prvCopyDataToQueue>
 800b422:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d010      	beq.n	800b44e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b42c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b42e:	3324      	adds	r3, #36	@ 0x24
 800b430:	4618      	mov	r0, r3
 800b432:	f001 f805 	bl	800c440 <xTaskRemoveFromEventList>
 800b436:	4603      	mov	r3, r0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d013      	beq.n	800b464 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b43c:	4b3f      	ldr	r3, [pc, #252]	@ (800b53c <xQueueGenericSend+0x200>)
 800b43e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b442:	601a      	str	r2, [r3, #0]
 800b444:	f3bf 8f4f 	dsb	sy
 800b448:	f3bf 8f6f 	isb	sy
 800b44c:	e00a      	b.n	800b464 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b44e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b450:	2b00      	cmp	r3, #0
 800b452:	d007      	beq.n	800b464 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b454:	4b39      	ldr	r3, [pc, #228]	@ (800b53c <xQueueGenericSend+0x200>)
 800b456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b45a:	601a      	str	r2, [r3, #0]
 800b45c:	f3bf 8f4f 	dsb	sy
 800b460:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b464:	f001 ff52 	bl	800d30c <vPortExitCritical>
				return pdPASS;
 800b468:	2301      	movs	r3, #1
 800b46a:	e063      	b.n	800b534 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d103      	bne.n	800b47a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b472:	f001 ff4b 	bl	800d30c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b476:	2300      	movs	r3, #0
 800b478:	e05c      	b.n	800b534 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b47a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d106      	bne.n	800b48e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b480:	f107 0314 	add.w	r3, r7, #20
 800b484:	4618      	mov	r0, r3
 800b486:	f001 f83f 	bl	800c508 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b48a:	2301      	movs	r3, #1
 800b48c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b48e:	f001 ff3d 	bl	800d30c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b492:	f000 fda7 	bl	800bfe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b496:	f001 ff07 	bl	800d2a8 <vPortEnterCritical>
 800b49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b49c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b4a0:	b25b      	sxtb	r3, r3
 800b4a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b4a6:	d103      	bne.n	800b4b0 <xQueueGenericSend+0x174>
 800b4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b4b6:	b25b      	sxtb	r3, r3
 800b4b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b4bc:	d103      	bne.n	800b4c6 <xQueueGenericSend+0x18a>
 800b4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b4c6:	f001 ff21 	bl	800d30c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b4ca:	1d3a      	adds	r2, r7, #4
 800b4cc:	f107 0314 	add.w	r3, r7, #20
 800b4d0:	4611      	mov	r1, r2
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f001 f82e 	bl	800c534 <xTaskCheckForTimeOut>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d124      	bne.n	800b528 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b4de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b4e0:	f000 faa6 	bl	800ba30 <prvIsQueueFull>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d018      	beq.n	800b51c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ec:	3310      	adds	r3, #16
 800b4ee:	687a      	ldr	r2, [r7, #4]
 800b4f0:	4611      	mov	r1, r2
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f000 ff52 	bl	800c39c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b4f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b4fa:	f000 fa31 	bl	800b960 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b4fe:	f000 fd7f 	bl	800c000 <xTaskResumeAll>
 800b502:	4603      	mov	r3, r0
 800b504:	2b00      	cmp	r3, #0
 800b506:	f47f af7c 	bne.w	800b402 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b50a:	4b0c      	ldr	r3, [pc, #48]	@ (800b53c <xQueueGenericSend+0x200>)
 800b50c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b510:	601a      	str	r2, [r3, #0]
 800b512:	f3bf 8f4f 	dsb	sy
 800b516:	f3bf 8f6f 	isb	sy
 800b51a:	e772      	b.n	800b402 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b51c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b51e:	f000 fa1f 	bl	800b960 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b522:	f000 fd6d 	bl	800c000 <xTaskResumeAll>
 800b526:	e76c      	b.n	800b402 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b528:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b52a:	f000 fa19 	bl	800b960 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b52e:	f000 fd67 	bl	800c000 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b532:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b534:	4618      	mov	r0, r3
 800b536:	3738      	adds	r7, #56	@ 0x38
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	e000ed04 	.word	0xe000ed04

0800b540 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b090      	sub	sp, #64	@ 0x40
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
 800b54c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b554:	2b00      	cmp	r3, #0
 800b556:	d10b      	bne.n	800b570 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b55c:	f383 8811 	msr	BASEPRI, r3
 800b560:	f3bf 8f6f 	isb	sy
 800b564:	f3bf 8f4f 	dsb	sy
 800b568:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b56a:	bf00      	nop
 800b56c:	bf00      	nop
 800b56e:	e7fd      	b.n	800b56c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d103      	bne.n	800b57e <xQueueGenericSendFromISR+0x3e>
 800b576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d101      	bne.n	800b582 <xQueueGenericSendFromISR+0x42>
 800b57e:	2301      	movs	r3, #1
 800b580:	e000      	b.n	800b584 <xQueueGenericSendFromISR+0x44>
 800b582:	2300      	movs	r3, #0
 800b584:	2b00      	cmp	r3, #0
 800b586:	d10b      	bne.n	800b5a0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b58c:	f383 8811 	msr	BASEPRI, r3
 800b590:	f3bf 8f6f 	isb	sy
 800b594:	f3bf 8f4f 	dsb	sy
 800b598:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b59a:	bf00      	nop
 800b59c:	bf00      	nop
 800b59e:	e7fd      	b.n	800b59c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	2b02      	cmp	r3, #2
 800b5a4:	d103      	bne.n	800b5ae <xQueueGenericSendFromISR+0x6e>
 800b5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	d101      	bne.n	800b5b2 <xQueueGenericSendFromISR+0x72>
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	e000      	b.n	800b5b4 <xQueueGenericSendFromISR+0x74>
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10b      	bne.n	800b5d0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b5b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5bc:	f383 8811 	msr	BASEPRI, r3
 800b5c0:	f3bf 8f6f 	isb	sy
 800b5c4:	f3bf 8f4f 	dsb	sy
 800b5c8:	623b      	str	r3, [r7, #32]
}
 800b5ca:	bf00      	nop
 800b5cc:	bf00      	nop
 800b5ce:	e7fd      	b.n	800b5cc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b5d0:	f001 ff4a 	bl	800d468 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b5d4:	f3ef 8211 	mrs	r2, BASEPRI
 800b5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5dc:	f383 8811 	msr	BASEPRI, r3
 800b5e0:	f3bf 8f6f 	isb	sy
 800b5e4:	f3bf 8f4f 	dsb	sy
 800b5e8:	61fa      	str	r2, [r7, #28]
 800b5ea:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b5ec:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b5ee:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b5f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d302      	bcc.n	800b602 <xQueueGenericSendFromISR+0xc2>
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	2b02      	cmp	r3, #2
 800b600:	d12f      	bne.n	800b662 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b604:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b608:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b60e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b610:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b612:	683a      	ldr	r2, [r7, #0]
 800b614:	68b9      	ldr	r1, [r7, #8]
 800b616:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b618:	f000 f912 	bl	800b840 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b61c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b620:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b624:	d112      	bne.n	800b64c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d016      	beq.n	800b65c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b630:	3324      	adds	r3, #36	@ 0x24
 800b632:	4618      	mov	r0, r3
 800b634:	f000 ff04 	bl	800c440 <xTaskRemoveFromEventList>
 800b638:	4603      	mov	r3, r0
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d00e      	beq.n	800b65c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d00b      	beq.n	800b65c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2201      	movs	r2, #1
 800b648:	601a      	str	r2, [r3, #0]
 800b64a:	e007      	b.n	800b65c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b64c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b650:	3301      	adds	r3, #1
 800b652:	b2db      	uxtb	r3, r3
 800b654:	b25a      	sxtb	r2, r3
 800b656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b658:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b65c:	2301      	movs	r3, #1
 800b65e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b660:	e001      	b.n	800b666 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b662:	2300      	movs	r3, #0
 800b664:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b668:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b670:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b674:	4618      	mov	r0, r3
 800b676:	3740      	adds	r7, #64	@ 0x40
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b08c      	sub	sp, #48	@ 0x30
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b688:	2300      	movs	r3, #0
 800b68a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b692:	2b00      	cmp	r3, #0
 800b694:	d10b      	bne.n	800b6ae <xQueueReceive+0x32>
	__asm volatile
 800b696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b69a:	f383 8811 	msr	BASEPRI, r3
 800b69e:	f3bf 8f6f 	isb	sy
 800b6a2:	f3bf 8f4f 	dsb	sy
 800b6a6:	623b      	str	r3, [r7, #32]
}
 800b6a8:	bf00      	nop
 800b6aa:	bf00      	nop
 800b6ac:	e7fd      	b.n	800b6aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d103      	bne.n	800b6bc <xQueueReceive+0x40>
 800b6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d101      	bne.n	800b6c0 <xQueueReceive+0x44>
 800b6bc:	2301      	movs	r3, #1
 800b6be:	e000      	b.n	800b6c2 <xQueueReceive+0x46>
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d10b      	bne.n	800b6de <xQueueReceive+0x62>
	__asm volatile
 800b6c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ca:	f383 8811 	msr	BASEPRI, r3
 800b6ce:	f3bf 8f6f 	isb	sy
 800b6d2:	f3bf 8f4f 	dsb	sy
 800b6d6:	61fb      	str	r3, [r7, #28]
}
 800b6d8:	bf00      	nop
 800b6da:	bf00      	nop
 800b6dc:	e7fd      	b.n	800b6da <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b6de:	f001 f875 	bl	800c7cc <xTaskGetSchedulerState>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d102      	bne.n	800b6ee <xQueueReceive+0x72>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d101      	bne.n	800b6f2 <xQueueReceive+0x76>
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	e000      	b.n	800b6f4 <xQueueReceive+0x78>
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d10b      	bne.n	800b710 <xQueueReceive+0x94>
	__asm volatile
 800b6f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6fc:	f383 8811 	msr	BASEPRI, r3
 800b700:	f3bf 8f6f 	isb	sy
 800b704:	f3bf 8f4f 	dsb	sy
 800b708:	61bb      	str	r3, [r7, #24]
}
 800b70a:	bf00      	nop
 800b70c:	bf00      	nop
 800b70e:	e7fd      	b.n	800b70c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b710:	f001 fdca 	bl	800d2a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b718:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d01f      	beq.n	800b760 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b720:	68b9      	ldr	r1, [r7, #8]
 800b722:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b724:	f000 f8f6 	bl	800b914 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b72a:	1e5a      	subs	r2, r3, #1
 800b72c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b72e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b732:	691b      	ldr	r3, [r3, #16]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d00f      	beq.n	800b758 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b73a:	3310      	adds	r3, #16
 800b73c:	4618      	mov	r0, r3
 800b73e:	f000 fe7f 	bl	800c440 <xTaskRemoveFromEventList>
 800b742:	4603      	mov	r3, r0
 800b744:	2b00      	cmp	r3, #0
 800b746:	d007      	beq.n	800b758 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b748:	4b3c      	ldr	r3, [pc, #240]	@ (800b83c <xQueueReceive+0x1c0>)
 800b74a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b74e:	601a      	str	r2, [r3, #0]
 800b750:	f3bf 8f4f 	dsb	sy
 800b754:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b758:	f001 fdd8 	bl	800d30c <vPortExitCritical>
				return pdPASS;
 800b75c:	2301      	movs	r3, #1
 800b75e:	e069      	b.n	800b834 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d103      	bne.n	800b76e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b766:	f001 fdd1 	bl	800d30c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b76a:	2300      	movs	r3, #0
 800b76c:	e062      	b.n	800b834 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b76e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b770:	2b00      	cmp	r3, #0
 800b772:	d106      	bne.n	800b782 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b774:	f107 0310 	add.w	r3, r7, #16
 800b778:	4618      	mov	r0, r3
 800b77a:	f000 fec5 	bl	800c508 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b77e:	2301      	movs	r3, #1
 800b780:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b782:	f001 fdc3 	bl	800d30c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b786:	f000 fc2d 	bl	800bfe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b78a:	f001 fd8d 	bl	800d2a8 <vPortEnterCritical>
 800b78e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b790:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b794:	b25b      	sxtb	r3, r3
 800b796:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b79a:	d103      	bne.n	800b7a4 <xQueueReceive+0x128>
 800b79c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b79e:	2200      	movs	r2, #0
 800b7a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b7a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b7aa:	b25b      	sxtb	r3, r3
 800b7ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b7b0:	d103      	bne.n	800b7ba <xQueueReceive+0x13e>
 800b7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b7ba:	f001 fda7 	bl	800d30c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b7be:	1d3a      	adds	r2, r7, #4
 800b7c0:	f107 0310 	add.w	r3, r7, #16
 800b7c4:	4611      	mov	r1, r2
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f000 feb4 	bl	800c534 <xTaskCheckForTimeOut>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d123      	bne.n	800b81a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b7d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b7d4:	f000 f916 	bl	800ba04 <prvIsQueueEmpty>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d017      	beq.n	800b80e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b7de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7e0:	3324      	adds	r3, #36	@ 0x24
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	4611      	mov	r1, r2
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f000 fdd8 	bl	800c39c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b7ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b7ee:	f000 f8b7 	bl	800b960 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b7f2:	f000 fc05 	bl	800c000 <xTaskResumeAll>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d189      	bne.n	800b710 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b7fc:	4b0f      	ldr	r3, [pc, #60]	@ (800b83c <xQueueReceive+0x1c0>)
 800b7fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b802:	601a      	str	r2, [r3, #0]
 800b804:	f3bf 8f4f 	dsb	sy
 800b808:	f3bf 8f6f 	isb	sy
 800b80c:	e780      	b.n	800b710 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b80e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b810:	f000 f8a6 	bl	800b960 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b814:	f000 fbf4 	bl	800c000 <xTaskResumeAll>
 800b818:	e77a      	b.n	800b710 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b81a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b81c:	f000 f8a0 	bl	800b960 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b820:	f000 fbee 	bl	800c000 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b824:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b826:	f000 f8ed 	bl	800ba04 <prvIsQueueEmpty>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	f43f af6f 	beq.w	800b710 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b832:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b834:	4618      	mov	r0, r3
 800b836:	3730      	adds	r7, #48	@ 0x30
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}
 800b83c:	e000ed04 	.word	0xe000ed04

0800b840 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b086      	sub	sp, #24
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b84c:	2300      	movs	r3, #0
 800b84e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b854:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d10d      	bne.n	800b87a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d14d      	bne.n	800b902 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	689b      	ldr	r3, [r3, #8]
 800b86a:	4618      	mov	r0, r3
 800b86c:	f000 ffcc 	bl	800c808 <xTaskPriorityDisinherit>
 800b870:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2200      	movs	r2, #0
 800b876:	609a      	str	r2, [r3, #8]
 800b878:	e043      	b.n	800b902 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d119      	bne.n	800b8b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	6858      	ldr	r0, [r3, #4]
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b888:	461a      	mov	r2, r3
 800b88a:	68b9      	ldr	r1, [r7, #8]
 800b88c:	f002 fa0d 	bl	800dcaa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	685a      	ldr	r2, [r3, #4]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b898:	441a      	add	r2, r3
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	685a      	ldr	r2, [r3, #4]
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d32b      	bcc.n	800b902 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	605a      	str	r2, [r3, #4]
 800b8b2:	e026      	b.n	800b902 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	68d8      	ldr	r0, [r3, #12]
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8bc:	461a      	mov	r2, r3
 800b8be:	68b9      	ldr	r1, [r7, #8]
 800b8c0:	f002 f9f3 	bl	800dcaa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	68da      	ldr	r2, [r3, #12]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8cc:	425b      	negs	r3, r3
 800b8ce:	441a      	add	r2, r3
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	68da      	ldr	r2, [r3, #12]
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d207      	bcs.n	800b8f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	689a      	ldr	r2, [r3, #8]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8e8:	425b      	negs	r3, r3
 800b8ea:	441a      	add	r2, r3
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2b02      	cmp	r3, #2
 800b8f4:	d105      	bne.n	800b902 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d002      	beq.n	800b902 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	3b01      	subs	r3, #1
 800b900:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	1c5a      	adds	r2, r3, #1
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b90a:	697b      	ldr	r3, [r7, #20]
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3718      	adds	r7, #24
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b922:	2b00      	cmp	r3, #0
 800b924:	d018      	beq.n	800b958 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	68da      	ldr	r2, [r3, #12]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b92e:	441a      	add	r2, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	68da      	ldr	r2, [r3, #12]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	689b      	ldr	r3, [r3, #8]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d303      	bcc.n	800b948 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681a      	ldr	r2, [r3, #0]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	68d9      	ldr	r1, [r3, #12]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b950:	461a      	mov	r2, r3
 800b952:	6838      	ldr	r0, [r7, #0]
 800b954:	f002 f9a9 	bl	800dcaa <memcpy>
	}
}
 800b958:	bf00      	nop
 800b95a:	3708      	adds	r7, #8
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b084      	sub	sp, #16
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b968:	f001 fc9e 	bl	800d2a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b972:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b974:	e011      	b.n	800b99a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d012      	beq.n	800b9a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	3324      	adds	r3, #36	@ 0x24
 800b982:	4618      	mov	r0, r3
 800b984:	f000 fd5c 	bl	800c440 <xTaskRemoveFromEventList>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d001      	beq.n	800b992 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b98e:	f000 fe35 	bl	800c5fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b992:	7bfb      	ldrb	r3, [r7, #15]
 800b994:	3b01      	subs	r3, #1
 800b996:	b2db      	uxtb	r3, r3
 800b998:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b99a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	dce9      	bgt.n	800b976 <prvUnlockQueue+0x16>
 800b9a2:	e000      	b.n	800b9a6 <prvUnlockQueue+0x46>
					break;
 800b9a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	22ff      	movs	r2, #255	@ 0xff
 800b9aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b9ae:	f001 fcad 	bl	800d30c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b9b2:	f001 fc79 	bl	800d2a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b9bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b9be:	e011      	b.n	800b9e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	691b      	ldr	r3, [r3, #16]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d012      	beq.n	800b9ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	3310      	adds	r3, #16
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f000 fd37 	bl	800c440 <xTaskRemoveFromEventList>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d001      	beq.n	800b9dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b9d8:	f000 fe10 	bl	800c5fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b9dc:	7bbb      	ldrb	r3, [r7, #14]
 800b9de:	3b01      	subs	r3, #1
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b9e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	dce9      	bgt.n	800b9c0 <prvUnlockQueue+0x60>
 800b9ec:	e000      	b.n	800b9f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b9ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	22ff      	movs	r2, #255	@ 0xff
 800b9f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b9f8:	f001 fc88 	bl	800d30c <vPortExitCritical>
}
 800b9fc:	bf00      	nop
 800b9fe:	3710      	adds	r7, #16
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba0c:	f001 fc4c 	bl	800d2a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d102      	bne.n	800ba1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	60fb      	str	r3, [r7, #12]
 800ba1c:	e001      	b.n	800ba22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba22:	f001 fc73 	bl	800d30c <vPortExitCritical>

	return xReturn;
 800ba26:	68fb      	ldr	r3, [r7, #12]
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3710      	adds	r7, #16
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba38:	f001 fc36 	bl	800d2a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d102      	bne.n	800ba4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	60fb      	str	r3, [r7, #12]
 800ba4c:	e001      	b.n	800ba52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba52:	f001 fc5b 	bl	800d30c <vPortExitCritical>

	return xReturn;
 800ba56:	68fb      	ldr	r3, [r7, #12]
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3710      	adds	r7, #16
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ba60:	b480      	push	{r7}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	60fb      	str	r3, [r7, #12]
 800ba6e:	e014      	b.n	800ba9a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ba70:	4a0f      	ldr	r2, [pc, #60]	@ (800bab0 <vQueueAddToRegistry+0x50>)
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d10b      	bne.n	800ba94 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ba7c:	490c      	ldr	r1, [pc, #48]	@ (800bab0 <vQueueAddToRegistry+0x50>)
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	683a      	ldr	r2, [r7, #0]
 800ba82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ba86:	4a0a      	ldr	r2, [pc, #40]	@ (800bab0 <vQueueAddToRegistry+0x50>)
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	00db      	lsls	r3, r3, #3
 800ba8c:	4413      	add	r3, r2
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ba92:	e006      	b.n	800baa2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	3301      	adds	r3, #1
 800ba98:	60fb      	str	r3, [r7, #12]
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2b07      	cmp	r3, #7
 800ba9e:	d9e7      	bls.n	800ba70 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800baa0:	bf00      	nop
 800baa2:	bf00      	nop
 800baa4:	3714      	adds	r7, #20
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr
 800baae:	bf00      	nop
 800bab0:	240009a8 	.word	0x240009a8

0800bab4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b086      	sub	sp, #24
 800bab8:	af00      	add	r7, sp, #0
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	60b9      	str	r1, [r7, #8]
 800babe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bac4:	f001 fbf0 	bl	800d2a8 <vPortEnterCritical>
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bace:	b25b      	sxtb	r3, r3
 800bad0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bad4:	d103      	bne.n	800bade <vQueueWaitForMessageRestricted+0x2a>
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	2200      	movs	r2, #0
 800bada:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bae4:	b25b      	sxtb	r3, r3
 800bae6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800baea:	d103      	bne.n	800baf4 <vQueueWaitForMessageRestricted+0x40>
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	2200      	movs	r2, #0
 800baf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800baf4:	f001 fc0a 	bl	800d30c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d106      	bne.n	800bb0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	3324      	adds	r3, #36	@ 0x24
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	68b9      	ldr	r1, [r7, #8]
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f000 fc6d 	bl	800c3e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bb0e:	6978      	ldr	r0, [r7, #20]
 800bb10:	f7ff ff26 	bl	800b960 <prvUnlockQueue>
	}
 800bb14:	bf00      	nop
 800bb16:	3718      	adds	r7, #24
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b08e      	sub	sp, #56	@ 0x38
 800bb20:	af04      	add	r7, sp, #16
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	60b9      	str	r1, [r7, #8]
 800bb26:	607a      	str	r2, [r7, #4]
 800bb28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bb2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10b      	bne.n	800bb48 <xTaskCreateStatic+0x2c>
	__asm volatile
 800bb30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb34:	f383 8811 	msr	BASEPRI, r3
 800bb38:	f3bf 8f6f 	isb	sy
 800bb3c:	f3bf 8f4f 	dsb	sy
 800bb40:	623b      	str	r3, [r7, #32]
}
 800bb42:	bf00      	nop
 800bb44:	bf00      	nop
 800bb46:	e7fd      	b.n	800bb44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bb48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d10b      	bne.n	800bb66 <xTaskCreateStatic+0x4a>
	__asm volatile
 800bb4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb52:	f383 8811 	msr	BASEPRI, r3
 800bb56:	f3bf 8f6f 	isb	sy
 800bb5a:	f3bf 8f4f 	dsb	sy
 800bb5e:	61fb      	str	r3, [r7, #28]
}
 800bb60:	bf00      	nop
 800bb62:	bf00      	nop
 800bb64:	e7fd      	b.n	800bb62 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bb66:	23a8      	movs	r3, #168	@ 0xa8
 800bb68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	2ba8      	cmp	r3, #168	@ 0xa8
 800bb6e:	d00b      	beq.n	800bb88 <xTaskCreateStatic+0x6c>
	__asm volatile
 800bb70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb74:	f383 8811 	msr	BASEPRI, r3
 800bb78:	f3bf 8f6f 	isb	sy
 800bb7c:	f3bf 8f4f 	dsb	sy
 800bb80:	61bb      	str	r3, [r7, #24]
}
 800bb82:	bf00      	nop
 800bb84:	bf00      	nop
 800bb86:	e7fd      	b.n	800bb84 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bb88:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bb8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d01e      	beq.n	800bbce <xTaskCreateStatic+0xb2>
 800bb90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d01b      	beq.n	800bbce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb98:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bb9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb9e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba2:	2202      	movs	r2, #2
 800bba4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bba8:	2300      	movs	r3, #0
 800bbaa:	9303      	str	r3, [sp, #12]
 800bbac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbae:	9302      	str	r3, [sp, #8]
 800bbb0:	f107 0314 	add.w	r3, r7, #20
 800bbb4:	9301      	str	r3, [sp, #4]
 800bbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbb8:	9300      	str	r3, [sp, #0]
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	687a      	ldr	r2, [r7, #4]
 800bbbe:	68b9      	ldr	r1, [r7, #8]
 800bbc0:	68f8      	ldr	r0, [r7, #12]
 800bbc2:	f000 f851 	bl	800bc68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bbc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bbc8:	f000 f8f6 	bl	800bdb8 <prvAddNewTaskToReadyList>
 800bbcc:	e001      	b.n	800bbd2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bbd2:	697b      	ldr	r3, [r7, #20]
	}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3728      	adds	r7, #40	@ 0x28
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b08c      	sub	sp, #48	@ 0x30
 800bbe0:	af04      	add	r7, sp, #16
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	603b      	str	r3, [r7, #0]
 800bbe8:	4613      	mov	r3, r2
 800bbea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bbec:	88fb      	ldrh	r3, [r7, #6]
 800bbee:	009b      	lsls	r3, r3, #2
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f001 fc7b 	bl	800d4ec <pvPortMalloc>
 800bbf6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00e      	beq.n	800bc1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bbfe:	20a8      	movs	r0, #168	@ 0xa8
 800bc00:	f001 fc74 	bl	800d4ec <pvPortMalloc>
 800bc04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bc06:	69fb      	ldr	r3, [r7, #28]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d003      	beq.n	800bc14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	697a      	ldr	r2, [r7, #20]
 800bc10:	631a      	str	r2, [r3, #48]	@ 0x30
 800bc12:	e005      	b.n	800bc20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bc14:	6978      	ldr	r0, [r7, #20]
 800bc16:	f001 fd37 	bl	800d688 <vPortFree>
 800bc1a:	e001      	b.n	800bc20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d017      	beq.n	800bc56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bc26:	69fb      	ldr	r3, [r7, #28]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bc2e:	88fa      	ldrh	r2, [r7, #6]
 800bc30:	2300      	movs	r3, #0
 800bc32:	9303      	str	r3, [sp, #12]
 800bc34:	69fb      	ldr	r3, [r7, #28]
 800bc36:	9302      	str	r3, [sp, #8]
 800bc38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc3a:	9301      	str	r3, [sp, #4]
 800bc3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	68b9      	ldr	r1, [r7, #8]
 800bc44:	68f8      	ldr	r0, [r7, #12]
 800bc46:	f000 f80f 	bl	800bc68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc4a:	69f8      	ldr	r0, [r7, #28]
 800bc4c:	f000 f8b4 	bl	800bdb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bc50:	2301      	movs	r3, #1
 800bc52:	61bb      	str	r3, [r7, #24]
 800bc54:	e002      	b.n	800bc5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bc56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bc5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bc5c:	69bb      	ldr	r3, [r7, #24]
	}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3720      	adds	r7, #32
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
	...

0800bc68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b088      	sub	sp, #32
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	60f8      	str	r0, [r7, #12]
 800bc70:	60b9      	str	r1, [r7, #8]
 800bc72:	607a      	str	r2, [r7, #4]
 800bc74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bc76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc78:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	461a      	mov	r2, r3
 800bc80:	21a5      	movs	r1, #165	@ 0xa5
 800bc82:	f001 ff38 	bl	800daf6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bc86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bc8a:	6879      	ldr	r1, [r7, #4]
 800bc8c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800bc90:	440b      	add	r3, r1
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	4413      	add	r3, r2
 800bc96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	f023 0307 	bic.w	r3, r3, #7
 800bc9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bca0:	69bb      	ldr	r3, [r7, #24]
 800bca2:	f003 0307 	and.w	r3, r3, #7
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00b      	beq.n	800bcc2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800bcaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcae:	f383 8811 	msr	BASEPRI, r3
 800bcb2:	f3bf 8f6f 	isb	sy
 800bcb6:	f3bf 8f4f 	dsb	sy
 800bcba:	617b      	str	r3, [r7, #20]
}
 800bcbc:	bf00      	nop
 800bcbe:	bf00      	nop
 800bcc0:	e7fd      	b.n	800bcbe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d01f      	beq.n	800bd08 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bcc8:	2300      	movs	r3, #0
 800bcca:	61fb      	str	r3, [r7, #28]
 800bccc:	e012      	b.n	800bcf4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bcce:	68ba      	ldr	r2, [r7, #8]
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	4413      	add	r3, r2
 800bcd4:	7819      	ldrb	r1, [r3, #0]
 800bcd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcd8:	69fb      	ldr	r3, [r7, #28]
 800bcda:	4413      	add	r3, r2
 800bcdc:	3334      	adds	r3, #52	@ 0x34
 800bcde:	460a      	mov	r2, r1
 800bce0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bce2:	68ba      	ldr	r2, [r7, #8]
 800bce4:	69fb      	ldr	r3, [r7, #28]
 800bce6:	4413      	add	r3, r2
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d006      	beq.n	800bcfc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	61fb      	str	r3, [r7, #28]
 800bcf4:	69fb      	ldr	r3, [r7, #28]
 800bcf6:	2b0f      	cmp	r3, #15
 800bcf8:	d9e9      	bls.n	800bcce <prvInitialiseNewTask+0x66>
 800bcfa:	e000      	b.n	800bcfe <prvInitialiseNewTask+0x96>
			{
				break;
 800bcfc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bcfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd00:	2200      	movs	r2, #0
 800bd02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bd06:	e003      	b.n	800bd10 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bd08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bd10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd12:	2b37      	cmp	r3, #55	@ 0x37
 800bd14:	d901      	bls.n	800bd1a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bd16:	2337      	movs	r3, #55	@ 0x37
 800bd18:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bd1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd1e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bd20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd24:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bd26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd28:	2200      	movs	r2, #0
 800bd2a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bd2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd2e:	3304      	adds	r3, #4
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7ff f965 	bl	800b000 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bd36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd38:	3318      	adds	r3, #24
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7ff f960 	bl	800b000 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bd40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd44:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd48:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bd4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd4e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bd50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd54:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bd56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bd5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd60:	2200      	movs	r2, #0
 800bd62:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bd66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd68:	3354      	adds	r3, #84	@ 0x54
 800bd6a:	224c      	movs	r2, #76	@ 0x4c
 800bd6c:	2100      	movs	r1, #0
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f001 fec1 	bl	800daf6 <memset>
 800bd74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd76:	4a0d      	ldr	r2, [pc, #52]	@ (800bdac <prvInitialiseNewTask+0x144>)
 800bd78:	659a      	str	r2, [r3, #88]	@ 0x58
 800bd7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd7c:	4a0c      	ldr	r2, [pc, #48]	@ (800bdb0 <prvInitialiseNewTask+0x148>)
 800bd7e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bd80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd82:	4a0c      	ldr	r2, [pc, #48]	@ (800bdb4 <prvInitialiseNewTask+0x14c>)
 800bd84:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bd86:	683a      	ldr	r2, [r7, #0]
 800bd88:	68f9      	ldr	r1, [r7, #12]
 800bd8a:	69b8      	ldr	r0, [r7, #24]
 800bd8c:	f001 f95a 	bl	800d044 <pxPortInitialiseStack>
 800bd90:	4602      	mov	r2, r0
 800bd92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd94:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bd96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d002      	beq.n	800bda2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bd9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bda0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bda2:	bf00      	nop
 800bda4:	3720      	adds	r7, #32
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}
 800bdaa:	bf00      	nop
 800bdac:	24004c3c 	.word	0x24004c3c
 800bdb0:	24004ca4 	.word	0x24004ca4
 800bdb4:	24004d0c 	.word	0x24004d0c

0800bdb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bdc0:	f001 fa72 	bl	800d2a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bdc4:	4b2d      	ldr	r3, [pc, #180]	@ (800be7c <prvAddNewTaskToReadyList+0xc4>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	4a2c      	ldr	r2, [pc, #176]	@ (800be7c <prvAddNewTaskToReadyList+0xc4>)
 800bdcc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bdce:	4b2c      	ldr	r3, [pc, #176]	@ (800be80 <prvAddNewTaskToReadyList+0xc8>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d109      	bne.n	800bdea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bdd6:	4a2a      	ldr	r2, [pc, #168]	@ (800be80 <prvAddNewTaskToReadyList+0xc8>)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bddc:	4b27      	ldr	r3, [pc, #156]	@ (800be7c <prvAddNewTaskToReadyList+0xc4>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d110      	bne.n	800be06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bde4:	f000 fc2e 	bl	800c644 <prvInitialiseTaskLists>
 800bde8:	e00d      	b.n	800be06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bdea:	4b26      	ldr	r3, [pc, #152]	@ (800be84 <prvAddNewTaskToReadyList+0xcc>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d109      	bne.n	800be06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bdf2:	4b23      	ldr	r3, [pc, #140]	@ (800be80 <prvAddNewTaskToReadyList+0xc8>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d802      	bhi.n	800be06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800be00:	4a1f      	ldr	r2, [pc, #124]	@ (800be80 <prvAddNewTaskToReadyList+0xc8>)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800be06:	4b20      	ldr	r3, [pc, #128]	@ (800be88 <prvAddNewTaskToReadyList+0xd0>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	3301      	adds	r3, #1
 800be0c:	4a1e      	ldr	r2, [pc, #120]	@ (800be88 <prvAddNewTaskToReadyList+0xd0>)
 800be0e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800be10:	4b1d      	ldr	r3, [pc, #116]	@ (800be88 <prvAddNewTaskToReadyList+0xd0>)
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be1c:	4b1b      	ldr	r3, [pc, #108]	@ (800be8c <prvAddNewTaskToReadyList+0xd4>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	429a      	cmp	r2, r3
 800be22:	d903      	bls.n	800be2c <prvAddNewTaskToReadyList+0x74>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be28:	4a18      	ldr	r2, [pc, #96]	@ (800be8c <prvAddNewTaskToReadyList+0xd4>)
 800be2a:	6013      	str	r3, [r2, #0]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be30:	4613      	mov	r3, r2
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	4413      	add	r3, r2
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	4a15      	ldr	r2, [pc, #84]	@ (800be90 <prvAddNewTaskToReadyList+0xd8>)
 800be3a:	441a      	add	r2, r3
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	3304      	adds	r3, #4
 800be40:	4619      	mov	r1, r3
 800be42:	4610      	mov	r0, r2
 800be44:	f7ff f8e9 	bl	800b01a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800be48:	f001 fa60 	bl	800d30c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800be4c:	4b0d      	ldr	r3, [pc, #52]	@ (800be84 <prvAddNewTaskToReadyList+0xcc>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d00e      	beq.n	800be72 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800be54:	4b0a      	ldr	r3, [pc, #40]	@ (800be80 <prvAddNewTaskToReadyList+0xc8>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be5e:	429a      	cmp	r2, r3
 800be60:	d207      	bcs.n	800be72 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800be62:	4b0c      	ldr	r3, [pc, #48]	@ (800be94 <prvAddNewTaskToReadyList+0xdc>)
 800be64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be68:	601a      	str	r2, [r3, #0]
 800be6a:	f3bf 8f4f 	dsb	sy
 800be6e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be72:	bf00      	nop
 800be74:	3708      	adds	r7, #8
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	24000ebc 	.word	0x24000ebc
 800be80:	240009e8 	.word	0x240009e8
 800be84:	24000ec8 	.word	0x24000ec8
 800be88:	24000ed8 	.word	0x24000ed8
 800be8c:	24000ec4 	.word	0x24000ec4
 800be90:	240009ec 	.word	0x240009ec
 800be94:	e000ed04 	.word	0xe000ed04

0800be98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bea0:	2300      	movs	r3, #0
 800bea2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d018      	beq.n	800bedc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800beaa:	4b14      	ldr	r3, [pc, #80]	@ (800befc <vTaskDelay+0x64>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d00b      	beq.n	800beca <vTaskDelay+0x32>
	__asm volatile
 800beb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb6:	f383 8811 	msr	BASEPRI, r3
 800beba:	f3bf 8f6f 	isb	sy
 800bebe:	f3bf 8f4f 	dsb	sy
 800bec2:	60bb      	str	r3, [r7, #8]
}
 800bec4:	bf00      	nop
 800bec6:	bf00      	nop
 800bec8:	e7fd      	b.n	800bec6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800beca:	f000 f88b 	bl	800bfe4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bece:	2100      	movs	r1, #0
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 fd09 	bl	800c8e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bed6:	f000 f893 	bl	800c000 <xTaskResumeAll>
 800beda:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d107      	bne.n	800bef2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bee2:	4b07      	ldr	r3, [pc, #28]	@ (800bf00 <vTaskDelay+0x68>)
 800bee4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bee8:	601a      	str	r2, [r3, #0]
 800beea:	f3bf 8f4f 	dsb	sy
 800beee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bef2:	bf00      	nop
 800bef4:	3710      	adds	r7, #16
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	24000ee4 	.word	0x24000ee4
 800bf00:	e000ed04 	.word	0xe000ed04

0800bf04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b08a      	sub	sp, #40	@ 0x28
 800bf08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bf12:	463a      	mov	r2, r7
 800bf14:	1d39      	adds	r1, r7, #4
 800bf16:	f107 0308 	add.w	r3, r7, #8
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7ff f81c 	bl	800af58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bf20:	6839      	ldr	r1, [r7, #0]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	68ba      	ldr	r2, [r7, #8]
 800bf26:	9202      	str	r2, [sp, #8]
 800bf28:	9301      	str	r3, [sp, #4]
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	9300      	str	r3, [sp, #0]
 800bf2e:	2300      	movs	r3, #0
 800bf30:	460a      	mov	r2, r1
 800bf32:	4924      	ldr	r1, [pc, #144]	@ (800bfc4 <vTaskStartScheduler+0xc0>)
 800bf34:	4824      	ldr	r0, [pc, #144]	@ (800bfc8 <vTaskStartScheduler+0xc4>)
 800bf36:	f7ff fdf1 	bl	800bb1c <xTaskCreateStatic>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	4a23      	ldr	r2, [pc, #140]	@ (800bfcc <vTaskStartScheduler+0xc8>)
 800bf3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bf40:	4b22      	ldr	r3, [pc, #136]	@ (800bfcc <vTaskStartScheduler+0xc8>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d002      	beq.n	800bf4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	617b      	str	r3, [r7, #20]
 800bf4c:	e001      	b.n	800bf52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d102      	bne.n	800bf5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bf58:	f000 fd1a 	bl	800c990 <xTimerCreateTimerTask>
 800bf5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d11b      	bne.n	800bf9c <vTaskStartScheduler+0x98>
	__asm volatile
 800bf64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf68:	f383 8811 	msr	BASEPRI, r3
 800bf6c:	f3bf 8f6f 	isb	sy
 800bf70:	f3bf 8f4f 	dsb	sy
 800bf74:	613b      	str	r3, [r7, #16]
}
 800bf76:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bf78:	4b15      	ldr	r3, [pc, #84]	@ (800bfd0 <vTaskStartScheduler+0xcc>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	3354      	adds	r3, #84	@ 0x54
 800bf7e:	4a15      	ldr	r2, [pc, #84]	@ (800bfd4 <vTaskStartScheduler+0xd0>)
 800bf80:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bf82:	4b15      	ldr	r3, [pc, #84]	@ (800bfd8 <vTaskStartScheduler+0xd4>)
 800bf84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bf88:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bf8a:	4b14      	ldr	r3, [pc, #80]	@ (800bfdc <vTaskStartScheduler+0xd8>)
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bf90:	4b13      	ldr	r3, [pc, #76]	@ (800bfe0 <vTaskStartScheduler+0xdc>)
 800bf92:	2200      	movs	r2, #0
 800bf94:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bf96:	f001 f8e3 	bl	800d160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bf9a:	e00f      	b.n	800bfbc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bfa2:	d10b      	bne.n	800bfbc <vTaskStartScheduler+0xb8>
	__asm volatile
 800bfa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfa8:	f383 8811 	msr	BASEPRI, r3
 800bfac:	f3bf 8f6f 	isb	sy
 800bfb0:	f3bf 8f4f 	dsb	sy
 800bfb4:	60fb      	str	r3, [r7, #12]
}
 800bfb6:	bf00      	nop
 800bfb8:	bf00      	nop
 800bfba:	e7fd      	b.n	800bfb8 <vTaskStartScheduler+0xb4>
}
 800bfbc:	bf00      	nop
 800bfbe:	3718      	adds	r7, #24
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	0800f7e0 	.word	0x0800f7e0
 800bfc8:	0800c615 	.word	0x0800c615
 800bfcc:	24000ee0 	.word	0x24000ee0
 800bfd0:	240009e8 	.word	0x240009e8
 800bfd4:	24000034 	.word	0x24000034
 800bfd8:	24000edc 	.word	0x24000edc
 800bfdc:	24000ec8 	.word	0x24000ec8
 800bfe0:	24000ec0 	.word	0x24000ec0

0800bfe4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bfe8:	4b04      	ldr	r3, [pc, #16]	@ (800bffc <vTaskSuspendAll+0x18>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	3301      	adds	r3, #1
 800bfee:	4a03      	ldr	r2, [pc, #12]	@ (800bffc <vTaskSuspendAll+0x18>)
 800bff0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bff2:	bf00      	nop
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr
 800bffc:	24000ee4 	.word	0x24000ee4

0800c000 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c006:	2300      	movs	r3, #0
 800c008:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c00a:	2300      	movs	r3, #0
 800c00c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c00e:	4b42      	ldr	r3, [pc, #264]	@ (800c118 <xTaskResumeAll+0x118>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d10b      	bne.n	800c02e <xTaskResumeAll+0x2e>
	__asm volatile
 800c016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c01a:	f383 8811 	msr	BASEPRI, r3
 800c01e:	f3bf 8f6f 	isb	sy
 800c022:	f3bf 8f4f 	dsb	sy
 800c026:	603b      	str	r3, [r7, #0]
}
 800c028:	bf00      	nop
 800c02a:	bf00      	nop
 800c02c:	e7fd      	b.n	800c02a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c02e:	f001 f93b 	bl	800d2a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c032:	4b39      	ldr	r3, [pc, #228]	@ (800c118 <xTaskResumeAll+0x118>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	3b01      	subs	r3, #1
 800c038:	4a37      	ldr	r2, [pc, #220]	@ (800c118 <xTaskResumeAll+0x118>)
 800c03a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c03c:	4b36      	ldr	r3, [pc, #216]	@ (800c118 <xTaskResumeAll+0x118>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d162      	bne.n	800c10a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c044:	4b35      	ldr	r3, [pc, #212]	@ (800c11c <xTaskResumeAll+0x11c>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d05e      	beq.n	800c10a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c04c:	e02f      	b.n	800c0ae <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c04e:	4b34      	ldr	r3, [pc, #208]	@ (800c120 <xTaskResumeAll+0x120>)
 800c050:	68db      	ldr	r3, [r3, #12]
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	3318      	adds	r3, #24
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7ff f83a 	bl	800b0d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	3304      	adds	r3, #4
 800c064:	4618      	mov	r0, r3
 800c066:	f7ff f835 	bl	800b0d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c06e:	4b2d      	ldr	r3, [pc, #180]	@ (800c124 <xTaskResumeAll+0x124>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	429a      	cmp	r2, r3
 800c074:	d903      	bls.n	800c07e <xTaskResumeAll+0x7e>
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c07a:	4a2a      	ldr	r2, [pc, #168]	@ (800c124 <xTaskResumeAll+0x124>)
 800c07c:	6013      	str	r3, [r2, #0]
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c082:	4613      	mov	r3, r2
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	4413      	add	r3, r2
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	4a27      	ldr	r2, [pc, #156]	@ (800c128 <xTaskResumeAll+0x128>)
 800c08c:	441a      	add	r2, r3
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	3304      	adds	r3, #4
 800c092:	4619      	mov	r1, r3
 800c094:	4610      	mov	r0, r2
 800c096:	f7fe ffc0 	bl	800b01a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c09e:	4b23      	ldr	r3, [pc, #140]	@ (800c12c <xTaskResumeAll+0x12c>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d302      	bcc.n	800c0ae <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c0a8:	4b21      	ldr	r3, [pc, #132]	@ (800c130 <xTaskResumeAll+0x130>)
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c0ae:	4b1c      	ldr	r3, [pc, #112]	@ (800c120 <xTaskResumeAll+0x120>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d1cb      	bne.n	800c04e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d001      	beq.n	800c0c0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c0bc:	f000 fb66 	bl	800c78c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c0c0:	4b1c      	ldr	r3, [pc, #112]	@ (800c134 <xTaskResumeAll+0x134>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d010      	beq.n	800c0ee <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c0cc:	f000 f846 	bl	800c15c <xTaskIncrementTick>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d002      	beq.n	800c0dc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c0d6:	4b16      	ldr	r3, [pc, #88]	@ (800c130 <xTaskResumeAll+0x130>)
 800c0d8:	2201      	movs	r2, #1
 800c0da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	3b01      	subs	r3, #1
 800c0e0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d1f1      	bne.n	800c0cc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c0e8:	4b12      	ldr	r3, [pc, #72]	@ (800c134 <xTaskResumeAll+0x134>)
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c0ee:	4b10      	ldr	r3, [pc, #64]	@ (800c130 <xTaskResumeAll+0x130>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d009      	beq.n	800c10a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c0fa:	4b0f      	ldr	r3, [pc, #60]	@ (800c138 <xTaskResumeAll+0x138>)
 800c0fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c100:	601a      	str	r2, [r3, #0]
 800c102:	f3bf 8f4f 	dsb	sy
 800c106:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c10a:	f001 f8ff 	bl	800d30c <vPortExitCritical>

	return xAlreadyYielded;
 800c10e:	68bb      	ldr	r3, [r7, #8]
}
 800c110:	4618      	mov	r0, r3
 800c112:	3710      	adds	r7, #16
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}
 800c118:	24000ee4 	.word	0x24000ee4
 800c11c:	24000ebc 	.word	0x24000ebc
 800c120:	24000e7c 	.word	0x24000e7c
 800c124:	24000ec4 	.word	0x24000ec4
 800c128:	240009ec 	.word	0x240009ec
 800c12c:	240009e8 	.word	0x240009e8
 800c130:	24000ed0 	.word	0x24000ed0
 800c134:	24000ecc 	.word	0x24000ecc
 800c138:	e000ed04 	.word	0xe000ed04

0800c13c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c142:	4b05      	ldr	r3, [pc, #20]	@ (800c158 <xTaskGetTickCount+0x1c>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c148:	687b      	ldr	r3, [r7, #4]
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	370c      	adds	r7, #12
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr
 800c156:	bf00      	nop
 800c158:	24000ec0 	.word	0x24000ec0

0800c15c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b086      	sub	sp, #24
 800c160:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c162:	2300      	movs	r3, #0
 800c164:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c166:	4b4f      	ldr	r3, [pc, #316]	@ (800c2a4 <xTaskIncrementTick+0x148>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	f040 8090 	bne.w	800c290 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c170:	4b4d      	ldr	r3, [pc, #308]	@ (800c2a8 <xTaskIncrementTick+0x14c>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	3301      	adds	r3, #1
 800c176:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c178:	4a4b      	ldr	r2, [pc, #300]	@ (800c2a8 <xTaskIncrementTick+0x14c>)
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d121      	bne.n	800c1c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c184:	4b49      	ldr	r3, [pc, #292]	@ (800c2ac <xTaskIncrementTick+0x150>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d00b      	beq.n	800c1a6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800c18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c192:	f383 8811 	msr	BASEPRI, r3
 800c196:	f3bf 8f6f 	isb	sy
 800c19a:	f3bf 8f4f 	dsb	sy
 800c19e:	603b      	str	r3, [r7, #0]
}
 800c1a0:	bf00      	nop
 800c1a2:	bf00      	nop
 800c1a4:	e7fd      	b.n	800c1a2 <xTaskIncrementTick+0x46>
 800c1a6:	4b41      	ldr	r3, [pc, #260]	@ (800c2ac <xTaskIncrementTick+0x150>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	60fb      	str	r3, [r7, #12]
 800c1ac:	4b40      	ldr	r3, [pc, #256]	@ (800c2b0 <xTaskIncrementTick+0x154>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a3e      	ldr	r2, [pc, #248]	@ (800c2ac <xTaskIncrementTick+0x150>)
 800c1b2:	6013      	str	r3, [r2, #0]
 800c1b4:	4a3e      	ldr	r2, [pc, #248]	@ (800c2b0 <xTaskIncrementTick+0x154>)
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6013      	str	r3, [r2, #0]
 800c1ba:	4b3e      	ldr	r3, [pc, #248]	@ (800c2b4 <xTaskIncrementTick+0x158>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	3301      	adds	r3, #1
 800c1c0:	4a3c      	ldr	r2, [pc, #240]	@ (800c2b4 <xTaskIncrementTick+0x158>)
 800c1c2:	6013      	str	r3, [r2, #0]
 800c1c4:	f000 fae2 	bl	800c78c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c1c8:	4b3b      	ldr	r3, [pc, #236]	@ (800c2b8 <xTaskIncrementTick+0x15c>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	693a      	ldr	r2, [r7, #16]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d349      	bcc.n	800c266 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1d2:	4b36      	ldr	r3, [pc, #216]	@ (800c2ac <xTaskIncrementTick+0x150>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d104      	bne.n	800c1e6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1dc:	4b36      	ldr	r3, [pc, #216]	@ (800c2b8 <xTaskIncrementTick+0x15c>)
 800c1de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c1e2:	601a      	str	r2, [r3, #0]
					break;
 800c1e4:	e03f      	b.n	800c266 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1e6:	4b31      	ldr	r3, [pc, #196]	@ (800c2ac <xTaskIncrementTick+0x150>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	68db      	ldr	r3, [r3, #12]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	685b      	ldr	r3, [r3, #4]
 800c1f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c1f6:	693a      	ldr	r2, [r7, #16]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d203      	bcs.n	800c206 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c1fe:	4a2e      	ldr	r2, [pc, #184]	@ (800c2b8 <xTaskIncrementTick+0x15c>)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c204:	e02f      	b.n	800c266 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	3304      	adds	r3, #4
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7fe ff62 	bl	800b0d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c214:	2b00      	cmp	r3, #0
 800c216:	d004      	beq.n	800c222 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	3318      	adds	r3, #24
 800c21c:	4618      	mov	r0, r3
 800c21e:	f7fe ff59 	bl	800b0d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c226:	4b25      	ldr	r3, [pc, #148]	@ (800c2bc <xTaskIncrementTick+0x160>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d903      	bls.n	800c236 <xTaskIncrementTick+0xda>
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c232:	4a22      	ldr	r2, [pc, #136]	@ (800c2bc <xTaskIncrementTick+0x160>)
 800c234:	6013      	str	r3, [r2, #0]
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c23a:	4613      	mov	r3, r2
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	4413      	add	r3, r2
 800c240:	009b      	lsls	r3, r3, #2
 800c242:	4a1f      	ldr	r2, [pc, #124]	@ (800c2c0 <xTaskIncrementTick+0x164>)
 800c244:	441a      	add	r2, r3
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	3304      	adds	r3, #4
 800c24a:	4619      	mov	r1, r3
 800c24c:	4610      	mov	r0, r2
 800c24e:	f7fe fee4 	bl	800b01a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c256:	4b1b      	ldr	r3, [pc, #108]	@ (800c2c4 <xTaskIncrementTick+0x168>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d3b8      	bcc.n	800c1d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c260:	2301      	movs	r3, #1
 800c262:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c264:	e7b5      	b.n	800c1d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c266:	4b17      	ldr	r3, [pc, #92]	@ (800c2c4 <xTaskIncrementTick+0x168>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c26c:	4914      	ldr	r1, [pc, #80]	@ (800c2c0 <xTaskIncrementTick+0x164>)
 800c26e:	4613      	mov	r3, r2
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	4413      	add	r3, r2
 800c274:	009b      	lsls	r3, r3, #2
 800c276:	440b      	add	r3, r1
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2b01      	cmp	r3, #1
 800c27c:	d901      	bls.n	800c282 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c27e:	2301      	movs	r3, #1
 800c280:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c282:	4b11      	ldr	r3, [pc, #68]	@ (800c2c8 <xTaskIncrementTick+0x16c>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d007      	beq.n	800c29a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c28a:	2301      	movs	r3, #1
 800c28c:	617b      	str	r3, [r7, #20]
 800c28e:	e004      	b.n	800c29a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c290:	4b0e      	ldr	r3, [pc, #56]	@ (800c2cc <xTaskIncrementTick+0x170>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	3301      	adds	r3, #1
 800c296:	4a0d      	ldr	r2, [pc, #52]	@ (800c2cc <xTaskIncrementTick+0x170>)
 800c298:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c29a:	697b      	ldr	r3, [r7, #20]
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3718      	adds	r7, #24
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}
 800c2a4:	24000ee4 	.word	0x24000ee4
 800c2a8:	24000ec0 	.word	0x24000ec0
 800c2ac:	24000e74 	.word	0x24000e74
 800c2b0:	24000e78 	.word	0x24000e78
 800c2b4:	24000ed4 	.word	0x24000ed4
 800c2b8:	24000edc 	.word	0x24000edc
 800c2bc:	24000ec4 	.word	0x24000ec4
 800c2c0:	240009ec 	.word	0x240009ec
 800c2c4:	240009e8 	.word	0x240009e8
 800c2c8:	24000ed0 	.word	0x24000ed0
 800c2cc:	24000ecc 	.word	0x24000ecc

0800c2d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b085      	sub	sp, #20
 800c2d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c2d6:	4b2b      	ldr	r3, [pc, #172]	@ (800c384 <vTaskSwitchContext+0xb4>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d003      	beq.n	800c2e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c2de:	4b2a      	ldr	r3, [pc, #168]	@ (800c388 <vTaskSwitchContext+0xb8>)
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c2e4:	e047      	b.n	800c376 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c2e6:	4b28      	ldr	r3, [pc, #160]	@ (800c388 <vTaskSwitchContext+0xb8>)
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2ec:	4b27      	ldr	r3, [pc, #156]	@ (800c38c <vTaskSwitchContext+0xbc>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	60fb      	str	r3, [r7, #12]
 800c2f2:	e011      	b.n	800c318 <vTaskSwitchContext+0x48>
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d10b      	bne.n	800c312 <vTaskSwitchContext+0x42>
	__asm volatile
 800c2fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2fe:	f383 8811 	msr	BASEPRI, r3
 800c302:	f3bf 8f6f 	isb	sy
 800c306:	f3bf 8f4f 	dsb	sy
 800c30a:	607b      	str	r3, [r7, #4]
}
 800c30c:	bf00      	nop
 800c30e:	bf00      	nop
 800c310:	e7fd      	b.n	800c30e <vTaskSwitchContext+0x3e>
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	3b01      	subs	r3, #1
 800c316:	60fb      	str	r3, [r7, #12]
 800c318:	491d      	ldr	r1, [pc, #116]	@ (800c390 <vTaskSwitchContext+0xc0>)
 800c31a:	68fa      	ldr	r2, [r7, #12]
 800c31c:	4613      	mov	r3, r2
 800c31e:	009b      	lsls	r3, r3, #2
 800c320:	4413      	add	r3, r2
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	440b      	add	r3, r1
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d0e3      	beq.n	800c2f4 <vTaskSwitchContext+0x24>
 800c32c:	68fa      	ldr	r2, [r7, #12]
 800c32e:	4613      	mov	r3, r2
 800c330:	009b      	lsls	r3, r3, #2
 800c332:	4413      	add	r3, r2
 800c334:	009b      	lsls	r3, r3, #2
 800c336:	4a16      	ldr	r2, [pc, #88]	@ (800c390 <vTaskSwitchContext+0xc0>)
 800c338:	4413      	add	r3, r2
 800c33a:	60bb      	str	r3, [r7, #8]
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	685a      	ldr	r2, [r3, #4]
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	605a      	str	r2, [r3, #4]
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	685a      	ldr	r2, [r3, #4]
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	3308      	adds	r3, #8
 800c34e:	429a      	cmp	r2, r3
 800c350:	d104      	bne.n	800c35c <vTaskSwitchContext+0x8c>
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	685a      	ldr	r2, [r3, #4]
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	605a      	str	r2, [r3, #4]
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	68db      	ldr	r3, [r3, #12]
 800c362:	4a0c      	ldr	r2, [pc, #48]	@ (800c394 <vTaskSwitchContext+0xc4>)
 800c364:	6013      	str	r3, [r2, #0]
 800c366:	4a09      	ldr	r2, [pc, #36]	@ (800c38c <vTaskSwitchContext+0xbc>)
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c36c:	4b09      	ldr	r3, [pc, #36]	@ (800c394 <vTaskSwitchContext+0xc4>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	3354      	adds	r3, #84	@ 0x54
 800c372:	4a09      	ldr	r2, [pc, #36]	@ (800c398 <vTaskSwitchContext+0xc8>)
 800c374:	6013      	str	r3, [r2, #0]
}
 800c376:	bf00      	nop
 800c378:	3714      	adds	r7, #20
 800c37a:	46bd      	mov	sp, r7
 800c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c380:	4770      	bx	lr
 800c382:	bf00      	nop
 800c384:	24000ee4 	.word	0x24000ee4
 800c388:	24000ed0 	.word	0x24000ed0
 800c38c:	24000ec4 	.word	0x24000ec4
 800c390:	240009ec 	.word	0x240009ec
 800c394:	240009e8 	.word	0x240009e8
 800c398:	24000034 	.word	0x24000034

0800c39c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d10b      	bne.n	800c3c4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c3ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3b0:	f383 8811 	msr	BASEPRI, r3
 800c3b4:	f3bf 8f6f 	isb	sy
 800c3b8:	f3bf 8f4f 	dsb	sy
 800c3bc:	60fb      	str	r3, [r7, #12]
}
 800c3be:	bf00      	nop
 800c3c0:	bf00      	nop
 800c3c2:	e7fd      	b.n	800c3c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c3c4:	4b07      	ldr	r3, [pc, #28]	@ (800c3e4 <vTaskPlaceOnEventList+0x48>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	3318      	adds	r3, #24
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f7fe fe48 	bl	800b062 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c3d2:	2101      	movs	r1, #1
 800c3d4:	6838      	ldr	r0, [r7, #0]
 800c3d6:	f000 fa87 	bl	800c8e8 <prvAddCurrentTaskToDelayedList>
}
 800c3da:	bf00      	nop
 800c3dc:	3710      	adds	r7, #16
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	240009e8 	.word	0x240009e8

0800c3e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b086      	sub	sp, #24
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d10b      	bne.n	800c412 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c3fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3fe:	f383 8811 	msr	BASEPRI, r3
 800c402:	f3bf 8f6f 	isb	sy
 800c406:	f3bf 8f4f 	dsb	sy
 800c40a:	617b      	str	r3, [r7, #20]
}
 800c40c:	bf00      	nop
 800c40e:	bf00      	nop
 800c410:	e7fd      	b.n	800c40e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c412:	4b0a      	ldr	r3, [pc, #40]	@ (800c43c <vTaskPlaceOnEventListRestricted+0x54>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	3318      	adds	r3, #24
 800c418:	4619      	mov	r1, r3
 800c41a:	68f8      	ldr	r0, [r7, #12]
 800c41c:	f7fe fdfd 	bl	800b01a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d002      	beq.n	800c42c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c426:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c42a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c42c:	6879      	ldr	r1, [r7, #4]
 800c42e:	68b8      	ldr	r0, [r7, #8]
 800c430:	f000 fa5a 	bl	800c8e8 <prvAddCurrentTaskToDelayedList>
	}
 800c434:	bf00      	nop
 800c436:	3718      	adds	r7, #24
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	240009e8 	.word	0x240009e8

0800c440 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b086      	sub	sp, #24
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	68db      	ldr	r3, [r3, #12]
 800c44c:	68db      	ldr	r3, [r3, #12]
 800c44e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d10b      	bne.n	800c46e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c45a:	f383 8811 	msr	BASEPRI, r3
 800c45e:	f3bf 8f6f 	isb	sy
 800c462:	f3bf 8f4f 	dsb	sy
 800c466:	60fb      	str	r3, [r7, #12]
}
 800c468:	bf00      	nop
 800c46a:	bf00      	nop
 800c46c:	e7fd      	b.n	800c46a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	3318      	adds	r3, #24
 800c472:	4618      	mov	r0, r3
 800c474:	f7fe fe2e 	bl	800b0d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c478:	4b1d      	ldr	r3, [pc, #116]	@ (800c4f0 <xTaskRemoveFromEventList+0xb0>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d11d      	bne.n	800c4bc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	3304      	adds	r3, #4
 800c484:	4618      	mov	r0, r3
 800c486:	f7fe fe25 	bl	800b0d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c48e:	4b19      	ldr	r3, [pc, #100]	@ (800c4f4 <xTaskRemoveFromEventList+0xb4>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	429a      	cmp	r2, r3
 800c494:	d903      	bls.n	800c49e <xTaskRemoveFromEventList+0x5e>
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c49a:	4a16      	ldr	r2, [pc, #88]	@ (800c4f4 <xTaskRemoveFromEventList+0xb4>)
 800c49c:	6013      	str	r3, [r2, #0]
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4a2:	4613      	mov	r3, r2
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	4413      	add	r3, r2
 800c4a8:	009b      	lsls	r3, r3, #2
 800c4aa:	4a13      	ldr	r2, [pc, #76]	@ (800c4f8 <xTaskRemoveFromEventList+0xb8>)
 800c4ac:	441a      	add	r2, r3
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	3304      	adds	r3, #4
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	4610      	mov	r0, r2
 800c4b6:	f7fe fdb0 	bl	800b01a <vListInsertEnd>
 800c4ba:	e005      	b.n	800c4c8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	3318      	adds	r3, #24
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	480e      	ldr	r0, [pc, #56]	@ (800c4fc <xTaskRemoveFromEventList+0xbc>)
 800c4c4:	f7fe fda9 	bl	800b01a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4cc:	4b0c      	ldr	r3, [pc, #48]	@ (800c500 <xTaskRemoveFromEventList+0xc0>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d905      	bls.n	800c4e2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c4da:	4b0a      	ldr	r3, [pc, #40]	@ (800c504 <xTaskRemoveFromEventList+0xc4>)
 800c4dc:	2201      	movs	r2, #1
 800c4de:	601a      	str	r2, [r3, #0]
 800c4e0:	e001      	b.n	800c4e6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c4e6:	697b      	ldr	r3, [r7, #20]
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3718      	adds	r7, #24
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}
 800c4f0:	24000ee4 	.word	0x24000ee4
 800c4f4:	24000ec4 	.word	0x24000ec4
 800c4f8:	240009ec 	.word	0x240009ec
 800c4fc:	24000e7c 	.word	0x24000e7c
 800c500:	240009e8 	.word	0x240009e8
 800c504:	24000ed0 	.word	0x24000ed0

0800c508 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c508:	b480      	push	{r7}
 800c50a:	b083      	sub	sp, #12
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c510:	4b06      	ldr	r3, [pc, #24]	@ (800c52c <vTaskInternalSetTimeOutState+0x24>)
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c518:	4b05      	ldr	r3, [pc, #20]	@ (800c530 <vTaskInternalSetTimeOutState+0x28>)
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	605a      	str	r2, [r3, #4]
}
 800c520:	bf00      	nop
 800c522:	370c      	adds	r7, #12
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr
 800c52c:	24000ed4 	.word	0x24000ed4
 800c530:	24000ec0 	.word	0x24000ec0

0800c534 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b088      	sub	sp, #32
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d10b      	bne.n	800c55c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c548:	f383 8811 	msr	BASEPRI, r3
 800c54c:	f3bf 8f6f 	isb	sy
 800c550:	f3bf 8f4f 	dsb	sy
 800c554:	613b      	str	r3, [r7, #16]
}
 800c556:	bf00      	nop
 800c558:	bf00      	nop
 800c55a:	e7fd      	b.n	800c558 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d10b      	bne.n	800c57a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c566:	f383 8811 	msr	BASEPRI, r3
 800c56a:	f3bf 8f6f 	isb	sy
 800c56e:	f3bf 8f4f 	dsb	sy
 800c572:	60fb      	str	r3, [r7, #12]
}
 800c574:	bf00      	nop
 800c576:	bf00      	nop
 800c578:	e7fd      	b.n	800c576 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c57a:	f000 fe95 	bl	800d2a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c57e:	4b1d      	ldr	r3, [pc, #116]	@ (800c5f4 <xTaskCheckForTimeOut+0xc0>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	69ba      	ldr	r2, [r7, #24]
 800c58a:	1ad3      	subs	r3, r2, r3
 800c58c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c596:	d102      	bne.n	800c59e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c598:	2300      	movs	r3, #0
 800c59a:	61fb      	str	r3, [r7, #28]
 800c59c:	e023      	b.n	800c5e6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	4b15      	ldr	r3, [pc, #84]	@ (800c5f8 <xTaskCheckForTimeOut+0xc4>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d007      	beq.n	800c5ba <xTaskCheckForTimeOut+0x86>
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	69ba      	ldr	r2, [r7, #24]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d302      	bcc.n	800c5ba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	61fb      	str	r3, [r7, #28]
 800c5b8:	e015      	b.n	800c5e6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	697a      	ldr	r2, [r7, #20]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d20b      	bcs.n	800c5dc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	681a      	ldr	r2, [r3, #0]
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	1ad2      	subs	r2, r2, r3
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f7ff ff99 	bl	800c508 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	61fb      	str	r3, [r7, #28]
 800c5da:	e004      	b.n	800c5e6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c5e6:	f000 fe91 	bl	800d30c <vPortExitCritical>

	return xReturn;
 800c5ea:	69fb      	ldr	r3, [r7, #28]
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3720      	adds	r7, #32
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	24000ec0 	.word	0x24000ec0
 800c5f8:	24000ed4 	.word	0x24000ed4

0800c5fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c600:	4b03      	ldr	r3, [pc, #12]	@ (800c610 <vTaskMissedYield+0x14>)
 800c602:	2201      	movs	r2, #1
 800c604:	601a      	str	r2, [r3, #0]
}
 800c606:	bf00      	nop
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr
 800c610:	24000ed0 	.word	0x24000ed0

0800c614 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c61c:	f000 f852 	bl	800c6c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c620:	4b06      	ldr	r3, [pc, #24]	@ (800c63c <prvIdleTask+0x28>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	2b01      	cmp	r3, #1
 800c626:	d9f9      	bls.n	800c61c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c628:	4b05      	ldr	r3, [pc, #20]	@ (800c640 <prvIdleTask+0x2c>)
 800c62a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c62e:	601a      	str	r2, [r3, #0]
 800c630:	f3bf 8f4f 	dsb	sy
 800c634:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c638:	e7f0      	b.n	800c61c <prvIdleTask+0x8>
 800c63a:	bf00      	nop
 800c63c:	240009ec 	.word	0x240009ec
 800c640:	e000ed04 	.word	0xe000ed04

0800c644 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c64a:	2300      	movs	r3, #0
 800c64c:	607b      	str	r3, [r7, #4]
 800c64e:	e00c      	b.n	800c66a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	4613      	mov	r3, r2
 800c654:	009b      	lsls	r3, r3, #2
 800c656:	4413      	add	r3, r2
 800c658:	009b      	lsls	r3, r3, #2
 800c65a:	4a12      	ldr	r2, [pc, #72]	@ (800c6a4 <prvInitialiseTaskLists+0x60>)
 800c65c:	4413      	add	r3, r2
 800c65e:	4618      	mov	r0, r3
 800c660:	f7fe fcae 	bl	800afc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	3301      	adds	r3, #1
 800c668:	607b      	str	r3, [r7, #4]
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2b37      	cmp	r3, #55	@ 0x37
 800c66e:	d9ef      	bls.n	800c650 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c670:	480d      	ldr	r0, [pc, #52]	@ (800c6a8 <prvInitialiseTaskLists+0x64>)
 800c672:	f7fe fca5 	bl	800afc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c676:	480d      	ldr	r0, [pc, #52]	@ (800c6ac <prvInitialiseTaskLists+0x68>)
 800c678:	f7fe fca2 	bl	800afc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c67c:	480c      	ldr	r0, [pc, #48]	@ (800c6b0 <prvInitialiseTaskLists+0x6c>)
 800c67e:	f7fe fc9f 	bl	800afc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c682:	480c      	ldr	r0, [pc, #48]	@ (800c6b4 <prvInitialiseTaskLists+0x70>)
 800c684:	f7fe fc9c 	bl	800afc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c688:	480b      	ldr	r0, [pc, #44]	@ (800c6b8 <prvInitialiseTaskLists+0x74>)
 800c68a:	f7fe fc99 	bl	800afc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c68e:	4b0b      	ldr	r3, [pc, #44]	@ (800c6bc <prvInitialiseTaskLists+0x78>)
 800c690:	4a05      	ldr	r2, [pc, #20]	@ (800c6a8 <prvInitialiseTaskLists+0x64>)
 800c692:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c694:	4b0a      	ldr	r3, [pc, #40]	@ (800c6c0 <prvInitialiseTaskLists+0x7c>)
 800c696:	4a05      	ldr	r2, [pc, #20]	@ (800c6ac <prvInitialiseTaskLists+0x68>)
 800c698:	601a      	str	r2, [r3, #0]
}
 800c69a:	bf00      	nop
 800c69c:	3708      	adds	r7, #8
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	240009ec 	.word	0x240009ec
 800c6a8:	24000e4c 	.word	0x24000e4c
 800c6ac:	24000e60 	.word	0x24000e60
 800c6b0:	24000e7c 	.word	0x24000e7c
 800c6b4:	24000e90 	.word	0x24000e90
 800c6b8:	24000ea8 	.word	0x24000ea8
 800c6bc:	24000e74 	.word	0x24000e74
 800c6c0:	24000e78 	.word	0x24000e78

0800c6c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b082      	sub	sp, #8
 800c6c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c6ca:	e019      	b.n	800c700 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c6cc:	f000 fdec 	bl	800d2a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6d0:	4b10      	ldr	r3, [pc, #64]	@ (800c714 <prvCheckTasksWaitingTermination+0x50>)
 800c6d2:	68db      	ldr	r3, [r3, #12]
 800c6d4:	68db      	ldr	r3, [r3, #12]
 800c6d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	3304      	adds	r3, #4
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7fe fcf9 	bl	800b0d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c6e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c718 <prvCheckTasksWaitingTermination+0x54>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	3b01      	subs	r3, #1
 800c6e8:	4a0b      	ldr	r2, [pc, #44]	@ (800c718 <prvCheckTasksWaitingTermination+0x54>)
 800c6ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c6ec:	4b0b      	ldr	r3, [pc, #44]	@ (800c71c <prvCheckTasksWaitingTermination+0x58>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	3b01      	subs	r3, #1
 800c6f2:	4a0a      	ldr	r2, [pc, #40]	@ (800c71c <prvCheckTasksWaitingTermination+0x58>)
 800c6f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c6f6:	f000 fe09 	bl	800d30c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 f810 	bl	800c720 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c700:	4b06      	ldr	r3, [pc, #24]	@ (800c71c <prvCheckTasksWaitingTermination+0x58>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d1e1      	bne.n	800c6cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c708:	bf00      	nop
 800c70a:	bf00      	nop
 800c70c:	3708      	adds	r7, #8
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	24000e90 	.word	0x24000e90
 800c718:	24000ebc 	.word	0x24000ebc
 800c71c:	24000ea4 	.word	0x24000ea4

0800c720 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c720:	b580      	push	{r7, lr}
 800c722:	b084      	sub	sp, #16
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	3354      	adds	r3, #84	@ 0x54
 800c72c:	4618      	mov	r0, r3
 800c72e:	f001 f9fb 	bl	800db28 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d108      	bne.n	800c74e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c740:	4618      	mov	r0, r3
 800c742:	f000 ffa1 	bl	800d688 <vPortFree>
				vPortFree( pxTCB );
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 ff9e 	bl	800d688 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c74c:	e019      	b.n	800c782 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c754:	2b01      	cmp	r3, #1
 800c756:	d103      	bne.n	800c760 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f000 ff95 	bl	800d688 <vPortFree>
	}
 800c75e:	e010      	b.n	800c782 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c766:	2b02      	cmp	r3, #2
 800c768:	d00b      	beq.n	800c782 <prvDeleteTCB+0x62>
	__asm volatile
 800c76a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c76e:	f383 8811 	msr	BASEPRI, r3
 800c772:	f3bf 8f6f 	isb	sy
 800c776:	f3bf 8f4f 	dsb	sy
 800c77a:	60fb      	str	r3, [r7, #12]
}
 800c77c:	bf00      	nop
 800c77e:	bf00      	nop
 800c780:	e7fd      	b.n	800c77e <prvDeleteTCB+0x5e>
	}
 800c782:	bf00      	nop
 800c784:	3710      	adds	r7, #16
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
	...

0800c78c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c78c:	b480      	push	{r7}
 800c78e:	b083      	sub	sp, #12
 800c790:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c792:	4b0c      	ldr	r3, [pc, #48]	@ (800c7c4 <prvResetNextTaskUnblockTime+0x38>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d104      	bne.n	800c7a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c79c:	4b0a      	ldr	r3, [pc, #40]	@ (800c7c8 <prvResetNextTaskUnblockTime+0x3c>)
 800c79e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c7a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c7a4:	e008      	b.n	800c7b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7a6:	4b07      	ldr	r3, [pc, #28]	@ (800c7c4 <prvResetNextTaskUnblockTime+0x38>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	68db      	ldr	r3, [r3, #12]
 800c7ac:	68db      	ldr	r3, [r3, #12]
 800c7ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	4a04      	ldr	r2, [pc, #16]	@ (800c7c8 <prvResetNextTaskUnblockTime+0x3c>)
 800c7b6:	6013      	str	r3, [r2, #0]
}
 800c7b8:	bf00      	nop
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr
 800c7c4:	24000e74 	.word	0x24000e74
 800c7c8:	24000edc 	.word	0x24000edc

0800c7cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b083      	sub	sp, #12
 800c7d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c7d2:	4b0b      	ldr	r3, [pc, #44]	@ (800c800 <xTaskGetSchedulerState+0x34>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d102      	bne.n	800c7e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	607b      	str	r3, [r7, #4]
 800c7de:	e008      	b.n	800c7f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7e0:	4b08      	ldr	r3, [pc, #32]	@ (800c804 <xTaskGetSchedulerState+0x38>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d102      	bne.n	800c7ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c7e8:	2302      	movs	r3, #2
 800c7ea:	607b      	str	r3, [r7, #4]
 800c7ec:	e001      	b.n	800c7f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c7f2:	687b      	ldr	r3, [r7, #4]
	}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	370c      	adds	r7, #12
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr
 800c800:	24000ec8 	.word	0x24000ec8
 800c804:	24000ee4 	.word	0x24000ee4

0800c808 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b086      	sub	sp, #24
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c814:	2300      	movs	r3, #0
 800c816:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d058      	beq.n	800c8d0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c81e:	4b2f      	ldr	r3, [pc, #188]	@ (800c8dc <xTaskPriorityDisinherit+0xd4>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	693a      	ldr	r2, [r7, #16]
 800c824:	429a      	cmp	r2, r3
 800c826:	d00b      	beq.n	800c840 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c82c:	f383 8811 	msr	BASEPRI, r3
 800c830:	f3bf 8f6f 	isb	sy
 800c834:	f3bf 8f4f 	dsb	sy
 800c838:	60fb      	str	r3, [r7, #12]
}
 800c83a:	bf00      	nop
 800c83c:	bf00      	nop
 800c83e:	e7fd      	b.n	800c83c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c844:	2b00      	cmp	r3, #0
 800c846:	d10b      	bne.n	800c860 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c84c:	f383 8811 	msr	BASEPRI, r3
 800c850:	f3bf 8f6f 	isb	sy
 800c854:	f3bf 8f4f 	dsb	sy
 800c858:	60bb      	str	r3, [r7, #8]
}
 800c85a:	bf00      	nop
 800c85c:	bf00      	nop
 800c85e:	e7fd      	b.n	800c85c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c864:	1e5a      	subs	r2, r3, #1
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c872:	429a      	cmp	r2, r3
 800c874:	d02c      	beq.n	800c8d0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d128      	bne.n	800c8d0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	3304      	adds	r3, #4
 800c882:	4618      	mov	r0, r3
 800c884:	f7fe fc26 	bl	800b0d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c894:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8a0:	4b0f      	ldr	r3, [pc, #60]	@ (800c8e0 <xTaskPriorityDisinherit+0xd8>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d903      	bls.n	800c8b0 <xTaskPriorityDisinherit+0xa8>
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8ac:	4a0c      	ldr	r2, [pc, #48]	@ (800c8e0 <xTaskPriorityDisinherit+0xd8>)
 800c8ae:	6013      	str	r3, [r2, #0]
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8b4:	4613      	mov	r3, r2
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	4413      	add	r3, r2
 800c8ba:	009b      	lsls	r3, r3, #2
 800c8bc:	4a09      	ldr	r2, [pc, #36]	@ (800c8e4 <xTaskPriorityDisinherit+0xdc>)
 800c8be:	441a      	add	r2, r3
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	3304      	adds	r3, #4
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	4610      	mov	r0, r2
 800c8c8:	f7fe fba7 	bl	800b01a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c8d0:	697b      	ldr	r3, [r7, #20]
	}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3718      	adds	r7, #24
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}
 800c8da:	bf00      	nop
 800c8dc:	240009e8 	.word	0x240009e8
 800c8e0:	24000ec4 	.word	0x24000ec4
 800c8e4:	240009ec 	.word	0x240009ec

0800c8e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b084      	sub	sp, #16
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c8f2:	4b21      	ldr	r3, [pc, #132]	@ (800c978 <prvAddCurrentTaskToDelayedList+0x90>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c8f8:	4b20      	ldr	r3, [pc, #128]	@ (800c97c <prvAddCurrentTaskToDelayedList+0x94>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	3304      	adds	r3, #4
 800c8fe:	4618      	mov	r0, r3
 800c900:	f7fe fbe8 	bl	800b0d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c90a:	d10a      	bne.n	800c922 <prvAddCurrentTaskToDelayedList+0x3a>
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d007      	beq.n	800c922 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c912:	4b1a      	ldr	r3, [pc, #104]	@ (800c97c <prvAddCurrentTaskToDelayedList+0x94>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	3304      	adds	r3, #4
 800c918:	4619      	mov	r1, r3
 800c91a:	4819      	ldr	r0, [pc, #100]	@ (800c980 <prvAddCurrentTaskToDelayedList+0x98>)
 800c91c:	f7fe fb7d 	bl	800b01a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c920:	e026      	b.n	800c970 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c922:	68fa      	ldr	r2, [r7, #12]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	4413      	add	r3, r2
 800c928:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c92a:	4b14      	ldr	r3, [pc, #80]	@ (800c97c <prvAddCurrentTaskToDelayedList+0x94>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	68ba      	ldr	r2, [r7, #8]
 800c930:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c932:	68ba      	ldr	r2, [r7, #8]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	429a      	cmp	r2, r3
 800c938:	d209      	bcs.n	800c94e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c93a:	4b12      	ldr	r3, [pc, #72]	@ (800c984 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c93c:	681a      	ldr	r2, [r3, #0]
 800c93e:	4b0f      	ldr	r3, [pc, #60]	@ (800c97c <prvAddCurrentTaskToDelayedList+0x94>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	3304      	adds	r3, #4
 800c944:	4619      	mov	r1, r3
 800c946:	4610      	mov	r0, r2
 800c948:	f7fe fb8b 	bl	800b062 <vListInsert>
}
 800c94c:	e010      	b.n	800c970 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c94e:	4b0e      	ldr	r3, [pc, #56]	@ (800c988 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	4b0a      	ldr	r3, [pc, #40]	@ (800c97c <prvAddCurrentTaskToDelayedList+0x94>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	3304      	adds	r3, #4
 800c958:	4619      	mov	r1, r3
 800c95a:	4610      	mov	r0, r2
 800c95c:	f7fe fb81 	bl	800b062 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c960:	4b0a      	ldr	r3, [pc, #40]	@ (800c98c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	68ba      	ldr	r2, [r7, #8]
 800c966:	429a      	cmp	r2, r3
 800c968:	d202      	bcs.n	800c970 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c96a:	4a08      	ldr	r2, [pc, #32]	@ (800c98c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	6013      	str	r3, [r2, #0]
}
 800c970:	bf00      	nop
 800c972:	3710      	adds	r7, #16
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}
 800c978:	24000ec0 	.word	0x24000ec0
 800c97c:	240009e8 	.word	0x240009e8
 800c980:	24000ea8 	.word	0x24000ea8
 800c984:	24000e78 	.word	0x24000e78
 800c988:	24000e74 	.word	0x24000e74
 800c98c:	24000edc 	.word	0x24000edc

0800c990 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b08a      	sub	sp, #40	@ 0x28
 800c994:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c996:	2300      	movs	r3, #0
 800c998:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c99a:	f000 fb13 	bl	800cfc4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c99e:	4b1d      	ldr	r3, [pc, #116]	@ (800ca14 <xTimerCreateTimerTask+0x84>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d021      	beq.n	800c9ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c9ae:	1d3a      	adds	r2, r7, #4
 800c9b0:	f107 0108 	add.w	r1, r7, #8
 800c9b4:	f107 030c 	add.w	r3, r7, #12
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f7fe fae7 	bl	800af8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c9be:	6879      	ldr	r1, [r7, #4]
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	68fa      	ldr	r2, [r7, #12]
 800c9c4:	9202      	str	r2, [sp, #8]
 800c9c6:	9301      	str	r3, [sp, #4]
 800c9c8:	2302      	movs	r3, #2
 800c9ca:	9300      	str	r3, [sp, #0]
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	460a      	mov	r2, r1
 800c9d0:	4911      	ldr	r1, [pc, #68]	@ (800ca18 <xTimerCreateTimerTask+0x88>)
 800c9d2:	4812      	ldr	r0, [pc, #72]	@ (800ca1c <xTimerCreateTimerTask+0x8c>)
 800c9d4:	f7ff f8a2 	bl	800bb1c <xTaskCreateStatic>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	4a11      	ldr	r2, [pc, #68]	@ (800ca20 <xTimerCreateTimerTask+0x90>)
 800c9dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c9de:	4b10      	ldr	r3, [pc, #64]	@ (800ca20 <xTimerCreateTimerTask+0x90>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d001      	beq.n	800c9ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d10b      	bne.n	800ca08 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c9f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9f4:	f383 8811 	msr	BASEPRI, r3
 800c9f8:	f3bf 8f6f 	isb	sy
 800c9fc:	f3bf 8f4f 	dsb	sy
 800ca00:	613b      	str	r3, [r7, #16]
}
 800ca02:	bf00      	nop
 800ca04:	bf00      	nop
 800ca06:	e7fd      	b.n	800ca04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ca08:	697b      	ldr	r3, [r7, #20]
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3718      	adds	r7, #24
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}
 800ca12:	bf00      	nop
 800ca14:	24000f18 	.word	0x24000f18
 800ca18:	0800f7e8 	.word	0x0800f7e8
 800ca1c:	0800cb5d 	.word	0x0800cb5d
 800ca20:	24000f1c 	.word	0x24000f1c

0800ca24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b08a      	sub	sp, #40	@ 0x28
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	60f8      	str	r0, [r7, #12]
 800ca2c:	60b9      	str	r1, [r7, #8]
 800ca2e:	607a      	str	r2, [r7, #4]
 800ca30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ca32:	2300      	movs	r3, #0
 800ca34:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d10b      	bne.n	800ca54 <xTimerGenericCommand+0x30>
	__asm volatile
 800ca3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca40:	f383 8811 	msr	BASEPRI, r3
 800ca44:	f3bf 8f6f 	isb	sy
 800ca48:	f3bf 8f4f 	dsb	sy
 800ca4c:	623b      	str	r3, [r7, #32]
}
 800ca4e:	bf00      	nop
 800ca50:	bf00      	nop
 800ca52:	e7fd      	b.n	800ca50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ca54:	4b19      	ldr	r3, [pc, #100]	@ (800cabc <xTimerGenericCommand+0x98>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d02a      	beq.n	800cab2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	2b05      	cmp	r3, #5
 800ca6c:	dc18      	bgt.n	800caa0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ca6e:	f7ff fead 	bl	800c7cc <xTaskGetSchedulerState>
 800ca72:	4603      	mov	r3, r0
 800ca74:	2b02      	cmp	r3, #2
 800ca76:	d109      	bne.n	800ca8c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ca78:	4b10      	ldr	r3, [pc, #64]	@ (800cabc <xTimerGenericCommand+0x98>)
 800ca7a:	6818      	ldr	r0, [r3, #0]
 800ca7c:	f107 0110 	add.w	r1, r7, #16
 800ca80:	2300      	movs	r3, #0
 800ca82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca84:	f7fe fc5a 	bl	800b33c <xQueueGenericSend>
 800ca88:	6278      	str	r0, [r7, #36]	@ 0x24
 800ca8a:	e012      	b.n	800cab2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ca8c:	4b0b      	ldr	r3, [pc, #44]	@ (800cabc <xTimerGenericCommand+0x98>)
 800ca8e:	6818      	ldr	r0, [r3, #0]
 800ca90:	f107 0110 	add.w	r1, r7, #16
 800ca94:	2300      	movs	r3, #0
 800ca96:	2200      	movs	r2, #0
 800ca98:	f7fe fc50 	bl	800b33c <xQueueGenericSend>
 800ca9c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ca9e:	e008      	b.n	800cab2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800caa0:	4b06      	ldr	r3, [pc, #24]	@ (800cabc <xTimerGenericCommand+0x98>)
 800caa2:	6818      	ldr	r0, [r3, #0]
 800caa4:	f107 0110 	add.w	r1, r7, #16
 800caa8:	2300      	movs	r3, #0
 800caaa:	683a      	ldr	r2, [r7, #0]
 800caac:	f7fe fd48 	bl	800b540 <xQueueGenericSendFromISR>
 800cab0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3728      	adds	r7, #40	@ 0x28
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}
 800cabc:	24000f18 	.word	0x24000f18

0800cac0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b088      	sub	sp, #32
 800cac4:	af02      	add	r7, sp, #8
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800caca:	4b23      	ldr	r3, [pc, #140]	@ (800cb58 <prvProcessExpiredTimer+0x98>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	3304      	adds	r3, #4
 800cad8:	4618      	mov	r0, r3
 800cada:	f7fe fafb 	bl	800b0d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cae4:	f003 0304 	and.w	r3, r3, #4
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d023      	beq.n	800cb34 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	699a      	ldr	r2, [r3, #24]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	18d1      	adds	r1, r2, r3
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	683a      	ldr	r2, [r7, #0]
 800caf8:	6978      	ldr	r0, [r7, #20]
 800cafa:	f000 f8d5 	bl	800cca8 <prvInsertTimerInActiveList>
 800cafe:	4603      	mov	r3, r0
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d020      	beq.n	800cb46 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb04:	2300      	movs	r3, #0
 800cb06:	9300      	str	r3, [sp, #0]
 800cb08:	2300      	movs	r3, #0
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	2100      	movs	r1, #0
 800cb0e:	6978      	ldr	r0, [r7, #20]
 800cb10:	f7ff ff88 	bl	800ca24 <xTimerGenericCommand>
 800cb14:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d114      	bne.n	800cb46 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800cb1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb20:	f383 8811 	msr	BASEPRI, r3
 800cb24:	f3bf 8f6f 	isb	sy
 800cb28:	f3bf 8f4f 	dsb	sy
 800cb2c:	60fb      	str	r3, [r7, #12]
}
 800cb2e:	bf00      	nop
 800cb30:	bf00      	nop
 800cb32:	e7fd      	b.n	800cb30 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb3a:	f023 0301 	bic.w	r3, r3, #1
 800cb3e:	b2da      	uxtb	r2, r3
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	6a1b      	ldr	r3, [r3, #32]
 800cb4a:	6978      	ldr	r0, [r7, #20]
 800cb4c:	4798      	blx	r3
}
 800cb4e:	bf00      	nop
 800cb50:	3718      	adds	r7, #24
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop
 800cb58:	24000f10 	.word	0x24000f10

0800cb5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb64:	f107 0308 	add.w	r3, r7, #8
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f000 f859 	bl	800cc20 <prvGetNextExpireTime>
 800cb6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	4619      	mov	r1, r3
 800cb74:	68f8      	ldr	r0, [r7, #12]
 800cb76:	f000 f805 	bl	800cb84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cb7a:	f000 f8d7 	bl	800cd2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb7e:	bf00      	nop
 800cb80:	e7f0      	b.n	800cb64 <prvTimerTask+0x8>
	...

0800cb84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b084      	sub	sp, #16
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cb8e:	f7ff fa29 	bl	800bfe4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cb92:	f107 0308 	add.w	r3, r7, #8
 800cb96:	4618      	mov	r0, r3
 800cb98:	f000 f866 	bl	800cc68 <prvSampleTimeNow>
 800cb9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d130      	bne.n	800cc06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d10a      	bne.n	800cbc0 <prvProcessTimerOrBlockTask+0x3c>
 800cbaa:	687a      	ldr	r2, [r7, #4]
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	d806      	bhi.n	800cbc0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cbb2:	f7ff fa25 	bl	800c000 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cbb6:	68f9      	ldr	r1, [r7, #12]
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f7ff ff81 	bl	800cac0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cbbe:	e024      	b.n	800cc0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d008      	beq.n	800cbd8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cbc6:	4b13      	ldr	r3, [pc, #76]	@ (800cc14 <prvProcessTimerOrBlockTask+0x90>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d101      	bne.n	800cbd4 <prvProcessTimerOrBlockTask+0x50>
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	e000      	b.n	800cbd6 <prvProcessTimerOrBlockTask+0x52>
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cbd8:	4b0f      	ldr	r3, [pc, #60]	@ (800cc18 <prvProcessTimerOrBlockTask+0x94>)
 800cbda:	6818      	ldr	r0, [r3, #0]
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	1ad3      	subs	r3, r2, r3
 800cbe2:	683a      	ldr	r2, [r7, #0]
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	f7fe ff65 	bl	800bab4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cbea:	f7ff fa09 	bl	800c000 <xTaskResumeAll>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d10a      	bne.n	800cc0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cbf4:	4b09      	ldr	r3, [pc, #36]	@ (800cc1c <prvProcessTimerOrBlockTask+0x98>)
 800cbf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbfa:	601a      	str	r2, [r3, #0]
 800cbfc:	f3bf 8f4f 	dsb	sy
 800cc00:	f3bf 8f6f 	isb	sy
}
 800cc04:	e001      	b.n	800cc0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cc06:	f7ff f9fb 	bl	800c000 <xTaskResumeAll>
}
 800cc0a:	bf00      	nop
 800cc0c:	3710      	adds	r7, #16
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	24000f14 	.word	0x24000f14
 800cc18:	24000f18 	.word	0x24000f18
 800cc1c:	e000ed04 	.word	0xe000ed04

0800cc20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cc20:	b480      	push	{r7}
 800cc22:	b085      	sub	sp, #20
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cc28:	4b0e      	ldr	r3, [pc, #56]	@ (800cc64 <prvGetNextExpireTime+0x44>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d101      	bne.n	800cc36 <prvGetNextExpireTime+0x16>
 800cc32:	2201      	movs	r2, #1
 800cc34:	e000      	b.n	800cc38 <prvGetNextExpireTime+0x18>
 800cc36:	2200      	movs	r2, #0
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d105      	bne.n	800cc50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc44:	4b07      	ldr	r3, [pc, #28]	@ (800cc64 <prvGetNextExpireTime+0x44>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	68db      	ldr	r3, [r3, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	60fb      	str	r3, [r7, #12]
 800cc4e:	e001      	b.n	800cc54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cc50:	2300      	movs	r3, #0
 800cc52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cc54:	68fb      	ldr	r3, [r7, #12]
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3714      	adds	r7, #20
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr
 800cc62:	bf00      	nop
 800cc64:	24000f10 	.word	0x24000f10

0800cc68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cc70:	f7ff fa64 	bl	800c13c <xTaskGetTickCount>
 800cc74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cc76:	4b0b      	ldr	r3, [pc, #44]	@ (800cca4 <prvSampleTimeNow+0x3c>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	68fa      	ldr	r2, [r7, #12]
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d205      	bcs.n	800cc8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cc80:	f000 f93a 	bl	800cef8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2201      	movs	r2, #1
 800cc88:	601a      	str	r2, [r3, #0]
 800cc8a:	e002      	b.n	800cc92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cc92:	4a04      	ldr	r2, [pc, #16]	@ (800cca4 <prvSampleTimeNow+0x3c>)
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cc98:	68fb      	ldr	r3, [r7, #12]
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3710      	adds	r7, #16
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	24000f20 	.word	0x24000f20

0800cca8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b086      	sub	sp, #24
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	607a      	str	r2, [r7, #4]
 800ccb4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	68ba      	ldr	r2, [r7, #8]
 800ccbe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	68fa      	ldr	r2, [r7, #12]
 800ccc4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ccc6:	68ba      	ldr	r2, [r7, #8]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d812      	bhi.n	800ccf4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccce:	687a      	ldr	r2, [r7, #4]
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	1ad2      	subs	r2, r2, r3
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	699b      	ldr	r3, [r3, #24]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d302      	bcc.n	800cce2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	617b      	str	r3, [r7, #20]
 800cce0:	e01b      	b.n	800cd1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cce2:	4b10      	ldr	r3, [pc, #64]	@ (800cd24 <prvInsertTimerInActiveList+0x7c>)
 800cce4:	681a      	ldr	r2, [r3, #0]
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	3304      	adds	r3, #4
 800ccea:	4619      	mov	r1, r3
 800ccec:	4610      	mov	r0, r2
 800ccee:	f7fe f9b8 	bl	800b062 <vListInsert>
 800ccf2:	e012      	b.n	800cd1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ccf4:	687a      	ldr	r2, [r7, #4]
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d206      	bcs.n	800cd0a <prvInsertTimerInActiveList+0x62>
 800ccfc:	68ba      	ldr	r2, [r7, #8]
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d302      	bcc.n	800cd0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cd04:	2301      	movs	r3, #1
 800cd06:	617b      	str	r3, [r7, #20]
 800cd08:	e007      	b.n	800cd1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cd0a:	4b07      	ldr	r3, [pc, #28]	@ (800cd28 <prvInsertTimerInActiveList+0x80>)
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	3304      	adds	r3, #4
 800cd12:	4619      	mov	r1, r3
 800cd14:	4610      	mov	r0, r2
 800cd16:	f7fe f9a4 	bl	800b062 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cd1a:	697b      	ldr	r3, [r7, #20]
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3718      	adds	r7, #24
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	24000f14 	.word	0x24000f14
 800cd28:	24000f10 	.word	0x24000f10

0800cd2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b08e      	sub	sp, #56	@ 0x38
 800cd30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd32:	e0ce      	b.n	800ced2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	da19      	bge.n	800cd6e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cd3a:	1d3b      	adds	r3, r7, #4
 800cd3c:	3304      	adds	r3, #4
 800cd3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cd40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d10b      	bne.n	800cd5e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800cd46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd4a:	f383 8811 	msr	BASEPRI, r3
 800cd4e:	f3bf 8f6f 	isb	sy
 800cd52:	f3bf 8f4f 	dsb	sy
 800cd56:	61fb      	str	r3, [r7, #28]
}
 800cd58:	bf00      	nop
 800cd5a:	bf00      	nop
 800cd5c:	e7fd      	b.n	800cd5a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cd5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd64:	6850      	ldr	r0, [r2, #4]
 800cd66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd68:	6892      	ldr	r2, [r2, #8]
 800cd6a:	4611      	mov	r1, r2
 800cd6c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	f2c0 80ae 	blt.w	800ced2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cd7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd7c:	695b      	ldr	r3, [r3, #20]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d004      	beq.n	800cd8c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd84:	3304      	adds	r3, #4
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7fe f9a4 	bl	800b0d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cd8c:	463b      	mov	r3, r7
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7ff ff6a 	bl	800cc68 <prvSampleTimeNow>
 800cd94:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2b09      	cmp	r3, #9
 800cd9a:	f200 8097 	bhi.w	800cecc <prvProcessReceivedCommands+0x1a0>
 800cd9e:	a201      	add	r2, pc, #4	@ (adr r2, 800cda4 <prvProcessReceivedCommands+0x78>)
 800cda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cda4:	0800cdcd 	.word	0x0800cdcd
 800cda8:	0800cdcd 	.word	0x0800cdcd
 800cdac:	0800cdcd 	.word	0x0800cdcd
 800cdb0:	0800ce43 	.word	0x0800ce43
 800cdb4:	0800ce57 	.word	0x0800ce57
 800cdb8:	0800cea3 	.word	0x0800cea3
 800cdbc:	0800cdcd 	.word	0x0800cdcd
 800cdc0:	0800cdcd 	.word	0x0800cdcd
 800cdc4:	0800ce43 	.word	0x0800ce43
 800cdc8:	0800ce57 	.word	0x0800ce57
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cdcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cdd2:	f043 0301 	orr.w	r3, r3, #1
 800cdd6:	b2da      	uxtb	r2, r3
 800cdd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cdde:	68ba      	ldr	r2, [r7, #8]
 800cde0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cde2:	699b      	ldr	r3, [r3, #24]
 800cde4:	18d1      	adds	r1, r2, r3
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cdea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cdec:	f7ff ff5c 	bl	800cca8 <prvInsertTimerInActiveList>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d06c      	beq.n	800ced0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cdf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdf8:	6a1b      	ldr	r3, [r3, #32]
 800cdfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cdfc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cdfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce04:	f003 0304 	and.w	r3, r3, #4
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d061      	beq.n	800ced0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ce0c:	68ba      	ldr	r2, [r7, #8]
 800ce0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce10:	699b      	ldr	r3, [r3, #24]
 800ce12:	441a      	add	r2, r3
 800ce14:	2300      	movs	r3, #0
 800ce16:	9300      	str	r3, [sp, #0]
 800ce18:	2300      	movs	r3, #0
 800ce1a:	2100      	movs	r1, #0
 800ce1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce1e:	f7ff fe01 	bl	800ca24 <xTimerGenericCommand>
 800ce22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ce24:	6a3b      	ldr	r3, [r7, #32]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d152      	bne.n	800ced0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ce2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce2e:	f383 8811 	msr	BASEPRI, r3
 800ce32:	f3bf 8f6f 	isb	sy
 800ce36:	f3bf 8f4f 	dsb	sy
 800ce3a:	61bb      	str	r3, [r7, #24]
}
 800ce3c:	bf00      	nop
 800ce3e:	bf00      	nop
 800ce40:	e7fd      	b.n	800ce3e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce48:	f023 0301 	bic.w	r3, r3, #1
 800ce4c:	b2da      	uxtb	r2, r3
 800ce4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ce54:	e03d      	b.n	800ced2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce5c:	f043 0301 	orr.w	r3, r3, #1
 800ce60:	b2da      	uxtb	r2, r3
 800ce62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ce68:	68ba      	ldr	r2, [r7, #8]
 800ce6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce6c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ce6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce70:	699b      	ldr	r3, [r3, #24]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d10b      	bne.n	800ce8e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ce76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce7a:	f383 8811 	msr	BASEPRI, r3
 800ce7e:	f3bf 8f6f 	isb	sy
 800ce82:	f3bf 8f4f 	dsb	sy
 800ce86:	617b      	str	r3, [r7, #20]
}
 800ce88:	bf00      	nop
 800ce8a:	bf00      	nop
 800ce8c:	e7fd      	b.n	800ce8a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ce8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce90:	699a      	ldr	r2, [r3, #24]
 800ce92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce94:	18d1      	adds	r1, r2, r3
 800ce96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce9c:	f7ff ff04 	bl	800cca8 <prvInsertTimerInActiveList>
					break;
 800cea0:	e017      	b.n	800ced2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cea4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cea8:	f003 0302 	and.w	r3, r3, #2
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d103      	bne.n	800ceb8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ceb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ceb2:	f000 fbe9 	bl	800d688 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ceb6:	e00c      	b.n	800ced2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ceb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cebe:	f023 0301 	bic.w	r3, r3, #1
 800cec2:	b2da      	uxtb	r2, r3
 800cec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cec6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ceca:	e002      	b.n	800ced2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800cecc:	bf00      	nop
 800cece:	e000      	b.n	800ced2 <prvProcessReceivedCommands+0x1a6>
					break;
 800ced0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ced2:	4b08      	ldr	r3, [pc, #32]	@ (800cef4 <prvProcessReceivedCommands+0x1c8>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	1d39      	adds	r1, r7, #4
 800ced8:	2200      	movs	r2, #0
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7fe fbce 	bl	800b67c <xQueueReceive>
 800cee0:	4603      	mov	r3, r0
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	f47f af26 	bne.w	800cd34 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cee8:	bf00      	nop
 800ceea:	bf00      	nop
 800ceec:	3730      	adds	r7, #48	@ 0x30
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	24000f18 	.word	0x24000f18

0800cef8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b088      	sub	sp, #32
 800cefc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cefe:	e049      	b.n	800cf94 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf00:	4b2e      	ldr	r3, [pc, #184]	@ (800cfbc <prvSwitchTimerLists+0xc4>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	68db      	ldr	r3, [r3, #12]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf0a:	4b2c      	ldr	r3, [pc, #176]	@ (800cfbc <prvSwitchTimerLists+0xc4>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	68db      	ldr	r3, [r3, #12]
 800cf10:	68db      	ldr	r3, [r3, #12]
 800cf12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	3304      	adds	r3, #4
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7fe f8db 	bl	800b0d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	6a1b      	ldr	r3, [r3, #32]
 800cf22:	68f8      	ldr	r0, [r7, #12]
 800cf24:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf2c:	f003 0304 	and.w	r3, r3, #4
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d02f      	beq.n	800cf94 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	699b      	ldr	r3, [r3, #24]
 800cf38:	693a      	ldr	r2, [r7, #16]
 800cf3a:	4413      	add	r3, r2
 800cf3c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cf3e:	68ba      	ldr	r2, [r7, #8]
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d90e      	bls.n	800cf64 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	68ba      	ldr	r2, [r7, #8]
 800cf4a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	68fa      	ldr	r2, [r7, #12]
 800cf50:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf52:	4b1a      	ldr	r3, [pc, #104]	@ (800cfbc <prvSwitchTimerLists+0xc4>)
 800cf54:	681a      	ldr	r2, [r3, #0]
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	3304      	adds	r3, #4
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	4610      	mov	r0, r2
 800cf5e:	f7fe f880 	bl	800b062 <vListInsert>
 800cf62:	e017      	b.n	800cf94 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf64:	2300      	movs	r3, #0
 800cf66:	9300      	str	r3, [sp, #0]
 800cf68:	2300      	movs	r3, #0
 800cf6a:	693a      	ldr	r2, [r7, #16]
 800cf6c:	2100      	movs	r1, #0
 800cf6e:	68f8      	ldr	r0, [r7, #12]
 800cf70:	f7ff fd58 	bl	800ca24 <xTimerGenericCommand>
 800cf74:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d10b      	bne.n	800cf94 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cf7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf80:	f383 8811 	msr	BASEPRI, r3
 800cf84:	f3bf 8f6f 	isb	sy
 800cf88:	f3bf 8f4f 	dsb	sy
 800cf8c:	603b      	str	r3, [r7, #0]
}
 800cf8e:	bf00      	nop
 800cf90:	bf00      	nop
 800cf92:	e7fd      	b.n	800cf90 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf94:	4b09      	ldr	r3, [pc, #36]	@ (800cfbc <prvSwitchTimerLists+0xc4>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d1b0      	bne.n	800cf00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cf9e:	4b07      	ldr	r3, [pc, #28]	@ (800cfbc <prvSwitchTimerLists+0xc4>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cfa4:	4b06      	ldr	r3, [pc, #24]	@ (800cfc0 <prvSwitchTimerLists+0xc8>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	4a04      	ldr	r2, [pc, #16]	@ (800cfbc <prvSwitchTimerLists+0xc4>)
 800cfaa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cfac:	4a04      	ldr	r2, [pc, #16]	@ (800cfc0 <prvSwitchTimerLists+0xc8>)
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	6013      	str	r3, [r2, #0]
}
 800cfb2:	bf00      	nop
 800cfb4:	3718      	adds	r7, #24
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}
 800cfba:	bf00      	nop
 800cfbc:	24000f10 	.word	0x24000f10
 800cfc0:	24000f14 	.word	0x24000f14

0800cfc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b082      	sub	sp, #8
 800cfc8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cfca:	f000 f96d 	bl	800d2a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cfce:	4b15      	ldr	r3, [pc, #84]	@ (800d024 <prvCheckForValidListAndQueue+0x60>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d120      	bne.n	800d018 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cfd6:	4814      	ldr	r0, [pc, #80]	@ (800d028 <prvCheckForValidListAndQueue+0x64>)
 800cfd8:	f7fd fff2 	bl	800afc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cfdc:	4813      	ldr	r0, [pc, #76]	@ (800d02c <prvCheckForValidListAndQueue+0x68>)
 800cfde:	f7fd ffef 	bl	800afc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cfe2:	4b13      	ldr	r3, [pc, #76]	@ (800d030 <prvCheckForValidListAndQueue+0x6c>)
 800cfe4:	4a10      	ldr	r2, [pc, #64]	@ (800d028 <prvCheckForValidListAndQueue+0x64>)
 800cfe6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cfe8:	4b12      	ldr	r3, [pc, #72]	@ (800d034 <prvCheckForValidListAndQueue+0x70>)
 800cfea:	4a10      	ldr	r2, [pc, #64]	@ (800d02c <prvCheckForValidListAndQueue+0x68>)
 800cfec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cfee:	2300      	movs	r3, #0
 800cff0:	9300      	str	r3, [sp, #0]
 800cff2:	4b11      	ldr	r3, [pc, #68]	@ (800d038 <prvCheckForValidListAndQueue+0x74>)
 800cff4:	4a11      	ldr	r2, [pc, #68]	@ (800d03c <prvCheckForValidListAndQueue+0x78>)
 800cff6:	2110      	movs	r1, #16
 800cff8:	200a      	movs	r0, #10
 800cffa:	f7fe f8ff 	bl	800b1fc <xQueueGenericCreateStatic>
 800cffe:	4603      	mov	r3, r0
 800d000:	4a08      	ldr	r2, [pc, #32]	@ (800d024 <prvCheckForValidListAndQueue+0x60>)
 800d002:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d004:	4b07      	ldr	r3, [pc, #28]	@ (800d024 <prvCheckForValidListAndQueue+0x60>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d005      	beq.n	800d018 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d00c:	4b05      	ldr	r3, [pc, #20]	@ (800d024 <prvCheckForValidListAndQueue+0x60>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	490b      	ldr	r1, [pc, #44]	@ (800d040 <prvCheckForValidListAndQueue+0x7c>)
 800d012:	4618      	mov	r0, r3
 800d014:	f7fe fd24 	bl	800ba60 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d018:	f000 f978 	bl	800d30c <vPortExitCritical>
}
 800d01c:	bf00      	nop
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	24000f18 	.word	0x24000f18
 800d028:	24000ee8 	.word	0x24000ee8
 800d02c:	24000efc 	.word	0x24000efc
 800d030:	24000f10 	.word	0x24000f10
 800d034:	24000f14 	.word	0x24000f14
 800d038:	24000fc4 	.word	0x24000fc4
 800d03c:	24000f24 	.word	0x24000f24
 800d040:	0800f7f0 	.word	0x0800f7f0

0800d044 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d044:	b480      	push	{r7}
 800d046:	b085      	sub	sp, #20
 800d048:	af00      	add	r7, sp, #0
 800d04a:	60f8      	str	r0, [r7, #12]
 800d04c:	60b9      	str	r1, [r7, #8]
 800d04e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	3b04      	subs	r3, #4
 800d054:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d05c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	3b04      	subs	r3, #4
 800d062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	f023 0201 	bic.w	r2, r3, #1
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	3b04      	subs	r3, #4
 800d072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d074:	4a0c      	ldr	r2, [pc, #48]	@ (800d0a8 <pxPortInitialiseStack+0x64>)
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	3b14      	subs	r3, #20
 800d07e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	3b04      	subs	r3, #4
 800d08a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f06f 0202 	mvn.w	r2, #2
 800d092:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	3b20      	subs	r3, #32
 800d098:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d09a:	68fb      	ldr	r3, [r7, #12]
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3714      	adds	r7, #20
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr
 800d0a8:	0800d0ad 	.word	0x0800d0ad

0800d0ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b085      	sub	sp, #20
 800d0b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d0b6:	4b13      	ldr	r3, [pc, #76]	@ (800d104 <prvTaskExitError+0x58>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d0be:	d00b      	beq.n	800d0d8 <prvTaskExitError+0x2c>
	__asm volatile
 800d0c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0c4:	f383 8811 	msr	BASEPRI, r3
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	60fb      	str	r3, [r7, #12]
}
 800d0d2:	bf00      	nop
 800d0d4:	bf00      	nop
 800d0d6:	e7fd      	b.n	800d0d4 <prvTaskExitError+0x28>
	__asm volatile
 800d0d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0dc:	f383 8811 	msr	BASEPRI, r3
 800d0e0:	f3bf 8f6f 	isb	sy
 800d0e4:	f3bf 8f4f 	dsb	sy
 800d0e8:	60bb      	str	r3, [r7, #8]
}
 800d0ea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d0ec:	bf00      	nop
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d0fc      	beq.n	800d0ee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d0f4:	bf00      	nop
 800d0f6:	bf00      	nop
 800d0f8:	3714      	adds	r7, #20
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d100:	4770      	bx	lr
 800d102:	bf00      	nop
 800d104:	24000024 	.word	0x24000024
	...

0800d110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d110:	4b07      	ldr	r3, [pc, #28]	@ (800d130 <pxCurrentTCBConst2>)
 800d112:	6819      	ldr	r1, [r3, #0]
 800d114:	6808      	ldr	r0, [r1, #0]
 800d116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d11a:	f380 8809 	msr	PSP, r0
 800d11e:	f3bf 8f6f 	isb	sy
 800d122:	f04f 0000 	mov.w	r0, #0
 800d126:	f380 8811 	msr	BASEPRI, r0
 800d12a:	4770      	bx	lr
 800d12c:	f3af 8000 	nop.w

0800d130 <pxCurrentTCBConst2>:
 800d130:	240009e8 	.word	0x240009e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d134:	bf00      	nop
 800d136:	bf00      	nop

0800d138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d138:	4808      	ldr	r0, [pc, #32]	@ (800d15c <prvPortStartFirstTask+0x24>)
 800d13a:	6800      	ldr	r0, [r0, #0]
 800d13c:	6800      	ldr	r0, [r0, #0]
 800d13e:	f380 8808 	msr	MSP, r0
 800d142:	f04f 0000 	mov.w	r0, #0
 800d146:	f380 8814 	msr	CONTROL, r0
 800d14a:	b662      	cpsie	i
 800d14c:	b661      	cpsie	f
 800d14e:	f3bf 8f4f 	dsb	sy
 800d152:	f3bf 8f6f 	isb	sy
 800d156:	df00      	svc	0
 800d158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d15a:	bf00      	nop
 800d15c:	e000ed08 	.word	0xe000ed08

0800d160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b086      	sub	sp, #24
 800d164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d166:	4b47      	ldr	r3, [pc, #284]	@ (800d284 <xPortStartScheduler+0x124>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4a47      	ldr	r2, [pc, #284]	@ (800d288 <xPortStartScheduler+0x128>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d10b      	bne.n	800d188 <xPortStartScheduler+0x28>
	__asm volatile
 800d170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d174:	f383 8811 	msr	BASEPRI, r3
 800d178:	f3bf 8f6f 	isb	sy
 800d17c:	f3bf 8f4f 	dsb	sy
 800d180:	60fb      	str	r3, [r7, #12]
}
 800d182:	bf00      	nop
 800d184:	bf00      	nop
 800d186:	e7fd      	b.n	800d184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d188:	4b3e      	ldr	r3, [pc, #248]	@ (800d284 <xPortStartScheduler+0x124>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4a3f      	ldr	r2, [pc, #252]	@ (800d28c <xPortStartScheduler+0x12c>)
 800d18e:	4293      	cmp	r3, r2
 800d190:	d10b      	bne.n	800d1aa <xPortStartScheduler+0x4a>
	__asm volatile
 800d192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d196:	f383 8811 	msr	BASEPRI, r3
 800d19a:	f3bf 8f6f 	isb	sy
 800d19e:	f3bf 8f4f 	dsb	sy
 800d1a2:	613b      	str	r3, [r7, #16]
}
 800d1a4:	bf00      	nop
 800d1a6:	bf00      	nop
 800d1a8:	e7fd      	b.n	800d1a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d1aa:	4b39      	ldr	r3, [pc, #228]	@ (800d290 <xPortStartScheduler+0x130>)
 800d1ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	22ff      	movs	r2, #255	@ 0xff
 800d1ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	781b      	ldrb	r3, [r3, #0]
 800d1c0:	b2db      	uxtb	r3, r3
 800d1c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d1c4:	78fb      	ldrb	r3, [r7, #3]
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d1cc:	b2da      	uxtb	r2, r3
 800d1ce:	4b31      	ldr	r3, [pc, #196]	@ (800d294 <xPortStartScheduler+0x134>)
 800d1d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d1d2:	4b31      	ldr	r3, [pc, #196]	@ (800d298 <xPortStartScheduler+0x138>)
 800d1d4:	2207      	movs	r2, #7
 800d1d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1d8:	e009      	b.n	800d1ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d1da:	4b2f      	ldr	r3, [pc, #188]	@ (800d298 <xPortStartScheduler+0x138>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	3b01      	subs	r3, #1
 800d1e0:	4a2d      	ldr	r2, [pc, #180]	@ (800d298 <xPortStartScheduler+0x138>)
 800d1e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d1e4:	78fb      	ldrb	r3, [r7, #3]
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	005b      	lsls	r3, r3, #1
 800d1ea:	b2db      	uxtb	r3, r3
 800d1ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1ee:	78fb      	ldrb	r3, [r7, #3]
 800d1f0:	b2db      	uxtb	r3, r3
 800d1f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d1f6:	2b80      	cmp	r3, #128	@ 0x80
 800d1f8:	d0ef      	beq.n	800d1da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d1fa:	4b27      	ldr	r3, [pc, #156]	@ (800d298 <xPortStartScheduler+0x138>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f1c3 0307 	rsb	r3, r3, #7
 800d202:	2b04      	cmp	r3, #4
 800d204:	d00b      	beq.n	800d21e <xPortStartScheduler+0xbe>
	__asm volatile
 800d206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d20a:	f383 8811 	msr	BASEPRI, r3
 800d20e:	f3bf 8f6f 	isb	sy
 800d212:	f3bf 8f4f 	dsb	sy
 800d216:	60bb      	str	r3, [r7, #8]
}
 800d218:	bf00      	nop
 800d21a:	bf00      	nop
 800d21c:	e7fd      	b.n	800d21a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d21e:	4b1e      	ldr	r3, [pc, #120]	@ (800d298 <xPortStartScheduler+0x138>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	021b      	lsls	r3, r3, #8
 800d224:	4a1c      	ldr	r2, [pc, #112]	@ (800d298 <xPortStartScheduler+0x138>)
 800d226:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d228:	4b1b      	ldr	r3, [pc, #108]	@ (800d298 <xPortStartScheduler+0x138>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d230:	4a19      	ldr	r2, [pc, #100]	@ (800d298 <xPortStartScheduler+0x138>)
 800d232:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	b2da      	uxtb	r2, r3
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d23c:	4b17      	ldr	r3, [pc, #92]	@ (800d29c <xPortStartScheduler+0x13c>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4a16      	ldr	r2, [pc, #88]	@ (800d29c <xPortStartScheduler+0x13c>)
 800d242:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d246:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d248:	4b14      	ldr	r3, [pc, #80]	@ (800d29c <xPortStartScheduler+0x13c>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	4a13      	ldr	r2, [pc, #76]	@ (800d29c <xPortStartScheduler+0x13c>)
 800d24e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d252:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d254:	f000 f8da 	bl	800d40c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d258:	4b11      	ldr	r3, [pc, #68]	@ (800d2a0 <xPortStartScheduler+0x140>)
 800d25a:	2200      	movs	r2, #0
 800d25c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d25e:	f000 f8f9 	bl	800d454 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d262:	4b10      	ldr	r3, [pc, #64]	@ (800d2a4 <xPortStartScheduler+0x144>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	4a0f      	ldr	r2, [pc, #60]	@ (800d2a4 <xPortStartScheduler+0x144>)
 800d268:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d26c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d26e:	f7ff ff63 	bl	800d138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d272:	f7ff f82d 	bl	800c2d0 <vTaskSwitchContext>
	prvTaskExitError();
 800d276:	f7ff ff19 	bl	800d0ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d27a:	2300      	movs	r3, #0
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3718      	adds	r7, #24
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}
 800d284:	e000ed00 	.word	0xe000ed00
 800d288:	410fc271 	.word	0x410fc271
 800d28c:	410fc270 	.word	0x410fc270
 800d290:	e000e400 	.word	0xe000e400
 800d294:	24001014 	.word	0x24001014
 800d298:	24001018 	.word	0x24001018
 800d29c:	e000ed20 	.word	0xe000ed20
 800d2a0:	24000024 	.word	0x24000024
 800d2a4:	e000ef34 	.word	0xe000ef34

0800d2a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b083      	sub	sp, #12
 800d2ac:	af00      	add	r7, sp, #0
	__asm volatile
 800d2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2b2:	f383 8811 	msr	BASEPRI, r3
 800d2b6:	f3bf 8f6f 	isb	sy
 800d2ba:	f3bf 8f4f 	dsb	sy
 800d2be:	607b      	str	r3, [r7, #4]
}
 800d2c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d2c2:	4b10      	ldr	r3, [pc, #64]	@ (800d304 <vPortEnterCritical+0x5c>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	4a0e      	ldr	r2, [pc, #56]	@ (800d304 <vPortEnterCritical+0x5c>)
 800d2ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d2cc:	4b0d      	ldr	r3, [pc, #52]	@ (800d304 <vPortEnterCritical+0x5c>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	d110      	bne.n	800d2f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d2d4:	4b0c      	ldr	r3, [pc, #48]	@ (800d308 <vPortEnterCritical+0x60>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d00b      	beq.n	800d2f6 <vPortEnterCritical+0x4e>
	__asm volatile
 800d2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2e2:	f383 8811 	msr	BASEPRI, r3
 800d2e6:	f3bf 8f6f 	isb	sy
 800d2ea:	f3bf 8f4f 	dsb	sy
 800d2ee:	603b      	str	r3, [r7, #0]
}
 800d2f0:	bf00      	nop
 800d2f2:	bf00      	nop
 800d2f4:	e7fd      	b.n	800d2f2 <vPortEnterCritical+0x4a>
	}
}
 800d2f6:	bf00      	nop
 800d2f8:	370c      	adds	r7, #12
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop
 800d304:	24000024 	.word	0x24000024
 800d308:	e000ed04 	.word	0xe000ed04

0800d30c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d30c:	b480      	push	{r7}
 800d30e:	b083      	sub	sp, #12
 800d310:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d312:	4b12      	ldr	r3, [pc, #72]	@ (800d35c <vPortExitCritical+0x50>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d10b      	bne.n	800d332 <vPortExitCritical+0x26>
	__asm volatile
 800d31a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d31e:	f383 8811 	msr	BASEPRI, r3
 800d322:	f3bf 8f6f 	isb	sy
 800d326:	f3bf 8f4f 	dsb	sy
 800d32a:	607b      	str	r3, [r7, #4]
}
 800d32c:	bf00      	nop
 800d32e:	bf00      	nop
 800d330:	e7fd      	b.n	800d32e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d332:	4b0a      	ldr	r3, [pc, #40]	@ (800d35c <vPortExitCritical+0x50>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	3b01      	subs	r3, #1
 800d338:	4a08      	ldr	r2, [pc, #32]	@ (800d35c <vPortExitCritical+0x50>)
 800d33a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d33c:	4b07      	ldr	r3, [pc, #28]	@ (800d35c <vPortExitCritical+0x50>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d105      	bne.n	800d350 <vPortExitCritical+0x44>
 800d344:	2300      	movs	r3, #0
 800d346:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	f383 8811 	msr	BASEPRI, r3
}
 800d34e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d350:	bf00      	nop
 800d352:	370c      	adds	r7, #12
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr
 800d35c:	24000024 	.word	0x24000024

0800d360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d360:	f3ef 8009 	mrs	r0, PSP
 800d364:	f3bf 8f6f 	isb	sy
 800d368:	4b15      	ldr	r3, [pc, #84]	@ (800d3c0 <pxCurrentTCBConst>)
 800d36a:	681a      	ldr	r2, [r3, #0]
 800d36c:	f01e 0f10 	tst.w	lr, #16
 800d370:	bf08      	it	eq
 800d372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d37a:	6010      	str	r0, [r2, #0]
 800d37c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d380:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d384:	f380 8811 	msr	BASEPRI, r0
 800d388:	f3bf 8f4f 	dsb	sy
 800d38c:	f3bf 8f6f 	isb	sy
 800d390:	f7fe ff9e 	bl	800c2d0 <vTaskSwitchContext>
 800d394:	f04f 0000 	mov.w	r0, #0
 800d398:	f380 8811 	msr	BASEPRI, r0
 800d39c:	bc09      	pop	{r0, r3}
 800d39e:	6819      	ldr	r1, [r3, #0]
 800d3a0:	6808      	ldr	r0, [r1, #0]
 800d3a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a6:	f01e 0f10 	tst.w	lr, #16
 800d3aa:	bf08      	it	eq
 800d3ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d3b0:	f380 8809 	msr	PSP, r0
 800d3b4:	f3bf 8f6f 	isb	sy
 800d3b8:	4770      	bx	lr
 800d3ba:	bf00      	nop
 800d3bc:	f3af 8000 	nop.w

0800d3c0 <pxCurrentTCBConst>:
 800d3c0:	240009e8 	.word	0x240009e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d3c4:	bf00      	nop
 800d3c6:	bf00      	nop

0800d3c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
	__asm volatile
 800d3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3d2:	f383 8811 	msr	BASEPRI, r3
 800d3d6:	f3bf 8f6f 	isb	sy
 800d3da:	f3bf 8f4f 	dsb	sy
 800d3de:	607b      	str	r3, [r7, #4]
}
 800d3e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d3e2:	f7fe febb 	bl	800c15c <xTaskIncrementTick>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d003      	beq.n	800d3f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d3ec:	4b06      	ldr	r3, [pc, #24]	@ (800d408 <xPortSysTickHandler+0x40>)
 800d3ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3f2:	601a      	str	r2, [r3, #0]
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	f383 8811 	msr	BASEPRI, r3
}
 800d3fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d400:	bf00      	nop
 800d402:	3708      	adds	r7, #8
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}
 800d408:	e000ed04 	.word	0xe000ed04

0800d40c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d40c:	b480      	push	{r7}
 800d40e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d410:	4b0b      	ldr	r3, [pc, #44]	@ (800d440 <vPortSetupTimerInterrupt+0x34>)
 800d412:	2200      	movs	r2, #0
 800d414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d416:	4b0b      	ldr	r3, [pc, #44]	@ (800d444 <vPortSetupTimerInterrupt+0x38>)
 800d418:	2200      	movs	r2, #0
 800d41a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d41c:	4b0a      	ldr	r3, [pc, #40]	@ (800d448 <vPortSetupTimerInterrupt+0x3c>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a0a      	ldr	r2, [pc, #40]	@ (800d44c <vPortSetupTimerInterrupt+0x40>)
 800d422:	fba2 2303 	umull	r2, r3, r2, r3
 800d426:	099b      	lsrs	r3, r3, #6
 800d428:	4a09      	ldr	r2, [pc, #36]	@ (800d450 <vPortSetupTimerInterrupt+0x44>)
 800d42a:	3b01      	subs	r3, #1
 800d42c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d42e:	4b04      	ldr	r3, [pc, #16]	@ (800d440 <vPortSetupTimerInterrupt+0x34>)
 800d430:	2207      	movs	r2, #7
 800d432:	601a      	str	r2, [r3, #0]
}
 800d434:	bf00      	nop
 800d436:	46bd      	mov	sp, r7
 800d438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43c:	4770      	bx	lr
 800d43e:	bf00      	nop
 800d440:	e000e010 	.word	0xe000e010
 800d444:	e000e018 	.word	0xe000e018
 800d448:	24000000 	.word	0x24000000
 800d44c:	10624dd3 	.word	0x10624dd3
 800d450:	e000e014 	.word	0xe000e014

0800d454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d454:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d464 <vPortEnableVFP+0x10>
 800d458:	6801      	ldr	r1, [r0, #0]
 800d45a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d45e:	6001      	str	r1, [r0, #0]
 800d460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d462:	bf00      	nop
 800d464:	e000ed88 	.word	0xe000ed88

0800d468 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d468:	b480      	push	{r7}
 800d46a:	b085      	sub	sp, #20
 800d46c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d46e:	f3ef 8305 	mrs	r3, IPSR
 800d472:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	2b0f      	cmp	r3, #15
 800d478:	d915      	bls.n	800d4a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d47a:	4a18      	ldr	r2, [pc, #96]	@ (800d4dc <vPortValidateInterruptPriority+0x74>)
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	4413      	add	r3, r2
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d484:	4b16      	ldr	r3, [pc, #88]	@ (800d4e0 <vPortValidateInterruptPriority+0x78>)
 800d486:	781b      	ldrb	r3, [r3, #0]
 800d488:	7afa      	ldrb	r2, [r7, #11]
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d20b      	bcs.n	800d4a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d492:	f383 8811 	msr	BASEPRI, r3
 800d496:	f3bf 8f6f 	isb	sy
 800d49a:	f3bf 8f4f 	dsb	sy
 800d49e:	607b      	str	r3, [r7, #4]
}
 800d4a0:	bf00      	nop
 800d4a2:	bf00      	nop
 800d4a4:	e7fd      	b.n	800d4a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d4a6:	4b0f      	ldr	r3, [pc, #60]	@ (800d4e4 <vPortValidateInterruptPriority+0x7c>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d4ae:	4b0e      	ldr	r3, [pc, #56]	@ (800d4e8 <vPortValidateInterruptPriority+0x80>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d90b      	bls.n	800d4ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4ba:	f383 8811 	msr	BASEPRI, r3
 800d4be:	f3bf 8f6f 	isb	sy
 800d4c2:	f3bf 8f4f 	dsb	sy
 800d4c6:	603b      	str	r3, [r7, #0]
}
 800d4c8:	bf00      	nop
 800d4ca:	bf00      	nop
 800d4cc:	e7fd      	b.n	800d4ca <vPortValidateInterruptPriority+0x62>
	}
 800d4ce:	bf00      	nop
 800d4d0:	3714      	adds	r7, #20
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d8:	4770      	bx	lr
 800d4da:	bf00      	nop
 800d4dc:	e000e3f0 	.word	0xe000e3f0
 800d4e0:	24001014 	.word	0x24001014
 800d4e4:	e000ed0c 	.word	0xe000ed0c
 800d4e8:	24001018 	.word	0x24001018

0800d4ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b08a      	sub	sp, #40	@ 0x28
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d4f8:	f7fe fd74 	bl	800bfe4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d4fc:	4b5c      	ldr	r3, [pc, #368]	@ (800d670 <pvPortMalloc+0x184>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d101      	bne.n	800d508 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d504:	f000 f924 	bl	800d750 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d508:	4b5a      	ldr	r3, [pc, #360]	@ (800d674 <pvPortMalloc+0x188>)
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	4013      	ands	r3, r2
 800d510:	2b00      	cmp	r3, #0
 800d512:	f040 8095 	bne.w	800d640 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d01e      	beq.n	800d55a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d51c:	2208      	movs	r2, #8
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	4413      	add	r3, r2
 800d522:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f003 0307 	and.w	r3, r3, #7
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d015      	beq.n	800d55a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f023 0307 	bic.w	r3, r3, #7
 800d534:	3308      	adds	r3, #8
 800d536:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f003 0307 	and.w	r3, r3, #7
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d00b      	beq.n	800d55a <pvPortMalloc+0x6e>
	__asm volatile
 800d542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d546:	f383 8811 	msr	BASEPRI, r3
 800d54a:	f3bf 8f6f 	isb	sy
 800d54e:	f3bf 8f4f 	dsb	sy
 800d552:	617b      	str	r3, [r7, #20]
}
 800d554:	bf00      	nop
 800d556:	bf00      	nop
 800d558:	e7fd      	b.n	800d556 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d06f      	beq.n	800d640 <pvPortMalloc+0x154>
 800d560:	4b45      	ldr	r3, [pc, #276]	@ (800d678 <pvPortMalloc+0x18c>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	687a      	ldr	r2, [r7, #4]
 800d566:	429a      	cmp	r2, r3
 800d568:	d86a      	bhi.n	800d640 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d56a:	4b44      	ldr	r3, [pc, #272]	@ (800d67c <pvPortMalloc+0x190>)
 800d56c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d56e:	4b43      	ldr	r3, [pc, #268]	@ (800d67c <pvPortMalloc+0x190>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d574:	e004      	b.n	800d580 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d578:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d582:	685b      	ldr	r3, [r3, #4]
 800d584:	687a      	ldr	r2, [r7, #4]
 800d586:	429a      	cmp	r2, r3
 800d588:	d903      	bls.n	800d592 <pvPortMalloc+0xa6>
 800d58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d1f1      	bne.n	800d576 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d592:	4b37      	ldr	r3, [pc, #220]	@ (800d670 <pvPortMalloc+0x184>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d598:	429a      	cmp	r2, r3
 800d59a:	d051      	beq.n	800d640 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d59c:	6a3b      	ldr	r3, [r7, #32]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	2208      	movs	r2, #8
 800d5a2:	4413      	add	r3, r2
 800d5a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a8:	681a      	ldr	r2, [r3, #0]
 800d5aa:	6a3b      	ldr	r3, [r7, #32]
 800d5ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b0:	685a      	ldr	r2, [r3, #4]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	1ad2      	subs	r2, r2, r3
 800d5b6:	2308      	movs	r3, #8
 800d5b8:	005b      	lsls	r3, r3, #1
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d920      	bls.n	800d600 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d5be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	4413      	add	r3, r2
 800d5c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5c6:	69bb      	ldr	r3, [r7, #24]
 800d5c8:	f003 0307 	and.w	r3, r3, #7
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d00b      	beq.n	800d5e8 <pvPortMalloc+0xfc>
	__asm volatile
 800d5d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5d4:	f383 8811 	msr	BASEPRI, r3
 800d5d8:	f3bf 8f6f 	isb	sy
 800d5dc:	f3bf 8f4f 	dsb	sy
 800d5e0:	613b      	str	r3, [r7, #16]
}
 800d5e2:	bf00      	nop
 800d5e4:	bf00      	nop
 800d5e6:	e7fd      	b.n	800d5e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ea:	685a      	ldr	r2, [r3, #4]
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	1ad2      	subs	r2, r2, r3
 800d5f0:	69bb      	ldr	r3, [r7, #24]
 800d5f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f6:	687a      	ldr	r2, [r7, #4]
 800d5f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d5fa:	69b8      	ldr	r0, [r7, #24]
 800d5fc:	f000 f90a 	bl	800d814 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d600:	4b1d      	ldr	r3, [pc, #116]	@ (800d678 <pvPortMalloc+0x18c>)
 800d602:	681a      	ldr	r2, [r3, #0]
 800d604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d606:	685b      	ldr	r3, [r3, #4]
 800d608:	1ad3      	subs	r3, r2, r3
 800d60a:	4a1b      	ldr	r2, [pc, #108]	@ (800d678 <pvPortMalloc+0x18c>)
 800d60c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d60e:	4b1a      	ldr	r3, [pc, #104]	@ (800d678 <pvPortMalloc+0x18c>)
 800d610:	681a      	ldr	r2, [r3, #0]
 800d612:	4b1b      	ldr	r3, [pc, #108]	@ (800d680 <pvPortMalloc+0x194>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	429a      	cmp	r2, r3
 800d618:	d203      	bcs.n	800d622 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d61a:	4b17      	ldr	r3, [pc, #92]	@ (800d678 <pvPortMalloc+0x18c>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	4a18      	ldr	r2, [pc, #96]	@ (800d680 <pvPortMalloc+0x194>)
 800d620:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d624:	685a      	ldr	r2, [r3, #4]
 800d626:	4b13      	ldr	r3, [pc, #76]	@ (800d674 <pvPortMalloc+0x188>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	431a      	orrs	r2, r3
 800d62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d62e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d632:	2200      	movs	r2, #0
 800d634:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d636:	4b13      	ldr	r3, [pc, #76]	@ (800d684 <pvPortMalloc+0x198>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	3301      	adds	r3, #1
 800d63c:	4a11      	ldr	r2, [pc, #68]	@ (800d684 <pvPortMalloc+0x198>)
 800d63e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d640:	f7fe fcde 	bl	800c000 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d644:	69fb      	ldr	r3, [r7, #28]
 800d646:	f003 0307 	and.w	r3, r3, #7
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d00b      	beq.n	800d666 <pvPortMalloc+0x17a>
	__asm volatile
 800d64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d652:	f383 8811 	msr	BASEPRI, r3
 800d656:	f3bf 8f6f 	isb	sy
 800d65a:	f3bf 8f4f 	dsb	sy
 800d65e:	60fb      	str	r3, [r7, #12]
}
 800d660:	bf00      	nop
 800d662:	bf00      	nop
 800d664:	e7fd      	b.n	800d662 <pvPortMalloc+0x176>
	return pvReturn;
 800d666:	69fb      	ldr	r3, [r7, #28]
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3728      	adds	r7, #40	@ 0x28
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}
 800d670:	24004c24 	.word	0x24004c24
 800d674:	24004c38 	.word	0x24004c38
 800d678:	24004c28 	.word	0x24004c28
 800d67c:	24004c1c 	.word	0x24004c1c
 800d680:	24004c2c 	.word	0x24004c2c
 800d684:	24004c30 	.word	0x24004c30

0800d688 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b086      	sub	sp, #24
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d04f      	beq.n	800d73a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d69a:	2308      	movs	r3, #8
 800d69c:	425b      	negs	r3, r3
 800d69e:	697a      	ldr	r2, [r7, #20]
 800d6a0:	4413      	add	r3, r2
 800d6a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	685a      	ldr	r2, [r3, #4]
 800d6ac:	4b25      	ldr	r3, [pc, #148]	@ (800d744 <vPortFree+0xbc>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4013      	ands	r3, r2
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d10b      	bne.n	800d6ce <vPortFree+0x46>
	__asm volatile
 800d6b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6ba:	f383 8811 	msr	BASEPRI, r3
 800d6be:	f3bf 8f6f 	isb	sy
 800d6c2:	f3bf 8f4f 	dsb	sy
 800d6c6:	60fb      	str	r3, [r7, #12]
}
 800d6c8:	bf00      	nop
 800d6ca:	bf00      	nop
 800d6cc:	e7fd      	b.n	800d6ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d00b      	beq.n	800d6ee <vPortFree+0x66>
	__asm volatile
 800d6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6da:	f383 8811 	msr	BASEPRI, r3
 800d6de:	f3bf 8f6f 	isb	sy
 800d6e2:	f3bf 8f4f 	dsb	sy
 800d6e6:	60bb      	str	r3, [r7, #8]
}
 800d6e8:	bf00      	nop
 800d6ea:	bf00      	nop
 800d6ec:	e7fd      	b.n	800d6ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	685a      	ldr	r2, [r3, #4]
 800d6f2:	4b14      	ldr	r3, [pc, #80]	@ (800d744 <vPortFree+0xbc>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4013      	ands	r3, r2
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d01e      	beq.n	800d73a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d6fc:	693b      	ldr	r3, [r7, #16]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d11a      	bne.n	800d73a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	685a      	ldr	r2, [r3, #4]
 800d708:	4b0e      	ldr	r3, [pc, #56]	@ (800d744 <vPortFree+0xbc>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	43db      	mvns	r3, r3
 800d70e:	401a      	ands	r2, r3
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d714:	f7fe fc66 	bl	800bfe4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	685a      	ldr	r2, [r3, #4]
 800d71c:	4b0a      	ldr	r3, [pc, #40]	@ (800d748 <vPortFree+0xc0>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4413      	add	r3, r2
 800d722:	4a09      	ldr	r2, [pc, #36]	@ (800d748 <vPortFree+0xc0>)
 800d724:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d726:	6938      	ldr	r0, [r7, #16]
 800d728:	f000 f874 	bl	800d814 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d72c:	4b07      	ldr	r3, [pc, #28]	@ (800d74c <vPortFree+0xc4>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	3301      	adds	r3, #1
 800d732:	4a06      	ldr	r2, [pc, #24]	@ (800d74c <vPortFree+0xc4>)
 800d734:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d736:	f7fe fc63 	bl	800c000 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d73a:	bf00      	nop
 800d73c:	3718      	adds	r7, #24
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop
 800d744:	24004c38 	.word	0x24004c38
 800d748:	24004c28 	.word	0x24004c28
 800d74c:	24004c34 	.word	0x24004c34

0800d750 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d750:	b480      	push	{r7}
 800d752:	b085      	sub	sp, #20
 800d754:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d756:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d75a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d75c:	4b27      	ldr	r3, [pc, #156]	@ (800d7fc <prvHeapInit+0xac>)
 800d75e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f003 0307 	and.w	r3, r3, #7
 800d766:	2b00      	cmp	r3, #0
 800d768:	d00c      	beq.n	800d784 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	3307      	adds	r3, #7
 800d76e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f023 0307 	bic.w	r3, r3, #7
 800d776:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d778:	68ba      	ldr	r2, [r7, #8]
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	1ad3      	subs	r3, r2, r3
 800d77e:	4a1f      	ldr	r2, [pc, #124]	@ (800d7fc <prvHeapInit+0xac>)
 800d780:	4413      	add	r3, r2
 800d782:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d788:	4a1d      	ldr	r2, [pc, #116]	@ (800d800 <prvHeapInit+0xb0>)
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d78e:	4b1c      	ldr	r3, [pc, #112]	@ (800d800 <prvHeapInit+0xb0>)
 800d790:	2200      	movs	r2, #0
 800d792:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	68ba      	ldr	r2, [r7, #8]
 800d798:	4413      	add	r3, r2
 800d79a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d79c:	2208      	movs	r2, #8
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	1a9b      	subs	r3, r3, r2
 800d7a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f023 0307 	bic.w	r3, r3, #7
 800d7aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	4a15      	ldr	r2, [pc, #84]	@ (800d804 <prvHeapInit+0xb4>)
 800d7b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d7b2:	4b14      	ldr	r3, [pc, #80]	@ (800d804 <prvHeapInit+0xb4>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d7ba:	4b12      	ldr	r3, [pc, #72]	@ (800d804 <prvHeapInit+0xb4>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	68fa      	ldr	r2, [r7, #12]
 800d7ca:	1ad2      	subs	r2, r2, r3
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d7d0:	4b0c      	ldr	r3, [pc, #48]	@ (800d804 <prvHeapInit+0xb4>)
 800d7d2:	681a      	ldr	r2, [r3, #0]
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	685b      	ldr	r3, [r3, #4]
 800d7dc:	4a0a      	ldr	r2, [pc, #40]	@ (800d808 <prvHeapInit+0xb8>)
 800d7de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	685b      	ldr	r3, [r3, #4]
 800d7e4:	4a09      	ldr	r2, [pc, #36]	@ (800d80c <prvHeapInit+0xbc>)
 800d7e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d7e8:	4b09      	ldr	r3, [pc, #36]	@ (800d810 <prvHeapInit+0xc0>)
 800d7ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d7ee:	601a      	str	r2, [r3, #0]
}
 800d7f0:	bf00      	nop
 800d7f2:	3714      	adds	r7, #20
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr
 800d7fc:	2400101c 	.word	0x2400101c
 800d800:	24004c1c 	.word	0x24004c1c
 800d804:	24004c24 	.word	0x24004c24
 800d808:	24004c2c 	.word	0x24004c2c
 800d80c:	24004c28 	.word	0x24004c28
 800d810:	24004c38 	.word	0x24004c38

0800d814 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d814:	b480      	push	{r7}
 800d816:	b085      	sub	sp, #20
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d81c:	4b28      	ldr	r3, [pc, #160]	@ (800d8c0 <prvInsertBlockIntoFreeList+0xac>)
 800d81e:	60fb      	str	r3, [r7, #12]
 800d820:	e002      	b.n	800d828 <prvInsertBlockIntoFreeList+0x14>
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	60fb      	str	r3, [r7, #12]
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	687a      	ldr	r2, [r7, #4]
 800d82e:	429a      	cmp	r2, r3
 800d830:	d8f7      	bhi.n	800d822 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	685b      	ldr	r3, [r3, #4]
 800d83a:	68ba      	ldr	r2, [r7, #8]
 800d83c:	4413      	add	r3, r2
 800d83e:	687a      	ldr	r2, [r7, #4]
 800d840:	429a      	cmp	r2, r3
 800d842:	d108      	bne.n	800d856 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	685a      	ldr	r2, [r3, #4]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	685b      	ldr	r3, [r3, #4]
 800d84c:	441a      	add	r2, r3
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	685b      	ldr	r3, [r3, #4]
 800d85e:	68ba      	ldr	r2, [r7, #8]
 800d860:	441a      	add	r2, r3
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	429a      	cmp	r2, r3
 800d868:	d118      	bne.n	800d89c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681a      	ldr	r2, [r3, #0]
 800d86e:	4b15      	ldr	r3, [pc, #84]	@ (800d8c4 <prvInsertBlockIntoFreeList+0xb0>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	429a      	cmp	r2, r3
 800d874:	d00d      	beq.n	800d892 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	685a      	ldr	r2, [r3, #4]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	685b      	ldr	r3, [r3, #4]
 800d880:	441a      	add	r2, r3
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	681a      	ldr	r2, [r3, #0]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	601a      	str	r2, [r3, #0]
 800d890:	e008      	b.n	800d8a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d892:	4b0c      	ldr	r3, [pc, #48]	@ (800d8c4 <prvInsertBlockIntoFreeList+0xb0>)
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	601a      	str	r2, [r3, #0]
 800d89a:	e003      	b.n	800d8a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d8a4:	68fa      	ldr	r2, [r7, #12]
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d002      	beq.n	800d8b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	687a      	ldr	r2, [r7, #4]
 800d8b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8b2:	bf00      	nop
 800d8b4:	3714      	adds	r7, #20
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr
 800d8be:	bf00      	nop
 800d8c0:	24004c1c 	.word	0x24004c1c
 800d8c4:	24004c24 	.word	0x24004c24

0800d8c8 <std>:
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	b510      	push	{r4, lr}
 800d8cc:	4604      	mov	r4, r0
 800d8ce:	e9c0 3300 	strd	r3, r3, [r0]
 800d8d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d8d6:	6083      	str	r3, [r0, #8]
 800d8d8:	8181      	strh	r1, [r0, #12]
 800d8da:	6643      	str	r3, [r0, #100]	@ 0x64
 800d8dc:	81c2      	strh	r2, [r0, #14]
 800d8de:	6183      	str	r3, [r0, #24]
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	2208      	movs	r2, #8
 800d8e4:	305c      	adds	r0, #92	@ 0x5c
 800d8e6:	f000 f906 	bl	800daf6 <memset>
 800d8ea:	4b0d      	ldr	r3, [pc, #52]	@ (800d920 <std+0x58>)
 800d8ec:	6263      	str	r3, [r4, #36]	@ 0x24
 800d8ee:	4b0d      	ldr	r3, [pc, #52]	@ (800d924 <std+0x5c>)
 800d8f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d8f2:	4b0d      	ldr	r3, [pc, #52]	@ (800d928 <std+0x60>)
 800d8f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d8f6:	4b0d      	ldr	r3, [pc, #52]	@ (800d92c <std+0x64>)
 800d8f8:	6323      	str	r3, [r4, #48]	@ 0x30
 800d8fa:	4b0d      	ldr	r3, [pc, #52]	@ (800d930 <std+0x68>)
 800d8fc:	6224      	str	r4, [r4, #32]
 800d8fe:	429c      	cmp	r4, r3
 800d900:	d006      	beq.n	800d910 <std+0x48>
 800d902:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d906:	4294      	cmp	r4, r2
 800d908:	d002      	beq.n	800d910 <std+0x48>
 800d90a:	33d0      	adds	r3, #208	@ 0xd0
 800d90c:	429c      	cmp	r4, r3
 800d90e:	d105      	bne.n	800d91c <std+0x54>
 800d910:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d918:	f000 b9c4 	b.w	800dca4 <__retarget_lock_init_recursive>
 800d91c:	bd10      	pop	{r4, pc}
 800d91e:	bf00      	nop
 800d920:	0800da71 	.word	0x0800da71
 800d924:	0800da93 	.word	0x0800da93
 800d928:	0800dacb 	.word	0x0800dacb
 800d92c:	0800daef 	.word	0x0800daef
 800d930:	24004c3c 	.word	0x24004c3c

0800d934 <stdio_exit_handler>:
 800d934:	4a02      	ldr	r2, [pc, #8]	@ (800d940 <stdio_exit_handler+0xc>)
 800d936:	4903      	ldr	r1, [pc, #12]	@ (800d944 <stdio_exit_handler+0x10>)
 800d938:	4803      	ldr	r0, [pc, #12]	@ (800d948 <stdio_exit_handler+0x14>)
 800d93a:	f000 b869 	b.w	800da10 <_fwalk_sglue>
 800d93e:	bf00      	nop
 800d940:	24000028 	.word	0x24000028
 800d944:	0800e55d 	.word	0x0800e55d
 800d948:	24000038 	.word	0x24000038

0800d94c <cleanup_stdio>:
 800d94c:	6841      	ldr	r1, [r0, #4]
 800d94e:	4b0c      	ldr	r3, [pc, #48]	@ (800d980 <cleanup_stdio+0x34>)
 800d950:	4299      	cmp	r1, r3
 800d952:	b510      	push	{r4, lr}
 800d954:	4604      	mov	r4, r0
 800d956:	d001      	beq.n	800d95c <cleanup_stdio+0x10>
 800d958:	f000 fe00 	bl	800e55c <_fflush_r>
 800d95c:	68a1      	ldr	r1, [r4, #8]
 800d95e:	4b09      	ldr	r3, [pc, #36]	@ (800d984 <cleanup_stdio+0x38>)
 800d960:	4299      	cmp	r1, r3
 800d962:	d002      	beq.n	800d96a <cleanup_stdio+0x1e>
 800d964:	4620      	mov	r0, r4
 800d966:	f000 fdf9 	bl	800e55c <_fflush_r>
 800d96a:	68e1      	ldr	r1, [r4, #12]
 800d96c:	4b06      	ldr	r3, [pc, #24]	@ (800d988 <cleanup_stdio+0x3c>)
 800d96e:	4299      	cmp	r1, r3
 800d970:	d004      	beq.n	800d97c <cleanup_stdio+0x30>
 800d972:	4620      	mov	r0, r4
 800d974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d978:	f000 bdf0 	b.w	800e55c <_fflush_r>
 800d97c:	bd10      	pop	{r4, pc}
 800d97e:	bf00      	nop
 800d980:	24004c3c 	.word	0x24004c3c
 800d984:	24004ca4 	.word	0x24004ca4
 800d988:	24004d0c 	.word	0x24004d0c

0800d98c <global_stdio_init.part.0>:
 800d98c:	b510      	push	{r4, lr}
 800d98e:	4b0b      	ldr	r3, [pc, #44]	@ (800d9bc <global_stdio_init.part.0+0x30>)
 800d990:	4c0b      	ldr	r4, [pc, #44]	@ (800d9c0 <global_stdio_init.part.0+0x34>)
 800d992:	4a0c      	ldr	r2, [pc, #48]	@ (800d9c4 <global_stdio_init.part.0+0x38>)
 800d994:	601a      	str	r2, [r3, #0]
 800d996:	4620      	mov	r0, r4
 800d998:	2200      	movs	r2, #0
 800d99a:	2104      	movs	r1, #4
 800d99c:	f7ff ff94 	bl	800d8c8 <std>
 800d9a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	2109      	movs	r1, #9
 800d9a8:	f7ff ff8e 	bl	800d8c8 <std>
 800d9ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d9b0:	2202      	movs	r2, #2
 800d9b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9b6:	2112      	movs	r1, #18
 800d9b8:	f7ff bf86 	b.w	800d8c8 <std>
 800d9bc:	24004d74 	.word	0x24004d74
 800d9c0:	24004c3c 	.word	0x24004c3c
 800d9c4:	0800d935 	.word	0x0800d935

0800d9c8 <__sfp_lock_acquire>:
 800d9c8:	4801      	ldr	r0, [pc, #4]	@ (800d9d0 <__sfp_lock_acquire+0x8>)
 800d9ca:	f000 b96c 	b.w	800dca6 <__retarget_lock_acquire_recursive>
 800d9ce:	bf00      	nop
 800d9d0:	24004d7d 	.word	0x24004d7d

0800d9d4 <__sfp_lock_release>:
 800d9d4:	4801      	ldr	r0, [pc, #4]	@ (800d9dc <__sfp_lock_release+0x8>)
 800d9d6:	f000 b967 	b.w	800dca8 <__retarget_lock_release_recursive>
 800d9da:	bf00      	nop
 800d9dc:	24004d7d 	.word	0x24004d7d

0800d9e0 <__sinit>:
 800d9e0:	b510      	push	{r4, lr}
 800d9e2:	4604      	mov	r4, r0
 800d9e4:	f7ff fff0 	bl	800d9c8 <__sfp_lock_acquire>
 800d9e8:	6a23      	ldr	r3, [r4, #32]
 800d9ea:	b11b      	cbz	r3, 800d9f4 <__sinit+0x14>
 800d9ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9f0:	f7ff bff0 	b.w	800d9d4 <__sfp_lock_release>
 800d9f4:	4b04      	ldr	r3, [pc, #16]	@ (800da08 <__sinit+0x28>)
 800d9f6:	6223      	str	r3, [r4, #32]
 800d9f8:	4b04      	ldr	r3, [pc, #16]	@ (800da0c <__sinit+0x2c>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d1f5      	bne.n	800d9ec <__sinit+0xc>
 800da00:	f7ff ffc4 	bl	800d98c <global_stdio_init.part.0>
 800da04:	e7f2      	b.n	800d9ec <__sinit+0xc>
 800da06:	bf00      	nop
 800da08:	0800d94d 	.word	0x0800d94d
 800da0c:	24004d74 	.word	0x24004d74

0800da10 <_fwalk_sglue>:
 800da10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da14:	4607      	mov	r7, r0
 800da16:	4688      	mov	r8, r1
 800da18:	4614      	mov	r4, r2
 800da1a:	2600      	movs	r6, #0
 800da1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800da20:	f1b9 0901 	subs.w	r9, r9, #1
 800da24:	d505      	bpl.n	800da32 <_fwalk_sglue+0x22>
 800da26:	6824      	ldr	r4, [r4, #0]
 800da28:	2c00      	cmp	r4, #0
 800da2a:	d1f7      	bne.n	800da1c <_fwalk_sglue+0xc>
 800da2c:	4630      	mov	r0, r6
 800da2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da32:	89ab      	ldrh	r3, [r5, #12]
 800da34:	2b01      	cmp	r3, #1
 800da36:	d907      	bls.n	800da48 <_fwalk_sglue+0x38>
 800da38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800da3c:	3301      	adds	r3, #1
 800da3e:	d003      	beq.n	800da48 <_fwalk_sglue+0x38>
 800da40:	4629      	mov	r1, r5
 800da42:	4638      	mov	r0, r7
 800da44:	47c0      	blx	r8
 800da46:	4306      	orrs	r6, r0
 800da48:	3568      	adds	r5, #104	@ 0x68
 800da4a:	e7e9      	b.n	800da20 <_fwalk_sglue+0x10>

0800da4c <iprintf>:
 800da4c:	b40f      	push	{r0, r1, r2, r3}
 800da4e:	b507      	push	{r0, r1, r2, lr}
 800da50:	4906      	ldr	r1, [pc, #24]	@ (800da6c <iprintf+0x20>)
 800da52:	ab04      	add	r3, sp, #16
 800da54:	6808      	ldr	r0, [r1, #0]
 800da56:	f853 2b04 	ldr.w	r2, [r3], #4
 800da5a:	6881      	ldr	r1, [r0, #8]
 800da5c:	9301      	str	r3, [sp, #4]
 800da5e:	f000 fa55 	bl	800df0c <_vfiprintf_r>
 800da62:	b003      	add	sp, #12
 800da64:	f85d eb04 	ldr.w	lr, [sp], #4
 800da68:	b004      	add	sp, #16
 800da6a:	4770      	bx	lr
 800da6c:	24000034 	.word	0x24000034

0800da70 <__sread>:
 800da70:	b510      	push	{r4, lr}
 800da72:	460c      	mov	r4, r1
 800da74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da78:	f000 f8c6 	bl	800dc08 <_read_r>
 800da7c:	2800      	cmp	r0, #0
 800da7e:	bfab      	itete	ge
 800da80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800da82:	89a3      	ldrhlt	r3, [r4, #12]
 800da84:	181b      	addge	r3, r3, r0
 800da86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800da8a:	bfac      	ite	ge
 800da8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800da8e:	81a3      	strhlt	r3, [r4, #12]
 800da90:	bd10      	pop	{r4, pc}

0800da92 <__swrite>:
 800da92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da96:	461f      	mov	r7, r3
 800da98:	898b      	ldrh	r3, [r1, #12]
 800da9a:	05db      	lsls	r3, r3, #23
 800da9c:	4605      	mov	r5, r0
 800da9e:	460c      	mov	r4, r1
 800daa0:	4616      	mov	r6, r2
 800daa2:	d505      	bpl.n	800dab0 <__swrite+0x1e>
 800daa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daa8:	2302      	movs	r3, #2
 800daaa:	2200      	movs	r2, #0
 800daac:	f000 f89a 	bl	800dbe4 <_lseek_r>
 800dab0:	89a3      	ldrh	r3, [r4, #12]
 800dab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dab6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800daba:	81a3      	strh	r3, [r4, #12]
 800dabc:	4632      	mov	r2, r6
 800dabe:	463b      	mov	r3, r7
 800dac0:	4628      	mov	r0, r5
 800dac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dac6:	f000 b8b1 	b.w	800dc2c <_write_r>

0800daca <__sseek>:
 800daca:	b510      	push	{r4, lr}
 800dacc:	460c      	mov	r4, r1
 800dace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dad2:	f000 f887 	bl	800dbe4 <_lseek_r>
 800dad6:	1c43      	adds	r3, r0, #1
 800dad8:	89a3      	ldrh	r3, [r4, #12]
 800dada:	bf15      	itete	ne
 800dadc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dade:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dae2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dae6:	81a3      	strheq	r3, [r4, #12]
 800dae8:	bf18      	it	ne
 800daea:	81a3      	strhne	r3, [r4, #12]
 800daec:	bd10      	pop	{r4, pc}

0800daee <__sclose>:
 800daee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daf2:	f000 b809 	b.w	800db08 <_close_r>

0800daf6 <memset>:
 800daf6:	4402      	add	r2, r0
 800daf8:	4603      	mov	r3, r0
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d100      	bne.n	800db00 <memset+0xa>
 800dafe:	4770      	bx	lr
 800db00:	f803 1b01 	strb.w	r1, [r3], #1
 800db04:	e7f9      	b.n	800dafa <memset+0x4>
	...

0800db08 <_close_r>:
 800db08:	b538      	push	{r3, r4, r5, lr}
 800db0a:	4d06      	ldr	r5, [pc, #24]	@ (800db24 <_close_r+0x1c>)
 800db0c:	2300      	movs	r3, #0
 800db0e:	4604      	mov	r4, r0
 800db10:	4608      	mov	r0, r1
 800db12:	602b      	str	r3, [r5, #0]
 800db14:	f7f6 f99b 	bl	8003e4e <_close>
 800db18:	1c43      	adds	r3, r0, #1
 800db1a:	d102      	bne.n	800db22 <_close_r+0x1a>
 800db1c:	682b      	ldr	r3, [r5, #0]
 800db1e:	b103      	cbz	r3, 800db22 <_close_r+0x1a>
 800db20:	6023      	str	r3, [r4, #0]
 800db22:	bd38      	pop	{r3, r4, r5, pc}
 800db24:	24004d78 	.word	0x24004d78

0800db28 <_reclaim_reent>:
 800db28:	4b2d      	ldr	r3, [pc, #180]	@ (800dbe0 <_reclaim_reent+0xb8>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	4283      	cmp	r3, r0
 800db2e:	b570      	push	{r4, r5, r6, lr}
 800db30:	4604      	mov	r4, r0
 800db32:	d053      	beq.n	800dbdc <_reclaim_reent+0xb4>
 800db34:	69c3      	ldr	r3, [r0, #28]
 800db36:	b31b      	cbz	r3, 800db80 <_reclaim_reent+0x58>
 800db38:	68db      	ldr	r3, [r3, #12]
 800db3a:	b163      	cbz	r3, 800db56 <_reclaim_reent+0x2e>
 800db3c:	2500      	movs	r5, #0
 800db3e:	69e3      	ldr	r3, [r4, #28]
 800db40:	68db      	ldr	r3, [r3, #12]
 800db42:	5959      	ldr	r1, [r3, r5]
 800db44:	b9b1      	cbnz	r1, 800db74 <_reclaim_reent+0x4c>
 800db46:	3504      	adds	r5, #4
 800db48:	2d80      	cmp	r5, #128	@ 0x80
 800db4a:	d1f8      	bne.n	800db3e <_reclaim_reent+0x16>
 800db4c:	69e3      	ldr	r3, [r4, #28]
 800db4e:	4620      	mov	r0, r4
 800db50:	68d9      	ldr	r1, [r3, #12]
 800db52:	f000 f8b9 	bl	800dcc8 <_free_r>
 800db56:	69e3      	ldr	r3, [r4, #28]
 800db58:	6819      	ldr	r1, [r3, #0]
 800db5a:	b111      	cbz	r1, 800db62 <_reclaim_reent+0x3a>
 800db5c:	4620      	mov	r0, r4
 800db5e:	f000 f8b3 	bl	800dcc8 <_free_r>
 800db62:	69e3      	ldr	r3, [r4, #28]
 800db64:	689d      	ldr	r5, [r3, #8]
 800db66:	b15d      	cbz	r5, 800db80 <_reclaim_reent+0x58>
 800db68:	4629      	mov	r1, r5
 800db6a:	4620      	mov	r0, r4
 800db6c:	682d      	ldr	r5, [r5, #0]
 800db6e:	f000 f8ab 	bl	800dcc8 <_free_r>
 800db72:	e7f8      	b.n	800db66 <_reclaim_reent+0x3e>
 800db74:	680e      	ldr	r6, [r1, #0]
 800db76:	4620      	mov	r0, r4
 800db78:	f000 f8a6 	bl	800dcc8 <_free_r>
 800db7c:	4631      	mov	r1, r6
 800db7e:	e7e1      	b.n	800db44 <_reclaim_reent+0x1c>
 800db80:	6961      	ldr	r1, [r4, #20]
 800db82:	b111      	cbz	r1, 800db8a <_reclaim_reent+0x62>
 800db84:	4620      	mov	r0, r4
 800db86:	f000 f89f 	bl	800dcc8 <_free_r>
 800db8a:	69e1      	ldr	r1, [r4, #28]
 800db8c:	b111      	cbz	r1, 800db94 <_reclaim_reent+0x6c>
 800db8e:	4620      	mov	r0, r4
 800db90:	f000 f89a 	bl	800dcc8 <_free_r>
 800db94:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800db96:	b111      	cbz	r1, 800db9e <_reclaim_reent+0x76>
 800db98:	4620      	mov	r0, r4
 800db9a:	f000 f895 	bl	800dcc8 <_free_r>
 800db9e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dba0:	b111      	cbz	r1, 800dba8 <_reclaim_reent+0x80>
 800dba2:	4620      	mov	r0, r4
 800dba4:	f000 f890 	bl	800dcc8 <_free_r>
 800dba8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800dbaa:	b111      	cbz	r1, 800dbb2 <_reclaim_reent+0x8a>
 800dbac:	4620      	mov	r0, r4
 800dbae:	f000 f88b 	bl	800dcc8 <_free_r>
 800dbb2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800dbb4:	b111      	cbz	r1, 800dbbc <_reclaim_reent+0x94>
 800dbb6:	4620      	mov	r0, r4
 800dbb8:	f000 f886 	bl	800dcc8 <_free_r>
 800dbbc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800dbbe:	b111      	cbz	r1, 800dbc6 <_reclaim_reent+0x9e>
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	f000 f881 	bl	800dcc8 <_free_r>
 800dbc6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800dbc8:	b111      	cbz	r1, 800dbd0 <_reclaim_reent+0xa8>
 800dbca:	4620      	mov	r0, r4
 800dbcc:	f000 f87c 	bl	800dcc8 <_free_r>
 800dbd0:	6a23      	ldr	r3, [r4, #32]
 800dbd2:	b11b      	cbz	r3, 800dbdc <_reclaim_reent+0xb4>
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dbda:	4718      	bx	r3
 800dbdc:	bd70      	pop	{r4, r5, r6, pc}
 800dbde:	bf00      	nop
 800dbe0:	24000034 	.word	0x24000034

0800dbe4 <_lseek_r>:
 800dbe4:	b538      	push	{r3, r4, r5, lr}
 800dbe6:	4d07      	ldr	r5, [pc, #28]	@ (800dc04 <_lseek_r+0x20>)
 800dbe8:	4604      	mov	r4, r0
 800dbea:	4608      	mov	r0, r1
 800dbec:	4611      	mov	r1, r2
 800dbee:	2200      	movs	r2, #0
 800dbf0:	602a      	str	r2, [r5, #0]
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	f7f6 f952 	bl	8003e9c <_lseek>
 800dbf8:	1c43      	adds	r3, r0, #1
 800dbfa:	d102      	bne.n	800dc02 <_lseek_r+0x1e>
 800dbfc:	682b      	ldr	r3, [r5, #0]
 800dbfe:	b103      	cbz	r3, 800dc02 <_lseek_r+0x1e>
 800dc00:	6023      	str	r3, [r4, #0]
 800dc02:	bd38      	pop	{r3, r4, r5, pc}
 800dc04:	24004d78 	.word	0x24004d78

0800dc08 <_read_r>:
 800dc08:	b538      	push	{r3, r4, r5, lr}
 800dc0a:	4d07      	ldr	r5, [pc, #28]	@ (800dc28 <_read_r+0x20>)
 800dc0c:	4604      	mov	r4, r0
 800dc0e:	4608      	mov	r0, r1
 800dc10:	4611      	mov	r1, r2
 800dc12:	2200      	movs	r2, #0
 800dc14:	602a      	str	r2, [r5, #0]
 800dc16:	461a      	mov	r2, r3
 800dc18:	f7f6 f8e0 	bl	8003ddc <_read>
 800dc1c:	1c43      	adds	r3, r0, #1
 800dc1e:	d102      	bne.n	800dc26 <_read_r+0x1e>
 800dc20:	682b      	ldr	r3, [r5, #0]
 800dc22:	b103      	cbz	r3, 800dc26 <_read_r+0x1e>
 800dc24:	6023      	str	r3, [r4, #0]
 800dc26:	bd38      	pop	{r3, r4, r5, pc}
 800dc28:	24004d78 	.word	0x24004d78

0800dc2c <_write_r>:
 800dc2c:	b538      	push	{r3, r4, r5, lr}
 800dc2e:	4d07      	ldr	r5, [pc, #28]	@ (800dc4c <_write_r+0x20>)
 800dc30:	4604      	mov	r4, r0
 800dc32:	4608      	mov	r0, r1
 800dc34:	4611      	mov	r1, r2
 800dc36:	2200      	movs	r2, #0
 800dc38:	602a      	str	r2, [r5, #0]
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	f7f6 f8eb 	bl	8003e16 <_write>
 800dc40:	1c43      	adds	r3, r0, #1
 800dc42:	d102      	bne.n	800dc4a <_write_r+0x1e>
 800dc44:	682b      	ldr	r3, [r5, #0]
 800dc46:	b103      	cbz	r3, 800dc4a <_write_r+0x1e>
 800dc48:	6023      	str	r3, [r4, #0]
 800dc4a:	bd38      	pop	{r3, r4, r5, pc}
 800dc4c:	24004d78 	.word	0x24004d78

0800dc50 <__errno>:
 800dc50:	4b01      	ldr	r3, [pc, #4]	@ (800dc58 <__errno+0x8>)
 800dc52:	6818      	ldr	r0, [r3, #0]
 800dc54:	4770      	bx	lr
 800dc56:	bf00      	nop
 800dc58:	24000034 	.word	0x24000034

0800dc5c <__libc_init_array>:
 800dc5c:	b570      	push	{r4, r5, r6, lr}
 800dc5e:	4d0d      	ldr	r5, [pc, #52]	@ (800dc94 <__libc_init_array+0x38>)
 800dc60:	4c0d      	ldr	r4, [pc, #52]	@ (800dc98 <__libc_init_array+0x3c>)
 800dc62:	1b64      	subs	r4, r4, r5
 800dc64:	10a4      	asrs	r4, r4, #2
 800dc66:	2600      	movs	r6, #0
 800dc68:	42a6      	cmp	r6, r4
 800dc6a:	d109      	bne.n	800dc80 <__libc_init_array+0x24>
 800dc6c:	4d0b      	ldr	r5, [pc, #44]	@ (800dc9c <__libc_init_array+0x40>)
 800dc6e:	4c0c      	ldr	r4, [pc, #48]	@ (800dca0 <__libc_init_array+0x44>)
 800dc70:	f001 fd96 	bl	800f7a0 <_init>
 800dc74:	1b64      	subs	r4, r4, r5
 800dc76:	10a4      	asrs	r4, r4, #2
 800dc78:	2600      	movs	r6, #0
 800dc7a:	42a6      	cmp	r6, r4
 800dc7c:	d105      	bne.n	800dc8a <__libc_init_array+0x2e>
 800dc7e:	bd70      	pop	{r4, r5, r6, pc}
 800dc80:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc84:	4798      	blx	r3
 800dc86:	3601      	adds	r6, #1
 800dc88:	e7ee      	b.n	800dc68 <__libc_init_array+0xc>
 800dc8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc8e:	4798      	blx	r3
 800dc90:	3601      	adds	r6, #1
 800dc92:	e7f2      	b.n	800dc7a <__libc_init_array+0x1e>
 800dc94:	0800faa0 	.word	0x0800faa0
 800dc98:	0800faa0 	.word	0x0800faa0
 800dc9c:	0800faa0 	.word	0x0800faa0
 800dca0:	0800faa4 	.word	0x0800faa4

0800dca4 <__retarget_lock_init_recursive>:
 800dca4:	4770      	bx	lr

0800dca6 <__retarget_lock_acquire_recursive>:
 800dca6:	4770      	bx	lr

0800dca8 <__retarget_lock_release_recursive>:
 800dca8:	4770      	bx	lr

0800dcaa <memcpy>:
 800dcaa:	440a      	add	r2, r1
 800dcac:	4291      	cmp	r1, r2
 800dcae:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800dcb2:	d100      	bne.n	800dcb6 <memcpy+0xc>
 800dcb4:	4770      	bx	lr
 800dcb6:	b510      	push	{r4, lr}
 800dcb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dcc0:	4291      	cmp	r1, r2
 800dcc2:	d1f9      	bne.n	800dcb8 <memcpy+0xe>
 800dcc4:	bd10      	pop	{r4, pc}
	...

0800dcc8 <_free_r>:
 800dcc8:	b538      	push	{r3, r4, r5, lr}
 800dcca:	4605      	mov	r5, r0
 800dccc:	2900      	cmp	r1, #0
 800dcce:	d041      	beq.n	800dd54 <_free_r+0x8c>
 800dcd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcd4:	1f0c      	subs	r4, r1, #4
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	bfb8      	it	lt
 800dcda:	18e4      	addlt	r4, r4, r3
 800dcdc:	f000 f8e0 	bl	800dea0 <__malloc_lock>
 800dce0:	4a1d      	ldr	r2, [pc, #116]	@ (800dd58 <_free_r+0x90>)
 800dce2:	6813      	ldr	r3, [r2, #0]
 800dce4:	b933      	cbnz	r3, 800dcf4 <_free_r+0x2c>
 800dce6:	6063      	str	r3, [r4, #4]
 800dce8:	6014      	str	r4, [r2, #0]
 800dcea:	4628      	mov	r0, r5
 800dcec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcf0:	f000 b8dc 	b.w	800deac <__malloc_unlock>
 800dcf4:	42a3      	cmp	r3, r4
 800dcf6:	d908      	bls.n	800dd0a <_free_r+0x42>
 800dcf8:	6820      	ldr	r0, [r4, #0]
 800dcfa:	1821      	adds	r1, r4, r0
 800dcfc:	428b      	cmp	r3, r1
 800dcfe:	bf01      	itttt	eq
 800dd00:	6819      	ldreq	r1, [r3, #0]
 800dd02:	685b      	ldreq	r3, [r3, #4]
 800dd04:	1809      	addeq	r1, r1, r0
 800dd06:	6021      	streq	r1, [r4, #0]
 800dd08:	e7ed      	b.n	800dce6 <_free_r+0x1e>
 800dd0a:	461a      	mov	r2, r3
 800dd0c:	685b      	ldr	r3, [r3, #4]
 800dd0e:	b10b      	cbz	r3, 800dd14 <_free_r+0x4c>
 800dd10:	42a3      	cmp	r3, r4
 800dd12:	d9fa      	bls.n	800dd0a <_free_r+0x42>
 800dd14:	6811      	ldr	r1, [r2, #0]
 800dd16:	1850      	adds	r0, r2, r1
 800dd18:	42a0      	cmp	r0, r4
 800dd1a:	d10b      	bne.n	800dd34 <_free_r+0x6c>
 800dd1c:	6820      	ldr	r0, [r4, #0]
 800dd1e:	4401      	add	r1, r0
 800dd20:	1850      	adds	r0, r2, r1
 800dd22:	4283      	cmp	r3, r0
 800dd24:	6011      	str	r1, [r2, #0]
 800dd26:	d1e0      	bne.n	800dcea <_free_r+0x22>
 800dd28:	6818      	ldr	r0, [r3, #0]
 800dd2a:	685b      	ldr	r3, [r3, #4]
 800dd2c:	6053      	str	r3, [r2, #4]
 800dd2e:	4408      	add	r0, r1
 800dd30:	6010      	str	r0, [r2, #0]
 800dd32:	e7da      	b.n	800dcea <_free_r+0x22>
 800dd34:	d902      	bls.n	800dd3c <_free_r+0x74>
 800dd36:	230c      	movs	r3, #12
 800dd38:	602b      	str	r3, [r5, #0]
 800dd3a:	e7d6      	b.n	800dcea <_free_r+0x22>
 800dd3c:	6820      	ldr	r0, [r4, #0]
 800dd3e:	1821      	adds	r1, r4, r0
 800dd40:	428b      	cmp	r3, r1
 800dd42:	bf04      	itt	eq
 800dd44:	6819      	ldreq	r1, [r3, #0]
 800dd46:	685b      	ldreq	r3, [r3, #4]
 800dd48:	6063      	str	r3, [r4, #4]
 800dd4a:	bf04      	itt	eq
 800dd4c:	1809      	addeq	r1, r1, r0
 800dd4e:	6021      	streq	r1, [r4, #0]
 800dd50:	6054      	str	r4, [r2, #4]
 800dd52:	e7ca      	b.n	800dcea <_free_r+0x22>
 800dd54:	bd38      	pop	{r3, r4, r5, pc}
 800dd56:	bf00      	nop
 800dd58:	24004d84 	.word	0x24004d84

0800dd5c <sbrk_aligned>:
 800dd5c:	b570      	push	{r4, r5, r6, lr}
 800dd5e:	4e0f      	ldr	r6, [pc, #60]	@ (800dd9c <sbrk_aligned+0x40>)
 800dd60:	460c      	mov	r4, r1
 800dd62:	6831      	ldr	r1, [r6, #0]
 800dd64:	4605      	mov	r5, r0
 800dd66:	b911      	cbnz	r1, 800dd6e <sbrk_aligned+0x12>
 800dd68:	f000 fcb4 	bl	800e6d4 <_sbrk_r>
 800dd6c:	6030      	str	r0, [r6, #0]
 800dd6e:	4621      	mov	r1, r4
 800dd70:	4628      	mov	r0, r5
 800dd72:	f000 fcaf 	bl	800e6d4 <_sbrk_r>
 800dd76:	1c43      	adds	r3, r0, #1
 800dd78:	d103      	bne.n	800dd82 <sbrk_aligned+0x26>
 800dd7a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800dd7e:	4620      	mov	r0, r4
 800dd80:	bd70      	pop	{r4, r5, r6, pc}
 800dd82:	1cc4      	adds	r4, r0, #3
 800dd84:	f024 0403 	bic.w	r4, r4, #3
 800dd88:	42a0      	cmp	r0, r4
 800dd8a:	d0f8      	beq.n	800dd7e <sbrk_aligned+0x22>
 800dd8c:	1a21      	subs	r1, r4, r0
 800dd8e:	4628      	mov	r0, r5
 800dd90:	f000 fca0 	bl	800e6d4 <_sbrk_r>
 800dd94:	3001      	adds	r0, #1
 800dd96:	d1f2      	bne.n	800dd7e <sbrk_aligned+0x22>
 800dd98:	e7ef      	b.n	800dd7a <sbrk_aligned+0x1e>
 800dd9a:	bf00      	nop
 800dd9c:	24004d80 	.word	0x24004d80

0800dda0 <_malloc_r>:
 800dda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dda4:	1ccd      	adds	r5, r1, #3
 800dda6:	f025 0503 	bic.w	r5, r5, #3
 800ddaa:	3508      	adds	r5, #8
 800ddac:	2d0c      	cmp	r5, #12
 800ddae:	bf38      	it	cc
 800ddb0:	250c      	movcc	r5, #12
 800ddb2:	2d00      	cmp	r5, #0
 800ddb4:	4606      	mov	r6, r0
 800ddb6:	db01      	blt.n	800ddbc <_malloc_r+0x1c>
 800ddb8:	42a9      	cmp	r1, r5
 800ddba:	d904      	bls.n	800ddc6 <_malloc_r+0x26>
 800ddbc:	230c      	movs	r3, #12
 800ddbe:	6033      	str	r3, [r6, #0]
 800ddc0:	2000      	movs	r0, #0
 800ddc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800de9c <_malloc_r+0xfc>
 800ddca:	f000 f869 	bl	800dea0 <__malloc_lock>
 800ddce:	f8d8 3000 	ldr.w	r3, [r8]
 800ddd2:	461c      	mov	r4, r3
 800ddd4:	bb44      	cbnz	r4, 800de28 <_malloc_r+0x88>
 800ddd6:	4629      	mov	r1, r5
 800ddd8:	4630      	mov	r0, r6
 800ddda:	f7ff ffbf 	bl	800dd5c <sbrk_aligned>
 800ddde:	1c43      	adds	r3, r0, #1
 800dde0:	4604      	mov	r4, r0
 800dde2:	d158      	bne.n	800de96 <_malloc_r+0xf6>
 800dde4:	f8d8 4000 	ldr.w	r4, [r8]
 800dde8:	4627      	mov	r7, r4
 800ddea:	2f00      	cmp	r7, #0
 800ddec:	d143      	bne.n	800de76 <_malloc_r+0xd6>
 800ddee:	2c00      	cmp	r4, #0
 800ddf0:	d04b      	beq.n	800de8a <_malloc_r+0xea>
 800ddf2:	6823      	ldr	r3, [r4, #0]
 800ddf4:	4639      	mov	r1, r7
 800ddf6:	4630      	mov	r0, r6
 800ddf8:	eb04 0903 	add.w	r9, r4, r3
 800ddfc:	f000 fc6a 	bl	800e6d4 <_sbrk_r>
 800de00:	4581      	cmp	r9, r0
 800de02:	d142      	bne.n	800de8a <_malloc_r+0xea>
 800de04:	6821      	ldr	r1, [r4, #0]
 800de06:	1a6d      	subs	r5, r5, r1
 800de08:	4629      	mov	r1, r5
 800de0a:	4630      	mov	r0, r6
 800de0c:	f7ff ffa6 	bl	800dd5c <sbrk_aligned>
 800de10:	3001      	adds	r0, #1
 800de12:	d03a      	beq.n	800de8a <_malloc_r+0xea>
 800de14:	6823      	ldr	r3, [r4, #0]
 800de16:	442b      	add	r3, r5
 800de18:	6023      	str	r3, [r4, #0]
 800de1a:	f8d8 3000 	ldr.w	r3, [r8]
 800de1e:	685a      	ldr	r2, [r3, #4]
 800de20:	bb62      	cbnz	r2, 800de7c <_malloc_r+0xdc>
 800de22:	f8c8 7000 	str.w	r7, [r8]
 800de26:	e00f      	b.n	800de48 <_malloc_r+0xa8>
 800de28:	6822      	ldr	r2, [r4, #0]
 800de2a:	1b52      	subs	r2, r2, r5
 800de2c:	d420      	bmi.n	800de70 <_malloc_r+0xd0>
 800de2e:	2a0b      	cmp	r2, #11
 800de30:	d917      	bls.n	800de62 <_malloc_r+0xc2>
 800de32:	1961      	adds	r1, r4, r5
 800de34:	42a3      	cmp	r3, r4
 800de36:	6025      	str	r5, [r4, #0]
 800de38:	bf18      	it	ne
 800de3a:	6059      	strne	r1, [r3, #4]
 800de3c:	6863      	ldr	r3, [r4, #4]
 800de3e:	bf08      	it	eq
 800de40:	f8c8 1000 	streq.w	r1, [r8]
 800de44:	5162      	str	r2, [r4, r5]
 800de46:	604b      	str	r3, [r1, #4]
 800de48:	4630      	mov	r0, r6
 800de4a:	f000 f82f 	bl	800deac <__malloc_unlock>
 800de4e:	f104 000b 	add.w	r0, r4, #11
 800de52:	1d23      	adds	r3, r4, #4
 800de54:	f020 0007 	bic.w	r0, r0, #7
 800de58:	1ac2      	subs	r2, r0, r3
 800de5a:	bf1c      	itt	ne
 800de5c:	1a1b      	subne	r3, r3, r0
 800de5e:	50a3      	strne	r3, [r4, r2]
 800de60:	e7af      	b.n	800ddc2 <_malloc_r+0x22>
 800de62:	6862      	ldr	r2, [r4, #4]
 800de64:	42a3      	cmp	r3, r4
 800de66:	bf0c      	ite	eq
 800de68:	f8c8 2000 	streq.w	r2, [r8]
 800de6c:	605a      	strne	r2, [r3, #4]
 800de6e:	e7eb      	b.n	800de48 <_malloc_r+0xa8>
 800de70:	4623      	mov	r3, r4
 800de72:	6864      	ldr	r4, [r4, #4]
 800de74:	e7ae      	b.n	800ddd4 <_malloc_r+0x34>
 800de76:	463c      	mov	r4, r7
 800de78:	687f      	ldr	r7, [r7, #4]
 800de7a:	e7b6      	b.n	800ddea <_malloc_r+0x4a>
 800de7c:	461a      	mov	r2, r3
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	42a3      	cmp	r3, r4
 800de82:	d1fb      	bne.n	800de7c <_malloc_r+0xdc>
 800de84:	2300      	movs	r3, #0
 800de86:	6053      	str	r3, [r2, #4]
 800de88:	e7de      	b.n	800de48 <_malloc_r+0xa8>
 800de8a:	230c      	movs	r3, #12
 800de8c:	6033      	str	r3, [r6, #0]
 800de8e:	4630      	mov	r0, r6
 800de90:	f000 f80c 	bl	800deac <__malloc_unlock>
 800de94:	e794      	b.n	800ddc0 <_malloc_r+0x20>
 800de96:	6005      	str	r5, [r0, #0]
 800de98:	e7d6      	b.n	800de48 <_malloc_r+0xa8>
 800de9a:	bf00      	nop
 800de9c:	24004d84 	.word	0x24004d84

0800dea0 <__malloc_lock>:
 800dea0:	4801      	ldr	r0, [pc, #4]	@ (800dea8 <__malloc_lock+0x8>)
 800dea2:	f7ff bf00 	b.w	800dca6 <__retarget_lock_acquire_recursive>
 800dea6:	bf00      	nop
 800dea8:	24004d7c 	.word	0x24004d7c

0800deac <__malloc_unlock>:
 800deac:	4801      	ldr	r0, [pc, #4]	@ (800deb4 <__malloc_unlock+0x8>)
 800deae:	f7ff befb 	b.w	800dca8 <__retarget_lock_release_recursive>
 800deb2:	bf00      	nop
 800deb4:	24004d7c 	.word	0x24004d7c

0800deb8 <__sfputc_r>:
 800deb8:	6893      	ldr	r3, [r2, #8]
 800deba:	3b01      	subs	r3, #1
 800debc:	2b00      	cmp	r3, #0
 800debe:	b410      	push	{r4}
 800dec0:	6093      	str	r3, [r2, #8]
 800dec2:	da08      	bge.n	800ded6 <__sfputc_r+0x1e>
 800dec4:	6994      	ldr	r4, [r2, #24]
 800dec6:	42a3      	cmp	r3, r4
 800dec8:	db01      	blt.n	800dece <__sfputc_r+0x16>
 800deca:	290a      	cmp	r1, #10
 800decc:	d103      	bne.n	800ded6 <__sfputc_r+0x1e>
 800dece:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ded2:	f000 bb6b 	b.w	800e5ac <__swbuf_r>
 800ded6:	6813      	ldr	r3, [r2, #0]
 800ded8:	1c58      	adds	r0, r3, #1
 800deda:	6010      	str	r0, [r2, #0]
 800dedc:	7019      	strb	r1, [r3, #0]
 800dede:	4608      	mov	r0, r1
 800dee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dee4:	4770      	bx	lr

0800dee6 <__sfputs_r>:
 800dee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dee8:	4606      	mov	r6, r0
 800deea:	460f      	mov	r7, r1
 800deec:	4614      	mov	r4, r2
 800deee:	18d5      	adds	r5, r2, r3
 800def0:	42ac      	cmp	r4, r5
 800def2:	d101      	bne.n	800def8 <__sfputs_r+0x12>
 800def4:	2000      	movs	r0, #0
 800def6:	e007      	b.n	800df08 <__sfputs_r+0x22>
 800def8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800defc:	463a      	mov	r2, r7
 800defe:	4630      	mov	r0, r6
 800df00:	f7ff ffda 	bl	800deb8 <__sfputc_r>
 800df04:	1c43      	adds	r3, r0, #1
 800df06:	d1f3      	bne.n	800def0 <__sfputs_r+0xa>
 800df08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800df0c <_vfiprintf_r>:
 800df0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df10:	460d      	mov	r5, r1
 800df12:	b09d      	sub	sp, #116	@ 0x74
 800df14:	4614      	mov	r4, r2
 800df16:	4698      	mov	r8, r3
 800df18:	4606      	mov	r6, r0
 800df1a:	b118      	cbz	r0, 800df24 <_vfiprintf_r+0x18>
 800df1c:	6a03      	ldr	r3, [r0, #32]
 800df1e:	b90b      	cbnz	r3, 800df24 <_vfiprintf_r+0x18>
 800df20:	f7ff fd5e 	bl	800d9e0 <__sinit>
 800df24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df26:	07d9      	lsls	r1, r3, #31
 800df28:	d405      	bmi.n	800df36 <_vfiprintf_r+0x2a>
 800df2a:	89ab      	ldrh	r3, [r5, #12]
 800df2c:	059a      	lsls	r2, r3, #22
 800df2e:	d402      	bmi.n	800df36 <_vfiprintf_r+0x2a>
 800df30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df32:	f7ff feb8 	bl	800dca6 <__retarget_lock_acquire_recursive>
 800df36:	89ab      	ldrh	r3, [r5, #12]
 800df38:	071b      	lsls	r3, r3, #28
 800df3a:	d501      	bpl.n	800df40 <_vfiprintf_r+0x34>
 800df3c:	692b      	ldr	r3, [r5, #16]
 800df3e:	b99b      	cbnz	r3, 800df68 <_vfiprintf_r+0x5c>
 800df40:	4629      	mov	r1, r5
 800df42:	4630      	mov	r0, r6
 800df44:	f000 fb70 	bl	800e628 <__swsetup_r>
 800df48:	b170      	cbz	r0, 800df68 <_vfiprintf_r+0x5c>
 800df4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df4c:	07dc      	lsls	r4, r3, #31
 800df4e:	d504      	bpl.n	800df5a <_vfiprintf_r+0x4e>
 800df50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800df54:	b01d      	add	sp, #116	@ 0x74
 800df56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df5a:	89ab      	ldrh	r3, [r5, #12]
 800df5c:	0598      	lsls	r0, r3, #22
 800df5e:	d4f7      	bmi.n	800df50 <_vfiprintf_r+0x44>
 800df60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df62:	f7ff fea1 	bl	800dca8 <__retarget_lock_release_recursive>
 800df66:	e7f3      	b.n	800df50 <_vfiprintf_r+0x44>
 800df68:	2300      	movs	r3, #0
 800df6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800df6c:	2320      	movs	r3, #32
 800df6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800df72:	f8cd 800c 	str.w	r8, [sp, #12]
 800df76:	2330      	movs	r3, #48	@ 0x30
 800df78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e128 <_vfiprintf_r+0x21c>
 800df7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800df80:	f04f 0901 	mov.w	r9, #1
 800df84:	4623      	mov	r3, r4
 800df86:	469a      	mov	sl, r3
 800df88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df8c:	b10a      	cbz	r2, 800df92 <_vfiprintf_r+0x86>
 800df8e:	2a25      	cmp	r2, #37	@ 0x25
 800df90:	d1f9      	bne.n	800df86 <_vfiprintf_r+0x7a>
 800df92:	ebba 0b04 	subs.w	fp, sl, r4
 800df96:	d00b      	beq.n	800dfb0 <_vfiprintf_r+0xa4>
 800df98:	465b      	mov	r3, fp
 800df9a:	4622      	mov	r2, r4
 800df9c:	4629      	mov	r1, r5
 800df9e:	4630      	mov	r0, r6
 800dfa0:	f7ff ffa1 	bl	800dee6 <__sfputs_r>
 800dfa4:	3001      	adds	r0, #1
 800dfa6:	f000 80a7 	beq.w	800e0f8 <_vfiprintf_r+0x1ec>
 800dfaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dfac:	445a      	add	r2, fp
 800dfae:	9209      	str	r2, [sp, #36]	@ 0x24
 800dfb0:	f89a 3000 	ldrb.w	r3, [sl]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	f000 809f 	beq.w	800e0f8 <_vfiprintf_r+0x1ec>
 800dfba:	2300      	movs	r3, #0
 800dfbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dfc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfc4:	f10a 0a01 	add.w	sl, sl, #1
 800dfc8:	9304      	str	r3, [sp, #16]
 800dfca:	9307      	str	r3, [sp, #28]
 800dfcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dfd0:	931a      	str	r3, [sp, #104]	@ 0x68
 800dfd2:	4654      	mov	r4, sl
 800dfd4:	2205      	movs	r2, #5
 800dfd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfda:	4853      	ldr	r0, [pc, #332]	@ (800e128 <_vfiprintf_r+0x21c>)
 800dfdc:	f7f2 f980 	bl	80002e0 <memchr>
 800dfe0:	9a04      	ldr	r2, [sp, #16]
 800dfe2:	b9d8      	cbnz	r0, 800e01c <_vfiprintf_r+0x110>
 800dfe4:	06d1      	lsls	r1, r2, #27
 800dfe6:	bf44      	itt	mi
 800dfe8:	2320      	movmi	r3, #32
 800dfea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dfee:	0713      	lsls	r3, r2, #28
 800dff0:	bf44      	itt	mi
 800dff2:	232b      	movmi	r3, #43	@ 0x2b
 800dff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dff8:	f89a 3000 	ldrb.w	r3, [sl]
 800dffc:	2b2a      	cmp	r3, #42	@ 0x2a
 800dffe:	d015      	beq.n	800e02c <_vfiprintf_r+0x120>
 800e000:	9a07      	ldr	r2, [sp, #28]
 800e002:	4654      	mov	r4, sl
 800e004:	2000      	movs	r0, #0
 800e006:	f04f 0c0a 	mov.w	ip, #10
 800e00a:	4621      	mov	r1, r4
 800e00c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e010:	3b30      	subs	r3, #48	@ 0x30
 800e012:	2b09      	cmp	r3, #9
 800e014:	d94b      	bls.n	800e0ae <_vfiprintf_r+0x1a2>
 800e016:	b1b0      	cbz	r0, 800e046 <_vfiprintf_r+0x13a>
 800e018:	9207      	str	r2, [sp, #28]
 800e01a:	e014      	b.n	800e046 <_vfiprintf_r+0x13a>
 800e01c:	eba0 0308 	sub.w	r3, r0, r8
 800e020:	fa09 f303 	lsl.w	r3, r9, r3
 800e024:	4313      	orrs	r3, r2
 800e026:	9304      	str	r3, [sp, #16]
 800e028:	46a2      	mov	sl, r4
 800e02a:	e7d2      	b.n	800dfd2 <_vfiprintf_r+0xc6>
 800e02c:	9b03      	ldr	r3, [sp, #12]
 800e02e:	1d19      	adds	r1, r3, #4
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	9103      	str	r1, [sp, #12]
 800e034:	2b00      	cmp	r3, #0
 800e036:	bfbb      	ittet	lt
 800e038:	425b      	neglt	r3, r3
 800e03a:	f042 0202 	orrlt.w	r2, r2, #2
 800e03e:	9307      	strge	r3, [sp, #28]
 800e040:	9307      	strlt	r3, [sp, #28]
 800e042:	bfb8      	it	lt
 800e044:	9204      	strlt	r2, [sp, #16]
 800e046:	7823      	ldrb	r3, [r4, #0]
 800e048:	2b2e      	cmp	r3, #46	@ 0x2e
 800e04a:	d10a      	bne.n	800e062 <_vfiprintf_r+0x156>
 800e04c:	7863      	ldrb	r3, [r4, #1]
 800e04e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e050:	d132      	bne.n	800e0b8 <_vfiprintf_r+0x1ac>
 800e052:	9b03      	ldr	r3, [sp, #12]
 800e054:	1d1a      	adds	r2, r3, #4
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	9203      	str	r2, [sp, #12]
 800e05a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e05e:	3402      	adds	r4, #2
 800e060:	9305      	str	r3, [sp, #20]
 800e062:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e138 <_vfiprintf_r+0x22c>
 800e066:	7821      	ldrb	r1, [r4, #0]
 800e068:	2203      	movs	r2, #3
 800e06a:	4650      	mov	r0, sl
 800e06c:	f7f2 f938 	bl	80002e0 <memchr>
 800e070:	b138      	cbz	r0, 800e082 <_vfiprintf_r+0x176>
 800e072:	9b04      	ldr	r3, [sp, #16]
 800e074:	eba0 000a 	sub.w	r0, r0, sl
 800e078:	2240      	movs	r2, #64	@ 0x40
 800e07a:	4082      	lsls	r2, r0
 800e07c:	4313      	orrs	r3, r2
 800e07e:	3401      	adds	r4, #1
 800e080:	9304      	str	r3, [sp, #16]
 800e082:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e086:	4829      	ldr	r0, [pc, #164]	@ (800e12c <_vfiprintf_r+0x220>)
 800e088:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e08c:	2206      	movs	r2, #6
 800e08e:	f7f2 f927 	bl	80002e0 <memchr>
 800e092:	2800      	cmp	r0, #0
 800e094:	d03f      	beq.n	800e116 <_vfiprintf_r+0x20a>
 800e096:	4b26      	ldr	r3, [pc, #152]	@ (800e130 <_vfiprintf_r+0x224>)
 800e098:	bb1b      	cbnz	r3, 800e0e2 <_vfiprintf_r+0x1d6>
 800e09a:	9b03      	ldr	r3, [sp, #12]
 800e09c:	3307      	adds	r3, #7
 800e09e:	f023 0307 	bic.w	r3, r3, #7
 800e0a2:	3308      	adds	r3, #8
 800e0a4:	9303      	str	r3, [sp, #12]
 800e0a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0a8:	443b      	add	r3, r7
 800e0aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0ac:	e76a      	b.n	800df84 <_vfiprintf_r+0x78>
 800e0ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0b2:	460c      	mov	r4, r1
 800e0b4:	2001      	movs	r0, #1
 800e0b6:	e7a8      	b.n	800e00a <_vfiprintf_r+0xfe>
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	3401      	adds	r4, #1
 800e0bc:	9305      	str	r3, [sp, #20]
 800e0be:	4619      	mov	r1, r3
 800e0c0:	f04f 0c0a 	mov.w	ip, #10
 800e0c4:	4620      	mov	r0, r4
 800e0c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0ca:	3a30      	subs	r2, #48	@ 0x30
 800e0cc:	2a09      	cmp	r2, #9
 800e0ce:	d903      	bls.n	800e0d8 <_vfiprintf_r+0x1cc>
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d0c6      	beq.n	800e062 <_vfiprintf_r+0x156>
 800e0d4:	9105      	str	r1, [sp, #20]
 800e0d6:	e7c4      	b.n	800e062 <_vfiprintf_r+0x156>
 800e0d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e0dc:	4604      	mov	r4, r0
 800e0de:	2301      	movs	r3, #1
 800e0e0:	e7f0      	b.n	800e0c4 <_vfiprintf_r+0x1b8>
 800e0e2:	ab03      	add	r3, sp, #12
 800e0e4:	9300      	str	r3, [sp, #0]
 800e0e6:	462a      	mov	r2, r5
 800e0e8:	4b12      	ldr	r3, [pc, #72]	@ (800e134 <_vfiprintf_r+0x228>)
 800e0ea:	a904      	add	r1, sp, #16
 800e0ec:	4630      	mov	r0, r6
 800e0ee:	f3af 8000 	nop.w
 800e0f2:	4607      	mov	r7, r0
 800e0f4:	1c78      	adds	r0, r7, #1
 800e0f6:	d1d6      	bne.n	800e0a6 <_vfiprintf_r+0x19a>
 800e0f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0fa:	07d9      	lsls	r1, r3, #31
 800e0fc:	d405      	bmi.n	800e10a <_vfiprintf_r+0x1fe>
 800e0fe:	89ab      	ldrh	r3, [r5, #12]
 800e100:	059a      	lsls	r2, r3, #22
 800e102:	d402      	bmi.n	800e10a <_vfiprintf_r+0x1fe>
 800e104:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e106:	f7ff fdcf 	bl	800dca8 <__retarget_lock_release_recursive>
 800e10a:	89ab      	ldrh	r3, [r5, #12]
 800e10c:	065b      	lsls	r3, r3, #25
 800e10e:	f53f af1f 	bmi.w	800df50 <_vfiprintf_r+0x44>
 800e112:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e114:	e71e      	b.n	800df54 <_vfiprintf_r+0x48>
 800e116:	ab03      	add	r3, sp, #12
 800e118:	9300      	str	r3, [sp, #0]
 800e11a:	462a      	mov	r2, r5
 800e11c:	4b05      	ldr	r3, [pc, #20]	@ (800e134 <_vfiprintf_r+0x228>)
 800e11e:	a904      	add	r1, sp, #16
 800e120:	4630      	mov	r0, r6
 800e122:	f000 f879 	bl	800e218 <_printf_i>
 800e126:	e7e4      	b.n	800e0f2 <_vfiprintf_r+0x1e6>
 800e128:	0800f854 	.word	0x0800f854
 800e12c:	0800f85e 	.word	0x0800f85e
 800e130:	00000000 	.word	0x00000000
 800e134:	0800dee7 	.word	0x0800dee7
 800e138:	0800f85a 	.word	0x0800f85a

0800e13c <_printf_common>:
 800e13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e140:	4616      	mov	r6, r2
 800e142:	4698      	mov	r8, r3
 800e144:	688a      	ldr	r2, [r1, #8]
 800e146:	690b      	ldr	r3, [r1, #16]
 800e148:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e14c:	4293      	cmp	r3, r2
 800e14e:	bfb8      	it	lt
 800e150:	4613      	movlt	r3, r2
 800e152:	6033      	str	r3, [r6, #0]
 800e154:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e158:	4607      	mov	r7, r0
 800e15a:	460c      	mov	r4, r1
 800e15c:	b10a      	cbz	r2, 800e162 <_printf_common+0x26>
 800e15e:	3301      	adds	r3, #1
 800e160:	6033      	str	r3, [r6, #0]
 800e162:	6823      	ldr	r3, [r4, #0]
 800e164:	0699      	lsls	r1, r3, #26
 800e166:	bf42      	ittt	mi
 800e168:	6833      	ldrmi	r3, [r6, #0]
 800e16a:	3302      	addmi	r3, #2
 800e16c:	6033      	strmi	r3, [r6, #0]
 800e16e:	6825      	ldr	r5, [r4, #0]
 800e170:	f015 0506 	ands.w	r5, r5, #6
 800e174:	d106      	bne.n	800e184 <_printf_common+0x48>
 800e176:	f104 0a19 	add.w	sl, r4, #25
 800e17a:	68e3      	ldr	r3, [r4, #12]
 800e17c:	6832      	ldr	r2, [r6, #0]
 800e17e:	1a9b      	subs	r3, r3, r2
 800e180:	42ab      	cmp	r3, r5
 800e182:	dc26      	bgt.n	800e1d2 <_printf_common+0x96>
 800e184:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e188:	6822      	ldr	r2, [r4, #0]
 800e18a:	3b00      	subs	r3, #0
 800e18c:	bf18      	it	ne
 800e18e:	2301      	movne	r3, #1
 800e190:	0692      	lsls	r2, r2, #26
 800e192:	d42b      	bmi.n	800e1ec <_printf_common+0xb0>
 800e194:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e198:	4641      	mov	r1, r8
 800e19a:	4638      	mov	r0, r7
 800e19c:	47c8      	blx	r9
 800e19e:	3001      	adds	r0, #1
 800e1a0:	d01e      	beq.n	800e1e0 <_printf_common+0xa4>
 800e1a2:	6823      	ldr	r3, [r4, #0]
 800e1a4:	6922      	ldr	r2, [r4, #16]
 800e1a6:	f003 0306 	and.w	r3, r3, #6
 800e1aa:	2b04      	cmp	r3, #4
 800e1ac:	bf02      	ittt	eq
 800e1ae:	68e5      	ldreq	r5, [r4, #12]
 800e1b0:	6833      	ldreq	r3, [r6, #0]
 800e1b2:	1aed      	subeq	r5, r5, r3
 800e1b4:	68a3      	ldr	r3, [r4, #8]
 800e1b6:	bf0c      	ite	eq
 800e1b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e1bc:	2500      	movne	r5, #0
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	bfc4      	itt	gt
 800e1c2:	1a9b      	subgt	r3, r3, r2
 800e1c4:	18ed      	addgt	r5, r5, r3
 800e1c6:	2600      	movs	r6, #0
 800e1c8:	341a      	adds	r4, #26
 800e1ca:	42b5      	cmp	r5, r6
 800e1cc:	d11a      	bne.n	800e204 <_printf_common+0xc8>
 800e1ce:	2000      	movs	r0, #0
 800e1d0:	e008      	b.n	800e1e4 <_printf_common+0xa8>
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	4652      	mov	r2, sl
 800e1d6:	4641      	mov	r1, r8
 800e1d8:	4638      	mov	r0, r7
 800e1da:	47c8      	blx	r9
 800e1dc:	3001      	adds	r0, #1
 800e1de:	d103      	bne.n	800e1e8 <_printf_common+0xac>
 800e1e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e1e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1e8:	3501      	adds	r5, #1
 800e1ea:	e7c6      	b.n	800e17a <_printf_common+0x3e>
 800e1ec:	18e1      	adds	r1, r4, r3
 800e1ee:	1c5a      	adds	r2, r3, #1
 800e1f0:	2030      	movs	r0, #48	@ 0x30
 800e1f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e1f6:	4422      	add	r2, r4
 800e1f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e1fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e200:	3302      	adds	r3, #2
 800e202:	e7c7      	b.n	800e194 <_printf_common+0x58>
 800e204:	2301      	movs	r3, #1
 800e206:	4622      	mov	r2, r4
 800e208:	4641      	mov	r1, r8
 800e20a:	4638      	mov	r0, r7
 800e20c:	47c8      	blx	r9
 800e20e:	3001      	adds	r0, #1
 800e210:	d0e6      	beq.n	800e1e0 <_printf_common+0xa4>
 800e212:	3601      	adds	r6, #1
 800e214:	e7d9      	b.n	800e1ca <_printf_common+0x8e>
	...

0800e218 <_printf_i>:
 800e218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e21c:	7e0f      	ldrb	r7, [r1, #24]
 800e21e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e220:	2f78      	cmp	r7, #120	@ 0x78
 800e222:	4691      	mov	r9, r2
 800e224:	4680      	mov	r8, r0
 800e226:	460c      	mov	r4, r1
 800e228:	469a      	mov	sl, r3
 800e22a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e22e:	d807      	bhi.n	800e240 <_printf_i+0x28>
 800e230:	2f62      	cmp	r7, #98	@ 0x62
 800e232:	d80a      	bhi.n	800e24a <_printf_i+0x32>
 800e234:	2f00      	cmp	r7, #0
 800e236:	f000 80d1 	beq.w	800e3dc <_printf_i+0x1c4>
 800e23a:	2f58      	cmp	r7, #88	@ 0x58
 800e23c:	f000 80b8 	beq.w	800e3b0 <_printf_i+0x198>
 800e240:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e244:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e248:	e03a      	b.n	800e2c0 <_printf_i+0xa8>
 800e24a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e24e:	2b15      	cmp	r3, #21
 800e250:	d8f6      	bhi.n	800e240 <_printf_i+0x28>
 800e252:	a101      	add	r1, pc, #4	@ (adr r1, 800e258 <_printf_i+0x40>)
 800e254:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e258:	0800e2b1 	.word	0x0800e2b1
 800e25c:	0800e2c5 	.word	0x0800e2c5
 800e260:	0800e241 	.word	0x0800e241
 800e264:	0800e241 	.word	0x0800e241
 800e268:	0800e241 	.word	0x0800e241
 800e26c:	0800e241 	.word	0x0800e241
 800e270:	0800e2c5 	.word	0x0800e2c5
 800e274:	0800e241 	.word	0x0800e241
 800e278:	0800e241 	.word	0x0800e241
 800e27c:	0800e241 	.word	0x0800e241
 800e280:	0800e241 	.word	0x0800e241
 800e284:	0800e3c3 	.word	0x0800e3c3
 800e288:	0800e2ef 	.word	0x0800e2ef
 800e28c:	0800e37d 	.word	0x0800e37d
 800e290:	0800e241 	.word	0x0800e241
 800e294:	0800e241 	.word	0x0800e241
 800e298:	0800e3e5 	.word	0x0800e3e5
 800e29c:	0800e241 	.word	0x0800e241
 800e2a0:	0800e2ef 	.word	0x0800e2ef
 800e2a4:	0800e241 	.word	0x0800e241
 800e2a8:	0800e241 	.word	0x0800e241
 800e2ac:	0800e385 	.word	0x0800e385
 800e2b0:	6833      	ldr	r3, [r6, #0]
 800e2b2:	1d1a      	adds	r2, r3, #4
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	6032      	str	r2, [r6, #0]
 800e2b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e2bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	e09c      	b.n	800e3fe <_printf_i+0x1e6>
 800e2c4:	6833      	ldr	r3, [r6, #0]
 800e2c6:	6820      	ldr	r0, [r4, #0]
 800e2c8:	1d19      	adds	r1, r3, #4
 800e2ca:	6031      	str	r1, [r6, #0]
 800e2cc:	0606      	lsls	r6, r0, #24
 800e2ce:	d501      	bpl.n	800e2d4 <_printf_i+0xbc>
 800e2d0:	681d      	ldr	r5, [r3, #0]
 800e2d2:	e003      	b.n	800e2dc <_printf_i+0xc4>
 800e2d4:	0645      	lsls	r5, r0, #25
 800e2d6:	d5fb      	bpl.n	800e2d0 <_printf_i+0xb8>
 800e2d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e2dc:	2d00      	cmp	r5, #0
 800e2de:	da03      	bge.n	800e2e8 <_printf_i+0xd0>
 800e2e0:	232d      	movs	r3, #45	@ 0x2d
 800e2e2:	426d      	negs	r5, r5
 800e2e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e2e8:	4858      	ldr	r0, [pc, #352]	@ (800e44c <_printf_i+0x234>)
 800e2ea:	230a      	movs	r3, #10
 800e2ec:	e011      	b.n	800e312 <_printf_i+0xfa>
 800e2ee:	6821      	ldr	r1, [r4, #0]
 800e2f0:	6833      	ldr	r3, [r6, #0]
 800e2f2:	0608      	lsls	r0, r1, #24
 800e2f4:	f853 5b04 	ldr.w	r5, [r3], #4
 800e2f8:	d402      	bmi.n	800e300 <_printf_i+0xe8>
 800e2fa:	0649      	lsls	r1, r1, #25
 800e2fc:	bf48      	it	mi
 800e2fe:	b2ad      	uxthmi	r5, r5
 800e300:	2f6f      	cmp	r7, #111	@ 0x6f
 800e302:	4852      	ldr	r0, [pc, #328]	@ (800e44c <_printf_i+0x234>)
 800e304:	6033      	str	r3, [r6, #0]
 800e306:	bf14      	ite	ne
 800e308:	230a      	movne	r3, #10
 800e30a:	2308      	moveq	r3, #8
 800e30c:	2100      	movs	r1, #0
 800e30e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e312:	6866      	ldr	r6, [r4, #4]
 800e314:	60a6      	str	r6, [r4, #8]
 800e316:	2e00      	cmp	r6, #0
 800e318:	db05      	blt.n	800e326 <_printf_i+0x10e>
 800e31a:	6821      	ldr	r1, [r4, #0]
 800e31c:	432e      	orrs	r6, r5
 800e31e:	f021 0104 	bic.w	r1, r1, #4
 800e322:	6021      	str	r1, [r4, #0]
 800e324:	d04b      	beq.n	800e3be <_printf_i+0x1a6>
 800e326:	4616      	mov	r6, r2
 800e328:	fbb5 f1f3 	udiv	r1, r5, r3
 800e32c:	fb03 5711 	mls	r7, r3, r1, r5
 800e330:	5dc7      	ldrb	r7, [r0, r7]
 800e332:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e336:	462f      	mov	r7, r5
 800e338:	42bb      	cmp	r3, r7
 800e33a:	460d      	mov	r5, r1
 800e33c:	d9f4      	bls.n	800e328 <_printf_i+0x110>
 800e33e:	2b08      	cmp	r3, #8
 800e340:	d10b      	bne.n	800e35a <_printf_i+0x142>
 800e342:	6823      	ldr	r3, [r4, #0]
 800e344:	07df      	lsls	r7, r3, #31
 800e346:	d508      	bpl.n	800e35a <_printf_i+0x142>
 800e348:	6923      	ldr	r3, [r4, #16]
 800e34a:	6861      	ldr	r1, [r4, #4]
 800e34c:	4299      	cmp	r1, r3
 800e34e:	bfde      	ittt	le
 800e350:	2330      	movle	r3, #48	@ 0x30
 800e352:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e356:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e35a:	1b92      	subs	r2, r2, r6
 800e35c:	6122      	str	r2, [r4, #16]
 800e35e:	f8cd a000 	str.w	sl, [sp]
 800e362:	464b      	mov	r3, r9
 800e364:	aa03      	add	r2, sp, #12
 800e366:	4621      	mov	r1, r4
 800e368:	4640      	mov	r0, r8
 800e36a:	f7ff fee7 	bl	800e13c <_printf_common>
 800e36e:	3001      	adds	r0, #1
 800e370:	d14a      	bne.n	800e408 <_printf_i+0x1f0>
 800e372:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e376:	b004      	add	sp, #16
 800e378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e37c:	6823      	ldr	r3, [r4, #0]
 800e37e:	f043 0320 	orr.w	r3, r3, #32
 800e382:	6023      	str	r3, [r4, #0]
 800e384:	4832      	ldr	r0, [pc, #200]	@ (800e450 <_printf_i+0x238>)
 800e386:	2778      	movs	r7, #120	@ 0x78
 800e388:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e38c:	6823      	ldr	r3, [r4, #0]
 800e38e:	6831      	ldr	r1, [r6, #0]
 800e390:	061f      	lsls	r7, r3, #24
 800e392:	f851 5b04 	ldr.w	r5, [r1], #4
 800e396:	d402      	bmi.n	800e39e <_printf_i+0x186>
 800e398:	065f      	lsls	r7, r3, #25
 800e39a:	bf48      	it	mi
 800e39c:	b2ad      	uxthmi	r5, r5
 800e39e:	6031      	str	r1, [r6, #0]
 800e3a0:	07d9      	lsls	r1, r3, #31
 800e3a2:	bf44      	itt	mi
 800e3a4:	f043 0320 	orrmi.w	r3, r3, #32
 800e3a8:	6023      	strmi	r3, [r4, #0]
 800e3aa:	b11d      	cbz	r5, 800e3b4 <_printf_i+0x19c>
 800e3ac:	2310      	movs	r3, #16
 800e3ae:	e7ad      	b.n	800e30c <_printf_i+0xf4>
 800e3b0:	4826      	ldr	r0, [pc, #152]	@ (800e44c <_printf_i+0x234>)
 800e3b2:	e7e9      	b.n	800e388 <_printf_i+0x170>
 800e3b4:	6823      	ldr	r3, [r4, #0]
 800e3b6:	f023 0320 	bic.w	r3, r3, #32
 800e3ba:	6023      	str	r3, [r4, #0]
 800e3bc:	e7f6      	b.n	800e3ac <_printf_i+0x194>
 800e3be:	4616      	mov	r6, r2
 800e3c0:	e7bd      	b.n	800e33e <_printf_i+0x126>
 800e3c2:	6833      	ldr	r3, [r6, #0]
 800e3c4:	6825      	ldr	r5, [r4, #0]
 800e3c6:	6961      	ldr	r1, [r4, #20]
 800e3c8:	1d18      	adds	r0, r3, #4
 800e3ca:	6030      	str	r0, [r6, #0]
 800e3cc:	062e      	lsls	r6, r5, #24
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	d501      	bpl.n	800e3d6 <_printf_i+0x1be>
 800e3d2:	6019      	str	r1, [r3, #0]
 800e3d4:	e002      	b.n	800e3dc <_printf_i+0x1c4>
 800e3d6:	0668      	lsls	r0, r5, #25
 800e3d8:	d5fb      	bpl.n	800e3d2 <_printf_i+0x1ba>
 800e3da:	8019      	strh	r1, [r3, #0]
 800e3dc:	2300      	movs	r3, #0
 800e3de:	6123      	str	r3, [r4, #16]
 800e3e0:	4616      	mov	r6, r2
 800e3e2:	e7bc      	b.n	800e35e <_printf_i+0x146>
 800e3e4:	6833      	ldr	r3, [r6, #0]
 800e3e6:	1d1a      	adds	r2, r3, #4
 800e3e8:	6032      	str	r2, [r6, #0]
 800e3ea:	681e      	ldr	r6, [r3, #0]
 800e3ec:	6862      	ldr	r2, [r4, #4]
 800e3ee:	2100      	movs	r1, #0
 800e3f0:	4630      	mov	r0, r6
 800e3f2:	f7f1 ff75 	bl	80002e0 <memchr>
 800e3f6:	b108      	cbz	r0, 800e3fc <_printf_i+0x1e4>
 800e3f8:	1b80      	subs	r0, r0, r6
 800e3fa:	6060      	str	r0, [r4, #4]
 800e3fc:	6863      	ldr	r3, [r4, #4]
 800e3fe:	6123      	str	r3, [r4, #16]
 800e400:	2300      	movs	r3, #0
 800e402:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e406:	e7aa      	b.n	800e35e <_printf_i+0x146>
 800e408:	6923      	ldr	r3, [r4, #16]
 800e40a:	4632      	mov	r2, r6
 800e40c:	4649      	mov	r1, r9
 800e40e:	4640      	mov	r0, r8
 800e410:	47d0      	blx	sl
 800e412:	3001      	adds	r0, #1
 800e414:	d0ad      	beq.n	800e372 <_printf_i+0x15a>
 800e416:	6823      	ldr	r3, [r4, #0]
 800e418:	079b      	lsls	r3, r3, #30
 800e41a:	d413      	bmi.n	800e444 <_printf_i+0x22c>
 800e41c:	68e0      	ldr	r0, [r4, #12]
 800e41e:	9b03      	ldr	r3, [sp, #12]
 800e420:	4298      	cmp	r0, r3
 800e422:	bfb8      	it	lt
 800e424:	4618      	movlt	r0, r3
 800e426:	e7a6      	b.n	800e376 <_printf_i+0x15e>
 800e428:	2301      	movs	r3, #1
 800e42a:	4632      	mov	r2, r6
 800e42c:	4649      	mov	r1, r9
 800e42e:	4640      	mov	r0, r8
 800e430:	47d0      	blx	sl
 800e432:	3001      	adds	r0, #1
 800e434:	d09d      	beq.n	800e372 <_printf_i+0x15a>
 800e436:	3501      	adds	r5, #1
 800e438:	68e3      	ldr	r3, [r4, #12]
 800e43a:	9903      	ldr	r1, [sp, #12]
 800e43c:	1a5b      	subs	r3, r3, r1
 800e43e:	42ab      	cmp	r3, r5
 800e440:	dcf2      	bgt.n	800e428 <_printf_i+0x210>
 800e442:	e7eb      	b.n	800e41c <_printf_i+0x204>
 800e444:	2500      	movs	r5, #0
 800e446:	f104 0619 	add.w	r6, r4, #25
 800e44a:	e7f5      	b.n	800e438 <_printf_i+0x220>
 800e44c:	0800f865 	.word	0x0800f865
 800e450:	0800f876 	.word	0x0800f876

0800e454 <__sflush_r>:
 800e454:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e45c:	0716      	lsls	r6, r2, #28
 800e45e:	4605      	mov	r5, r0
 800e460:	460c      	mov	r4, r1
 800e462:	d454      	bmi.n	800e50e <__sflush_r+0xba>
 800e464:	684b      	ldr	r3, [r1, #4]
 800e466:	2b00      	cmp	r3, #0
 800e468:	dc02      	bgt.n	800e470 <__sflush_r+0x1c>
 800e46a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	dd48      	ble.n	800e502 <__sflush_r+0xae>
 800e470:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e472:	2e00      	cmp	r6, #0
 800e474:	d045      	beq.n	800e502 <__sflush_r+0xae>
 800e476:	2300      	movs	r3, #0
 800e478:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e47c:	682f      	ldr	r7, [r5, #0]
 800e47e:	6a21      	ldr	r1, [r4, #32]
 800e480:	602b      	str	r3, [r5, #0]
 800e482:	d030      	beq.n	800e4e6 <__sflush_r+0x92>
 800e484:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e486:	89a3      	ldrh	r3, [r4, #12]
 800e488:	0759      	lsls	r1, r3, #29
 800e48a:	d505      	bpl.n	800e498 <__sflush_r+0x44>
 800e48c:	6863      	ldr	r3, [r4, #4]
 800e48e:	1ad2      	subs	r2, r2, r3
 800e490:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e492:	b10b      	cbz	r3, 800e498 <__sflush_r+0x44>
 800e494:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e496:	1ad2      	subs	r2, r2, r3
 800e498:	2300      	movs	r3, #0
 800e49a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e49c:	6a21      	ldr	r1, [r4, #32]
 800e49e:	4628      	mov	r0, r5
 800e4a0:	47b0      	blx	r6
 800e4a2:	1c43      	adds	r3, r0, #1
 800e4a4:	89a3      	ldrh	r3, [r4, #12]
 800e4a6:	d106      	bne.n	800e4b6 <__sflush_r+0x62>
 800e4a8:	6829      	ldr	r1, [r5, #0]
 800e4aa:	291d      	cmp	r1, #29
 800e4ac:	d82b      	bhi.n	800e506 <__sflush_r+0xb2>
 800e4ae:	4a2a      	ldr	r2, [pc, #168]	@ (800e558 <__sflush_r+0x104>)
 800e4b0:	40ca      	lsrs	r2, r1
 800e4b2:	07d6      	lsls	r6, r2, #31
 800e4b4:	d527      	bpl.n	800e506 <__sflush_r+0xb2>
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	6062      	str	r2, [r4, #4]
 800e4ba:	04d9      	lsls	r1, r3, #19
 800e4bc:	6922      	ldr	r2, [r4, #16]
 800e4be:	6022      	str	r2, [r4, #0]
 800e4c0:	d504      	bpl.n	800e4cc <__sflush_r+0x78>
 800e4c2:	1c42      	adds	r2, r0, #1
 800e4c4:	d101      	bne.n	800e4ca <__sflush_r+0x76>
 800e4c6:	682b      	ldr	r3, [r5, #0]
 800e4c8:	b903      	cbnz	r3, 800e4cc <__sflush_r+0x78>
 800e4ca:	6560      	str	r0, [r4, #84]	@ 0x54
 800e4cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e4ce:	602f      	str	r7, [r5, #0]
 800e4d0:	b1b9      	cbz	r1, 800e502 <__sflush_r+0xae>
 800e4d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e4d6:	4299      	cmp	r1, r3
 800e4d8:	d002      	beq.n	800e4e0 <__sflush_r+0x8c>
 800e4da:	4628      	mov	r0, r5
 800e4dc:	f7ff fbf4 	bl	800dcc8 <_free_r>
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800e4e4:	e00d      	b.n	800e502 <__sflush_r+0xae>
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	4628      	mov	r0, r5
 800e4ea:	47b0      	blx	r6
 800e4ec:	4602      	mov	r2, r0
 800e4ee:	1c50      	adds	r0, r2, #1
 800e4f0:	d1c9      	bne.n	800e486 <__sflush_r+0x32>
 800e4f2:	682b      	ldr	r3, [r5, #0]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d0c6      	beq.n	800e486 <__sflush_r+0x32>
 800e4f8:	2b1d      	cmp	r3, #29
 800e4fa:	d001      	beq.n	800e500 <__sflush_r+0xac>
 800e4fc:	2b16      	cmp	r3, #22
 800e4fe:	d11e      	bne.n	800e53e <__sflush_r+0xea>
 800e500:	602f      	str	r7, [r5, #0]
 800e502:	2000      	movs	r0, #0
 800e504:	e022      	b.n	800e54c <__sflush_r+0xf8>
 800e506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e50a:	b21b      	sxth	r3, r3
 800e50c:	e01b      	b.n	800e546 <__sflush_r+0xf2>
 800e50e:	690f      	ldr	r7, [r1, #16]
 800e510:	2f00      	cmp	r7, #0
 800e512:	d0f6      	beq.n	800e502 <__sflush_r+0xae>
 800e514:	0793      	lsls	r3, r2, #30
 800e516:	680e      	ldr	r6, [r1, #0]
 800e518:	bf08      	it	eq
 800e51a:	694b      	ldreq	r3, [r1, #20]
 800e51c:	600f      	str	r7, [r1, #0]
 800e51e:	bf18      	it	ne
 800e520:	2300      	movne	r3, #0
 800e522:	eba6 0807 	sub.w	r8, r6, r7
 800e526:	608b      	str	r3, [r1, #8]
 800e528:	f1b8 0f00 	cmp.w	r8, #0
 800e52c:	dde9      	ble.n	800e502 <__sflush_r+0xae>
 800e52e:	6a21      	ldr	r1, [r4, #32]
 800e530:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e532:	4643      	mov	r3, r8
 800e534:	463a      	mov	r2, r7
 800e536:	4628      	mov	r0, r5
 800e538:	47b0      	blx	r6
 800e53a:	2800      	cmp	r0, #0
 800e53c:	dc08      	bgt.n	800e550 <__sflush_r+0xfc>
 800e53e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e546:	81a3      	strh	r3, [r4, #12]
 800e548:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e550:	4407      	add	r7, r0
 800e552:	eba8 0800 	sub.w	r8, r8, r0
 800e556:	e7e7      	b.n	800e528 <__sflush_r+0xd4>
 800e558:	20400001 	.word	0x20400001

0800e55c <_fflush_r>:
 800e55c:	b538      	push	{r3, r4, r5, lr}
 800e55e:	690b      	ldr	r3, [r1, #16]
 800e560:	4605      	mov	r5, r0
 800e562:	460c      	mov	r4, r1
 800e564:	b913      	cbnz	r3, 800e56c <_fflush_r+0x10>
 800e566:	2500      	movs	r5, #0
 800e568:	4628      	mov	r0, r5
 800e56a:	bd38      	pop	{r3, r4, r5, pc}
 800e56c:	b118      	cbz	r0, 800e576 <_fflush_r+0x1a>
 800e56e:	6a03      	ldr	r3, [r0, #32]
 800e570:	b90b      	cbnz	r3, 800e576 <_fflush_r+0x1a>
 800e572:	f7ff fa35 	bl	800d9e0 <__sinit>
 800e576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d0f3      	beq.n	800e566 <_fflush_r+0xa>
 800e57e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e580:	07d0      	lsls	r0, r2, #31
 800e582:	d404      	bmi.n	800e58e <_fflush_r+0x32>
 800e584:	0599      	lsls	r1, r3, #22
 800e586:	d402      	bmi.n	800e58e <_fflush_r+0x32>
 800e588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e58a:	f7ff fb8c 	bl	800dca6 <__retarget_lock_acquire_recursive>
 800e58e:	4628      	mov	r0, r5
 800e590:	4621      	mov	r1, r4
 800e592:	f7ff ff5f 	bl	800e454 <__sflush_r>
 800e596:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e598:	07da      	lsls	r2, r3, #31
 800e59a:	4605      	mov	r5, r0
 800e59c:	d4e4      	bmi.n	800e568 <_fflush_r+0xc>
 800e59e:	89a3      	ldrh	r3, [r4, #12]
 800e5a0:	059b      	lsls	r3, r3, #22
 800e5a2:	d4e1      	bmi.n	800e568 <_fflush_r+0xc>
 800e5a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e5a6:	f7ff fb7f 	bl	800dca8 <__retarget_lock_release_recursive>
 800e5aa:	e7dd      	b.n	800e568 <_fflush_r+0xc>

0800e5ac <__swbuf_r>:
 800e5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ae:	460e      	mov	r6, r1
 800e5b0:	4614      	mov	r4, r2
 800e5b2:	4605      	mov	r5, r0
 800e5b4:	b118      	cbz	r0, 800e5be <__swbuf_r+0x12>
 800e5b6:	6a03      	ldr	r3, [r0, #32]
 800e5b8:	b90b      	cbnz	r3, 800e5be <__swbuf_r+0x12>
 800e5ba:	f7ff fa11 	bl	800d9e0 <__sinit>
 800e5be:	69a3      	ldr	r3, [r4, #24]
 800e5c0:	60a3      	str	r3, [r4, #8]
 800e5c2:	89a3      	ldrh	r3, [r4, #12]
 800e5c4:	071a      	lsls	r2, r3, #28
 800e5c6:	d501      	bpl.n	800e5cc <__swbuf_r+0x20>
 800e5c8:	6923      	ldr	r3, [r4, #16]
 800e5ca:	b943      	cbnz	r3, 800e5de <__swbuf_r+0x32>
 800e5cc:	4621      	mov	r1, r4
 800e5ce:	4628      	mov	r0, r5
 800e5d0:	f000 f82a 	bl	800e628 <__swsetup_r>
 800e5d4:	b118      	cbz	r0, 800e5de <__swbuf_r+0x32>
 800e5d6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800e5da:	4638      	mov	r0, r7
 800e5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5de:	6823      	ldr	r3, [r4, #0]
 800e5e0:	6922      	ldr	r2, [r4, #16]
 800e5e2:	1a98      	subs	r0, r3, r2
 800e5e4:	6963      	ldr	r3, [r4, #20]
 800e5e6:	b2f6      	uxtb	r6, r6
 800e5e8:	4283      	cmp	r3, r0
 800e5ea:	4637      	mov	r7, r6
 800e5ec:	dc05      	bgt.n	800e5fa <__swbuf_r+0x4e>
 800e5ee:	4621      	mov	r1, r4
 800e5f0:	4628      	mov	r0, r5
 800e5f2:	f7ff ffb3 	bl	800e55c <_fflush_r>
 800e5f6:	2800      	cmp	r0, #0
 800e5f8:	d1ed      	bne.n	800e5d6 <__swbuf_r+0x2a>
 800e5fa:	68a3      	ldr	r3, [r4, #8]
 800e5fc:	3b01      	subs	r3, #1
 800e5fe:	60a3      	str	r3, [r4, #8]
 800e600:	6823      	ldr	r3, [r4, #0]
 800e602:	1c5a      	adds	r2, r3, #1
 800e604:	6022      	str	r2, [r4, #0]
 800e606:	701e      	strb	r6, [r3, #0]
 800e608:	6962      	ldr	r2, [r4, #20]
 800e60a:	1c43      	adds	r3, r0, #1
 800e60c:	429a      	cmp	r2, r3
 800e60e:	d004      	beq.n	800e61a <__swbuf_r+0x6e>
 800e610:	89a3      	ldrh	r3, [r4, #12]
 800e612:	07db      	lsls	r3, r3, #31
 800e614:	d5e1      	bpl.n	800e5da <__swbuf_r+0x2e>
 800e616:	2e0a      	cmp	r6, #10
 800e618:	d1df      	bne.n	800e5da <__swbuf_r+0x2e>
 800e61a:	4621      	mov	r1, r4
 800e61c:	4628      	mov	r0, r5
 800e61e:	f7ff ff9d 	bl	800e55c <_fflush_r>
 800e622:	2800      	cmp	r0, #0
 800e624:	d0d9      	beq.n	800e5da <__swbuf_r+0x2e>
 800e626:	e7d6      	b.n	800e5d6 <__swbuf_r+0x2a>

0800e628 <__swsetup_r>:
 800e628:	b538      	push	{r3, r4, r5, lr}
 800e62a:	4b29      	ldr	r3, [pc, #164]	@ (800e6d0 <__swsetup_r+0xa8>)
 800e62c:	4605      	mov	r5, r0
 800e62e:	6818      	ldr	r0, [r3, #0]
 800e630:	460c      	mov	r4, r1
 800e632:	b118      	cbz	r0, 800e63c <__swsetup_r+0x14>
 800e634:	6a03      	ldr	r3, [r0, #32]
 800e636:	b90b      	cbnz	r3, 800e63c <__swsetup_r+0x14>
 800e638:	f7ff f9d2 	bl	800d9e0 <__sinit>
 800e63c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e640:	0719      	lsls	r1, r3, #28
 800e642:	d422      	bmi.n	800e68a <__swsetup_r+0x62>
 800e644:	06da      	lsls	r2, r3, #27
 800e646:	d407      	bmi.n	800e658 <__swsetup_r+0x30>
 800e648:	2209      	movs	r2, #9
 800e64a:	602a      	str	r2, [r5, #0]
 800e64c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e650:	81a3      	strh	r3, [r4, #12]
 800e652:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e656:	e033      	b.n	800e6c0 <__swsetup_r+0x98>
 800e658:	0758      	lsls	r0, r3, #29
 800e65a:	d512      	bpl.n	800e682 <__swsetup_r+0x5a>
 800e65c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e65e:	b141      	cbz	r1, 800e672 <__swsetup_r+0x4a>
 800e660:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e664:	4299      	cmp	r1, r3
 800e666:	d002      	beq.n	800e66e <__swsetup_r+0x46>
 800e668:	4628      	mov	r0, r5
 800e66a:	f7ff fb2d 	bl	800dcc8 <_free_r>
 800e66e:	2300      	movs	r3, #0
 800e670:	6363      	str	r3, [r4, #52]	@ 0x34
 800e672:	89a3      	ldrh	r3, [r4, #12]
 800e674:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e678:	81a3      	strh	r3, [r4, #12]
 800e67a:	2300      	movs	r3, #0
 800e67c:	6063      	str	r3, [r4, #4]
 800e67e:	6923      	ldr	r3, [r4, #16]
 800e680:	6023      	str	r3, [r4, #0]
 800e682:	89a3      	ldrh	r3, [r4, #12]
 800e684:	f043 0308 	orr.w	r3, r3, #8
 800e688:	81a3      	strh	r3, [r4, #12]
 800e68a:	6923      	ldr	r3, [r4, #16]
 800e68c:	b94b      	cbnz	r3, 800e6a2 <__swsetup_r+0x7a>
 800e68e:	89a3      	ldrh	r3, [r4, #12]
 800e690:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e694:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e698:	d003      	beq.n	800e6a2 <__swsetup_r+0x7a>
 800e69a:	4621      	mov	r1, r4
 800e69c:	4628      	mov	r0, r5
 800e69e:	f000 f84f 	bl	800e740 <__smakebuf_r>
 800e6a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6a6:	f013 0201 	ands.w	r2, r3, #1
 800e6aa:	d00a      	beq.n	800e6c2 <__swsetup_r+0x9a>
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	60a2      	str	r2, [r4, #8]
 800e6b0:	6962      	ldr	r2, [r4, #20]
 800e6b2:	4252      	negs	r2, r2
 800e6b4:	61a2      	str	r2, [r4, #24]
 800e6b6:	6922      	ldr	r2, [r4, #16]
 800e6b8:	b942      	cbnz	r2, 800e6cc <__swsetup_r+0xa4>
 800e6ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e6be:	d1c5      	bne.n	800e64c <__swsetup_r+0x24>
 800e6c0:	bd38      	pop	{r3, r4, r5, pc}
 800e6c2:	0799      	lsls	r1, r3, #30
 800e6c4:	bf58      	it	pl
 800e6c6:	6962      	ldrpl	r2, [r4, #20]
 800e6c8:	60a2      	str	r2, [r4, #8]
 800e6ca:	e7f4      	b.n	800e6b6 <__swsetup_r+0x8e>
 800e6cc:	2000      	movs	r0, #0
 800e6ce:	e7f7      	b.n	800e6c0 <__swsetup_r+0x98>
 800e6d0:	24000034 	.word	0x24000034

0800e6d4 <_sbrk_r>:
 800e6d4:	b538      	push	{r3, r4, r5, lr}
 800e6d6:	4d06      	ldr	r5, [pc, #24]	@ (800e6f0 <_sbrk_r+0x1c>)
 800e6d8:	2300      	movs	r3, #0
 800e6da:	4604      	mov	r4, r0
 800e6dc:	4608      	mov	r0, r1
 800e6de:	602b      	str	r3, [r5, #0]
 800e6e0:	f7f5 fbea 	bl	8003eb8 <_sbrk>
 800e6e4:	1c43      	adds	r3, r0, #1
 800e6e6:	d102      	bne.n	800e6ee <_sbrk_r+0x1a>
 800e6e8:	682b      	ldr	r3, [r5, #0]
 800e6ea:	b103      	cbz	r3, 800e6ee <_sbrk_r+0x1a>
 800e6ec:	6023      	str	r3, [r4, #0]
 800e6ee:	bd38      	pop	{r3, r4, r5, pc}
 800e6f0:	24004d78 	.word	0x24004d78

0800e6f4 <__swhatbuf_r>:
 800e6f4:	b570      	push	{r4, r5, r6, lr}
 800e6f6:	460c      	mov	r4, r1
 800e6f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6fc:	2900      	cmp	r1, #0
 800e6fe:	b096      	sub	sp, #88	@ 0x58
 800e700:	4615      	mov	r5, r2
 800e702:	461e      	mov	r6, r3
 800e704:	da0d      	bge.n	800e722 <__swhatbuf_r+0x2e>
 800e706:	89a3      	ldrh	r3, [r4, #12]
 800e708:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e70c:	f04f 0100 	mov.w	r1, #0
 800e710:	bf14      	ite	ne
 800e712:	2340      	movne	r3, #64	@ 0x40
 800e714:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e718:	2000      	movs	r0, #0
 800e71a:	6031      	str	r1, [r6, #0]
 800e71c:	602b      	str	r3, [r5, #0]
 800e71e:	b016      	add	sp, #88	@ 0x58
 800e720:	bd70      	pop	{r4, r5, r6, pc}
 800e722:	466a      	mov	r2, sp
 800e724:	f000 f848 	bl	800e7b8 <_fstat_r>
 800e728:	2800      	cmp	r0, #0
 800e72a:	dbec      	blt.n	800e706 <__swhatbuf_r+0x12>
 800e72c:	9901      	ldr	r1, [sp, #4]
 800e72e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e732:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e736:	4259      	negs	r1, r3
 800e738:	4159      	adcs	r1, r3
 800e73a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e73e:	e7eb      	b.n	800e718 <__swhatbuf_r+0x24>

0800e740 <__smakebuf_r>:
 800e740:	898b      	ldrh	r3, [r1, #12]
 800e742:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e744:	079d      	lsls	r5, r3, #30
 800e746:	4606      	mov	r6, r0
 800e748:	460c      	mov	r4, r1
 800e74a:	d507      	bpl.n	800e75c <__smakebuf_r+0x1c>
 800e74c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e750:	6023      	str	r3, [r4, #0]
 800e752:	6123      	str	r3, [r4, #16]
 800e754:	2301      	movs	r3, #1
 800e756:	6163      	str	r3, [r4, #20]
 800e758:	b003      	add	sp, #12
 800e75a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e75c:	ab01      	add	r3, sp, #4
 800e75e:	466a      	mov	r2, sp
 800e760:	f7ff ffc8 	bl	800e6f4 <__swhatbuf_r>
 800e764:	9f00      	ldr	r7, [sp, #0]
 800e766:	4605      	mov	r5, r0
 800e768:	4639      	mov	r1, r7
 800e76a:	4630      	mov	r0, r6
 800e76c:	f7ff fb18 	bl	800dda0 <_malloc_r>
 800e770:	b948      	cbnz	r0, 800e786 <__smakebuf_r+0x46>
 800e772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e776:	059a      	lsls	r2, r3, #22
 800e778:	d4ee      	bmi.n	800e758 <__smakebuf_r+0x18>
 800e77a:	f023 0303 	bic.w	r3, r3, #3
 800e77e:	f043 0302 	orr.w	r3, r3, #2
 800e782:	81a3      	strh	r3, [r4, #12]
 800e784:	e7e2      	b.n	800e74c <__smakebuf_r+0xc>
 800e786:	89a3      	ldrh	r3, [r4, #12]
 800e788:	6020      	str	r0, [r4, #0]
 800e78a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e78e:	81a3      	strh	r3, [r4, #12]
 800e790:	9b01      	ldr	r3, [sp, #4]
 800e792:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e796:	b15b      	cbz	r3, 800e7b0 <__smakebuf_r+0x70>
 800e798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e79c:	4630      	mov	r0, r6
 800e79e:	f000 f81d 	bl	800e7dc <_isatty_r>
 800e7a2:	b128      	cbz	r0, 800e7b0 <__smakebuf_r+0x70>
 800e7a4:	89a3      	ldrh	r3, [r4, #12]
 800e7a6:	f023 0303 	bic.w	r3, r3, #3
 800e7aa:	f043 0301 	orr.w	r3, r3, #1
 800e7ae:	81a3      	strh	r3, [r4, #12]
 800e7b0:	89a3      	ldrh	r3, [r4, #12]
 800e7b2:	431d      	orrs	r5, r3
 800e7b4:	81a5      	strh	r5, [r4, #12]
 800e7b6:	e7cf      	b.n	800e758 <__smakebuf_r+0x18>

0800e7b8 <_fstat_r>:
 800e7b8:	b538      	push	{r3, r4, r5, lr}
 800e7ba:	4d07      	ldr	r5, [pc, #28]	@ (800e7d8 <_fstat_r+0x20>)
 800e7bc:	2300      	movs	r3, #0
 800e7be:	4604      	mov	r4, r0
 800e7c0:	4608      	mov	r0, r1
 800e7c2:	4611      	mov	r1, r2
 800e7c4:	602b      	str	r3, [r5, #0]
 800e7c6:	f7f5 fb4e 	bl	8003e66 <_fstat>
 800e7ca:	1c43      	adds	r3, r0, #1
 800e7cc:	d102      	bne.n	800e7d4 <_fstat_r+0x1c>
 800e7ce:	682b      	ldr	r3, [r5, #0]
 800e7d0:	b103      	cbz	r3, 800e7d4 <_fstat_r+0x1c>
 800e7d2:	6023      	str	r3, [r4, #0]
 800e7d4:	bd38      	pop	{r3, r4, r5, pc}
 800e7d6:	bf00      	nop
 800e7d8:	24004d78 	.word	0x24004d78

0800e7dc <_isatty_r>:
 800e7dc:	b538      	push	{r3, r4, r5, lr}
 800e7de:	4d06      	ldr	r5, [pc, #24]	@ (800e7f8 <_isatty_r+0x1c>)
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	4604      	mov	r4, r0
 800e7e4:	4608      	mov	r0, r1
 800e7e6:	602b      	str	r3, [r5, #0]
 800e7e8:	f7f5 fb4d 	bl	8003e86 <_isatty>
 800e7ec:	1c43      	adds	r3, r0, #1
 800e7ee:	d102      	bne.n	800e7f6 <_isatty_r+0x1a>
 800e7f0:	682b      	ldr	r3, [r5, #0]
 800e7f2:	b103      	cbz	r3, 800e7f6 <_isatty_r+0x1a>
 800e7f4:	6023      	str	r3, [r4, #0]
 800e7f6:	bd38      	pop	{r3, r4, r5, pc}
 800e7f8:	24004d78 	.word	0x24004d78
 800e7fc:	00000000 	.word	0x00000000

0800e800 <sqrt>:
 800e800:	b508      	push	{r3, lr}
 800e802:	ed2d 8b04 	vpush	{d8-d9}
 800e806:	eeb0 8b40 	vmov.f64	d8, d0
 800e80a:	f000 f8d1 	bl	800e9b0 <__ieee754_sqrt>
 800e80e:	eeb4 8b48 	vcmp.f64	d8, d8
 800e812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e816:	d60c      	bvs.n	800e832 <sqrt+0x32>
 800e818:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800e838 <sqrt+0x38>
 800e81c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800e820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e824:	d505      	bpl.n	800e832 <sqrt+0x32>
 800e826:	f7ff fa13 	bl	800dc50 <__errno>
 800e82a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800e82e:	2321      	movs	r3, #33	@ 0x21
 800e830:	6003      	str	r3, [r0, #0]
 800e832:	ecbd 8b04 	vpop	{d8-d9}
 800e836:	bd08      	pop	{r3, pc}
	...

0800e840 <cos>:
 800e840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e842:	eeb0 7b40 	vmov.f64	d7, d0
 800e846:	ee17 3a90 	vmov	r3, s15
 800e84a:	4a21      	ldr	r2, [pc, #132]	@ (800e8d0 <cos+0x90>)
 800e84c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e850:	4293      	cmp	r3, r2
 800e852:	d806      	bhi.n	800e862 <cos+0x22>
 800e854:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800e8c8 <cos+0x88>
 800e858:	b005      	add	sp, #20
 800e85a:	f85d eb04 	ldr.w	lr, [sp], #4
 800e85e:	f000 b8af 	b.w	800e9c0 <__kernel_cos>
 800e862:	4a1c      	ldr	r2, [pc, #112]	@ (800e8d4 <cos+0x94>)
 800e864:	4293      	cmp	r3, r2
 800e866:	d904      	bls.n	800e872 <cos+0x32>
 800e868:	ee30 0b40 	vsub.f64	d0, d0, d0
 800e86c:	b005      	add	sp, #20
 800e86e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e872:	4668      	mov	r0, sp
 800e874:	f000 f964 	bl	800eb40 <__ieee754_rem_pio2>
 800e878:	f000 0003 	and.w	r0, r0, #3
 800e87c:	2801      	cmp	r0, #1
 800e87e:	d009      	beq.n	800e894 <cos+0x54>
 800e880:	2802      	cmp	r0, #2
 800e882:	d010      	beq.n	800e8a6 <cos+0x66>
 800e884:	b9b0      	cbnz	r0, 800e8b4 <cos+0x74>
 800e886:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e88a:	ed9d 0b00 	vldr	d0, [sp]
 800e88e:	f000 f897 	bl	800e9c0 <__kernel_cos>
 800e892:	e7eb      	b.n	800e86c <cos+0x2c>
 800e894:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e898:	ed9d 0b00 	vldr	d0, [sp]
 800e89c:	f000 f8f8 	bl	800ea90 <__kernel_sin>
 800e8a0:	eeb1 0b40 	vneg.f64	d0, d0
 800e8a4:	e7e2      	b.n	800e86c <cos+0x2c>
 800e8a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e8aa:	ed9d 0b00 	vldr	d0, [sp]
 800e8ae:	f000 f887 	bl	800e9c0 <__kernel_cos>
 800e8b2:	e7f5      	b.n	800e8a0 <cos+0x60>
 800e8b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e8b8:	ed9d 0b00 	vldr	d0, [sp]
 800e8bc:	2001      	movs	r0, #1
 800e8be:	f000 f8e7 	bl	800ea90 <__kernel_sin>
 800e8c2:	e7d3      	b.n	800e86c <cos+0x2c>
 800e8c4:	f3af 8000 	nop.w
	...
 800e8d0:	3fe921fb 	.word	0x3fe921fb
 800e8d4:	7fefffff 	.word	0x7fefffff

0800e8d8 <sin>:
 800e8d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8da:	eeb0 7b40 	vmov.f64	d7, d0
 800e8de:	ee17 3a90 	vmov	r3, s15
 800e8e2:	4a21      	ldr	r2, [pc, #132]	@ (800e968 <sin+0x90>)
 800e8e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	d807      	bhi.n	800e8fc <sin+0x24>
 800e8ec:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800e960 <sin+0x88>
 800e8f0:	2000      	movs	r0, #0
 800e8f2:	b005      	add	sp, #20
 800e8f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8f8:	f000 b8ca 	b.w	800ea90 <__kernel_sin>
 800e8fc:	4a1b      	ldr	r2, [pc, #108]	@ (800e96c <sin+0x94>)
 800e8fe:	4293      	cmp	r3, r2
 800e900:	d904      	bls.n	800e90c <sin+0x34>
 800e902:	ee30 0b40 	vsub.f64	d0, d0, d0
 800e906:	b005      	add	sp, #20
 800e908:	f85d fb04 	ldr.w	pc, [sp], #4
 800e90c:	4668      	mov	r0, sp
 800e90e:	f000 f917 	bl	800eb40 <__ieee754_rem_pio2>
 800e912:	f000 0003 	and.w	r0, r0, #3
 800e916:	2801      	cmp	r0, #1
 800e918:	d00a      	beq.n	800e930 <sin+0x58>
 800e91a:	2802      	cmp	r0, #2
 800e91c:	d00f      	beq.n	800e93e <sin+0x66>
 800e91e:	b9c0      	cbnz	r0, 800e952 <sin+0x7a>
 800e920:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e924:	ed9d 0b00 	vldr	d0, [sp]
 800e928:	2001      	movs	r0, #1
 800e92a:	f000 f8b1 	bl	800ea90 <__kernel_sin>
 800e92e:	e7ea      	b.n	800e906 <sin+0x2e>
 800e930:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e934:	ed9d 0b00 	vldr	d0, [sp]
 800e938:	f000 f842 	bl	800e9c0 <__kernel_cos>
 800e93c:	e7e3      	b.n	800e906 <sin+0x2e>
 800e93e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e942:	ed9d 0b00 	vldr	d0, [sp]
 800e946:	2001      	movs	r0, #1
 800e948:	f000 f8a2 	bl	800ea90 <__kernel_sin>
 800e94c:	eeb1 0b40 	vneg.f64	d0, d0
 800e950:	e7d9      	b.n	800e906 <sin+0x2e>
 800e952:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e956:	ed9d 0b00 	vldr	d0, [sp]
 800e95a:	f000 f831 	bl	800e9c0 <__kernel_cos>
 800e95e:	e7f5      	b.n	800e94c <sin+0x74>
	...
 800e968:	3fe921fb 	.word	0x3fe921fb
 800e96c:	7fefffff 	.word	0x7fefffff

0800e970 <atan2f>:
 800e970:	f000 ba32 	b.w	800edd8 <__ieee754_atan2f>

0800e974 <sqrtf>:
 800e974:	b508      	push	{r3, lr}
 800e976:	ed2d 8b02 	vpush	{d8}
 800e97a:	eeb0 8a40 	vmov.f32	s16, s0
 800e97e:	f000 f81a 	bl	800e9b6 <__ieee754_sqrtf>
 800e982:	eeb4 8a48 	vcmp.f32	s16, s16
 800e986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e98a:	d60c      	bvs.n	800e9a6 <sqrtf+0x32>
 800e98c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800e9ac <sqrtf+0x38>
 800e990:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e998:	d505      	bpl.n	800e9a6 <sqrtf+0x32>
 800e99a:	f7ff f959 	bl	800dc50 <__errno>
 800e99e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e9a2:	2321      	movs	r3, #33	@ 0x21
 800e9a4:	6003      	str	r3, [r0, #0]
 800e9a6:	ecbd 8b02 	vpop	{d8}
 800e9aa:	bd08      	pop	{r3, pc}
 800e9ac:	00000000 	.word	0x00000000

0800e9b0 <__ieee754_sqrt>:
 800e9b0:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800e9b4:	4770      	bx	lr

0800e9b6 <__ieee754_sqrtf>:
 800e9b6:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e9ba:	4770      	bx	lr
 800e9bc:	0000      	movs	r0, r0
	...

0800e9c0 <__kernel_cos>:
 800e9c0:	eeb0 5b40 	vmov.f64	d5, d0
 800e9c4:	ee15 1a90 	vmov	r1, s11
 800e9c8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800e9cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800e9d0:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800e9d4:	d204      	bcs.n	800e9e0 <__kernel_cos+0x20>
 800e9d6:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800e9da:	ee17 3a90 	vmov	r3, s15
 800e9de:	b343      	cbz	r3, 800ea32 <__kernel_cos+0x72>
 800e9e0:	ee25 6b05 	vmul.f64	d6, d5, d5
 800e9e4:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800e9e8:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800ea58 <__kernel_cos+0x98>
 800e9ec:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800ea60 <__kernel_cos+0xa0>
 800e9f0:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e9f4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800ea68 <__kernel_cos+0xa8>
 800e9f8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e9fc:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800ea70 <__kernel_cos+0xb0>
 800ea00:	eea7 4b06 	vfma.f64	d4, d7, d6
 800ea04:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800ea78 <__kernel_cos+0xb8>
 800ea08:	4b1f      	ldr	r3, [pc, #124]	@ (800ea88 <__kernel_cos+0xc8>)
 800ea0a:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ea0e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800ea80 <__kernel_cos+0xc0>
 800ea12:	4299      	cmp	r1, r3
 800ea14:	eea7 4b06 	vfma.f64	d4, d7, d6
 800ea18:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800ea1c:	ee24 4b06 	vmul.f64	d4, d4, d6
 800ea20:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ea24:	eea6 1b04 	vfma.f64	d1, d6, d4
 800ea28:	d804      	bhi.n	800ea34 <__kernel_cos+0x74>
 800ea2a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800ea2e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ea32:	4770      	bx	lr
 800ea34:	4b15      	ldr	r3, [pc, #84]	@ (800ea8c <__kernel_cos+0xcc>)
 800ea36:	4299      	cmp	r1, r3
 800ea38:	d809      	bhi.n	800ea4e <__kernel_cos+0x8e>
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800ea40:	ec43 2b16 	vmov	d6, r2, r3
 800ea44:	ee30 0b46 	vsub.f64	d0, d0, d6
 800ea48:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ea4c:	e7ed      	b.n	800ea2a <__kernel_cos+0x6a>
 800ea4e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800ea52:	e7f7      	b.n	800ea44 <__kernel_cos+0x84>
 800ea54:	f3af 8000 	nop.w
 800ea58:	be8838d4 	.word	0xbe8838d4
 800ea5c:	bda8fae9 	.word	0xbda8fae9
 800ea60:	bdb4b1c4 	.word	0xbdb4b1c4
 800ea64:	3e21ee9e 	.word	0x3e21ee9e
 800ea68:	809c52ad 	.word	0x809c52ad
 800ea6c:	be927e4f 	.word	0xbe927e4f
 800ea70:	19cb1590 	.word	0x19cb1590
 800ea74:	3efa01a0 	.word	0x3efa01a0
 800ea78:	16c15177 	.word	0x16c15177
 800ea7c:	bf56c16c 	.word	0xbf56c16c
 800ea80:	5555554c 	.word	0x5555554c
 800ea84:	3fa55555 	.word	0x3fa55555
 800ea88:	3fd33332 	.word	0x3fd33332
 800ea8c:	3fe90000 	.word	0x3fe90000

0800ea90 <__kernel_sin>:
 800ea90:	ee10 3a90 	vmov	r3, s1
 800ea94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ea98:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800ea9c:	d204      	bcs.n	800eaa8 <__kernel_sin+0x18>
 800ea9e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800eaa2:	ee17 3a90 	vmov	r3, s15
 800eaa6:	b35b      	cbz	r3, 800eb00 <__kernel_sin+0x70>
 800eaa8:	ee20 6b00 	vmul.f64	d6, d0, d0
 800eaac:	ee20 5b06 	vmul.f64	d5, d0, d6
 800eab0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800eb08 <__kernel_sin+0x78>
 800eab4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800eb10 <__kernel_sin+0x80>
 800eab8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800eabc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800eb18 <__kernel_sin+0x88>
 800eac0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800eac4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800eb20 <__kernel_sin+0x90>
 800eac8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800eacc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800eb28 <__kernel_sin+0x98>
 800ead0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ead4:	b930      	cbnz	r0, 800eae4 <__kernel_sin+0x54>
 800ead6:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800eb30 <__kernel_sin+0xa0>
 800eada:	eea6 4b07 	vfma.f64	d4, d6, d7
 800eade:	eea4 0b05 	vfma.f64	d0, d4, d5
 800eae2:	4770      	bx	lr
 800eae4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800eae8:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800eaec:	eea1 7b04 	vfma.f64	d7, d1, d4
 800eaf0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800eaf4:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800eb38 <__kernel_sin+0xa8>
 800eaf8:	eea5 1b07 	vfma.f64	d1, d5, d7
 800eafc:	ee30 0b41 	vsub.f64	d0, d0, d1
 800eb00:	4770      	bx	lr
 800eb02:	bf00      	nop
 800eb04:	f3af 8000 	nop.w
 800eb08:	5acfd57c 	.word	0x5acfd57c
 800eb0c:	3de5d93a 	.word	0x3de5d93a
 800eb10:	8a2b9ceb 	.word	0x8a2b9ceb
 800eb14:	be5ae5e6 	.word	0xbe5ae5e6
 800eb18:	57b1fe7d 	.word	0x57b1fe7d
 800eb1c:	3ec71de3 	.word	0x3ec71de3
 800eb20:	19c161d5 	.word	0x19c161d5
 800eb24:	bf2a01a0 	.word	0xbf2a01a0
 800eb28:	1110f8a6 	.word	0x1110f8a6
 800eb2c:	3f811111 	.word	0x3f811111
 800eb30:	55555549 	.word	0x55555549
 800eb34:	bfc55555 	.word	0xbfc55555
 800eb38:	55555549 	.word	0x55555549
 800eb3c:	3fc55555 	.word	0x3fc55555

0800eb40 <__ieee754_rem_pio2>:
 800eb40:	b570      	push	{r4, r5, r6, lr}
 800eb42:	eeb0 7b40 	vmov.f64	d7, d0
 800eb46:	ee17 5a90 	vmov	r5, s15
 800eb4a:	4b99      	ldr	r3, [pc, #612]	@ (800edb0 <__ieee754_rem_pio2+0x270>)
 800eb4c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800eb50:	429e      	cmp	r6, r3
 800eb52:	b088      	sub	sp, #32
 800eb54:	4604      	mov	r4, r0
 800eb56:	d807      	bhi.n	800eb68 <__ieee754_rem_pio2+0x28>
 800eb58:	2200      	movs	r2, #0
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	ed84 0b00 	vstr	d0, [r4]
 800eb60:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800eb64:	2000      	movs	r0, #0
 800eb66:	e01b      	b.n	800eba0 <__ieee754_rem_pio2+0x60>
 800eb68:	4b92      	ldr	r3, [pc, #584]	@ (800edb4 <__ieee754_rem_pio2+0x274>)
 800eb6a:	429e      	cmp	r6, r3
 800eb6c:	d83b      	bhi.n	800ebe6 <__ieee754_rem_pio2+0xa6>
 800eb6e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800eb72:	2d00      	cmp	r5, #0
 800eb74:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800ed70 <__ieee754_rem_pio2+0x230>
 800eb78:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800eb7c:	dd19      	ble.n	800ebb2 <__ieee754_rem_pio2+0x72>
 800eb7e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800eb82:	429e      	cmp	r6, r3
 800eb84:	d00e      	beq.n	800eba4 <__ieee754_rem_pio2+0x64>
 800eb86:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800ed78 <__ieee754_rem_pio2+0x238>
 800eb8a:	ee37 6b45 	vsub.f64	d6, d7, d5
 800eb8e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800eb92:	ed84 6b00 	vstr	d6, [r4]
 800eb96:	ee37 7b45 	vsub.f64	d7, d7, d5
 800eb9a:	ed84 7b02 	vstr	d7, [r4, #8]
 800eb9e:	2001      	movs	r0, #1
 800eba0:	b008      	add	sp, #32
 800eba2:	bd70      	pop	{r4, r5, r6, pc}
 800eba4:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800ed80 <__ieee754_rem_pio2+0x240>
 800eba8:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800ed88 <__ieee754_rem_pio2+0x248>
 800ebac:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ebb0:	e7eb      	b.n	800eb8a <__ieee754_rem_pio2+0x4a>
 800ebb2:	429e      	cmp	r6, r3
 800ebb4:	ee30 7b06 	vadd.f64	d7, d0, d6
 800ebb8:	d00e      	beq.n	800ebd8 <__ieee754_rem_pio2+0x98>
 800ebba:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800ed78 <__ieee754_rem_pio2+0x238>
 800ebbe:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ebc2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ebc6:	ed84 6b00 	vstr	d6, [r4]
 800ebca:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ebce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ebd2:	ed84 7b02 	vstr	d7, [r4, #8]
 800ebd6:	e7e3      	b.n	800eba0 <__ieee754_rem_pio2+0x60>
 800ebd8:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800ed80 <__ieee754_rem_pio2+0x240>
 800ebdc:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800ed88 <__ieee754_rem_pio2+0x248>
 800ebe0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ebe4:	e7eb      	b.n	800ebbe <__ieee754_rem_pio2+0x7e>
 800ebe6:	4b74      	ldr	r3, [pc, #464]	@ (800edb8 <__ieee754_rem_pio2+0x278>)
 800ebe8:	429e      	cmp	r6, r3
 800ebea:	d870      	bhi.n	800ecce <__ieee754_rem_pio2+0x18e>
 800ebec:	f000 f8ec 	bl	800edc8 <fabs>
 800ebf0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800ebf4:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ed90 <__ieee754_rem_pio2+0x250>
 800ebf8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800ebfc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ec00:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800ec04:	ee17 0a90 	vmov	r0, s15
 800ec08:	eeb1 4b45 	vneg.f64	d4, d5
 800ec0c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800ed70 <__ieee754_rem_pio2+0x230>
 800ec10:	eea5 0b47 	vfms.f64	d0, d5, d7
 800ec14:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800ed78 <__ieee754_rem_pio2+0x238>
 800ec18:	281f      	cmp	r0, #31
 800ec1a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ec1e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ec22:	dc05      	bgt.n	800ec30 <__ieee754_rem_pio2+0xf0>
 800ec24:	4b65      	ldr	r3, [pc, #404]	@ (800edbc <__ieee754_rem_pio2+0x27c>)
 800ec26:	1e42      	subs	r2, r0, #1
 800ec28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec2c:	42b3      	cmp	r3, r6
 800ec2e:	d109      	bne.n	800ec44 <__ieee754_rem_pio2+0x104>
 800ec30:	ee16 3a90 	vmov	r3, s13
 800ec34:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ec38:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800ec3c:	2b10      	cmp	r3, #16
 800ec3e:	ea4f 5226 	mov.w	r2, r6, asr #20
 800ec42:	dc02      	bgt.n	800ec4a <__ieee754_rem_pio2+0x10a>
 800ec44:	ed84 6b00 	vstr	d6, [r4]
 800ec48:	e01a      	b.n	800ec80 <__ieee754_rem_pio2+0x140>
 800ec4a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800ed80 <__ieee754_rem_pio2+0x240>
 800ec4e:	eeb0 6b40 	vmov.f64	d6, d0
 800ec52:	eea4 6b03 	vfma.f64	d6, d4, d3
 800ec56:	ee30 7b46 	vsub.f64	d7, d0, d6
 800ec5a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800ec5e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800ed88 <__ieee754_rem_pio2+0x248>
 800ec62:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800ec66:	ee36 3b47 	vsub.f64	d3, d6, d7
 800ec6a:	ee13 3a90 	vmov	r3, s7
 800ec6e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ec72:	1ad3      	subs	r3, r2, r3
 800ec74:	2b31      	cmp	r3, #49	@ 0x31
 800ec76:	dc17      	bgt.n	800eca8 <__ieee754_rem_pio2+0x168>
 800ec78:	eeb0 0b46 	vmov.f64	d0, d6
 800ec7c:	ed84 3b00 	vstr	d3, [r4]
 800ec80:	ed94 6b00 	vldr	d6, [r4]
 800ec84:	2d00      	cmp	r5, #0
 800ec86:	ee30 0b46 	vsub.f64	d0, d0, d6
 800ec8a:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ec8e:	ed84 0b02 	vstr	d0, [r4, #8]
 800ec92:	da85      	bge.n	800eba0 <__ieee754_rem_pio2+0x60>
 800ec94:	eeb1 6b46 	vneg.f64	d6, d6
 800ec98:	eeb1 0b40 	vneg.f64	d0, d0
 800ec9c:	ed84 6b00 	vstr	d6, [r4]
 800eca0:	ed84 0b02 	vstr	d0, [r4, #8]
 800eca4:	4240      	negs	r0, r0
 800eca6:	e77b      	b.n	800eba0 <__ieee754_rem_pio2+0x60>
 800eca8:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800ed98 <__ieee754_rem_pio2+0x258>
 800ecac:	eeb0 0b46 	vmov.f64	d0, d6
 800ecb0:	eea4 0b07 	vfma.f64	d0, d4, d7
 800ecb4:	ee36 6b40 	vsub.f64	d6, d6, d0
 800ecb8:	eea4 6b07 	vfma.f64	d6, d4, d7
 800ecbc:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800eda0 <__ieee754_rem_pio2+0x260>
 800ecc0:	eeb0 7b46 	vmov.f64	d7, d6
 800ecc4:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800ecc8:	ee30 6b47 	vsub.f64	d6, d0, d7
 800eccc:	e7ba      	b.n	800ec44 <__ieee754_rem_pio2+0x104>
 800ecce:	4b3c      	ldr	r3, [pc, #240]	@ (800edc0 <__ieee754_rem_pio2+0x280>)
 800ecd0:	429e      	cmp	r6, r3
 800ecd2:	d906      	bls.n	800ece2 <__ieee754_rem_pio2+0x1a2>
 800ecd4:	ee30 7b40 	vsub.f64	d7, d0, d0
 800ecd8:	ed80 7b02 	vstr	d7, [r0, #8]
 800ecdc:	ed80 7b00 	vstr	d7, [r0]
 800ece0:	e740      	b.n	800eb64 <__ieee754_rem_pio2+0x24>
 800ece2:	ee10 3a10 	vmov	r3, s0
 800ece6:	1532      	asrs	r2, r6, #20
 800ece8:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800ecec:	4618      	mov	r0, r3
 800ecee:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800ecf2:	ec41 0b17 	vmov	d7, r0, r1
 800ecf6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ecfa:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800eda8 <__ieee754_rem_pio2+0x268>
 800ecfe:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ed02:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ed06:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ed0a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ed0e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ed12:	a808      	add	r0, sp, #32
 800ed14:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ed18:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ed1c:	ed8d 6b04 	vstr	d6, [sp, #16]
 800ed20:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ed24:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ed28:	2103      	movs	r1, #3
 800ed2a:	ed30 7b02 	vldmdb	r0!, {d7}
 800ed2e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ed32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed36:	460b      	mov	r3, r1
 800ed38:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 800ed3c:	d0f5      	beq.n	800ed2a <__ieee754_rem_pio2+0x1ea>
 800ed3e:	4921      	ldr	r1, [pc, #132]	@ (800edc4 <__ieee754_rem_pio2+0x284>)
 800ed40:	9101      	str	r1, [sp, #4]
 800ed42:	2102      	movs	r1, #2
 800ed44:	9100      	str	r1, [sp, #0]
 800ed46:	a802      	add	r0, sp, #8
 800ed48:	4621      	mov	r1, r4
 800ed4a:	f000 f9c1 	bl	800f0d0 <__kernel_rem_pio2>
 800ed4e:	2d00      	cmp	r5, #0
 800ed50:	f6bf af26 	bge.w	800eba0 <__ieee754_rem_pio2+0x60>
 800ed54:	ed94 7b00 	vldr	d7, [r4]
 800ed58:	eeb1 7b47 	vneg.f64	d7, d7
 800ed5c:	ed84 7b00 	vstr	d7, [r4]
 800ed60:	ed94 7b02 	vldr	d7, [r4, #8]
 800ed64:	eeb1 7b47 	vneg.f64	d7, d7
 800ed68:	ed84 7b02 	vstr	d7, [r4, #8]
 800ed6c:	e79a      	b.n	800eca4 <__ieee754_rem_pio2+0x164>
 800ed6e:	bf00      	nop
 800ed70:	54400000 	.word	0x54400000
 800ed74:	3ff921fb 	.word	0x3ff921fb
 800ed78:	1a626331 	.word	0x1a626331
 800ed7c:	3dd0b461 	.word	0x3dd0b461
 800ed80:	1a600000 	.word	0x1a600000
 800ed84:	3dd0b461 	.word	0x3dd0b461
 800ed88:	2e037073 	.word	0x2e037073
 800ed8c:	3ba3198a 	.word	0x3ba3198a
 800ed90:	6dc9c883 	.word	0x6dc9c883
 800ed94:	3fe45f30 	.word	0x3fe45f30
 800ed98:	2e000000 	.word	0x2e000000
 800ed9c:	3ba3198a 	.word	0x3ba3198a
 800eda0:	252049c1 	.word	0x252049c1
 800eda4:	397b839a 	.word	0x397b839a
 800eda8:	00000000 	.word	0x00000000
 800edac:	41700000 	.word	0x41700000
 800edb0:	3fe921fb 	.word	0x3fe921fb
 800edb4:	4002d97b 	.word	0x4002d97b
 800edb8:	413921fb 	.word	0x413921fb
 800edbc:	0800f888 	.word	0x0800f888
 800edc0:	7fefffff 	.word	0x7fefffff
 800edc4:	0800f908 	.word	0x0800f908

0800edc8 <fabs>:
 800edc8:	ec51 0b10 	vmov	r0, r1, d0
 800edcc:	4602      	mov	r2, r0
 800edce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800edd2:	ec43 2b10 	vmov	d0, r2, r3
 800edd6:	4770      	bx	lr

0800edd8 <__ieee754_atan2f>:
 800edd8:	ee10 2a90 	vmov	r2, s1
 800eddc:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800ede0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ede4:	b510      	push	{r4, lr}
 800ede6:	eef0 7a40 	vmov.f32	s15, s0
 800edea:	d806      	bhi.n	800edfa <__ieee754_atan2f+0x22>
 800edec:	ee10 0a10 	vmov	r0, s0
 800edf0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800edf4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800edf8:	d904      	bls.n	800ee04 <__ieee754_atan2f+0x2c>
 800edfa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800edfe:	eeb0 0a67 	vmov.f32	s0, s15
 800ee02:	bd10      	pop	{r4, pc}
 800ee04:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800ee08:	d103      	bne.n	800ee12 <__ieee754_atan2f+0x3a>
 800ee0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee0e:	f000 b881 	b.w	800ef14 <atanf>
 800ee12:	1794      	asrs	r4, r2, #30
 800ee14:	f004 0402 	and.w	r4, r4, #2
 800ee18:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ee1c:	b93b      	cbnz	r3, 800ee2e <__ieee754_atan2f+0x56>
 800ee1e:	2c02      	cmp	r4, #2
 800ee20:	d05c      	beq.n	800eedc <__ieee754_atan2f+0x104>
 800ee22:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800eef0 <__ieee754_atan2f+0x118>
 800ee26:	2c03      	cmp	r4, #3
 800ee28:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800ee2c:	e7e7      	b.n	800edfe <__ieee754_atan2f+0x26>
 800ee2e:	b939      	cbnz	r1, 800ee40 <__ieee754_atan2f+0x68>
 800ee30:	eddf 7a30 	vldr	s15, [pc, #192]	@ 800eef4 <__ieee754_atan2f+0x11c>
 800ee34:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800eef8 <__ieee754_atan2f+0x120>
 800ee38:	2800      	cmp	r0, #0
 800ee3a:	fe67 7a27 	vselge.f32	s15, s14, s15
 800ee3e:	e7de      	b.n	800edfe <__ieee754_atan2f+0x26>
 800ee40:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ee44:	d110      	bne.n	800ee68 <__ieee754_atan2f+0x90>
 800ee46:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ee4a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800ee4e:	d107      	bne.n	800ee60 <__ieee754_atan2f+0x88>
 800ee50:	2c02      	cmp	r4, #2
 800ee52:	d846      	bhi.n	800eee2 <__ieee754_atan2f+0x10a>
 800ee54:	4b29      	ldr	r3, [pc, #164]	@ (800eefc <__ieee754_atan2f+0x124>)
 800ee56:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ee5a:	edd3 7a00 	vldr	s15, [r3]
 800ee5e:	e7ce      	b.n	800edfe <__ieee754_atan2f+0x26>
 800ee60:	2c02      	cmp	r4, #2
 800ee62:	d841      	bhi.n	800eee8 <__ieee754_atan2f+0x110>
 800ee64:	4b26      	ldr	r3, [pc, #152]	@ (800ef00 <__ieee754_atan2f+0x128>)
 800ee66:	e7f6      	b.n	800ee56 <__ieee754_atan2f+0x7e>
 800ee68:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ee6c:	d0e0      	beq.n	800ee30 <__ieee754_atan2f+0x58>
 800ee6e:	1a5b      	subs	r3, r3, r1
 800ee70:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800ee74:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800ee78:	da1a      	bge.n	800eeb0 <__ieee754_atan2f+0xd8>
 800ee7a:	2a00      	cmp	r2, #0
 800ee7c:	da01      	bge.n	800ee82 <__ieee754_atan2f+0xaa>
 800ee7e:	313c      	adds	r1, #60	@ 0x3c
 800ee80:	db19      	blt.n	800eeb6 <__ieee754_atan2f+0xde>
 800ee82:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800ee86:	f000 f919 	bl	800f0bc <fabsf>
 800ee8a:	f000 f843 	bl	800ef14 <atanf>
 800ee8e:	eef0 7a40 	vmov.f32	s15, s0
 800ee92:	2c01      	cmp	r4, #1
 800ee94:	d012      	beq.n	800eebc <__ieee754_atan2f+0xe4>
 800ee96:	2c02      	cmp	r4, #2
 800ee98:	d017      	beq.n	800eeca <__ieee754_atan2f+0xf2>
 800ee9a:	2c00      	cmp	r4, #0
 800ee9c:	d0af      	beq.n	800edfe <__ieee754_atan2f+0x26>
 800ee9e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800ef04 <__ieee754_atan2f+0x12c>
 800eea2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eea6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800ef08 <__ieee754_atan2f+0x130>
 800eeaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eeae:	e7a6      	b.n	800edfe <__ieee754_atan2f+0x26>
 800eeb0:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800eef8 <__ieee754_atan2f+0x120>
 800eeb4:	e7ed      	b.n	800ee92 <__ieee754_atan2f+0xba>
 800eeb6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ef0c <__ieee754_atan2f+0x134>
 800eeba:	e7ea      	b.n	800ee92 <__ieee754_atan2f+0xba>
 800eebc:	ee17 3a90 	vmov	r3, s15
 800eec0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800eec4:	ee07 3a90 	vmov	s15, r3
 800eec8:	e799      	b.n	800edfe <__ieee754_atan2f+0x26>
 800eeca:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800ef04 <__ieee754_atan2f+0x12c>
 800eece:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eed2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800ef08 <__ieee754_atan2f+0x130>
 800eed6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eeda:	e790      	b.n	800edfe <__ieee754_atan2f+0x26>
 800eedc:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800ef08 <__ieee754_atan2f+0x130>
 800eee0:	e78d      	b.n	800edfe <__ieee754_atan2f+0x26>
 800eee2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800ef10 <__ieee754_atan2f+0x138>
 800eee6:	e78a      	b.n	800edfe <__ieee754_atan2f+0x26>
 800eee8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ef0c <__ieee754_atan2f+0x134>
 800eeec:	e787      	b.n	800edfe <__ieee754_atan2f+0x26>
 800eeee:	bf00      	nop
 800eef0:	c0490fdb 	.word	0xc0490fdb
 800eef4:	bfc90fdb 	.word	0xbfc90fdb
 800eef8:	3fc90fdb 	.word	0x3fc90fdb
 800eefc:	0800fa1c 	.word	0x0800fa1c
 800ef00:	0800fa10 	.word	0x0800fa10
 800ef04:	33bbbd2e 	.word	0x33bbbd2e
 800ef08:	40490fdb 	.word	0x40490fdb
 800ef0c:	00000000 	.word	0x00000000
 800ef10:	3f490fdb 	.word	0x3f490fdb

0800ef14 <atanf>:
 800ef14:	b538      	push	{r3, r4, r5, lr}
 800ef16:	ee10 5a10 	vmov	r5, s0
 800ef1a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800ef1e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800ef22:	eef0 7a40 	vmov.f32	s15, s0
 800ef26:	d30f      	bcc.n	800ef48 <atanf+0x34>
 800ef28:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800ef2c:	d904      	bls.n	800ef38 <atanf+0x24>
 800ef2e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800ef32:	eeb0 0a67 	vmov.f32	s0, s15
 800ef36:	bd38      	pop	{r3, r4, r5, pc}
 800ef38:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800f070 <atanf+0x15c>
 800ef3c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800f074 <atanf+0x160>
 800ef40:	2d00      	cmp	r5, #0
 800ef42:	fe77 7a27 	vselgt.f32	s15, s14, s15
 800ef46:	e7f4      	b.n	800ef32 <atanf+0x1e>
 800ef48:	4b4b      	ldr	r3, [pc, #300]	@ (800f078 <atanf+0x164>)
 800ef4a:	429c      	cmp	r4, r3
 800ef4c:	d810      	bhi.n	800ef70 <atanf+0x5c>
 800ef4e:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800ef52:	d20a      	bcs.n	800ef6a <atanf+0x56>
 800ef54:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800f07c <atanf+0x168>
 800ef58:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ef5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ef60:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ef64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef68:	dce3      	bgt.n	800ef32 <atanf+0x1e>
 800ef6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ef6e:	e013      	b.n	800ef98 <atanf+0x84>
 800ef70:	f000 f8a4 	bl	800f0bc <fabsf>
 800ef74:	4b42      	ldr	r3, [pc, #264]	@ (800f080 <atanf+0x16c>)
 800ef76:	429c      	cmp	r4, r3
 800ef78:	d84f      	bhi.n	800f01a <atanf+0x106>
 800ef7a:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800ef7e:	429c      	cmp	r4, r3
 800ef80:	d841      	bhi.n	800f006 <atanf+0xf2>
 800ef82:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800ef86:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ef8a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ef8e:	2300      	movs	r3, #0
 800ef90:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ef94:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ef98:	1c5a      	adds	r2, r3, #1
 800ef9a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ef9e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800f084 <atanf+0x170>
 800efa2:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800f088 <atanf+0x174>
 800efa6:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 800f08c <atanf+0x178>
 800efaa:	ee66 6a06 	vmul.f32	s13, s12, s12
 800efae:	eee6 5a87 	vfma.f32	s11, s13, s14
 800efb2:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800f090 <atanf+0x17c>
 800efb6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800efba:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800f094 <atanf+0x180>
 800efbe:	eee7 5a26 	vfma.f32	s11, s14, s13
 800efc2:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800f098 <atanf+0x184>
 800efc6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800efca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f09c <atanf+0x188>
 800efce:	eee7 5a26 	vfma.f32	s11, s14, s13
 800efd2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800f0a0 <atanf+0x18c>
 800efd6:	eea6 5a87 	vfma.f32	s10, s13, s14
 800efda:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800f0a4 <atanf+0x190>
 800efde:	eea5 7a26 	vfma.f32	s14, s10, s13
 800efe2:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 800f0a8 <atanf+0x194>
 800efe6:	eea7 5a26 	vfma.f32	s10, s14, s13
 800efea:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800f0ac <atanf+0x198>
 800efee:	eea5 7a26 	vfma.f32	s14, s10, s13
 800eff2:	ee27 7a26 	vmul.f32	s14, s14, s13
 800eff6:	eea5 7a86 	vfma.f32	s14, s11, s12
 800effa:	ee27 7a87 	vmul.f32	s14, s15, s14
 800effe:	d121      	bne.n	800f044 <atanf+0x130>
 800f000:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f004:	e795      	b.n	800ef32 <atanf+0x1e>
 800f006:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f00a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f00e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f012:	2301      	movs	r3, #1
 800f014:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f018:	e7be      	b.n	800ef98 <atanf+0x84>
 800f01a:	4b25      	ldr	r3, [pc, #148]	@ (800f0b0 <atanf+0x19c>)
 800f01c:	429c      	cmp	r4, r3
 800f01e:	d80b      	bhi.n	800f038 <atanf+0x124>
 800f020:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800f024:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f028:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f02c:	2302      	movs	r3, #2
 800f02e:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f036:	e7af      	b.n	800ef98 <atanf+0x84>
 800f038:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800f03c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f040:	2303      	movs	r3, #3
 800f042:	e7a9      	b.n	800ef98 <atanf+0x84>
 800f044:	4a1b      	ldr	r2, [pc, #108]	@ (800f0b4 <atanf+0x1a0>)
 800f046:	491c      	ldr	r1, [pc, #112]	@ (800f0b8 <atanf+0x1a4>)
 800f048:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f04c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f050:	edd3 6a00 	vldr	s13, [r3]
 800f054:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f058:	2d00      	cmp	r5, #0
 800f05a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f05e:	edd2 7a00 	vldr	s15, [r2]
 800f062:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f066:	bfb8      	it	lt
 800f068:	eef1 7a67 	vneglt.f32	s15, s15
 800f06c:	e761      	b.n	800ef32 <atanf+0x1e>
 800f06e:	bf00      	nop
 800f070:	bfc90fdb 	.word	0xbfc90fdb
 800f074:	3fc90fdb 	.word	0x3fc90fdb
 800f078:	3edfffff 	.word	0x3edfffff
 800f07c:	7149f2ca 	.word	0x7149f2ca
 800f080:	3f97ffff 	.word	0x3f97ffff
 800f084:	3c8569d7 	.word	0x3c8569d7
 800f088:	3d4bda59 	.word	0x3d4bda59
 800f08c:	bd6ef16b 	.word	0xbd6ef16b
 800f090:	3d886b35 	.word	0x3d886b35
 800f094:	3dba2e6e 	.word	0x3dba2e6e
 800f098:	3e124925 	.word	0x3e124925
 800f09c:	3eaaaaab 	.word	0x3eaaaaab
 800f0a0:	bd15a221 	.word	0xbd15a221
 800f0a4:	bd9d8795 	.word	0xbd9d8795
 800f0a8:	bde38e38 	.word	0xbde38e38
 800f0ac:	be4ccccd 	.word	0xbe4ccccd
 800f0b0:	401bffff 	.word	0x401bffff
 800f0b4:	0800fa38 	.word	0x0800fa38
 800f0b8:	0800fa28 	.word	0x0800fa28

0800f0bc <fabsf>:
 800f0bc:	ee10 3a10 	vmov	r3, s0
 800f0c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f0c4:	ee00 3a10 	vmov	s0, r3
 800f0c8:	4770      	bx	lr
 800f0ca:	0000      	movs	r0, r0
 800f0cc:	0000      	movs	r0, r0
	...

0800f0d0 <__kernel_rem_pio2>:
 800f0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0d4:	ed2d 8b06 	vpush	{d8-d10}
 800f0d8:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800f0dc:	469b      	mov	fp, r3
 800f0de:	460f      	mov	r7, r1
 800f0e0:	4bb9      	ldr	r3, [pc, #740]	@ (800f3c8 <__kernel_rem_pio2+0x2f8>)
 800f0e2:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800f0e4:	9ea3      	ldr	r6, [sp, #652]	@ 0x28c
 800f0e6:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800f0ea:	9001      	str	r0, [sp, #4]
 800f0ec:	f112 0f14 	cmn.w	r2, #20
 800f0f0:	bfa8      	it	ge
 800f0f2:	1ed3      	subge	r3, r2, #3
 800f0f4:	f10b 3aff 	add.w	sl, fp, #4294967295	@ 0xffffffff
 800f0f8:	bfb8      	it	lt
 800f0fa:	2300      	movlt	r3, #0
 800f0fc:	f06f 0517 	mvn.w	r5, #23
 800f100:	ed9f 6bab 	vldr	d6, [pc, #684]	@ 800f3b0 <__kernel_rem_pio2+0x2e0>
 800f104:	bfa4      	itt	ge
 800f106:	2018      	movge	r0, #24
 800f108:	fb93 f3f0 	sdivge	r3, r3, r0
 800f10c:	fb03 5505 	mla	r5, r3, r5, r5
 800f110:	eba3 040a 	sub.w	r4, r3, sl
 800f114:	4415      	add	r5, r2
 800f116:	eb09 0c0a 	add.w	ip, r9, sl
 800f11a:	a81a      	add	r0, sp, #104	@ 0x68
 800f11c:	eb06 0e84 	add.w	lr, r6, r4, lsl #2
 800f120:	2200      	movs	r2, #0
 800f122:	4562      	cmp	r2, ip
 800f124:	dd0e      	ble.n	800f144 <__kernel_rem_pio2+0x74>
 800f126:	aa1a      	add	r2, sp, #104	@ 0x68
 800f128:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800f12c:	f50d 78d4 	add.w	r8, sp, #424	@ 0x1a8
 800f130:	2400      	movs	r4, #0
 800f132:	454c      	cmp	r4, r9
 800f134:	dc23      	bgt.n	800f17e <__kernel_rem_pio2+0xae>
 800f136:	ed9f 7b9e 	vldr	d7, [pc, #632]	@ 800f3b0 <__kernel_rem_pio2+0x2e0>
 800f13a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800f13e:	4694      	mov	ip, r2
 800f140:	2000      	movs	r0, #0
 800f142:	e015      	b.n	800f170 <__kernel_rem_pio2+0xa0>
 800f144:	42d4      	cmn	r4, r2
 800f146:	d409      	bmi.n	800f15c <__kernel_rem_pio2+0x8c>
 800f148:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 800f14c:	ee07 1a90 	vmov	s15, r1
 800f150:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f154:	eca0 7b02 	vstmia	r0!, {d7}
 800f158:	3201      	adds	r2, #1
 800f15a:	e7e2      	b.n	800f122 <__kernel_rem_pio2+0x52>
 800f15c:	eeb0 7b46 	vmov.f64	d7, d6
 800f160:	e7f8      	b.n	800f154 <__kernel_rem_pio2+0x84>
 800f162:	ecbe 5b02 	vldmia	lr!, {d5}
 800f166:	ed3c 6b02 	vldmdb	ip!, {d6}
 800f16a:	3001      	adds	r0, #1
 800f16c:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f170:	4550      	cmp	r0, sl
 800f172:	ddf6      	ble.n	800f162 <__kernel_rem_pio2+0x92>
 800f174:	eca8 7b02 	vstmia	r8!, {d7}
 800f178:	3401      	adds	r4, #1
 800f17a:	3208      	adds	r2, #8
 800f17c:	e7d9      	b.n	800f132 <__kernel_rem_pio2+0x62>
 800f17e:	aa06      	add	r2, sp, #24
 800f180:	ed9f 9b8d 	vldr	d9, [pc, #564]	@ 800f3b8 <__kernel_rem_pio2+0x2e8>
 800f184:	ed9f ab8e 	vldr	d10, [pc, #568]	@ 800f3c0 <__kernel_rem_pio2+0x2f0>
 800f188:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800f18c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f190:	9203      	str	r2, [sp, #12]
 800f192:	9302      	str	r3, [sp, #8]
 800f194:	464c      	mov	r4, r9
 800f196:	00e3      	lsls	r3, r4, #3
 800f198:	9304      	str	r3, [sp, #16]
 800f19a:	ab92      	add	r3, sp, #584	@ 0x248
 800f19c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f1a0:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800f1a4:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800f1a6:	ab06      	add	r3, sp, #24
 800f1a8:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800f1ac:	461e      	mov	r6, r3
 800f1ae:	4620      	mov	r0, r4
 800f1b0:	2800      	cmp	r0, #0
 800f1b2:	dc4a      	bgt.n	800f24a <__kernel_rem_pio2+0x17a>
 800f1b4:	4628      	mov	r0, r5
 800f1b6:	9305      	str	r3, [sp, #20]
 800f1b8:	f000 f9fe 	bl	800f5b8 <scalbn>
 800f1bc:	eeb0 8b40 	vmov.f64	d8, d0
 800f1c0:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800f1c4:	ee28 0b00 	vmul.f64	d0, d8, d0
 800f1c8:	f000 fa72 	bl	800f6b0 <floor>
 800f1cc:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800f1d0:	eea0 8b47 	vfms.f64	d8, d0, d7
 800f1d4:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800f1d8:	2d00      	cmp	r5, #0
 800f1da:	ee17 8a90 	vmov	r8, s15
 800f1de:	9b05      	ldr	r3, [sp, #20]
 800f1e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f1e4:	ee38 8b47 	vsub.f64	d8, d8, d7
 800f1e8:	dd41      	ble.n	800f26e <__kernel_rem_pio2+0x19e>
 800f1ea:	1e60      	subs	r0, r4, #1
 800f1ec:	aa06      	add	r2, sp, #24
 800f1ee:	f1c5 0c18 	rsb	ip, r5, #24
 800f1f2:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800f1f6:	fa46 f20c 	asr.w	r2, r6, ip
 800f1fa:	4490      	add	r8, r2
 800f1fc:	fa02 f20c 	lsl.w	r2, r2, ip
 800f200:	1ab6      	subs	r6, r6, r2
 800f202:	aa06      	add	r2, sp, #24
 800f204:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800f208:	f1c5 0217 	rsb	r2, r5, #23
 800f20c:	4116      	asrs	r6, r2
 800f20e:	2e00      	cmp	r6, #0
 800f210:	dd3c      	ble.n	800f28c <__kernel_rem_pio2+0x1bc>
 800f212:	f04f 0c00 	mov.w	ip, #0
 800f216:	f108 0801 	add.w	r8, r8, #1
 800f21a:	4660      	mov	r0, ip
 800f21c:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800f220:	4564      	cmp	r4, ip
 800f222:	dc66      	bgt.n	800f2f2 <__kernel_rem_pio2+0x222>
 800f224:	2d00      	cmp	r5, #0
 800f226:	dd03      	ble.n	800f230 <__kernel_rem_pio2+0x160>
 800f228:	2d01      	cmp	r5, #1
 800f22a:	d072      	beq.n	800f312 <__kernel_rem_pio2+0x242>
 800f22c:	2d02      	cmp	r5, #2
 800f22e:	d07a      	beq.n	800f326 <__kernel_rem_pio2+0x256>
 800f230:	2e02      	cmp	r6, #2
 800f232:	d12b      	bne.n	800f28c <__kernel_rem_pio2+0x1bc>
 800f234:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800f238:	ee30 8b48 	vsub.f64	d8, d0, d8
 800f23c:	b330      	cbz	r0, 800f28c <__kernel_rem_pio2+0x1bc>
 800f23e:	4628      	mov	r0, r5
 800f240:	f000 f9ba 	bl	800f5b8 <scalbn>
 800f244:	ee38 8b40 	vsub.f64	d8, d8, d0
 800f248:	e020      	b.n	800f28c <__kernel_rem_pio2+0x1bc>
 800f24a:	ee20 7b09 	vmul.f64	d7, d0, d9
 800f24e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f252:	3801      	subs	r0, #1
 800f254:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800f258:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800f25c:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f260:	eca6 0a01 	vstmia	r6!, {s0}
 800f264:	ed32 0b02 	vldmdb	r2!, {d0}
 800f268:	ee37 0b00 	vadd.f64	d0, d7, d0
 800f26c:	e7a0      	b.n	800f1b0 <__kernel_rem_pio2+0xe0>
 800f26e:	d105      	bne.n	800f27c <__kernel_rem_pio2+0x1ac>
 800f270:	1e62      	subs	r2, r4, #1
 800f272:	a906      	add	r1, sp, #24
 800f274:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800f278:	15f6      	asrs	r6, r6, #23
 800f27a:	e7c8      	b.n	800f20e <__kernel_rem_pio2+0x13e>
 800f27c:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800f280:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f288:	da31      	bge.n	800f2ee <__kernel_rem_pio2+0x21e>
 800f28a:	2600      	movs	r6, #0
 800f28c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f294:	f040 809c 	bne.w	800f3d0 <__kernel_rem_pio2+0x300>
 800f298:	1e62      	subs	r2, r4, #1
 800f29a:	2000      	movs	r0, #0
 800f29c:	454a      	cmp	r2, r9
 800f29e:	da49      	bge.n	800f334 <__kernel_rem_pio2+0x264>
 800f2a0:	2800      	cmp	r0, #0
 800f2a2:	d062      	beq.n	800f36a <__kernel_rem_pio2+0x29a>
 800f2a4:	3c01      	subs	r4, #1
 800f2a6:	ab06      	add	r3, sp, #24
 800f2a8:	3d18      	subs	r5, #24
 800f2aa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d0f8      	beq.n	800f2a4 <__kernel_rem_pio2+0x1d4>
 800f2b2:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800f2b6:	4628      	mov	r0, r5
 800f2b8:	f000 f97e 	bl	800f5b8 <scalbn>
 800f2bc:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800f3b8 <__kernel_rem_pio2+0x2e8>
 800f2c0:	1c62      	adds	r2, r4, #1
 800f2c2:	a96a      	add	r1, sp, #424	@ 0x1a8
 800f2c4:	00d3      	lsls	r3, r2, #3
 800f2c6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f2ca:	4622      	mov	r2, r4
 800f2cc:	2a00      	cmp	r2, #0
 800f2ce:	f280 80a9 	bge.w	800f424 <__kernel_rem_pio2+0x354>
 800f2d2:	4622      	mov	r2, r4
 800f2d4:	2a00      	cmp	r2, #0
 800f2d6:	f2c0 80c7 	blt.w	800f468 <__kernel_rem_pio2+0x398>
 800f2da:	a96a      	add	r1, sp, #424	@ 0x1a8
 800f2dc:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800f2e0:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800f3b0 <__kernel_rem_pio2+0x2e0>
 800f2e4:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800f3cc <__kernel_rem_pio2+0x2fc>
 800f2e8:	2000      	movs	r0, #0
 800f2ea:	1aa1      	subs	r1, r4, r2
 800f2ec:	e0b1      	b.n	800f452 <__kernel_rem_pio2+0x382>
 800f2ee:	2602      	movs	r6, #2
 800f2f0:	e78f      	b.n	800f212 <__kernel_rem_pio2+0x142>
 800f2f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2f6:	b948      	cbnz	r0, 800f30c <__kernel_rem_pio2+0x23c>
 800f2f8:	b122      	cbz	r2, 800f304 <__kernel_rem_pio2+0x234>
 800f2fa:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800f2fe:	f843 2c04 	str.w	r2, [r3, #-4]
 800f302:	2201      	movs	r2, #1
 800f304:	f10c 0c01 	add.w	ip, ip, #1
 800f308:	4610      	mov	r0, r2
 800f30a:	e789      	b.n	800f220 <__kernel_rem_pio2+0x150>
 800f30c:	ebae 0202 	sub.w	r2, lr, r2
 800f310:	e7f5      	b.n	800f2fe <__kernel_rem_pio2+0x22e>
 800f312:	1e62      	subs	r2, r4, #1
 800f314:	ab06      	add	r3, sp, #24
 800f316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f31a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f31e:	a906      	add	r1, sp, #24
 800f320:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f324:	e784      	b.n	800f230 <__kernel_rem_pio2+0x160>
 800f326:	1e62      	subs	r2, r4, #1
 800f328:	ab06      	add	r3, sp, #24
 800f32a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f32e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f332:	e7f4      	b.n	800f31e <__kernel_rem_pio2+0x24e>
 800f334:	ab06      	add	r3, sp, #24
 800f336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f33a:	3a01      	subs	r2, #1
 800f33c:	4318      	orrs	r0, r3
 800f33e:	e7ad      	b.n	800f29c <__kernel_rem_pio2+0x1cc>
 800f340:	3301      	adds	r3, #1
 800f342:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800f346:	2800      	cmp	r0, #0
 800f348:	d0fa      	beq.n	800f340 <__kernel_rem_pio2+0x270>
 800f34a:	9a04      	ldr	r2, [sp, #16]
 800f34c:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800f350:	446a      	add	r2, sp
 800f352:	eb04 000b 	add.w	r0, r4, fp
 800f356:	a91a      	add	r1, sp, #104	@ 0x68
 800f358:	1c66      	adds	r6, r4, #1
 800f35a:	3a98      	subs	r2, #152	@ 0x98
 800f35c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800f360:	4423      	add	r3, r4
 800f362:	42b3      	cmp	r3, r6
 800f364:	da04      	bge.n	800f370 <__kernel_rem_pio2+0x2a0>
 800f366:	461c      	mov	r4, r3
 800f368:	e715      	b.n	800f196 <__kernel_rem_pio2+0xc6>
 800f36a:	9a03      	ldr	r2, [sp, #12]
 800f36c:	2301      	movs	r3, #1
 800f36e:	e7e8      	b.n	800f342 <__kernel_rem_pio2+0x272>
 800f370:	9902      	ldr	r1, [sp, #8]
 800f372:	f8dd c004 	ldr.w	ip, [sp, #4]
 800f376:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800f37a:	9104      	str	r1, [sp, #16]
 800f37c:	ee07 1a90 	vmov	s15, r1
 800f380:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f384:	2400      	movs	r4, #0
 800f386:	eca0 7b02 	vstmia	r0!, {d7}
 800f38a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800f3b0 <__kernel_rem_pio2+0x2e0>
 800f38e:	4686      	mov	lr, r0
 800f390:	4554      	cmp	r4, sl
 800f392:	dd03      	ble.n	800f39c <__kernel_rem_pio2+0x2cc>
 800f394:	eca2 7b02 	vstmia	r2!, {d7}
 800f398:	3601      	adds	r6, #1
 800f39a:	e7e2      	b.n	800f362 <__kernel_rem_pio2+0x292>
 800f39c:	ecbc 5b02 	vldmia	ip!, {d5}
 800f3a0:	ed3e 6b02 	vldmdb	lr!, {d6}
 800f3a4:	3401      	adds	r4, #1
 800f3a6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f3aa:	e7f1      	b.n	800f390 <__kernel_rem_pio2+0x2c0>
 800f3ac:	f3af 8000 	nop.w
	...
 800f3bc:	3e700000 	.word	0x3e700000
 800f3c0:	00000000 	.word	0x00000000
 800f3c4:	41700000 	.word	0x41700000
 800f3c8:	0800fa88 	.word	0x0800fa88
 800f3cc:	0800fa48 	.word	0x0800fa48
 800f3d0:	4268      	negs	r0, r5
 800f3d2:	eeb0 0b48 	vmov.f64	d0, d8
 800f3d6:	f000 f8ef 	bl	800f5b8 <scalbn>
 800f3da:	ed9f 6b71 	vldr	d6, [pc, #452]	@ 800f5a0 <__kernel_rem_pio2+0x4d0>
 800f3de:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800f3e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3e6:	db17      	blt.n	800f418 <__kernel_rem_pio2+0x348>
 800f3e8:	ed9f 7b6f 	vldr	d7, [pc, #444]	@ 800f5a8 <__kernel_rem_pio2+0x4d8>
 800f3ec:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f3f0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f3f4:	aa06      	add	r2, sp, #24
 800f3f6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800f3fa:	eea5 0b46 	vfms.f64	d0, d5, d6
 800f3fe:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f402:	3518      	adds	r5, #24
 800f404:	ee10 3a10 	vmov	r3, s0
 800f408:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800f40c:	ee17 3a10 	vmov	r3, s14
 800f410:	3401      	adds	r4, #1
 800f412:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800f416:	e74c      	b.n	800f2b2 <__kernel_rem_pio2+0x1e2>
 800f418:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f41c:	aa06      	add	r2, sp, #24
 800f41e:	ee10 3a10 	vmov	r3, s0
 800f422:	e7f6      	b.n	800f412 <__kernel_rem_pio2+0x342>
 800f424:	a806      	add	r0, sp, #24
 800f426:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800f42a:	9001      	str	r0, [sp, #4]
 800f42c:	ee07 0a90 	vmov	s15, r0
 800f430:	3a01      	subs	r2, #1
 800f432:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f436:	ee27 7b00 	vmul.f64	d7, d7, d0
 800f43a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800f43e:	ed21 7b02 	vstmdb	r1!, {d7}
 800f442:	e743      	b.n	800f2cc <__kernel_rem_pio2+0x1fc>
 800f444:	ecbc 5b02 	vldmia	ip!, {d5}
 800f448:	ecb5 6b02 	vldmia	r5!, {d6}
 800f44c:	3001      	adds	r0, #1
 800f44e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f452:	4548      	cmp	r0, r9
 800f454:	dc01      	bgt.n	800f45a <__kernel_rem_pio2+0x38a>
 800f456:	4288      	cmp	r0, r1
 800f458:	ddf4      	ble.n	800f444 <__kernel_rem_pio2+0x374>
 800f45a:	a842      	add	r0, sp, #264	@ 0x108
 800f45c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f460:	ed81 7b00 	vstr	d7, [r1]
 800f464:	3a01      	subs	r2, #1
 800f466:	e735      	b.n	800f2d4 <__kernel_rem_pio2+0x204>
 800f468:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800f46a:	2a02      	cmp	r2, #2
 800f46c:	dc0a      	bgt.n	800f484 <__kernel_rem_pio2+0x3b4>
 800f46e:	2a00      	cmp	r2, #0
 800f470:	dc29      	bgt.n	800f4c6 <__kernel_rem_pio2+0x3f6>
 800f472:	d042      	beq.n	800f4fa <__kernel_rem_pio2+0x42a>
 800f474:	f008 0007 	and.w	r0, r8, #7
 800f478:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800f47c:	ecbd 8b06 	vpop	{d8-d10}
 800f480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f484:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800f486:	2a03      	cmp	r2, #3
 800f488:	d1f4      	bne.n	800f474 <__kernel_rem_pio2+0x3a4>
 800f48a:	a942      	add	r1, sp, #264	@ 0x108
 800f48c:	f1a3 0208 	sub.w	r2, r3, #8
 800f490:	440a      	add	r2, r1
 800f492:	4611      	mov	r1, r2
 800f494:	4620      	mov	r0, r4
 800f496:	2800      	cmp	r0, #0
 800f498:	dc50      	bgt.n	800f53c <__kernel_rem_pio2+0x46c>
 800f49a:	4621      	mov	r1, r4
 800f49c:	2901      	cmp	r1, #1
 800f49e:	dc5d      	bgt.n	800f55c <__kernel_rem_pio2+0x48c>
 800f4a0:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800f5b0 <__kernel_rem_pio2+0x4e0>
 800f4a4:	aa42      	add	r2, sp, #264	@ 0x108
 800f4a6:	4413      	add	r3, r2
 800f4a8:	2c01      	cmp	r4, #1
 800f4aa:	dc67      	bgt.n	800f57c <__kernel_rem_pio2+0x4ac>
 800f4ac:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800f4b0:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800f4b4:	2e00      	cmp	r6, #0
 800f4b6:	d167      	bne.n	800f588 <__kernel_rem_pio2+0x4b8>
 800f4b8:	ed87 5b00 	vstr	d5, [r7]
 800f4bc:	ed87 6b02 	vstr	d6, [r7, #8]
 800f4c0:	ed87 7b04 	vstr	d7, [r7, #16]
 800f4c4:	e7d6      	b.n	800f474 <__kernel_rem_pio2+0x3a4>
 800f4c6:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800f5b0 <__kernel_rem_pio2+0x4e0>
 800f4ca:	aa42      	add	r2, sp, #264	@ 0x108
 800f4cc:	4413      	add	r3, r2
 800f4ce:	4622      	mov	r2, r4
 800f4d0:	2a00      	cmp	r2, #0
 800f4d2:	da24      	bge.n	800f51e <__kernel_rem_pio2+0x44e>
 800f4d4:	b34e      	cbz	r6, 800f52a <__kernel_rem_pio2+0x45a>
 800f4d6:	eeb1 7b46 	vneg.f64	d7, d6
 800f4da:	ed87 7b00 	vstr	d7, [r7]
 800f4de:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800f4e2:	aa44      	add	r2, sp, #272	@ 0x110
 800f4e4:	2301      	movs	r3, #1
 800f4e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f4ea:	429c      	cmp	r4, r3
 800f4ec:	da20      	bge.n	800f530 <__kernel_rem_pio2+0x460>
 800f4ee:	b10e      	cbz	r6, 800f4f4 <__kernel_rem_pio2+0x424>
 800f4f0:	eeb1 7b47 	vneg.f64	d7, d7
 800f4f4:	ed87 7b02 	vstr	d7, [r7, #8]
 800f4f8:	e7bc      	b.n	800f474 <__kernel_rem_pio2+0x3a4>
 800f4fa:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800f5b0 <__kernel_rem_pio2+0x4e0>
 800f4fe:	aa42      	add	r2, sp, #264	@ 0x108
 800f500:	4413      	add	r3, r2
 800f502:	2c00      	cmp	r4, #0
 800f504:	da05      	bge.n	800f512 <__kernel_rem_pio2+0x442>
 800f506:	b10e      	cbz	r6, 800f50c <__kernel_rem_pio2+0x43c>
 800f508:	eeb1 7b47 	vneg.f64	d7, d7
 800f50c:	ed87 7b00 	vstr	d7, [r7]
 800f510:	e7b0      	b.n	800f474 <__kernel_rem_pio2+0x3a4>
 800f512:	ed33 6b02 	vldmdb	r3!, {d6}
 800f516:	3c01      	subs	r4, #1
 800f518:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f51c:	e7f1      	b.n	800f502 <__kernel_rem_pio2+0x432>
 800f51e:	ed33 7b02 	vldmdb	r3!, {d7}
 800f522:	3a01      	subs	r2, #1
 800f524:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f528:	e7d2      	b.n	800f4d0 <__kernel_rem_pio2+0x400>
 800f52a:	eeb0 7b46 	vmov.f64	d7, d6
 800f52e:	e7d4      	b.n	800f4da <__kernel_rem_pio2+0x40a>
 800f530:	ecb2 6b02 	vldmia	r2!, {d6}
 800f534:	3301      	adds	r3, #1
 800f536:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f53a:	e7d6      	b.n	800f4ea <__kernel_rem_pio2+0x41a>
 800f53c:	ed31 7b02 	vldmdb	r1!, {d7}
 800f540:	ed91 5b02 	vldr	d5, [r1, #8]
 800f544:	3801      	subs	r0, #1
 800f546:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f54a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f54e:	ed81 6b00 	vstr	d6, [r1]
 800f552:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f556:	ed81 7b02 	vstr	d7, [r1, #8]
 800f55a:	e79c      	b.n	800f496 <__kernel_rem_pio2+0x3c6>
 800f55c:	ed32 7b02 	vldmdb	r2!, {d7}
 800f560:	ed92 5b02 	vldr	d5, [r2, #8]
 800f564:	3901      	subs	r1, #1
 800f566:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f56a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f56e:	ed82 6b00 	vstr	d6, [r2]
 800f572:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f576:	ed82 7b02 	vstr	d7, [r2, #8]
 800f57a:	e78f      	b.n	800f49c <__kernel_rem_pio2+0x3cc>
 800f57c:	ed33 6b02 	vldmdb	r3!, {d6}
 800f580:	3c01      	subs	r4, #1
 800f582:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f586:	e78f      	b.n	800f4a8 <__kernel_rem_pio2+0x3d8>
 800f588:	eeb1 5b45 	vneg.f64	d5, d5
 800f58c:	eeb1 6b46 	vneg.f64	d6, d6
 800f590:	ed87 5b00 	vstr	d5, [r7]
 800f594:	eeb1 7b47 	vneg.f64	d7, d7
 800f598:	ed87 6b02 	vstr	d6, [r7, #8]
 800f59c:	e790      	b.n	800f4c0 <__kernel_rem_pio2+0x3f0>
 800f59e:	bf00      	nop
 800f5a0:	00000000 	.word	0x00000000
 800f5a4:	41700000 	.word	0x41700000
 800f5a8:	00000000 	.word	0x00000000
 800f5ac:	3e700000 	.word	0x3e700000
	...

0800f5b8 <scalbn>:
 800f5b8:	ee10 1a90 	vmov	r1, s1
 800f5bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f5c0:	b98b      	cbnz	r3, 800f5e6 <scalbn+0x2e>
 800f5c2:	ee10 3a10 	vmov	r3, s0
 800f5c6:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800f5ca:	4319      	orrs	r1, r3
 800f5cc:	d00a      	beq.n	800f5e4 <scalbn+0x2c>
 800f5ce:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800f678 <scalbn+0xc0>
 800f5d2:	4b35      	ldr	r3, [pc, #212]	@ (800f6a8 <scalbn+0xf0>)
 800f5d4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f5d8:	4298      	cmp	r0, r3
 800f5da:	da0b      	bge.n	800f5f4 <scalbn+0x3c>
 800f5dc:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800f680 <scalbn+0xc8>
 800f5e0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f5e4:	4770      	bx	lr
 800f5e6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	d107      	bne.n	800f5fe <scalbn+0x46>
 800f5ee:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f5f2:	4770      	bx	lr
 800f5f4:	ee10 1a90 	vmov	r1, s1
 800f5f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f5fc:	3b36      	subs	r3, #54	@ 0x36
 800f5fe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800f602:	4290      	cmp	r0, r2
 800f604:	dd0d      	ble.n	800f622 <scalbn+0x6a>
 800f606:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800f688 <scalbn+0xd0>
 800f60a:	ee10 3a90 	vmov	r3, s1
 800f60e:	eeb0 6b47 	vmov.f64	d6, d7
 800f612:	ed9f 5b1f 	vldr	d5, [pc, #124]	@ 800f690 <scalbn+0xd8>
 800f616:	2b00      	cmp	r3, #0
 800f618:	fe27 7b05 	vselge.f64	d7, d7, d5
 800f61c:	ee27 0b06 	vmul.f64	d0, d7, d6
 800f620:	4770      	bx	lr
 800f622:	4418      	add	r0, r3
 800f624:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800f628:	4298      	cmp	r0, r3
 800f62a:	dcec      	bgt.n	800f606 <scalbn+0x4e>
 800f62c:	2800      	cmp	r0, #0
 800f62e:	dd08      	ble.n	800f642 <scalbn+0x8a>
 800f630:	ec53 2b10 	vmov	r2, r3, d0
 800f634:	f36f 511e 	bfc	r1, #20, #11
 800f638:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800f63c:	ec43 2b10 	vmov	d0, r2, r3
 800f640:	4770      	bx	lr
 800f642:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800f646:	da09      	bge.n	800f65c <scalbn+0xa4>
 800f648:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800f680 <scalbn+0xc8>
 800f64c:	ee10 3a90 	vmov	r3, s1
 800f650:	eeb0 6b47 	vmov.f64	d6, d7
 800f654:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 800f698 <scalbn+0xe0>
 800f658:	2b00      	cmp	r3, #0
 800f65a:	e7dd      	b.n	800f618 <scalbn+0x60>
 800f65c:	ec53 2b10 	vmov	r2, r3, d0
 800f660:	3036      	adds	r0, #54	@ 0x36
 800f662:	f36f 511e 	bfc	r1, #20, #11
 800f666:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800f66a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800f6a0 <scalbn+0xe8>
 800f66e:	ec43 2b10 	vmov	d0, r2, r3
 800f672:	e7b5      	b.n	800f5e0 <scalbn+0x28>
 800f674:	f3af 8000 	nop.w
 800f678:	00000000 	.word	0x00000000
 800f67c:	43500000 	.word	0x43500000
 800f680:	c2f8f359 	.word	0xc2f8f359
 800f684:	01a56e1f 	.word	0x01a56e1f
 800f688:	8800759c 	.word	0x8800759c
 800f68c:	7e37e43c 	.word	0x7e37e43c
 800f690:	8800759c 	.word	0x8800759c
 800f694:	fe37e43c 	.word	0xfe37e43c
 800f698:	c2f8f359 	.word	0xc2f8f359
 800f69c:	81a56e1f 	.word	0x81a56e1f
 800f6a0:	00000000 	.word	0x00000000
 800f6a4:	3c900000 	.word	0x3c900000
 800f6a8:	ffff3cb0 	.word	0xffff3cb0
 800f6ac:	00000000 	.word	0x00000000

0800f6b0 <floor>:
 800f6b0:	ee10 3a90 	vmov	r3, s1
 800f6b4:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800f6b8:	ee10 2a10 	vmov	r2, s0
 800f6bc:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800f6c0:	2913      	cmp	r1, #19
 800f6c2:	b530      	push	{r4, r5, lr}
 800f6c4:	4615      	mov	r5, r2
 800f6c6:	dc33      	bgt.n	800f730 <floor+0x80>
 800f6c8:	2900      	cmp	r1, #0
 800f6ca:	da18      	bge.n	800f6fe <floor+0x4e>
 800f6cc:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800f790 <floor+0xe0>
 800f6d0:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f6d4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f6d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6dc:	dd0a      	ble.n	800f6f4 <floor+0x44>
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	da50      	bge.n	800f784 <floor+0xd4>
 800f6e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f6e6:	4313      	orrs	r3, r2
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	4b2a      	ldr	r3, [pc, #168]	@ (800f798 <floor+0xe8>)
 800f6ee:	bf08      	it	eq
 800f6f0:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800f6f4:	4619      	mov	r1, r3
 800f6f6:	4610      	mov	r0, r2
 800f6f8:	ec41 0b10 	vmov	d0, r0, r1
 800f6fc:	e01f      	b.n	800f73e <floor+0x8e>
 800f6fe:	4827      	ldr	r0, [pc, #156]	@ (800f79c <floor+0xec>)
 800f700:	4108      	asrs	r0, r1
 800f702:	ea03 0400 	and.w	r4, r3, r0
 800f706:	4314      	orrs	r4, r2
 800f708:	d019      	beq.n	800f73e <floor+0x8e>
 800f70a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f790 <floor+0xe0>
 800f70e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f712:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f71a:	ddeb      	ble.n	800f6f4 <floor+0x44>
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	bfbe      	ittt	lt
 800f720:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800f724:	410a      	asrlt	r2, r1
 800f726:	189b      	addlt	r3, r3, r2
 800f728:	ea23 0300 	bic.w	r3, r3, r0
 800f72c:	2200      	movs	r2, #0
 800f72e:	e7e1      	b.n	800f6f4 <floor+0x44>
 800f730:	2933      	cmp	r1, #51	@ 0x33
 800f732:	dd05      	ble.n	800f740 <floor+0x90>
 800f734:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f738:	d101      	bne.n	800f73e <floor+0x8e>
 800f73a:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f73e:	bd30      	pop	{r4, r5, pc}
 800f740:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800f744:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f748:	40e0      	lsrs	r0, r4
 800f74a:	4210      	tst	r0, r2
 800f74c:	d0f7      	beq.n	800f73e <floor+0x8e>
 800f74e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800f790 <floor+0xe0>
 800f752:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f756:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f75a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f75e:	ddc9      	ble.n	800f6f4 <floor+0x44>
 800f760:	2b00      	cmp	r3, #0
 800f762:	da02      	bge.n	800f76a <floor+0xba>
 800f764:	2914      	cmp	r1, #20
 800f766:	d103      	bne.n	800f770 <floor+0xc0>
 800f768:	3301      	adds	r3, #1
 800f76a:	ea22 0200 	bic.w	r2, r2, r0
 800f76e:	e7c1      	b.n	800f6f4 <floor+0x44>
 800f770:	2401      	movs	r4, #1
 800f772:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800f776:	fa04 f101 	lsl.w	r1, r4, r1
 800f77a:	440a      	add	r2, r1
 800f77c:	42aa      	cmp	r2, r5
 800f77e:	bf38      	it	cc
 800f780:	191b      	addcc	r3, r3, r4
 800f782:	e7f2      	b.n	800f76a <floor+0xba>
 800f784:	2200      	movs	r2, #0
 800f786:	4613      	mov	r3, r2
 800f788:	e7b4      	b.n	800f6f4 <floor+0x44>
 800f78a:	bf00      	nop
 800f78c:	f3af 8000 	nop.w
 800f790:	8800759c 	.word	0x8800759c
 800f794:	7e37e43c 	.word	0x7e37e43c
 800f798:	bff00000 	.word	0xbff00000
 800f79c:	000fffff 	.word	0x000fffff

0800f7a0 <_init>:
 800f7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7a2:	bf00      	nop
 800f7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7a6:	bc08      	pop	{r3}
 800f7a8:	469e      	mov	lr, r3
 800f7aa:	4770      	bx	lr

0800f7ac <_fini>:
 800f7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ae:	bf00      	nop
 800f7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7b2:	bc08      	pop	{r3}
 800f7b4:	469e      	mov	lr, r3
 800f7b6:	4770      	bx	lr
